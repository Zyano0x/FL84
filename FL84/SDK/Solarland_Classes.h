#pragma once

/**
 * Name: FL84
 * Version: 1.14.4.6.511026
 */

#ifdef _MSC_VER
#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class Solarland.3DMeshWidget
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class A3DMeshWidget : public AActor
	{
	public:
		class USceneComponent* DefaultSceneRoot;                                        // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* StaticMeshComp;                                          // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.3DMeshWidgetTrack
	 * Size -> 0x00A0 (FullSize[0x02D8] - InheritedSize[0x0238])
	 */
	class A3DMeshWidgetTrack : public A3DMeshWidget
	{
	public:
		unsigned char                                              UnknownData_9JGA[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             BoxHalfExtent;                                           // 0x0240(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlayerNearbyAlpha;                                       // 0x024C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDebugCollision;                                         // 0x0250(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3BB9[0x3];                                   // 0x0251(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                MaterialAlphaParamName;                                  // 0x0254(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                MaterialCountDownName;                                   // 0x025C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxTraceDist;                                            // 0x0264(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistFromGround;                                          // 0x0268(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0EDK[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* StaticMeshCountDown;                                     // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextRenderComponent* DistTextComp;                                            // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic* DynamicMaterialIcon;                                     // 0x0280(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic* DynamicMaterialCountDown;                                // 0x0288(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic* DynamicMaterialDistText;                                 // 0x0290(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OGBC[0x40];                                  // 0x0298(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AbilityTask_WaitAbilityEnd
	 * Size -> 0x00C8 (FullSize[0x0148] - InheritedSize[0x0080])
	 */
	class UAbilityTask_WaitAbilityEnd : public UAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnEnd;                                                   // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NK9B[0xB8];                                  // 0x0090(0x00B8) MISSED OFFSET (PADDING)

	public:
		class UAbilityTask_WaitAbilityEnd* STATIC_WaitForAbilityEndWithTagRequirements(class UGameplayAbility* OwningAbility, const struct FGameplayTagRequirements& TagRequirements, bool InIncludeTriggeredAbilities, bool InTriggerOnce);
		class UAbilityTask_WaitAbilityEnd* STATIC_WaitForAbilityEnd_Query(class UGameplayAbility* OwningAbility, const struct FGameplayTagQuery& Query, bool InIncludeTriggeredAbilities, bool InTriggerOnce);
		class UAbilityTask_WaitAbilityEnd* STATIC_WaitForAbilityEnd(class UGameplayAbility* OwningAbility, const struct FGameplayTag& InWithTag, const struct FGameplayTag& InWithoutTag, bool InIncludeTriggeredAbilities, bool InTriggerOnce);
		void OnAbilityEnd(const struct FAbilityEndedData& EndedData);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAbilityTask
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USolarAbilityTask : public UAbilityTask
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AbilityTask_WaitAttributeChangeWithOldValue
	 * Size -> 0x0078 (FullSize[0x00F8] - InheritedSize[0x0080])
	 */
	class UAbilityTask_WaitAttributeChangeWithOldValue : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnChange;                                                // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HOFK[0x60];                                  // 0x0090(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilitySystemComponent* ExternalOwner;                                           // 0x00F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UAbilityTask_WaitAttributeChangeWithOldValue* STATIC_WaitForAttributeChangeWithComparison(class UGameplayAbility* OwningAbility, const struct FGameplayAttribute& InAttribute, const struct FGameplayTag& InWithTag, const struct FGameplayTag& InWithoutTag, EWaitAttributeChangeComparison InComparisonType, float InComparisonValue, bool bTriggerOnce, class AActor* OptionalExternalOwner);
		class UAbilityTask_WaitAttributeChangeWithOldValue* STATIC_WaitForAttributeChange(class UGameplayAbility* OwningAbility, const struct FGameplayAttribute& InAttribute, const struct FGameplayTag& InWithTag, const struct FGameplayTag& InWithoutTag, bool bTriggerOnce, class AActor* OptionalExternalOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AbilityTask_WaitDelayAndResetOnGameplayEvent
	 * Size -> 0x0040 (FullSize[0x00C0] - InheritedSize[0x0080])
	 */
	class UAbilityTask_WaitDelayAndResetOnGameplayEvent : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnFinish;                                                // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnRecalculateWaitDelayOnEventTriggered;                  // 0x0090(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZO30[0x20];                                  // 0x00A0(0x0020) MISSED OFFSET (PADDING)

	public:
		class UAbilityTask_WaitDelayAndResetOnGameplayEvent* STATIC_CreateTask(class UGameplayAbility* OwningAbility, float DelayTime, const struct FGameplayTag& EventTag);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AbilityTask_WaitEvaluation
	 * Size -> 0x0028 (FullSize[0x00A8] - InheritedSize[0x0080])
	 */
	class UAbilityTask_WaitEvaluation : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnGotDesiredValue;                                       // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      EvaluationFunction;                                      // 0x0090(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HHPR[0x8];                                   // 0x00A0(0x0008) MISSED OFFSET (PADDING)

	public:
		class UAbilityTask_WaitEvaluation* STATIC_CreateTask(class UGameplayAbility* OwningAbility, bool bDesiredValue, bool bTriggerOnce);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AbilityTask_WaitInputAction
	 * Size -> 0x0028 (FullSize[0x00A8] - InheritedSize[0x0080])
	 */
	class UAbilityTask_WaitInputAction : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnInputAction;                                           // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P6LE[0x18];                                  // 0x0090(0x0018) MISSED OFFSET (PADDING)

	public:
		class UAbilityTask_WaitInputAction* STATIC_CreateTask(class UGameplayAbility* OwningAbility, const class FName& ActionName, EInputEvent InputEvent, bool bTriggerOnce);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AbilityTask_WaitTagRequirementsMetStatusChange
	 * Size -> 0x0070 (FullSize[0x00F0] - InheritedSize[0x0080])
	 */
	class UAbilityTask_WaitTagRequirementsMetStatusChange : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnMetStatusChange;                                       // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGameplayTagRequirements                            TagRequirements;                                         // 0x0090(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1H2G[0x10];                                  // 0x00E0(0x0010) MISSED OFFSET (PADDING)

	public:
		class UAbilityTask_WaitTagRequirementsMetStatusChange* STATIC_CreateTask(class UGameplayAbility* OwningAbility, const struct FGameplayTagRequirements& TagRequirements, bool bMetInitially);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActionNode
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UActionNode : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnBeganCallback;                                         // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndedCallback;                                         // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResetCallback;                                         // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDisposedCallback;                                      // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NVDD[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		void Reset();
		bool Finished();
		void Finish();
		bool Execute(float DeltaTime);
		bool Disposed();
		void Dispose();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActionWheelWidgetFunctionBase
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UActionWheelWidgetFunctionBase : public UObject
	{
	public:
		TWeakObjectPtr<class USolarUserWidget>                     BindedWidget;                                            // 0x0028(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    LastSelectedIndex;                                       // 0x0030(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S1DW[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		int32_t GetSuggestActionIndex();
		int32_t GetQuickActionIndex();
		int32_t GetAutoSelectedActionIndex();
		bool ExecUseCustomItemCommand(int32_t InItemID);
		bool CheckCommandCanExec(class ASCMPlayerState* InPlayerState, int32_t InIndex, const struct FActionWheelCommand& InCommand);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUserWidget
	 * Size -> 0x00E8 (FullSize[0x0348] - InheritedSize[0x0260])
	 */
	class USolarUserWidget : public UUserWidget
	{
	public:
		EWidgetLayerLevel                                          WidgetLayerLevel;                                        // 0x0260(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsPersistent;                                           // 0x0261(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EWidgetScope                                               WidgetScope;                                             // 0x0262(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EInputCapture                                              CaptureInput;                                            // 0x0263(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHideCursorDuringCapture;                                // 0x0264(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M8Y5[0x3];                                   // 0x0265(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MyRoot;                                                  // 0x0268(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IMBU[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              widgetkey;                                               // 0x0270(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReceiveKeyMap;                                          // 0x0280(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReceiveShowMouse;                                       // 0x0281(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EScope                                                     ShowScope;                                               // 0x0282(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowTransBlackAnim;                                     // 0x0283(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0BUR[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* InputManagerClass;                                       // 0x0288(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetInputManager* InputManager;                                            // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, class UWidgetAnimation*>                 AnimationsMap;                                           // 0x0298(0x0050) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UWidgetAnimation>                     PlayingAnimation;                                        // 0x02E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CM22[0x18];                                  // 0x02F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPlayAnimationParams>                        PendingPlayAnimations;                                   // 0x0308(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       WidgetTickEnabled;                                       // 0x0318(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_84X9[0x7];                                   // 0x0319(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarInputActionContext* InputActionContext;                                      // 0x0320(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_54DD[0x10];                                  // 0x0328(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USolarUserWidget*>                            AllSolarUserWidgetChilds;                                // 0x0338(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void StopListeningForInputHandle(int32_t Handle);
		void StopListeningForInputActionEx(const class FName& ActionName, EInputEvent EventType);
		void ShowSelfPanelUI();
		void ShowMouseCursor();
		void SetZOrder(int32_t ZOrder);
		void SetWidgetVisible(class UWidget* Widget, bool bVisible, bool bHitTest);
		void SetWidgetTickEnabled(bool bEnabled);
		void SetWidgetKey(const class FString& InWidgetKey);
		void SetInputActionIsEnabled(const class FName& ActionName, EInputEvent EventType, bool bInIsEnabled);
		void SetBlockInputForOneTick();
		void ReceiveTick(const struct FGeometry& MyGeometry, float InDeltaTime);
		void ReceiveShow();
		void ReceiveHide();
		bool PlayAnimationByName(const class FName& AnimationName, float StartAtTime, int32_t NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
		void PlayAnimationByExclusively(class UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState);
		void OnTouchManagerInitialized();
		void OnSynchronizeProperties();
		void OnSolarUIOpened();
		void OnSolarUIClosed();
		void OnShow();
		void OnHide();
		void OnExclusivelyAnimationFinished();
		void OnDeinitialize();
		void OnBackKey(EWidgetBackKeyType BackKeyType);
		int32_t ListenForInputActionEx(const class FName& ActionName, EInputEvent EventType, bool bInIsEnabled, const class FScriptDelegate& Callback);
		bool IsWidgetTickEnabled();
		bool STATIC_IsSolarUserWidgetAndBindLua(class UWidget* InWidget);
		bool IsPlatformDesktop();
		void HideMouseCursor();
		class FString STATIC_GetWidgetKeyByPanelName(EUIPanelName PanelName);
		class FString GetWidgetKey();
		TArray<struct FVector2D> GetTouchedLocation();
		EScope GetShowScope();
		TArray<struct FVector2D> GetPointerLocation();
		class ASolarPlayerState* GetOwningSolarPlayerState();
		class ASolarCharacter* GetOwningSolarPlayerCharacter();
		class UWidgetAnimation* GetAnimationByName(const class FName& AnimationName);
		TArray<class USolarUserWidget*> GetAllSolarUserWidgetChilds();
		class UWidget* FindWidgetFromName(const class FName& Name);
		void ExecuteSolarUIShow();
		void ExecuteSolarUIOpened();
		void ExecuteSolarUIHide();
		void ExecuteSolarUIClosed();
		void ExecuteSolarUIClean();
		void ExecuteBindCustomControl();
		void CloseSelfPanelUI();
		TArray<class USolarUserWidget*> CacheAllSolarUserWidgetChilds();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActionWheelWidget
	 * Size -> 0x01E0 (FullSize[0x0528] - InheritedSize[0x0348])
	 */
	class UActionWheelWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_OG5V[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOverlay* Overlay_Point;                                           // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_USE0[0x58];                                  // 0x0360(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SelectedIndex;                                           // 0x03B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    WheelActionItemCount;                                    // 0x03BC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    WheelActionItemCountMax;                                 // 0x03C0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OperationAreaRadius;                                     // 0x03C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CancelAreaRadius;                                        // 0x03C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PointMoveSensitivity;                                    // 0x03CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ManualSwitchThreshold_PC;                                // 0x03D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ManualSwitchThreshold_GamePad;                           // 0x03D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ManualSwitchThreshold_Mobile;                            // 0x03D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    groupid;                                                 // 0x03DC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PageCount;                                               // 0x03E0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrentPage;                                             // 0x03E4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3LNI[0x8];                                   // 0x03E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FActionWheelConfig                                  WheelConfigs;                                            // 0x03F0(0x00D8) BlueprintVisible, NativeAccessSpecifierPublic
		TMap<int32_t, class UActionWheelWidgetFunctionBase*>       ActionWheelWidgetFunctionObjs;                           // 0x04C8(0x0050) NativeAccessSpecifierPublic
		class UDataTable* ActionWheelConfigDataTable;                              // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ActionWheelIsOpened;                                     // 0x0520(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T28R[0x3];                                   // 0x0521(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ValidEmojiUseDistance;                                   // 0x0524(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateWheelArrowAngle(float Degree);
		void SetInputActionGroupEnable(bool InEnable);
		void SelecteActionWheelItem(int32_t page, int32_t Index);
		void ReceiveActionWheelTouchMoved(const struct FVector2D& TouchLocalPos);
		void OnConsumeItemUpdated();
		void OnCommandExec(int32_t InGroupID, int32_t InSelectedIndex);
		void OnBindedInputActionReleased(int32_t InGroupID);
		void OnBindedInputActionPressed(int32_t InGroupID);
		void OnBattleHUDVisibilityChanged(bool Visible);
		void OnActionWheelPreviousPage();
		void OnActionWheelOpened();
		void OnActionWheelNextPage();
		void OnActionWheelMouseRightClicked();
		void OnActionWheelMouseLeftClicked();
		void OnActionWheelConfigInit();
		void OnActionWheelClosed();
		void LoadCustomActionCommandInfo(struct FActionWheelConfig* ActionWheelConfig);
		void InitActionWheelConfigByGroupID(int32_t InGroupID, int32_t InPage);
		int32_t GetItemNumById(int32_t InItemID);
		class UActionWheelWidgetFunctionBase* GetActionWheelWidgetFunctionObj(int32_t InGroupID);
		void CommandExec(int32_t InGroupID, int32_t InSelectedIndex);
		void ChangeWheelVisibility(bool Visible);
		void ActionWheelYAxis(float Movement);
		void ActionWheelXAxis(float Movement);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorEffect
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UActorEffect : public UObject
	{
	public:
		class UClass* ControllerClass;                                         // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UActorEffectController* Controller;                                              // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FCBV[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorEffectController
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UActorEffectController : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorEffectSubsystem
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UActorEffectSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_NXL7[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UActorEffect*>                                Effects;                                                 // 0x0040(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool Stop(class UActorEffect* EffectInstance);
		class UActorEffect* Start(class UClass* EffectClass, class AActor* AffectedActor);
		bool Finish(class UActorEffect* EffectInstance);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorMarkBase
	 * Size -> 0x0058 (FullSize[0x03A0] - InheritedSize[0x0348])
	 */
	class UActorMarkBase : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_CPV7[0x18];                                  // 0x0348(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor* CurrentFollowActor;                                      // 0x0360(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class APlayerController* CurrentPlayerController;                                 // 0x0368(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           MarkIconAlignment;                                       // 0x0370(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           MarkPanelSize;                                           // 0x0378(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B87U[0x18];                                  // 0x0380(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxVisibleDis;                                           // 0x0398(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D5MT[0x4];                                   // 0x039C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetUpdateState(bool InShouldUpdateLocation);
		void InitActorMarkBaseByFixedPos(const struct FVector& Pos, class APlayerController* Controller);
		void InitActorMarkBase(class AActor* InActor, class APlayerController* Controller);
		struct FVector GetFollowActorLocation();
		float GetDistance(bool bIncludeZ);
		class AActor* GetCurrentFollowActor();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorMaterialSubsystemSettings
	 * Size -> 0x0058 (FullSize[0x0090] - InheritedSize[0x0038])
	 */
	class UActorMaterialSubsystemSettings : public UDeveloperSettings
	{
	public:
		struct FGameplayTag                                        DefaultMaterialChangePriorityTag;                        // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FMaterialChangePriorityGroup>                OrderedMaterialChangePriorityGroups;                     // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSoftObjectPath>                             GlobalNoChangeMaterials;                                 // 0x0050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FForceChangeMaterialInfos>                   GlobalForceChangeMaterials;                              // 0x0060(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D2WT[0x20];                                  // 0x0070(0x0020) MISSED OFFSET (PADDING)

	public:
		int32_t GetMaterialChangePriority(const struct FGameplayTag& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorMaterialSubsystem
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UActorMaterialSubsystem : public UWorldSubsystem
	{
	public:
		TMap<class AActor*, struct FActorMaterialInfo>             ActorMaterialsMap;                                       // 0x0030(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DWYN[0x10];                                  // 0x0080(0x0010) MISSED OFFSET (PADDING)

	public:
		bool SetStaticMesh(class AActor* Actor, class UStaticMeshComponent* MeshComp, class UStaticMesh* NewMesh);
		bool SetSkeletalMesh(class AActor* Actor, class USkeletalMeshComponent* MeshComp, class USkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);
		bool SetOriginalMultiplePassMaterial(class AActor* Actor, class UMeshComponent* MeshComp, class UMaterialInterface* Material, bool bNeedMultiplePass);
		bool SetOriginalMaterials(class AActor* Actor, class UMeshComponent* MeshComp, TArray<class UMaterialInterface*> Materials);
		bool SetOriginalMaterial(class AActor* Actor, class UMeshComponent* MeshComp, int32_t MaterialIndex, class UMaterialInterface* Material);
		void RemoveNoChangeMaterials(TArray<struct FSoftObjectPath> Materials);
		bool RemoveMaterialChange(class AActor* Actor, const struct FMaterialChangeHandle& Handle);
		bool RemoveAllMaterialChanges(class AActor* Actor);
		void RebuildMaterialChangesOnMeshAddedOrRemoved(class AActor* Actor);
		void RebuildMaterialChangesOnAllOriginalMaterialsChanged(class AActor* Actor);
		class UMaterialInstanceDynamic* STATIC_OverrideDynamicMaterialInstanceParameterByIndex(class UMaterialInstanceDynamic* TargetMaterial, class UPrimitiveComponent* SourcePrimitiveComponent, int32_t SourceElementIndex, const class FName& ParameterName, EMaterialParameterType2 ParameterType, bool bOverridenOnly);
		class UMaterialInstanceDynamic* STATIC_OverrideDynamicMaterialInstanceParameter(class UMaterialInstanceDynamic* TargetMaterial, class UMaterialInterface* SourceMaterial, const class FName& ParameterName, EMaterialParameterType2 ParameterType, bool bOverridenOnly);
		void OnActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
		bool K2_SetVectorMaterialParameter(class AActor* Actor, const struct FMaterialChangeHandle& Handle, const class FName& ParameterName, const struct FVector& ParameterValue, const struct FMaterialFilter& Filter);
		bool K2_SetScalarMaterialParameter(class AActor* Actor, const struct FMaterialChangeHandle& Handle, const class FName& ParameterName, float ParameterValue, const struct FMaterialFilter& Filter);
		void K2_RebuildMaterialChangesOnOriginalMaterialChanged(class AActor* Actor, TArray<class UMeshComponent*> ChangedMeshes);
		class UMaterialInstanceDynamic* STATIC_K2_OverrideDynamicMaterialInstanceAllParametersByIndex(class UMaterialInstanceDynamic* TargetMaterial, class UPrimitiveComponent* PrimitiveComponent, int32_t SourceElementIndex, int32_t ParameterTypeFlags, const struct FMaterialParameterFilter& ParameterFilter, bool bOverridenOnly);
		class UMaterialInstanceDynamic* STATIC_K2_OverrideDynamicMaterialInstanceAllParameters(class UMaterialInstanceDynamic* TargetMaterial, class UMaterialInterface* SourceMaterial, int32_t ParameterTypeFlags, const struct FMaterialParameterFilter& ParameterFilter, bool bOverridenOnly);
		class UMaterialInstanceDynamic* STATIC_K2_CreateDynamicMaterialInstanceOverrideAllParameters(class UPrimitiveComponent* TargetPrimitiveComponent, class UMaterialInterface* SourceMaterial, int32_t ParameterTypeFlags, const struct FMaterialParameterFilter& ParameterFilter, int32_t TargetElementIndex, bool bOverridenOnly, const class FName& OptionalMaterialName);
		struct FMaterialChangeHandle K2_AddMaterialChangeByPath(class AActor* Actor, const struct FSoftObjectPath& MaterialPath, const struct FAddMaterialChangeParams& Params);
		struct FMaterialChangeHandle K2_AddMaterialChange(class AActor* Actor, class UMaterialInterface* SourceMaterial, const struct FAddMaterialChangeParams& Params);
		bool EmptyOriginalOverrideMaterials(class AActor* Actor, class UMeshComponent* MeshComp);
		bool ContainsMaterialChangeByPriority(class AActor* Actor, int32_t Priority);
		bool ContainsMaterialChange(class AActor* Actor, const struct FMaterialChangeHandle& Handle);
		bool ContainsAnyMaterialChange(class AActor* Actor);
		void AddNoChangeMaterials(TArray<struct FSoftObjectPath> Materials);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorMaterialSubsystemAgentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UActorMaterialSubsystemAgentInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorMaterialSubsystemAgentComponentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UActorMaterialSubsystemAgentComponentInterface : public UInterface
	{
	public:
		class UMaterialInterface* AMS_GetAlternativeSourceMaterial(class UMaterialInterface* OriginalSourceMaterial);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorParticleEffectSpawner
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UActorParticleEffectSpawner : public UObject
	{
	public:
		unsigned char                                              UnknownData_0Y6R[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FActorParticleEffectSpawnInfo                       Info;                                                    // 0x0038(0x0070) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7MWW[0x8];                                   // 0x00A8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ActorParticleEffectSubsystem
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UActorParticleEffectSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_BR2I[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UActorParticleEffectSpawner*>                 Spawners;                                                // 0x0040(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		struct FActorParticleEffectSpawnHandle K2_RequestParticleEffectSpawn(class AActor* Actor, const struct FActorParticleEffectSpawnInfo& SpawnInfo);
		void CancelParticleEffectSpawn(const struct FActorParticleEffectSpawnHandle& Handle);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AdvProgressBase
	 * Size -> 0x00B0 (FullSize[0x0310] - InheritedSize[0x0260])
	 */
	class UAdvProgressBase : public UUserWidget
	{
	public:
		class UImage* Progress;                                                // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance* ProgressShader;                                          // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Speed;                                                   // 0x0270(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentHP;                                               // 0x0274(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHP;                                                   // 0x0278(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UC5I[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, float>                                       ActionMap;                                               // 0x0280(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      AnimCurrentHP;                                           // 0x02D0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProgressAdd;                                             // 0x02D4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProgressMinus;                                           // 0x02D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WDWL[0x34];                                  // 0x02DC(0x0034) MISSED OFFSET (PADDING)

	public:
		void UpdateMaxHPLength(float NewHPMax, float NewCurrentHP);
		void SetProgress(float _PreMinus, float _CurrentHP, float _PreAdd);
		int32_t PreAction(float Number);
		void Init(float _DefaultHP, float _MaxHP);
		float GetMaxHP();
		float GetCurrentHPPercent();
		void DoActionSmoothly(float Number);
		void DoActionDirectly(float Number);
		void DoAction(int32_t ID);
		struct FLinearColor Debug();
		void CleanPreActions();
		void CancelAction(int32_t ID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AerialReconnaissanceMarkWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UAerialReconnaissanceMarkWidget : public USolarUserWidget
	{
	public:
		void K2_MarkStateChanged(bool bInStart);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AirDropAudioActor
	 * Size -> 0x0098 (FullSize[0x02C0] - InheritedSize[0x0228])
	 */
	class AAirDropAudioActor : public AActor
	{
	public:
		struct FVector                                             DropBeginLocation;                                       // 0x0228(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             DropEndLocation;                                         // 0x0234(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrZ;                                                   // 0x0240(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9AB3[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor* SpawnedWarningEffect;                                    // 0x0248(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* WarningEffect;                                           // 0x0250(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ThisID;                                                  // 0x0258(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U4WC[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSummonedByCharacter;                                    // 0x0260(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BWEU[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SNameAirDropSpawnWarning;                                // 0x0268(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameAirDropStopSpawnWarning;                            // 0x0278(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameAirDropApprochWarning;                              // 0x0288(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameAirDropStopApprochWarning;                          // 0x0298(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkComponent* AkAudioComponent;                                        // 0x02A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x02B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_43ZF[0x1];                                   // 0x02B8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasLanded;                                              // 0x02B9(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RKBS[0x6];                                   // 0x02BA(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnAirDropTreasureBoxStateChanged(int32_t ItemID, EAirDropMovementState MovementState, EAirDropOpenState OpenState);
		void OnAirDropApproch(int32_t InThisID);
		void InitSolarAkGameObject(class UActorComponent* Component, bool bReset);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDormantActor
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASolarDormantActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemActor
	 * Size -> 0x01B8 (FullSize[0x03E0] - InheritedSize[0x0228])
	 */
	class ASolarItemActor : public ASolarDormantActor
	{
	public:
		unsigned char                                              UnknownData_H6ZE[0x40];                                  // 0x0228(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarItemData                                      ItemData;                                                // 0x0268(0x00B8) Net, RepNotify, NativeAccessSpecifierPublic
		float                                                      SpawnOffset;                                             // 0x0320(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MR3U[0x4];                                   // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSoftObjectPath>                             DiscardMatPath;                                          // 0x0328(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     OutlineMatPath;                                          // 0x0338(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     FXPath;                                                  // 0x0350(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NoneMeshFxOffset;                                        // 0x0368(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CIJF[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              FXBPPath;                                                // 0x0370(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent* SphereComponent;                                         // 0x0380(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ATC9[0x4];                                   // 0x0388(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               FXActor;                                                 // 0x038C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemState                                                 ItemCurrentState;                                        // 0x0394(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XI0D[0xB];                                   // 0x0395(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<unsigned char>                                      MarkedTeamIdList;                                        // 0x03A0(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2N36[0x8];                                   // 0x03B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* StaticMeshComp;                                          // 0x03B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    NormalMats;                                              // 0x03C0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    OutlineMats;                                             // 0x03D0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UnMarkThisItem(unsigned char TeamID);
		void SwitchDiscardMaterials();
		void SetOutlineMeshVisible(bool Visible);
		void SetItemData(const struct FSolarItemData& _ItemData);
		void OnServerPawned();
		void OnRep_ItemDataChange();
		void OnRep_ItemCurrentStateChanged();
		void NotifyThisItemWasPickedUp();
		void MarkThisItem(unsigned char TeamID);
		class UStaticMeshComponent* GetStaticMeshComp();
		int32_t GetQuality();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTreasureBoxActor
	 * Size -> 0x01F0 (FullSize[0x05D0] - InheritedSize[0x03E0])
	 */
	class ASolarTreasureBoxActor : public ASolarItemActor
	{
	public:
		ETreasureBoxState                                          CurrentState;                                            // 0x03E0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZJAM[0x7];                                   // 0x03E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarItemDataArray                                 ItemDataList;                                            // 0x03E8(0x0118) Edit, Net, Transient, RepNotify, NativeAccessSpecifierPublic
		TArray<struct FSolarItemData>                              SortedGameItemDatas;                                     // 0x0500(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FJ45[0x20];                                  // 0x0510(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DataLeng;                                                // 0x0530(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECostType                                                  CostType;                                                // 0x0534(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DIBC[0x3];                                   // 0x0535(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CostNum;                                                 // 0x0538(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8RXO[0x54];                                  // 0x053C(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    HighestItemQuality;                                      // 0x0590(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurstRadius;                                             // 0x0594(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurstRadiusRandScale;                                    // 0x0598(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurstLocalHeight;                                        // 0x059C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurstEulerAngle;                                         // 0x05A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBurstSplitItem;                                         // 0x05A4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBurstMethod                                               BurstMethod;                                             // 0x05A5(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZZFF[0x2];                                   // 0x05A6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RadSafeSlopeToBurstOn;                                   // 0x05A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GoldenSpiralMinRadiusSquared;                            // 0x05AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarBurstItemActor*>                        BurstItemActors;                                         // 0x05B0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkComponent* AkAudioComponent;                                        // 0x05C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x05C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateTreasureBoxInternal();
		void UpdateOpenBoxUIByState(ETreasureBoxState NewState);
		void UpdateItemDataListInternal();
		void ServerSetState(ETreasureBoxState NewState, class ASolarCharacter* RequestCharacter);
		void ServerNotifyPlayerOpen(class ASolarCharacter* RequestCharacter, EItemType InItemType);
		void PlayOpenAnimation();
		void OnRep_ItemDataList();
		void OnRep_CurrentState();
		void OnClientItemHighestQualityChanged(int32_t NewQuality, int32_t PrevQuality);
		bool IsEmpty();
		void InitSolarAkGameObject(class UActorComponent* Component, bool bReset);
		int32_t GetNumCost();
		TArray<struct FSolarItemData> GetItemList();
		ECostType GetCostType();
		void ConstructTreasureBoxTest(TArray<int32_t>* itemIdList);
		void ConstructTreasureBox(int32_t dropId);
		bool BOpened();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AirDropTreasureBox
	 * Size -> 0x06E0 (FullSize[0x0CB0] - InheritedSize[0x05D0])
	 */
	class AAirDropTreasureBox : public ASolarTreasureBoxActor
	{
	public:
		bool                                                       bPendingDestroy;                                         // 0x05D0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsOpening;                                              // 0x05D1(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H6EP[0x2];                                   // 0x05D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      openProgress;                                            // 0x05D4(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarCharacter* OpeningCharacter;                                        // 0x05D8(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OpenTime;                                                // 0x05E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProtectionTime;                                          // 0x05E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IGDB[0xD];                                   // 0x05E8(0x000D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bBoxLanded;                                              // 0x05F5(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EJ9M[0x5A];                                  // 0x05F6(0x005A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SummonPlayerID;                                          // 0x0650(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartDropHeight;                                         // 0x0660(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            TargetRotation;                                          // 0x0664(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             TargetLocation;                                          // 0x0670(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F9G8[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              OpenAirdropEffect[0x28];                                 // 0x0680(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              LandHitEffect[0x28];                                     // 0x06A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              LandSmokeEffect[0x28];                                   // 0x06D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PendingDestroyEffect[0x28];                              // 0x06F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DestroyEffect[0x28];                                     // 0x0720(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FallingEffect[0x28];                                     // 0x0748(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FallingImpulseEffect[0x28];                              // 0x0770(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              LightBeamEffect[0x28];                                   // 0x0798(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FTransform                                          FallingEffectOffset;                                     // 0x07C0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          FallingImpulseEffectOffset;                              // 0x07F0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          LightBeamEffectOffset;                                   // 0x0820(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          PendingDestroyEffectOffset;                              // 0x0850(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class UAnimationAsset* LandAnimation;                                           // 0x0880(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationAsset* OpenAnimation;                                           // 0x0888(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      dropGravity;                                             // 0x0890(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      maxDropSpeed;                                            // 0x0894(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      originHeight;                                            // 0x0898(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DecelerateHeight;                                        // 0x089C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShowLandSmokeHeight;                                     // 0x08A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DecelerateTime;                                          // 0x08A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* DecelerateCurve;                                         // 0x08A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AirDropSpawnDelay;                                       // 0x08B0(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AudioActorHeightOffset;                                  // 0x08B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AudioActorFallSpeed;                                     // 0x08B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DXGY[0x4];                                   // 0x08BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftClassPath                                      AirDropGuideMeshBPClassPath;                             // 0x08C0(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DropApprochDuration;                                     // 0x08D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallingEffectDelay;                                      // 0x08DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSummonBySkill;                                          // 0x08E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_01UV[0x3];                                   // 0x08E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      YawOffset;                                               // 0x08E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EAirDropMovementState                                      MovementState;                                           // 0x08E8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EAirDropOpenState                                          OpenState;                                               // 0x08E9(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T04H[0x6];                                   // 0x08EA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* SkeletalMeshComp;                                        // 0x08F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_47Z9[0x50];                                  // 0x08F8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* FallingPSC;                                              // 0x0948(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZZYZ[0x18];                                  // 0x0950(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarDamageInfo                                    DamageInfo;                                              // 0x0968(0x0040) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FString                                              SNameAirDropOpen;                                        // 0x09A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameLandHit;                                            // 0x09B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameAirDropSpawn;                                       // 0x09C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameAirDropSpawnWarning;                                // 0x09D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameAirDropStopSpawnWarning;                            // 0x09E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameAirDropApprochWarning;                              // 0x09F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameAirDropStopApprochWarning;                          // 0x0A08(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameStartDrop;                                          // 0x0A18(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameStopDrop;                                           // 0x0A28(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameDecelerateAudio;                                    // 0x0A38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNamePlayLandedLoopAudio;                                // 0x0A48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameStopLandedLoopAudio;                                // 0x0A58(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNamePlayOnGroundBroadcastLoopAudio;                     // 0x0A68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameStopOnGroundBroadcastLoopAudio;                     // 0x0A78(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNamePlayStartHackAudio;                                 // 0x0A88(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameStopStartHackAudio;                                 // 0x0A98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNamePlayHackingLoopAudio;                               // 0x0AA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameStopHackingLoopAudio;                               // 0x0AB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameStopHackingLoopAudioAux;                            // 0x0AC8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PendingDestroyLoopStart;                                 // 0x0AD8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PendingDestroyLoopEnd;                                   // 0x0AE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SNameDestroySound;                                       // 0x0AF8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AQG2[0x68];                                  // 0x0B08(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ColorKeyTag1;                                            // 0x0B70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ColorKeyTag2;                                            // 0x0B78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ColorKeyGlow;                                            // 0x0B80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ColorKeyMesh;                                            // 0x0B88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AlphaKey;                                                // 0x0B90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                LightBeamAlphaKey;                                       // 0x0B98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ColorKeyTagFlow1;                                        // 0x0BA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ColorKeyTagFlow2;                                        // 0x0BA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ColorKeyLightEffect;                                     // 0x0BB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FadeTweenDuration;                                       // 0x0BB8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RedTweenDuration;                                        // 0x0BBC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BlueColorTag1;                                           // 0x0BC0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        RedColorTag1;                                            // 0x0BD0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BlueColorTag2;                                           // 0x0BE0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        RedColorTag2;                                            // 0x0BF0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BlueColorGlow;                                           // 0x0C00(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        RedColorGlow;                                            // 0x0C10(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BlueColorMesh;                                           // 0x0C20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        RedColorMesh;                                            // 0x0C30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        RedColorTagFlow1;                                        // 0x0C40(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        RedColorTagFlow2;                                        // 0x0C50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BlueColorTagFlow1;                                       // 0x0C60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BlueColorTagFlow2;                                       // 0x0C70(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        RedColorLightEffect;                                     // 0x0C80(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BlueColorLightEffect;                                    // 0x0C90(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQZG[0x10];                                  // 0x0CA0(0x0010) MISSED OFFSET (PADDING)

	public:
		void PlayLandingAnimation();
		bool OpenAirDropTreasureBox(class ASolarCharacter* _OpeningCharacter);
		void OnStateChanged();
		void OnRep_TargetLocation();
		void OnRep_SummonPlayerID();
		void OnRep_StartDropHeight();
		void OnRep_PendingDestroy();
		void OnRep_OpenState(EAirDropOpenState OpenState);
		void OnRep_OpenProgressChange();
		void OnRep_OpenCharacterChange();
		void OnRep_MovementState(EAirDropMovementState MovementState);
		void OnRep_IsOpening();
		void OnRep_bBoxLanded();
		void OnOpenStateChanged(EAirDropOpenState InPrevOpenState, EAirDropOpenState InCurrOpenState);
		void OnMovementStateChanged(EAirDropMovementState InPrevMovementState, EAirDropMovementState InCurrMovementState);
		void OnFadeOutFallingEffect();
		bool IsSummonedByCharacter();
		bool IsOpenningCharacterOffline();
		bool IsCharacterInRange(class ASolarCharacter* InCheckCharacter);
		bool CancelOpenAirDropTreasureBox(class ASolarCharacter* _OpeningCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AirlineCruiseCompInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAirlineCruiseCompInterface : public UInterface
	{
	public:
		class UAirlineCruiseComponent* GetAirlineCruiseComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameModeCompBase
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class UGameModeCompBase : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_HDFL[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPreStartPlay;                                           // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTakeChargeStartPlay;                                    // 0x00B9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPostStartPlay;                                          // 0x00BA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UQNN[0x2];                                   // 0x00BB(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPreHandleMatchHasStarted;                               // 0x00BD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTakeChargeHandleMatchHasStarted;                        // 0x00BE(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPostHandleMatchHasStarted;                              // 0x00BF(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BR4G[0x2];                                   // 0x00C0(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPreRestartPlayer;                                       // 0x00C2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTakeChargeRestartPlayer;                                // 0x00C3(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPostRestartPlayer;                                      // 0x00C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H8V2[0x2];                                   // 0x00C5(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPreEndPlay;                                             // 0x00C7(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTakeChargeEndPlay;                                      // 0x00C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPostEndPlay;                                            // 0x00C9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5DUL[0x6];                                   // 0x00CA(0x0006) MISSED OFFSET (PADDING)

	public:
		void PreStartPlayBind(TArray<class UGameModeCompBase*> ComponentCollection);
		void PreRestartPlayerBind(TArray<class UGameModeCompBase*> ComponentCollection, class AController* NewPlayer);
		void PreHandleMatchHasStartedBind(TArray<class UGameModeCompBase*> ComponentCollection);
		void PreGameModeStartPlay(TArray<class UGameModeCompBase*> ComponentCollection);
		void PreGameModeRestartPlayer(TArray<class UGameModeCompBase*> ComponentCollection, class AController* NewPlayer);
		void PreGameModeHandleMatchHasStarted(TArray<class UGameModeCompBase*> ComponentCollection);
		void PreGameModeEndPlay(TArray<class UGameModeCompBase*> ComponentCollection, EEndPlayReason EndPlayReason);
		void PreEndPlayBind(TArray<class UGameModeCompBase*> ComponentCollection, EEndPlayReason EndPlayReason);
		void PostStartPlayBind(TArray<class UGameModeCompBase*> ComponentCollection);
		void PostRestartPlayerBind(TArray<class UGameModeCompBase*> ComponentCollection, class AController* NewPlayer);
		void PostHandleMatchHasStartedBind(TArray<class UGameModeCompBase*> ComponentCollection);
		void PostGameModeStartPlay(TArray<class UGameModeCompBase*> ComponentCollection);
		void PostGameModeRestartPlayer(TArray<class UGameModeCompBase*> ComponentCollection, class AController* NewPlayer);
		void PostGameModeHandleMatchHasStarted(TArray<class UGameModeCompBase*> ComponentCollection);
		void PostGameModeEndPlay(TArray<class UGameModeCompBase*> ComponentCollection, EEndPlayReason EndPlayReason);
		void PostEndPlayBind(TArray<class UGameModeCompBase*> ComponentCollection, EEndPlayReason EndPlayReason);
		void OnGameModeStartPlay(bool* bOutSuccess, TArray<class UGameModeCompBase*> ComponentCollection);
		void OnGameModeRestartPlayer(bool* bOutSuccess, TArray<class UGameModeCompBase*> ComponentCollection, class AController* NewPlayer);
		void OnGameModeHandleMatchHasStarted(bool* bOutSuccess, TArray<class UGameModeCompBase*> ComponentCollection);
		void OnGameModeEndPlay(bool* bOutSuccess, TArray<class UGameModeCompBase*> ComponentCollection, EEndPlayReason EndPlayReason);
		class ASolarGameMode* GetGameModeOwner();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AirlineCruiseComponent
	 * Size -> 0x0078 (FullSize[0x0148] - InheritedSize[0x00D0])
	 */
	class UAirlineCruiseComponent : public UGameModeCompBase
	{
	public:
		int32_t                                                    UsedAirlineID;                                           // 0x00D0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_22TE[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* CapsuleRootClass;                                        // 0x00D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCapsuleRoot* CapsuleRoot;                                             // 0x00E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, struct FAirlineData>                         AirlineDataList;                                         // 0x00E8(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class ASolarCharacter* CruiseTemplate;                                          // 0x0138(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SOX6[0x8];                                   // 0x0140(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPlayerJoin(class ASCMPlayerState* PlayerState);
		void OnCruiseCompleted(class AActor* DestroyedRoot);
		void OnAIJoin(class ASCMPlayerState* PlayerState);
		int32_t GetUsedAirlineData(struct FAirlineData* outData);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AmmoConfig
	 * Size -> 0x06B0 (FullSize[0x06E0] - InheritedSize[0x0030])
	 */
	class UAmmoConfig : public UDataAsset
	{
	public:
		EHoldActionType                                            HoldAction;                                              // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E1AU[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFireChargeData>                             FireChargeDatas;                                         // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FireChargeStopSoundName;                                 // 0x0048(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargingToleranceEndTime;                                // 0x0058(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargingWorkingEndTime;                                  // 0x005C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargingHoldingEndTime;                                  // 0x0060(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargingTrajectoryTime;                                  // 0x0064(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bScaleHitEffectByChargingTime;                           // 0x0068(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCostToChargeScale;                                      // 0x0069(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HT9S[0x2];                                   // 0x006A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FireCostFullShot;                                        // 0x006C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceFullShot;                                          // 0x0070(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6OT8[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxChargingDamageScale;                                  // 0x0074(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DeltaAngle;                                              // 0x0078(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KK4B[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Name;                                                    // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Des;                                                     // 0x0090(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PropID;                                                  // 0x00A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LifeTime;                                                // 0x00A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EFireMethodType                                            FireMethodType;                                          // 0x00A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ETrajectoryType                                            TrajectoryType;                                          // 0x00A9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZG0D[0x2];                                   // 0x00AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CustomValue;                                             // 0x00AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*											   BulletClass;                                             // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBounceType                                                BulletBounce;                                            // 0x00B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2GQ4[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BounceTimes;                                             // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ETriggerType                                               TriggerType;                                             // 0x00C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YAL1[0x3];                                   // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxRange;                                                // 0x00C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EffRange;                                                // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Radius;                                                  // 0x00CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InitSpeed;                                               // 0x00D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECostFireType                                              FireCostType;                                            // 0x00D4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G8IW[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FireCostPerAttack;                                       // 0x00D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FireSpeedChangeTime;                                     // 0x00DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireSpeedChangeCOP;                                      // 0x00E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FastestFireInterval;                                     // 0x00E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlowestFireInterval;                                     // 0x00E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BaseFireInterval;                                        // 0x00EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireIntervalRevertPreTime;                               // 0x00F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireIntervalReavertSpeed;                                // 0x00F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BoltActionTime;                                          // 0x00F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartBoltDuration;                                       // 0x00FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AutoFireBreakTime;                                       // 0x0100(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FirePrepareTime;                                         // 0x0104(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireStateBreakTime;                                      // 0x0108(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireStreakBreakTime;                                     // 0x010C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FireIdx;                                                 // 0x0110(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTimedExplode;                                           // 0x0114(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JY5N[0x3];                                   // 0x0115(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BaseReloadTime;                                          // 0x0118(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReloadBoltTime;                                          // 0x011C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PostFireOverload;                                        // 0x0120(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayHitSound;                                           // 0x0124(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayExplodeSound;                                       // 0x0125(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MSHL[0x2];                                   // 0x0126(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FlySoundReceiveRadius;                                   // 0x0128(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FlySoundIgnoreDistance;                                  // 0x012C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SingleSoundCount;                                        // 0x0130(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VL1Z[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Play_Land_Common_Hit_1P;                                 // 0x0138(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Land_Common_Hit_3P;                                 // 0x0148(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Land_Common_Hit_3P_Enemy;                           // 0x0158(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Land_Fly_Once_3P;                                   // 0x0168(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Land_Fly_Once_3P_Enemy;                             // 0x0178(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Land_Fly_Loop_1P;                                   // 0x0188(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Land_Fly_Loop_3P;                                   // 0x0198(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Land_Fly_Loop_3P_Enemy;                             // 0x01A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_Land_Fly_Loop_1P;                                   // 0x01B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_Land_Fly_Loop_3P;                                   // 0x01C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_Land_Fly_Loop_3P_Enemy;                             // 0x01D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Fire_Empty_1p;                                      // 0x01E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Fire_Empty_3p;                                      // 0x01F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Fire_Empty_3p_Enemy;                                // 0x0208(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* PostFireSpreadCurveStruct;                               // 0x0218(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VhADSSpreadCOP;                                          // 0x0220(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ADSSpreadCOP;                                            // 0x0224(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpreadFirePreTime;                                       // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpreadPostFireSpeed;                                     // 0x022C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpreadRestorePreTime;                                    // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpreadRestoreSpeed;                                      // 0x0234(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FWeaponFireTPPAnimConfig                            TPPRecoilConfig;                                         // 0x0238(0x0028) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FWeaponFireFPPAnimConfig                            FPPRecoilConfigNoScope;                                  // 0x0260(0x0070) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FWeaponFireFPPAnimConfig                            FPPRecoilConfigWithScope;                                // 0x02D0(0x0070) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FAmmonVerticalRecoilStruct                          PitchRecoilStruct;                                       // 0x0340(0x0030) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FAmmonHorizontalRecoilStruct                        YawRecoilStruct;                                         // 0x0370(0x0030) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FAmmonRecoilRollStruct                              RollRecoilStruct;                                        // 0x03A0(0x0040) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FAmmonRecoilScope                                   ScopeRecoil;                                             // 0x03E0(0x00B8) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ADSRecoilCOP;                                            // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FGNH[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, float>                                 RecoilCOPMap;                                            // 0x04A0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<EPhysicalSurface>                                   IgnoreEPhysicalSurface;                                  // 0x04F0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoBurstFire;                                          // 0x0500(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_01WG[0x3];                                   // 0x0501(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BurstFireInterval;                                       // 0x0504(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurstFireInternalInterval;                               // 0x0508(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireAnimationPlayRate;                                   // 0x050C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AmmoSoundType;                                           // 0x0510(0x0004) BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProjectileMaxGravity;                                    // 0x0514(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParticleStartDistance;                                   // 0x0518(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TrajectoryStartDistance;                                 // 0x051C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPenetrable;                                             // 0x0520(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTakeDamageAfterDeathVerge;                              // 0x0521(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_132Q[0x6];                                   // 0x0522(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* PenetrationDamageMultiplierCurve;                        // 0x0528(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* CylinderDamageMultiplierCurve;                           // 0x0530(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateBrush                                         TriggerIcon;                                             // 0x0538(0x0098) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		EVirtualBulletType                                         VirtualBulletType;                                       // 0x05D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bStepOnServer;                                           // 0x05D1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FJFH[0x6];                                   // 0x05D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAmmoConfig* TraceOverrideAmmo;                                       // 0x05D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              TraceTargetFlag;                                         // 0x05E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_28LV[0x7];                                   // 0x05E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTracerBulletData                                   TracerData;                                              // 0x05E8(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class UCurveFloat* BulletOffsetCurve;                                       // 0x0628(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FVector2D>                                   BulletOffsetAngles;                                      // 0x0630(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* BulletDamageCurve;                                       // 0x0640(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* BulletScaleCurve;                                        // 0x0648(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* BulletMovementCurve;                                     // 0x0650(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bThirdPesonViewXScaledByDistance;                        // 0x0658(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceApplyAbility;                                      // 0x0659(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3OTW[0x6];                                   // 0x065A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      AmmoAbilityClasses;                                      // 0x0660(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AmmoAbilityClassesOnDestroyed;                           // 0x0670(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* AmmoAbilityClassesOnSelf;                                // 0x0680(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkillType;                                               // 0x0688(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NameLocalTextIDNumber;                                   // 0x068C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DescriptionLocalTextIDNumber;                            // 0x0690(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RangeLocalTextID;                                        // 0x0694(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DifficultyLocalTextID;                                   // 0x0698(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0M0K[0x4];                                   // 0x069C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarDamageInfo                                    DamageInfo;                                              // 0x06A0(0x0040) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void InitVerticalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax);
		void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed);
		void InitScopeRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop);
		void InitScopeAndCrossHairVibration(float ScopeVMaxDistanceOffSet, float ScopeVVibrationDuration, float ScopeHMaxDistanceOffSet, float ScopeHVibrationDuration, float ScopeVContinuousFallingDuration, float ScopeVContinuousFallingPointIndex, float VMaxDistanceOffSetScale, float VVibrationDurationScale, float VSingleOffSetScale, float VContinuousOffSetScale, float HMaxDistanceOffSetScale, float HVibrationDurationScale, float HSingleOffSetScale, float HContinuousOffSetScale, float HOffSetProbabilityScale);
		void InitRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop);
		void InitRecoilCOPMap(TArray<class FString> Keys, TArray<float> Values);
		void InitPostFireSpreadCurveStruct(const class FString& Path);
		void InitHorizontalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax);
		void InitBaseData(int32_t Trigger);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AndroidInputManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UAndroidInputManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnAndroidBackPressed;                                    // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_CharacterFootEffect
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_CharacterFootEffect : public UAnimNotify
	{
	public:
		TArray<struct FFootEffect>                                 FootEffectList;                                          // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void AddNewFootEffect(const struct FFootEffect& NewEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_CharacterPlaySoundGroup
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_CharacterPlaySoundGroup : public UAnimNotify
	{
	public:
		class FName                                                SoundGroupName;                                          // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAnimNotify
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USolarAnimNotify : public UAnimNotify
	{
	public:
		bool                                                       bDynamic;                                                // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XZJX[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_CharacterStartSound
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class UAnimNotify_CharacterStartSound : public USolarAnimNotify
	{
	public:
		TArray<struct FCharacterSound>                             SoundList;                                               // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseSwitch;                                              // 0x0050(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UV4K[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      SwitchGroupNames;                                        // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseRTPC;                                                // 0x0068(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9CW9[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      RPTCNames;                                               // 0x0070(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		int32_t RemoveAllSwitches();
		int32_t RemoveAllRPTCs();
		int32_t RemoveAllCharacterSounds();
		void AddNewSwitch(const class FString& NewSwitch);
		void AddNewRPTC(const class FString& NewRTPC);
		void AddNewCharacterSound(const struct FCharacterSound& NewSound);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_CharacterStopSound
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_CharacterStopSound : public UAnimNotify
	{
	public:
		TArray<struct FCharacterSound>                             StopList;                                                // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		int32_t RemoveAllCharacterSoundStops();
		void AddNewCharacterSoundStop(const struct FCharacterSound& NewStop);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ExecuteGameplayCueLocal
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ExecuteGameplayCueLocal : public UAnimNotify
	{
	public:
		struct FGameplayCueTag                                     GameplayCueTag;                                          // 0x0038(0x0008) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_FlyWaterEffect
	 * Size -> 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
	 */
	class UAnimNotify_FlyWaterEffect : public UAnimNotify
	{
	public:
		class UParticleSystem* PSTemplate;                                              // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PSTemplateSoft[0x28];                                    // 0x0040(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FName                                                SocketName;                                              // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0070(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x007C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_LegVehicleRiseDust
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_LegVehicleRiseDust : public UAnimNotify
	{
	public:
		TArray<int32_t>                                            NotifyFootIndex;                                         // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_PlayParticleAsync
	 * Size -> 0x0078 (FullSize[0x00B0] - InheritedSize[0x0038])
	 */
	class UAnimNotify_PlayParticleAsync : public UAnimNotify
	{
	public:
		class UParticleSystem* PSTemplate;                                              // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PSTemplateSoft[0x28];                                    // 0x0040(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector                                             LocationOffset;                                          // 0x0068(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0074(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             Scale;                                                   // 0x0080(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9WBL[0x14];                                  // 0x008C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       Attached : 1;                                            // 0x00A0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N4T4[0x3];                                   // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x00A4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QR6M[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_PlayPickupSound
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_PlayPickupSound : public UAnimNotify
	{
	public:
		class FString                                              DefaultSoundEventName;                                   // 0x0038(0x0010) BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class FString GetDefaultSoundEventName();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ReloadClip
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ReloadClip : public UAnimNotify
	{
	public:
		class FName                                                HandBoneName;                                            // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAnimReloadNotifyType                                      StepType;                                                // 0x0040(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OWGJ[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ServerRefreshBones
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ServerRefreshBones : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ShieldEndRecharge
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ShieldEndRecharge : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ShieldHideRechargeFX
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ShieldHideRechargeFX : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ShieldOperatorSet
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ShieldOperatorSet : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ShieldShowRechargeFX
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ShieldShowRechargeFX : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ShieldStartRecharge
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ShieldStartRecharge : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ShieldUpgradeFinishFX
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ShieldUpgradeFinishFX : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_ThrowThrown
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_ThrowThrown : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_VehicleCameraShake
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UAnimNotify_VehicleCameraShake : public UAnimNotify
	{
	public:
		class UClass* VehicleCameraShake;                                      // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_VehiclePlaySound
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UAnimNotify_VehiclePlaySound : public UAnimNotify
	{
	public:
		bool                                                       bCheckEnemy;                                             // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_300N[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SameTeamSound;                                           // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              EnemySound;                                              // 0x0050(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_VehiclePreviewSound
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_VehiclePreviewSound : public UAnimNotify
	{
	public:
		class FString                                              Sound;                                                   // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_VehicleVFX
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_VehicleVFX : public UAnimNotify
	{
	public:
		TArray<struct FVehicleVFX>                                 VehicleVFXes;                                            // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotify_WeaponBolt
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UAnimNotify_WeaponBolt : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_AddLooseGameplayTag
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_AddLooseGameplayTag : public UAnimNotifyState
	{
	public:
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0030(0x0020) Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_AllowPhysicsRotationDuringAnimRootMotion
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_AllowPhysicsRotationDuringAnimRootMotion : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_AutoCancelOnInputReleased
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_AutoCancelOnInputReleased : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAnimNotifyState
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarAnimNotifyState : public UAnimNotifyState
	{
	public:
		bool                                                       bDynamic;                                                // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W9HA[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_CharacterLoopedSound
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UAnimNotifyState_CharacterLoopedSound : public USolarAnimNotifyState
	{
	public:
		TArray<struct FCharacterSound>                             EventListToPlay;                                         // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCharacterSound>                             EventListToStop;                                         // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_HideCharacterMesh
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_HideCharacterMesh : public UAnimNotifyState
	{
	public:
		struct FGameplayTag                                        VisibilityTag;                                           // 0x0030(0x0008) Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPropagateToChildren;                                    // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FGJU[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* ChildrenExceptClass;                                     // 0x0040(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_InhibitAimOffset
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_InhibitAimOffset : public UAnimNotifyState
	{
	public:
		float                                                      InhibitSmoothTime;                                       // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RecoverSmoothTime;                                       // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bCalcRecoverSmoothTimeByRemainingTime;                   // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QAUV[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_InhibitLeftHandWeaponAttach
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_InhibitLeftHandWeaponAttach : public UAnimNotifyState
	{
	public:
		float                                                      InhibitSmoothTime;                                       // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RecoverSmoothTime;                                       // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bCalcRecoverSmoothTimeByRemainingTime;                   // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W38X[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_OpenTreasureBox
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_OpenTreasureBox : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_OverrideHitEffectSurfaceType
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_OverrideHitEffectSurfaceType : public UAnimNotifyState
	{
	public:
		EPhysicalSurface                                           SurfaceType;                                             // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3WGR[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_PlayGameplayCueLocal
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_PlayGameplayCueLocal : public UAnimNotifyState
	{
	public:
		struct FGameplayCueTag                                     GameplayCueTag;                                          // 0x0030(0x0008) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_RechargeShield
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_RechargeShield : public UAnimNotifyState
	{
	public:
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0030(0x0020) Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       bFXorMesh;                                               // 0x0050(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_16KV[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_RepairVehicleWeakPoints
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_RepairVehicleWeakPoints : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_ShieldUpgradeFX
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_ShieldUpgradeFX : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_SolarSpawnMeshAndAttach
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_SolarSpawnMeshAndAttach : public UAnimNotifyState
	{
	public:
		TArray<struct FAttachedMeshInfo>                           MeshesInfo;                                              // 0x0030(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        SpawnedMeshComps;                                        // 0x0040(0x0010) ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_SolarTimedParticleEffect
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_SolarTimedParticleEffect : public UAnimNotifyState
	{
	public:
		bool                                                       bAsyncLoad;                                              // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XZ7G[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* PSTemplate;                                              // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PSTemplateSoft[0x28];                                    // 0x0040(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       Attached;                                                // 0x0068(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RCUO[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x006C(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LocationOffset;                                          // 0x0074(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0080(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             Scale;                                                   // 0x008C(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDestroyAtEnd;                                           // 0x0098(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLockRelativeRotation;                                   // 0x0099(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KJ6O[0x16];                                  // 0x009A(0x0016) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AnimNotifyState_UpgradeShield
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_UpgradeShield : public UAnimNotifyState
	{
	public:
		struct FGameplayTagContainer                               GameplayTags;                                            // 0x0030(0x0020) Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AttributeSubExecCalc
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class UAttributeSubExecCalc : public UGameplayEffectExecutionCalculation
	{
	public:
		class UClass* CDOProxyClass;                                           // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttributeSubExecProxy* CDOProxy;                                                // 0x0048(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_84PQ[0x18];                                  // 0x0050(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AttributeSubExecProxy
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAttributeSubExecProxy : public UObject
	{
	public:
		TWeakObjectPtr<class UAttributeSubExecCalc>                CDOOwner;                                                // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ModifyAttributeSub(class USolarAttributeSubComponent* AttrSubComp, EAttributeSubBehavior Behavior, int32_t AttributeSubID, const class FName& AttrSubTag, float ModifyValue);
		struct FGameplayModifierEvaluatedData STATIC_MakeExecProxyEvaluated(const struct FGameplayAttribute& InAttribute, float InMagnitud);
		void ExecutePureAttributeSub(class USolarAttributeSubComponent* AttrSubComp, TArray<struct FAttributeSubSetting> InAttributeSubs);
		void ExecuteAttributeCalculation(class USolarAttributeSubComponent* AttrSubComp, TArray<struct FAttributeSubSetting> InAttributeSubs, TArray<struct FGameplayAttribute> InAttribute, TArray<struct FGameplayModifierEvaluatedData>* OutModResults);
		class UAttributeSubExecProxy* STATIC_CreateProxy(class UAttributeSubExecCalc* InCDOOwner, class UClass* ProxyClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AttributeSubGameplayEffect
	 * Size -> 0x0020 (FullSize[0x0868] - InheritedSize[0x0848])
	 */
	class UAttributeSubGameplayEffect : public UGameplayEffect
	{
	public:
		TArray<struct FAttributeSubSetting>                        AttributeSubMods;                                        // 0x0848(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FAttributeSubSetting>                        PureAttributeSubs;                                       // 0x0858(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateAttributeBySub(const struct FGameplayAttribute& Attribute);
		class UAttributeSubGameplayEffect* STATIC_CreateAttributeSubEffectInstance(class UObject* Outer, class UClass* AttributeSubCalcClass, class UClass* Class);
		void CancelPureAttributeSub(int32_t AttributeSubID);
		void CancelAttributeSubModify(const struct FGameplayAttribute& Attribute, int32_t AttributeSubID);
		void AddPureAttributeSub(int32_t AttributeSubID, float Value);
		void AddAttributeSubModify(const struct FGameplayAttribute& Attribute, int32_t AttributeSubID, float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AttributeSubInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAttributeSubInterface : public UInterface
	{
	public:
		class USolarAttributeSubComponent* GetAttributeSubComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VertAnimMeshComponent
	 * Size -> 0x0030 (FullSize[0x0630] - InheritedSize[0x0600])
	 */
	class UVertAnimMeshComponent : public UStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_BQ0K[0x30];                                  // 0x0600(0x0030) MISSED OFFSET (PADDING)

	public:
		void PlayInfo(const struct FVertexAnimInfo& InAnimInfo);
		void Play(int32_t InStartFrame, int32_t InEndFrame, float InLength, bool InLoop);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BackpackVertAnimMeshComponent
	 * Size -> 0x00E0 (FullSize[0x0710] - InheritedSize[0x0630])
	 */
	class UBackpackVertAnimMeshComponent : public UVertAnimMeshComponent
	{
	public:
		struct FVertexAnimInfo                                     DefaultAnimInfo;                                         // 0x0630(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		TMap<EBackPackAnimSubType, struct FVertexAnimInfo>         BackPackAnimInfoMap;                                     // 0x0640(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class ASolarCharacter* SolarCharacter;                                          // 0x0690(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarBackpackActor* BackPackActor;                                           // 0x0698(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LGC8[0x70];                                  // 0x06A0(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAttributeSet
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarAttributeSet : public UAttributeSet
	{
	public:
		void K2_SetAttributeValue(const class FName& AttributeName, float NewVal);
		void K2_OnReplicationAttribute(const struct FGameplayAttributeData& OldValue, const struct FGameplayAttributeData& ReplicatedAttribute, const class FName& AttributeName);
		void K2_InitAttributeValue(struct FGameplayAttributeData* OriginAttribute, float NewVal);
		float STATIC_K2_GetAttributeValue(const struct FGameplayAttributeData& OriginAttribute);
		struct FGameplayAttribute K2_GetAttribute(const class FName& AttributeName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BasalAttributeSet
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UBasalAttributeSet : public USolarAttributeSet
	{
	public:
		struct FGameplayAttributeData                              MaxHealth;                                               // 0x0030(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CurrentHealth;                                           // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected

	public:
		void OnRep_MaxHealth(const struct FGameplayAttributeData& Previous);
		void OnRep_CurrentHealth(const struct FGameplayAttributeData& Previous);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleChat
	 * Size -> 0x00D8 (FullSize[0x0338] - InheritedSize[0x0260])
	 */
	class UBattleChat : public UUserWidget
	{
	public:
		class UGaugeImage* ChatCDMask;                                              // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ImgBG;                                                   // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBoxGroup* CBGroupOperation;                                        // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UScrollBox* PanelChatOptions;                                        // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* CBoxChatSwitch;                                          // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* AnimChatCooldown;                                        // 0x0288(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* ChatButtonClass;                                         // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateBrush                                         SeparatorBrush;                                          // 0x0298(0x0098) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QO2A[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetLogDisplay(bool bDisplay);
		void ReceiveQuickMessage(const class FString& InName, const class FString& InMessage1, bool bLocalPlayer, bool bSound, int32_t PosInTeam, const class FString& InMessage2);
		void ReceiveQuickChatSending();
		void OnGroupOperationStateChanged(TArray<class UCheckBox*> ChildChangedArray, int32_t CheckedChildIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHUD
	 * Size -> 0x0000 (FullSize[0x0318] - InheritedSize[0x0318])
	 */
	class ASolarHUD : public AHUD
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleHUDBase
	 * Size -> 0x0080 (FullSize[0x0398] - InheritedSize[0x0318])
	 */
	class ABattleHUDBase : public ASolarHUD
	{
	public:
		class UClass* Dispatcher;                                              // 0x0318(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUDDispatcherBase* WidgetEventDispatcher;                                   // 0x0320(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseBattleDeathView;                                     // 0x0328(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8MKW[0x7];                                   // 0x0329(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarPlayersHPModel* PlayersHPModel;                                          // 0x0330(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarPlayersShieldModel* PlayersShieldModel;                                      // 0x0338(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarTeamInfoModel* TeamInfoModelModel;                                      // 0x0340(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4QO2[0x50];                                  // 0x0348(0x0050) MISSED OFFSET (PADDING)

	public:
		void ShowDiePage_Deprecated();
		void OnPlayerStateRepInController(EPlayerStateRepType RepType, class APlayerState* PlayerState);
		void OnPlayerStateRepInCharacter(EPlayerStateRepType RepType, class APlayerState* PlayerState);
		void OnNewTeamInfo(class ASolarTeamInfo* TeamInfo);
		void OnCharacterEndPlay(class ASolarCharacter* Character);
		class UUISubsystem* GetUISubSystem();
		void CloseDiePage_Deprecated(class UClass* InDiePageClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleHUDForTechDesign
	 * Size -> 0x0000 (FullSize[0x0398] - InheritedSize[0x0398])
	 */
	class ABattleHUDForTechDesign : public ABattleHUDBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeBase
	 * Size -> 0x0028 (FullSize[0x0370] - InheritedSize[0x0348])
	 */
	class UUINoticeBase : public USolarUserWidget
	{
	public:
		class USolarRichTextBlock* TextWidget;                                              // 0x0348(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* TxtBg;                                                   // 0x0350(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Icon;                                                    // 0x0358(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* IconBg;                                                  // 0x0360(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ACMI[0x8];                                   // 0x0368(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowEnterAnimation();
		void SetIconBrush(const class FString& IconPath);
		void SetColor(const struct FNoticeColorData& InColorData);
		void ResetIsPlayingVoice(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
		class UWidgetAnimation* GetExitAnimation();
		class UWidgetAnimation* GetEnterAnimation();
		void DefaultClose();
		void CloseNotice();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleNoticeEquipReplace
	 * Size -> 0x00E8 (FullSize[0x0458] - InheritedSize[0x0370])
	 */
	class UBattleNoticeEquipReplace : public UUINoticeBase
	{
	public:
		class UImage* Img_Item1;                                               // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Item2;                                               // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Item1_BG;                                            // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Item2_BG;                                            // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Quality1;                                                // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Quality2;                                                // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Enter_Animation_1;                                       // 0x03A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Enter_Animation_2;                                       // 0x03A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Enter_Animation_3;                                       // 0x03B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              DefaultEquipIcons[0x50];                                 // 0x03B8(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              DefaultWeaponPartIcons[0x50];                            // 0x0408(0x0050) UNKNOWN PROPERTY: MapProperty

	public:
		void OnEquipReplaceAnimFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleNoticePickup
	 * Size -> 0x0030 (FullSize[0x03A0] - InheritedSize[0x0370])
	 */
	class UBattleNoticePickup : public UUINoticeBase
	{
	public:
		class USolarTextBlock* Txt_PickupNotice_ItemName;                               // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_PickupNotice_Head;                                   // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_PickupNotice_Tail;                                   // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Txt_bg;                                              // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                QualityColor;                                            // 0x0390(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleOBHUD
	 * Size -> 0x0010 (FullSize[0x03A8] - InheritedSize[0x0398])
	 */
	class ABattleOBHUD : public ABattleHUDBase
	{
	public:
		unsigned char                                              UnknownData_VZTO[0x8];                                   // 0x0398(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarOBUIModel* SolarOBUIModel;                                          // 0x03A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetBattleOBHUDType(EBattleOBHUDType Type);
		void OpenShortCutKeyboard();
		class UOBHUDDispatcher* GetOBHUDDispatcher();
		EBattleOBHUDType GetBattleOBHUDType();
		void AddWidgetToOBRoot(class UPanelSlot** ResultSlot, class UWidget* InChildWidget, const class FName& PanelName, bool bReplaceOld);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattlePassConfigInfo
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UBattlePassConfigInfo : public UObject
	{
	public:
		TArray<struct FBattlePassLevelInfo>                        BattlePassLevel;                                         // 0x0028(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool IsMaxLevelWithExp(int32_t BattlePassID, int32_t TotalExp);
		void Initialize();
		int32_t GetLevelByTestExp(int32_t BattlePassID, int32_t InTestExp);
		int32_t GetExpNeedForLv(int32_t BattlePassID, int32_t Level);
		int32_t GetBattllePassMaxLevel(int32_t BattlePassID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattlePromptWidget
	 * Size -> 0x0308 (FullSize[0x0650] - InheritedSize[0x0348])
	 */
	class UBattlePromptWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_GX1H[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* EnterAnimPanel;                                          // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* MeshWidget_Arrow;                                        // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* MeshWidget_Detail;                                       // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EBattlePromptType, EBattlePromptType>                 DisplayTypeMap;                                          // 0x0370(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EBattlePromptType, int32_t>                           TypeUVMap;                                               // 0x03C0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      ElemIconDifference;                                      // 0x0410(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R4R2[0x4];                                   // 0x0414(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EBattlePromptType, float>                             ElemRadiusMap;                                           // 0x0418(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    ThreatFactorDefault;                                     // 0x0468(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7GS8[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EBattlePromptType, class UCurveFloat*>                ElemArrowColorCurveMap;                                  // 0x0470(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EBattlePromptType, class UCurveFloat*>                ElemArrowLengthCurveMap;                                 // 0x04C0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EBattlePromptType, class UCurveFloat*>                ElemIconScaleCurveMap;                                   // 0x0510(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    CloseCheckAngleDefault;                                  // 0x0560(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6PR4[0x4];                                   // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* CloseCheckAngleCurve;                                    // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ElemLerpSpeed;                                           // 0x0570(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    EditorTestColorFactor;                                   // 0x0574(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    EditorTestLengthFactor;                                  // 0x0578(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    EditorTestAngle;                                         // 0x057C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              EffectedNightmareActors[0x50];                           // 0x0580(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_DF1Y[0x20];                                  // 0x05D0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPromptElemInfo>                             Datas;                                                   // 0x05F0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RTZH[0x50];                                  // 0x0600(0x0050) MISSED OFFSET (PADDING)

	public:
		void PlayForbidAnim(bool bQuickEnter);
		void OnSpecTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnNightComesActorChanged(class AActor* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleSubSundry
	 * Size -> 0x0050 (FullSize[0x0398] - InheritedSize[0x0348])
	 */
	class UBattleSubSundry : public USolarUserWidget
	{
	public:
		class UScrollBox* PanelInformation;                                        // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarRichTextBlock* TxtInformation03;                                        // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarRichTextBlock* TxtInformation02;                                        // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarRichTextBlock* TxtInformation01;                                        // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* AnimInformationDisappear;                                // 0x0368(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxMessageStock;                                         // 0x0370(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChatCoolDown;                                            // 0x0374(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InfoKeepDuration;                                        // 0x0378(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H4JC[0x1C];                                  // 0x037C(0x001C) MISSED OFFSET (PADDING)

	public:
		void ReceiveQuickMessage(const class FString& InName, const class FString& InMessage, bool bLocalPlayer, bool bSound, int32_t PosInTeam, const class FString& InMessage2);
		void OnPlayerStateRep(EPlayerStateRepType RepType, class APlayerState* PlayerState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleUpgradeEffectCategoryData
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UBattleUpgradeEffectCategoryData : public UDataAsset
	{
	public:
		TMap<EBattleUpgradeEffectCategory, struct FBattleUpgradeEffectCategoryConfig> CategoryConfigMap;                                       // 0x0030(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		void STATIC_BreakBattleUpgradeEffectCategoryColorSet(const struct FBattleUpgradeEffectCategoryColorSet& ColorSet, struct FLinearColor* BannerCategoryTextColor, struct FLinearColor* BannerIconColor, struct FLinearColor* BannerBorderColor, struct FLinearColor* BannerBackgroundColor, struct FLinearColor* BadgeIconColor, struct FLinearColor* BadgeBackgroundColor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleUpgradeEffectSettings
	 * Size -> 0x0058 (FullSize[0x0090] - InheritedSize[0x0038])
	 */
	class UBattleUpgradeEffectSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              EffectTypeConfig[0x28];                                  // 0x0038(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    SelectEffectHintLocalTextID;                             // 0x0060(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4V32[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              EffectCategoryData[0x28];                                // 0x0068(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BigWaterGun
	 * Size -> 0x0168 (FullSize[0x0390] - InheritedSize[0x0228])
	 */
	class ABigWaterGun : public AActor
	{
	public:
		float                                                      CylinderRadius;                                          // 0x0228(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CylinderLength;                                          // 0x022C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TraceInterval;                                           // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageChaPerInterval;                                    // 0x0234(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageVehPerInterval;                                    // 0x0238(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageDecayFirst;                                        // 0x023C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageDecaySecond;                                       // 0x0240(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SDI2[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     MeshPath;                                                // 0x0248(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                MeshSocket;                                              // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            WaterColumnEffectRotator;                                // 0x0268(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_67QF[0x4];                                   // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* WaterColumnEffect;                                       // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                InstigatorEffectID;                                      // 0x0280(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* CameraShakeClass;                                        // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* InCrossHairClass;                                        // 0x0290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NearlyEndTime;                                           // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowDebug;                                              // 0x029C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0O9R[0x3];                                   // 0x029D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             TraceStartRelativeLocation;                              // 0x02A0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             TraceStartRelativeLocation_Crouch;                       // 0x02AC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MuzzleTraceOffset;                                       // 0x02B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ShotAnimNotifyName;                                      // 0x02BC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                UnequipAnimNotifyName;                                   // 0x02C4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                UnequipAnimNotifyName_Gatling;                           // 0x02CC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0VD9[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* DamageDecayCurve;                                        // 0x02D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        ChaSlowDownDecayDataTag;                                 // 0x02E0(0x0008) Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat* ChaSlowDownDecayCurve;                                   // 0x02E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        VehSlowDownDecayDataTag;                                 // 0x02F0(0x0008) Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat* VehSlowDownDecayCurve;                                   // 0x02F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OcclusionCheckZOffset;                                   // 0x0300(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FB5M[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      BlockDamageItemClasses;                                  // 0x0308(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* Mesh;                                                    // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInFire;                                                 // 0x0320(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bHitOther;                                               // 0x0321(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GOY1[0x6];                                   // 0x0322(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* ClientWaterColumnEffectHandle;                           // 0x0328(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    InstigatorEffectHandle;                                  // 0x0330(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2HEY[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraShake* CameraShakeInstance;                                     // 0x0338(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TH3C[0x8];                                   // 0x0340(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCrossHairWidget* CrossHairWidget;                                         // 0x0348(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayEffectSpecHandle                           SlowDownEffectHandle;                                    // 0x0350(0x0010) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AJRM[0x20];                                  // 0x0360(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                LeftHandIKGripSocketName;                                // 0x0380(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        BigWaterGunOrnamentTag;                                  // 0x0388(0x0008) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PlayNearlyEndSound();
		void OnRep_InFire();
		void OnRep_HitOther();
		void OnMontageNotifyCallBack(const class FName& NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SpawnerInGuide
	 * Size -> 0x0050 (FullSize[0x0278] - InheritedSize[0x0228])
	 */
	class ASpawnerInGuide : public AActor
	{
	public:
		int32_t                                                    BotAISpawnerId;                                          // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BotAICharacterId;                                        // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TeamID;                                                  // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J2T7[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AIName;                                                  // 0x0238(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSpawnDeathBox;                                          // 0x0248(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSpawnBeginPlay;                                         // 0x0249(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TROY[0x2];                                   // 0x024A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelaySec;                                                // 0x024C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SpawnLocationOffset;                                     // 0x0250(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_60UQ[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* BotAIControllerClass;                                    // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4LHP[0x10];                                  // 0x0268(0x0010) MISSED OFFSET (PADDING)

	public:
		class ASolarBotAIController* SpawnBotAI();
		void SetBotAIConfig(class ASolarBotAIController* Ctrl);
		class ASolarBotAIController* GetSpawnedAIController();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BotAISpawnerInGuide
	 * Size -> 0x0040 (FullSize[0x02B8] - InheritedSize[0x0278])
	 */
	class ABotAISpawnerInGuide : public ASpawnerInGuide
	{
	public:
		class UBehaviorTree* BehaviorTree;                                            // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDeathBoxItemData>                           DeathBoxItems;                                           // 0x0280(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BotDefaultWeaponId;                                      // 0x0290(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   BotShootDisperse;                                        // 0x0294(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitRate;                                                 // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ActiveDamageRate;                                        // 0x029C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NoDamageLeftHP;                                          // 0x02A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BotAttackRange;                                          // 0x02A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MoveTarget;                                              // 0x02A8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AZVC[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BlackboardDelay
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class UBTDecorator_BlackboardDelay : public UBTDecorator_Blackboard
	{
	public:
		float                                                      DelaySeconds;                                            // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnlyDelayLowerPri;                                      // 0x00C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JICK[0x3];                                   // 0x00C5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_TickFlow
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UBTDecorator_TickFlow : public UBTDecorator_BlackboardBase
	{
	public:
		float                                                      TickInterval;                                            // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HHFI[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotAttributeCompare
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotAttributeCompare : public UBTDecorator_TickFlow
	{
	public:
		EBotAttrType                                               AttrType;                                                // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBotAttrValueType                                          ValueType;                                               // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBotAttrOperator                                           Operator;                                                // 0x009A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_30P1[0x1];                                   // 0x009B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CompareValue;                                            // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckVehicle;                                           // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MRQV[0x3];                                   // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EqualThreshold;                                          // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheck
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotCheck : public UBTDecorator_TickFlow
	{
	public:
		EBotCheckCondition                                         Condition;                                               // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OR5C[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckAIServer
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotCheckAIServer : public UBTDecorator_TickFlow
	{
	public:
		EBotCheckAIServer                                          Action;                                                  // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FHUM[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckGameplayTags
	 * Size -> 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotCheckGameplayTags : public UBTDecorator_TickFlow
	{
	public:
		struct FGameplayTagContainer                               AbilityTags;                                             // 0x0098(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckInEffectArea
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotCheckInEffectArea : public UBTDecorator_TickFlow
	{
	public:
		EPerceivableEffectAreaType                                 CheckInAreaType;                                         // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckAreaTendency;                                      // 0x0099(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPerceivableEffectAreaTendency                             AreaTendency;                                            // 0x009A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S8HN[0x5];                                   // 0x009B(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckNgaiMLAction
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotCheckNgaiMLAction : public UBTDecorator_TickFlow
	{
	public:
		EBotCheckNgaiMLAction                                      Action;                                                  // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KY59[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckRoleAbility
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UBTDecorator_BotCheckRoleAbility : public UBTDecorator
	{
	public:
		struct FGameplayTag                                        AbilityTag;                                              // 0x0068(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckShieldUpgradeItem
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTDecorator_BotCheckShieldUpgradeItem : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckState
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotCheckState : public UBTDecorator_TickFlow
	{
	public:
		EBotCheckState                                             CheckState;                                              // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_27BT[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckTeamMemberState
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotCheckTeamMemberState : public UBTDecorator_TickFlow
	{
	public:
		ESolarBotMemberState                                       CheckState;                                              // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VAMR[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotCheckWeaponType
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UBTDecorator_BotCheckWeaponType : public UBTDecorator_BlackboardBase
	{
	public:
		EWeaponType                                                WeaponType;                                              // 0x0090(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckById;                                              // 0x0091(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HS0J[0x2];                                   // 0x0092(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    weaponid;                                                // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotWasRecentlyDetectArea
	 * Size -> 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotWasRecentlyDetectArea : public UBTDecorator_TickFlow
	{
	public:
		float                                                      TimeThresholdMax;                                        // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeThresholdMin;                                        // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeThresholdMinDeviation;                               // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpecifyAreaType;                                        // 0x00A4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPerceivableEffectAreaType                                 SpecifiedAreaType;                                       // 0x00A5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpecifyAreaTendency;                                    // 0x00A6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPerceivableEffectAreaTendency                             SpecifiedAreaTendency;                                   // 0x00A7(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinInfluenceValue;                                       // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RJZK[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_BotWasRecentlyHit
	 * Size -> 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_BotWasRecentlyHit : public UBTDecorator_TickFlow
	{
	public:
		float                                                      TimeThresholdMax;                                        // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIncludeHearingHit;                                      // 0x009C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTriggerDelay;                                           // 0x009D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U4PT[0x2];                                   // 0x009E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerDelaySeconds;                                     // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TriggerDelaySecondsDeviation;                            // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TriggerExpiredSeconds;                                   // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7H6M[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_CheckGetOnPlayerVehicle
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UBTDecorator_CheckGetOnPlayerVehicle : public UBTDecorator_TickFlow
	{
	public:
		float                                                      AcceptableRadius;                                        // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M9E3[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_CheckTagState
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class UBTDecorator_CheckTagState : public UBTDecorator_Blackboard
	{
	public:
		struct FGameplayTag                                        CheckStateTag;                                           // 0x00C0(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_DistanceCompare
	 * Size -> 0x0090 (FullSize[0x0128] - InheritedSize[0x0098])
	 */
	class UBTDecorator_DistanceCompare : public UBTDecorator_TickFlow
	{
	public:
		EDistanceComparison                                        Operator;                                                // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QTX8[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              BlackboardKeyFrom;                                       // 0x00A0(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              BlackboardKeyTo;                                         // 0x00C8(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      DistanceToCompare;                                       // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C39Q[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              BBK_DistanceToCompare;                                   // 0x00F8(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       bDistance2D;                                             // 0x0120(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KEMK[0x3];                                   // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EqualThreshold;                                          // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_TimeLimitRand
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class UBTDecorator_TimeLimitRand : public UBTDecorator_TimeLimit
	{
	public:
		float                                                      RandDeviation;                                           // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G633[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BTDecorator_VehicleCheck
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class UBTDecorator_VehicleCheck : public UBTDecorator_TickFlow
	{
	public:
		TArray<int32_t>                                            VehicleIDs;                                              // 0x0098(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BuffEffectActorGroupVO
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UBuffEffectActorGroupVO : public UObject
	{
	public:
		unsigned char                                              UnknownData_6210[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FBuffEffectActorElemList>         InstantActorListMap;                                     // 0x0030(0x0050) Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HSNA[0x8];                                   // 0x0080(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, class UBuffEffectActorElem*>             DurationActorMap;                                        // 0x0088(0x0050) Transient, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BuffEffectVO
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UBuffEffectVO : public UObject
	{
	public:
		unsigned char                                              UnknownData_9MNJ[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BuffEffectActorVO
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class UBuffEffectActorVO : public UBuffEffectVO
	{
	public:
		unsigned char                                              UnknownData_AEXY[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BuffEffectActorElem
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UBuffEffectActorElem : public UObject
	{
	public:
		unsigned char                                              UnknownData_HPI6[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BuffEffectLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBuffEffectLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_StopScreenEffect(class UObject* WorldContextObject, int32_t InHandle);
		void STATIC_StopActorEffect(class UObject* WorldContextObject, int32_t InHandle);
		int32_t STATIC_StartScreenEffect(class UObject* WorldContextObject, const class FString& RowName);
		int32_t STATIC_StartActorEffect(class UObject* WorldContextObject, const class FString& RowName, class USceneComponent* AttachToComponent);
		TArray<class UParticleSystemComponent*> STATIC_GetActorEffectPSComponents(class UObject* WorldContextObject, int32_t InHandle);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BuffEffectScreenPanel
	 * Size -> 0x01B0 (FullSize[0x04F8] - InheritedSize[0x0348])
	 */
	class UBuffEffectScreenPanel : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_EA4H[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* LayerDurationGroup;                                      // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerDurationTwoSidePart;                                // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerDurationBottomHalfPart;                             // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerDurationBorderPart;                                 // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerDurationTopHalfPart;                                // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerDurationFullPart;                                   // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerInstantGroup;                                       // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerInstantTwoSidePart;                                 // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerInstantBottomHalfPart;                              // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerInstantBorderPart;                                  // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerInstantTopHalfPart;                                 // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LayerInstantFullPart;                                    // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_93MI[0xA0];                                  // 0x03B8(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, class USolarScreenEffectWidget*>             HandleToWidget;                                          // 0x0458(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TMap<class UClass*, struct FScreenEffectWidgetCacheInfo>   WidgetsCanBeReused;                                      // 0x04A8(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BuffEffectSubsystem
	 * Size -> 0x01F0 (FullSize[0x0220] - InheritedSize[0x0030])
	 */
	class UBuffEffectSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_8H4S[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<uint32_t, class UBuffEffectActorGroupVO*>             BuffEffectActorGroupMap;                                 // 0x0040(0x0050) Transient, NativeAccessSpecifierPrivate
		TMap<uint32_t, class UBuffEffectActorElem*>                BuffEffectActorElemMap;                                  // 0x0090(0x0050) Transient, NativeAccessSpecifierPrivate
		TMap<int32_t, class UBuffEffectActorVO*>                   BuffEffectActorHandleMap;                                // 0x00E0(0x0050) Transient, NativeAccessSpecifierPrivate
		TMap<EBuffEffectTagType, struct FScreenEffectGroup>        ScreenEffectGroups;                                      // 0x0130(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LL5D[0xA0];                                  // 0x0180(0x00A0) MISSED OFFSET (PADDING)

	public:
		void StopScreenEffect(int32_t InHandle);
		void StopActorEffect(int32_t InHandle);
		int32_t StartScreenEffectSafe(const class FName& RowName);
		int32_t StartScreenEffect(const class FString& RowName);
		int32_t StartActorEffectSafe(const class FName& RowName, class USceneComponent* AttachToComponent);
		int32_t StartActorEffect(const class FString& RowName, class USceneComponent* AttachToComponent);
		void OnPSCompFinish(class UParticleSystemComponent* PSComponent);
		TArray<class UParticleSystemComponent*> GetActorEffectPSComponents(int32_t InHandle);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CameraModifier_CameraShakeWithCurve
	 * Size -> 0x0070 (FullSize[0x00B8] - InheritedSize[0x0048])
	 */
	class UCameraModifier_CameraShakeWithCurve : public UCameraModifier
	{
	public:
		TMap<class UClass*, struct FCameraShakeWithCurvePool>      ShakePoolByClass;                                        // 0x0048(0x0050) NativeAccessSpecifierPrivate
		TArray<struct FCameraShakeWithCurveTemplatePool>           ShakePoolByTemplate;                                     // 0x0098(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FActiveCameraShakeWithCurve>                 ActiveShakes;                                            // 0x00A8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CameraShakeWithCurve
	 * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
	 */
	class UCameraShakeWithCurve : public UObject
	{
	public:
		bool                                                       bSingleInstance;                                         // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableObjectPool;                                      // 0x0029(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YQIS[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraModifier_CameraShakeWithCurve* Modifier;                                                // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ShakeTime;                                               // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Q1AP[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  ShakeCurve;                                              // 0x0040(0x0088) Edit, NativeAccessSpecifierPrivate
		TArray<class UCameraShakeWithCurve_Element*>               ShakeElements;                                           // 0x00C8(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U4ZH[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CameraShakeWithCurve_Element
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCameraShakeWithCurve_Element : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CameraShakeWithCurve_Location
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UCameraShakeWithCurve_Location : public UCameraShakeWithCurve_Element
	{
	public:
		struct FSymmetricRangeFloat                                XRange;                                                  // 0x0028(0x000C) Edit, NoDestructor, NativeAccessSpecifierPrivate
		struct FSymmetricRangeFloat                                YRange;                                                  // 0x0034(0x000C) Edit, NoDestructor, NativeAccessSpecifierPrivate
		struct FSymmetricRangeFloat                                ZRange;                                                  // 0x0040(0x000C) Edit, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       bLocalSpace;                                             // 0x004C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QGP8[0x13];                                  // 0x004D(0x0013) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CameraShakeWithCurve_Rotation
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UCameraShakeWithCurve_Rotation : public UCameraShakeWithCurve_Element
	{
	public:
		struct FSymmetricRangeFloat                                PitchRange;                                              // 0x0028(0x000C) Edit, NoDestructor, NativeAccessSpecifierPrivate
		struct FSymmetricRangeFloat                                YawRange;                                                // 0x0034(0x000C) Edit, NoDestructor, NativeAccessSpecifierPrivate
		struct FSymmetricRangeFloat                                RollRange;                                               // 0x0040(0x000C) Edit, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5FUP[0xC];                                   // 0x004C(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CameraShakeWithCurve_FOV
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UCameraShakeWithCurve_FOV : public UCameraShakeWithCurve_Element
	{
	public:
		struct FRangeFloat                                         FOVRange;                                                // 0x0028(0x0008) Edit, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DOWV[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CapsuleFormationData
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UCapsuleFormationData : public UDataAsset
	{
	public:
		TMap<unsigned char, struct FEchelonFormation>              TeamFormation;                                           // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FCruiseFormation                                    CruiseFormation;                                         // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		void OverrideTeamFormation(TMap<unsigned char, struct FEchelonFormation> InNewFormation);
		void ClearTeamFormationData();
		void ClearCruiseFormationData();
		void AddTeamFormationLocation(unsigned char InEchelon, const struct FVector& InLocation);
		void STATIC_AddLocationToTeamFormation(TMap<unsigned char, struct FEchelonFormation>* InFormation, unsigned char InEchelon, const struct FVector& InLocation);
		void AddEchelonFormation(unsigned char InEchelon, const struct FEchelonFormation& InFormation);
		void AddCruiseFormation(const struct FCruiseFormation& InFormation);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CardView
	 * Size -> 0x00F0 (FullSize[0x0228] - InheritedSize[0x0138])
	 */
	class UCardView : public UWidget
	{
	public:
		class UClass* EntryWidgetClass;                                        // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FUserWidgetPool                                     EntryWidgetPool;                                         // 0x0140(0x0080) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      CenterScale;                                             // 0x01C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CenterOffset;                                            // 0x01C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PageSpacing;                                             // 0x01C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AlignmentPercent;                                        // 0x01CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EOrientation                                               Orientation;                                             // 0x01D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NGOJ[0x7];                                   // 0x01D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     ListItems;                                               // 0x01D8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TWIG[0x10];                                  // 0x01E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             BP_OnItemClicked;                                        // 0x01F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             BP_OnSelectedItemChanged;                                // 0x0208(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             BP_OnSelectedIndexChanged;                               // 0x0218(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		void SetListItems(TArray<class UObject*> InListItems);
		void RemoveItem(class UObject* InItem);
		TArray<class UObject*> GetListItems();
		TArray<class UUserWidget*> GetDisplayedEntryWidgets();
		void ClearListItems();
		void BP_SetSelectedItem(class UObject* Item);
		void BP_SetSelectedIndex(int32_t Index, bool bFromFirst);
		void BP_SetListItems(TArray<class UObject*> InListItems);
		class UObject* BP_GetSelectedItem();
		int32_t BP_GetSelectedIndex();
		void AddItem(class UObject* InItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CardViewDesignerPreviewItem
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCardViewDesignerPreviewItem : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGCustomeBattleRoyaleComponent
	 * Size -> 0x0008 (FullSize[0x00D8] - InheritedSize[0x00D0])
	 */
	class UCGCustomeBattleRoyaleComponent : public UGameModeCompBase
	{
	public:
		unsigned char                                              UnknownData_X7CO[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void ChangeEnvironmentTime(class ASolarTimeLineManager* SolarTimeLineManager, int32_t DaylightChange);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGFormula
	 * Size -> 0x0030 (FullSize[0x0258] - InheritedSize[0x0228])
	 */
	class ACGFormula : public AInfo
	{
	public:
		struct FKnockoutParams                                     KnockoutParams;                                          // 0x0228(0x0028) NativeAccessSpecifierPublic
		bool                                                       bInitKnockParams;                                        // 0x0250(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BWAU[0x7];                                   // 0x0251(0x0007) MISSED OFFSET (PADDING)

	public:
		TArray<class FString> STATIC_MakeStringForLuaByAnyStruct(class UObject* AnyStruct);
		bool IsSettlementBagItem(class ASolarPlayerState* InPS);
		void InitKnockoutPointParams(struct FKnockoutParams* InParams);
		int32_t GetZomborg(class ASolarPlayerState* InPS);
		void GetWeeklyChallenge(const class FString& InSolarPlayerID, TArray<class FString>* OutChallengeName, TArray<int32_t>* OutChallengeValue);
		int32_t GetWeaponExp(class ASolarPlayerState* InPS, int32_t InWeaponID);
		void GetTeamScoreComparison(class ASolarPlayerState* InPS, class FString* OutTeamScore);
		void GetStrategyGuideConditions(class ASolarPlayerState* InPS, TArray<int32_t>* OutResult);
		void GetShowPageIndexs(class ASolarPlayerState* InPS, const struct FSettlePageParam& InParam, TArray<int32_t>* OutResult);
		TArray<struct FSettlementReward> GetSettlementRewards(class ASolarPlayerState* InPS);
		TArray<class FString> GetPersonalResultPlayerExData(const class FString& SolarPlayerID, class FString* InPBName);
		float GetKDA(class ASolarPlayerState* InPS);
		TArray<class FString> GetGroupResultPlayerExData(const class FString& SolarPlayerID, class FString* InPBName);
		TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(class ASolarPlayerState* InPS);
		int32_t GetCombatCore(class ASolarPlayerState* InPS);
		void GetCharacterExp(class ASolarPlayerState* InPS, int32_t* OutGetExp, TArray<int32_t>* OutReason);
		int32_t GetAccountExp(class ASolarPlayerState* InPS);
		int32_t CalculateTeamRank(class ASolarPlayerState* InPS);
		TArray<ESCMPlayerPunishType> CalculatePunish(class ASolarPlayerState* InPS);
		int32_t CalculatePlayerRank(class ASolarPlayerState* InPS);
		float CalculateMVPScore(class ASolarPlayerState* InPS);
		int32_t CalculateKnockoutPoints(int32_t InTeamRank, int32_t InKillNum, float InTotalDamage, float InTotalDamageTaken);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameModeAIComponent
	 * Size -> 0x0090 (FullSize[0x0160] - InheritedSize[0x00D0])
	 */
	class USolarGameModeAIComponent : public UGameModeCompBase
	{
	public:
		unsigned char                                              UnknownData_2H7W[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* BotAIControllerClass;                                    // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* OfflinePlayerAIControllerClass;                          // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarGameMode* GameModeOwner;                                           // 0x00F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableIrisAIStrategy;                                   // 0x00F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableMLSetting;                                        // 0x00F9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPreserveBotOnMatchStart;                                // 0x00FA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5794[0x5];                                   // 0x00FB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* BotTeamManagerClass;                                     // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* BotPreservedManagerClass;                                // 0x0108(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* BotWarmServiceSystemClass;                               // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* BotTimelineSystemClass;                                  // 0x0118(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxNumPreservedBots;                                     // 0x0120(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRatioPreservedBots;                                   // 0x0124(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CVXU[0x10];                                  // 0x0128(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarBotAITeamManager* BotTeamManager;                                          // 0x0138(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarPreservedBotManager* BotPreservedManager;                                     // 0x0140(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarBotAIWarmServiceSystem* BotWarmServiceSystem;                                    // 0x0148(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarBotTimelineSystem* BotTimelineSystem;                                       // 0x0150(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInitBotByTeamPreset;                                    // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanBotTeamRebirth;                                      // 0x0159(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanPlayerTeamRebirth;                                   // 0x015A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanBotTeamBuyRescue;                                    // 0x015B(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanPlayerTeamBuyRescue;                                 // 0x015C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K2AB[0x3];                                   // 0x015D(0x0003) MISSED OFFSET (PADDING)

	public:
		bool PreserveBot(class ASolarBotAIController* InBotController, const struct FVector& InPreservedLocation);
		bool PopPreservedBot(class ASolarBotAIController** OutController, const struct FVector& OutTeleportLocation, class ASolarBotAIController* InSpecificController);
		void OnAcquiredIrisAIFeedStrategy(TArray<struct FFeedBotStrategyInfo> StrategyInfos);
		void GetDeathBoxExtraStuff(class ASolarPlayerState* BotState, class ASolarPlayerState* PlayerState, TMap<int32_t, int32_t>* Stuff);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMAIComponent
	 * Size -> 0x0000 (FullSize[0x0160] - InheritedSize[0x0160])
	 */
	class UCGMAIComponent : public USolarGameModeAIComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMCrossLevelDataMgr
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UCGMCrossLevelDataMgr : public UObject
	{
	public:
		TMap<class FString, class UObject*>                        CrossLevelData;                                          // 0x0028(0x0050) NativeAccessSpecifierPrivate

	public:
		void RegistryCrossLevelData(const class FString& InSoltName, class UObject* InDataObj);
		class UObject* GetCrossLevelData(const class FString& InSoltName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CustomGameModeComponent
	 * Size -> 0x0000 (FullSize[0x00D0] - InheritedSize[0x00D0])
	 */
	class UCustomGameModeComponent : public UGameModeCompBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMDataComponent
	 * Size -> 0x0018 (FullSize[0x00E8] - InheritedSize[0x00D0])
	 */
	class UCGMDataComponent : public UCustomGameModeComponent
	{
	public:
		class AGameDataManager* DataManager;                                             // 0x00D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* DataTable;                                               // 0x00D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConfigRepDeltaTime;                                      // 0x00E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConfigRepMaxNum;                                         // 0x00E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMDeathComponent
	 * Size -> 0x0000 (FullSize[0x00D0] - InheritedSize[0x00D0])
	 */
	class UCGMDeathComponent : public UCustomGameModeComponent
	{
	public:
		void ReceivePlayerResurrect(class ASolarCharacter* ResurrectCharacter, class ASCMPlayerState* ResurrectPlayer);
		void ReceivePlayerKill(class ASCMPlayerState* Killer, class ASCMPlayerState* Killed, TArray<class ASCMPlayerState*> Assists, const struct FSolarPointDamageEvent& InDamageEvent, class AActor* InDamageCauser);
		void ReceivePlayerDeathVerge(class ASCMPlayerState* InAttacker, class ASCMPlayerState* InDeathVergePlayer, const struct FSolarPointDamageEvent& InDamageEvent, class AActor* InDamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameplayConfigBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UGameplayConfigBase : public UDataAsset
	{
	public:
		class UGameModeGlobalSetting* GameModeSettingTemplate;                                 // 0x0030(0x0008) Edit, BlueprintVisible, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMGameplayConfig
	 * Size -> 0x0240 (FullSize[0x0278] - InheritedSize[0x0038])
	 */
	class UCGMGameplayConfig : public UGameplayConfigBase
	{
	public:
		class UClass* Formula;                                                 // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USettlementPageConfig* SettlePageConfig;                                        // 0x0040(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, struct FSCMMapConfig>                  MapConfig;                                               // 0x0048(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FDataManagerConfig                                  DataManagerConfig;                                       // 0x0098(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FJobManagerConfig                                   JobConfig;                                               // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       EnableUltimateSkill;                                     // 0x00B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ERoleSkillOperation                                        UltimateSkillStateOperationOnInit;                       // 0x00B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableTacticalSkill;                                     // 0x00B2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ERoleSkillOperation                                        TacticalSkillStateOperationOnInit;                       // 0x00B3(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AirDropSkillMode;                                        // 0x00B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableWeaponUpgrade;                                     // 0x00B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I9OH[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InitInGamePlayerLevel;                                   // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnablePlayerUpgrade;                                     // 0x00C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z86R[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInGameLevelingConfig                               InGameLevelingConfig;                                    // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		TArray<ESolarTablesEnum_BattleUpgradeEffectType>           CharacterDamageUpgradeTypes;                             // 0x00D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FExpItemConfig                                      ExpItemConfig;                                           // 0x00E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FExpItemReduceRate                                  ExpItemReduceRateConfig;                                 // 0x00F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FBoxBurstItemConfig                                 BoxBurstItemConfig;                                      // 0x00F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bIfShouldSpawnDeathBox;                                  // 0x0100(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIfSupportDeathverge;                                    // 0x0101(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U5T4[0x6];                                   // 0x0102(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, int32_t>                                     DeathBoxEnergyLimitConfig;                               // 0x0108(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       bAutoMarkDamagedEnemy;                                   // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableSect;                                              // 0x0159(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_95DS[0x6];                                   // 0x015A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCustomRoomData                                     CustomRoomData;                                          // 0x0160(0x0078) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		bool                                                       bIsCustomRoomMode;                                       // 0x01D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableTracking;                                         // 0x01D9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3624[0x2];                                   // 0x01DA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InitTrackingDelay;                                       // 0x01DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TrackingTimeInterval;                                    // 0x01E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DefaultTrackMaxRevealDistance;                           // 0x01E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TrackReplaceDistance;                                    // 0x01E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinRevealDistance;                                       // 0x01EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TrackTimeout;                                            // 0x01F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxTrackNum;                                             // 0x01F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFinalsBGMData                                      FinalsBGMData;                                           // 0x01F8(0x0028) Edit, NativeAccessSpecifierPublic
		bool                                                       bEnableSkydivingTrail;                                   // 0x0220(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZHU6[0x7];                                   // 0x0221(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              FlyTrailClass[0x28];                                     // 0x0228(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DebugTrailEffectClass[0x28];                             // 0x0250(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		bool IsEnableSect();
		bool IsCustomRoomMode();
		int32_t GetRequiredExpForLevel(int32_t InLevel);
		int32_t GetMaxShieldMatCountToDeathbox(int32_t InLevel);
		int32_t GetMaxInGameLevel();
		float GetExpItemReduceRate(int32_t DeathCount);
		int32_t GetExpItemCountByLevel(int32_t InLevel, int32_t InLevelGap);
		struct FCustomRoomData GetCustomRoomData();
		TArray<int32_t> GetBurstItemSplitPiles(int32_t ItemID);
		TArray<float> GetBurstItemModelScale(int32_t ItemID);
		int32_t GetBurstItemMaxPileNum(int32_t ItemID);
		TArray<int32_t> GetBurstItemIDs();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMLogicComponent
	 * Size -> 0x0068 (FullSize[0x0138] - InheritedSize[0x00D0])
	 */
	class UCGMLogicComponent : public UCustomGameModeComponent
	{
	public:
		float                                                      TimeOutSeconds;                                          // 0x00D0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UPTW[0x64];                                  // 0x00D4(0x0064) MISSED OFFSET (PADDING)

	public:
		void ReceiveSpectatorJoinData(class ASCMPlayerState* Player);
		void ReceiveServerLevelLoaded(const class FString& LevelName);
		bool ReceivePlayerTeamPreJoinRequest(TArray<class ASCMPlayerState*> PreJoinPlayers, int32_t TeamID);
		bool ReceivePlayerReJoinRequest(const class FString& PlayerId, class FString* ErrorMsg);
		void ReceivePlayerReJoin(class ASCMPlayerState* NewPlayer);
		void ReceivePlayerPreLogin(const class FString& PlayerId, class ASCMPlayerState* OfflinePlayer, class FString* ErrorMsg);
		void ReceivePlayerNonSpectatorJoinData(class ASCMPlayerState* Player);
		void ReceivePlayerLevelLoaded(class ASCMPlayerController* Player, const class FString& LevelName);
		void ReceivePlayerJoinData(const class FString& PlayerId);
		void ReceivePlayerJoinBattle(class ASCMPlayerState* NewPlayer, bool IsAI);
		void ReceivePlayerJoin(class ASCMPlayerState* NewPlayer, bool IsAI);
		void ReceivePlayerCancelJoin(const class FString& PlayerId);
		void ReceivePlayerBattleEnd(class ASCMPlayerState* Player, ESCMPlayerOutType OutType);
		void ReceiveOBPlayersChanged();
		void ReceiveGameModeInit();
		void ReceiveBattleTick(float BattleTime, float DeltaTime);
		void ReceiveBattleEnd();
		void ReceiveBattleBegin();
		void OnStartBattle();
		void OnPlayerSettled(class ASCMPlayerState* Player);
		void OnPlayerReconnect(class ASCMPlayerState* Player);
		void OnPlayerOfflineTimeOut(class ASCMPlayerState* OfflineTimeoutPlayer);
		void OnPlayerGiveUp(class ASCMPlayerState* OfflineTimeoutPlayer);
		void OnPlayerDisconnect(class ASCMPlayerState* OfflinePlayer);
		void OnPlayerCheat(class ASCMPlayerState* CheatPlayer);
		void OnPlayerAbnormal(class ASCMPlayerState* CheatPlayer);
		void OnMatchEnd(int32_t RPCID);
		void OnDSClose();
		void OnBotAIDataReady(int32_t AICount);
		bool IsAllowReconnectGame(class ASCMPlayerState* InPC);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameplayConfigComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class USolarGameplayConfigComponent : public UActorComponent
	{
	public:
		bool                                                       EnableTestGameplayConfig;                                // 0x00B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BW2Q[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* CGMConfig;                                               // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* TestCGMConfig;                                           // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameplayConfigBase* InstGameplayConfig;                                      // 0x00C8(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameplayConfigBase* InstTestGameplayConfig;                                  // 0x00D0(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UGameplayConfigBase* GetConfigs();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMManagerConfigComponent
	 * Size -> 0x0000 (FullSize[0x00D8] - InheritedSize[0x00D8])
	 */
	class UCGMManagerConfigComponent : public USolarGameplayConfigComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMMapInfo
	 * Size -> 0x00B0 (FullSize[0x0180] - InheritedSize[0x00D0])
	 */
	class UCGMMapInfo : public UGameModeCompBase
	{
	public:
		TArray<struct FVector>                                     AreaPosArray;                                            // 0x00D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MapID;                                                   // 0x00E0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    UsedAirlineID;                                           // 0x00E4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAirlineData                                        UsedAirlineData;                                         // 0x00E8(0x0028) BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GO9W[0x10];                                  // 0x0110(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FAirlineData>                         AirlineDataList;                                         // 0x0120(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaskWidth;                                               // 0x0170(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaskScale;                                               // 0x0174(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MapWidth;                                                // 0x0178(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MapHeight;                                               // 0x017C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void LoadAirlineData();
		void InitInfo(int32_t InMapID);
		int32_t GetUsedAirlineData(struct FAirlineData* outData);
		int32_t STATIC_GetMapIDByName(class ASCustomGameState* InGameState, const class FString& Name);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CGMSettlementComponent
	 * Size -> 0x0028 (FullSize[0x00D8] - InheritedSize[0x00B0])
	 */
	class UCGMSettlementComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_M532[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USettlementPageConfig* PageConfig;                                              // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            PageIndexs;                                              // 0x00C0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsCustomRoom;                                            // 0x00D0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C3E2[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (PADDING)

	public:
		bool SkipToTarget();
		bool ShowNextStage();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_AddSynchronizedForce
	 * Size -> 0x0068 (FullSize[0x00E8] - InheritedSize[0x0080])
	 */
	class UChaAT_AddSynchronizedForce : public UAbilityTask
	{
	public:
		unsigned char                                              UnknownData_MG5S[0x68];                                  // 0x0080(0x0068) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_AltitudeQuery
	 * Size -> 0x00B0 (FullSize[0x0130] - InheritedSize[0x0080])
	 */
	class UChaAT_AltitudeQuery : public UAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnResponsed;                                             // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2P0A[0xA0];                                  // 0x0090(0x00A0) MISSED OFFSET (PADDING)

	public:
		class UChaAT_AltitudeQuery* STATIC_StartSphereAltitudeQuery(class UGameplayAbility* OwningAbility, float InAltitude, float Radius, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, bool bUsingAsyncQuery, bool bInTriggerOnce);
		class UChaAT_AltitudeQuery* STATIC_StartLineAltitudeQuery(class UGameplayAbility* OwningAbility, float InAltitude, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, bool bUsingAsyncQuery, bool bInTriggerOnce);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_HighAlert
	 * Size -> 0x00D0 (FullSize[0x0150] - InheritedSize[0x0080])
	 */
	class UChaAT_HighAlert : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnHighAlertDelegate;                                     // 0x0080(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OBC8[0xC0];                                  // 0x0090(0x00C0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_LimitCameraOnStickingOutOfVehicle
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class UChaAT_LimitCameraOnStickingOutOfVehicle : public USolarAbilityTask
	{
	public:
		unsigned char                                              UnknownData_E6J2[0x20];                                  // 0x0080(0x0020) MISSED OFFSET (PADDING)

	public:
		class UChaAT_LimitCameraOnStickingOutOfVehicle* STATIC_CreateTask(class UGameplayAbility* OwningAbility);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_ListenChaTakeDamage
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class UChaAT_ListenChaTakeDamage : public UAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnTakeDamageDelegate;                                    // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void OnCharacterTakeDamage(class ASolarCharacter* Character, const struct FSolarPointDamageEvent& DamageEvent, float HPDamage);
		class UChaAT_ListenChaTakeDamage* STATIC_CreateTask(class UGameplayAbility* OwningAbility);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_ListenScopeOpeningAction
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UChaAT_ListenScopeOpeningAction : public USolarAbilityTask
	{
	public:
		class UGameplayAbility* OwnerAbility;                                            // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* TaskCharacter;                                           // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5WBF[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		class UChaAT_ListenScopeOpeningAction* STATIC_CreateTask(class UGameplayAbility* OwningAbility, class ASolarCharacter* InCharacter, float MaxWaitTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_ListenSkydive
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class UChaAT_ListenSkydive : public USolarAbilityTask
	{
	public:
		unsigned char                                              UnknownData_8F8K[0x10];                                  // 0x0080(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnSkydiveStageChanged(class ASolarCharacter* InCharacter, ESkydiveStage InOldStage, ESkydiveStage InNewStage);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_PlayMontageAndWaitForNotify
	 * Size -> 0x0010 (FullSize[0x0118] - InheritedSize[0x0108])
	 */
	class UChaAT_PlayMontageAndWaitForNotify : public UAbilityTask_PlayMontageAndWait
	{
	public:
		class FScriptMulticastDelegate                             OnMontageNotify;                                         // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void OnMontageNotifyCallBack(const class FName& NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointPayload);
		class UChaAT_PlayMontageAndWaitForNotify* STATIC_CreateTask(class UGameplayAbility* OwningAbility, const class FName& TaskInstanceName, class UAnimMontage* InMontageToPlay, float InRate, const class FName& InStartSection, bool bInStopWhenAbilityEnds, float InAnimRootMotionTranslationScale);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_PlayMontageForMeshAndWaitForEvent
	 * Size -> 0x00D0 (FullSize[0x0150] - InheritedSize[0x0080])
	 */
	class UChaAT_PlayMontageForMeshAndWaitForEvent : public UAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnCompleted;                                             // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBlendOut;                                              // 0x0090(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInterrupted;                                           // 0x00A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCancelled;                                             // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EventReceived;                                           // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USkeletalMeshComponent* Mesh;                                                    // 0x00D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimMontage* MontageToPlay;                                           // 0x00D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTagContainer                               EventTags;                                               // 0x00E0(0x0020) NativeAccessSpecifierPrivate
		float                                                      Rate;                                                    // 0x0100(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                StartSection;                                            // 0x0104(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AnimRootMotionTranslationScale;                          // 0x010C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bStopWhenAbilityEnds;                                    // 0x0110(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bReplicateMontage;                                       // 0x0111(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CNGT[0x2];                                   // 0x0112(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverrideBlendOutTimeForCancelAbility;                    // 0x0114(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      OverrideBlendOutTimeForStopWhenEndAbility;               // 0x0118(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bInterruptedCalledBeforeBlendingOut;                     // 0x011C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BXGI[0x33];                                  // 0x011D(0x0033) MISSED OFFSET (PADDING)

	public:
		class UChaAT_PlayMontageForMeshAndWaitForEvent* STATIC_PlayMontageForMeshAndWaitForEvent(class UGameplayAbility* OwningAbility, const class FName& TaskInstanceName, class USkeletalMeshComponent* Mesh, class UAnimMontage* MontageToPlay, float Rate, const class FName& StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale, bool bReplicateMontage, float OverrideBlendOutTimeForCancelAbility, float OverrideBlendOutTimeForStopWhenEndAbility);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_SkywardDiveTask
	 * Size -> 0x0030 (FullSize[0x00B0] - InheritedSize[0x0080])
	 */
	class UChaAT_SkywardDiveTask : public USolarAbilityTask
	{
	public:
		unsigned char                                              UnknownData_842S[0x30];                                  // 0x0080(0x0030) MISSED OFFSET (PADDING)

	public:
		class UChaAT_SkywardDiveTask* STATIC_CreateTask(class UGameplayAbility* OwningAbility, const struct FVector& InLauncherLocation, int32_t InOccupyLaunchDeviceIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_UpdateSkydiveTrail
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class UChaAT_UpdateSkydiveTrail : public USolarAbilityTask
	{
	public:
		unsigned char                                              UnknownData_TGTA[0x8];                                   // 0x0080(0x0008) MISSED OFFSET (PADDING)

	public:
		class UChaAT_UpdateSkydiveTrail* STATIC_CreateTask(class UGameplayAbility* OwningAbility);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_UpdateZipline
	 * Size -> 0x0040 (FullSize[0x00C0] - InheritedSize[0x0080])
	 */
	class UChaAT_UpdateZipline : public USolarAbilityTask
	{
	public:
		unsigned char                                              UnknownData_BQVI[0x40];                                  // 0x0080(0x0040) MISSED OFFSET (PADDING)

	public:
		class UChaAT_UpdateZipline* STATIC_CreateTask(class UGameplayAbility* OwningAbility, const struct FVector& InStartLoc, const struct FVector& InEndLoc, float InSpeed, float InCheckDis);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitCharacterDeathEnd
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitCharacterDeathEnd : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnCharacterDeathEnd;                                     // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		class UChaAT_WaitCharacterDeathEnd* STATIC_CreateTask(class UGameplayAbility* OwningAbility);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitCharacterLaunchEnd
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitCharacterLaunchEnd : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnCharacterLaunchEnd;                                    // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8M9D[0xC];                                   // 0x0090(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MoveModeCheckDelayTime;                                  // 0x009C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class UChaAT_WaitCharacterLaunchEnd* STATIC_CreateTask(class UGameplayAbility* OwningAbility, float InWaitLaunchingTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitCharacterPostDeath
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitCharacterPostDeath : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnDestroyCharacterCorpse;                                // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N9P1[0x10];                                  // 0x0090(0x0010) MISSED OFFSET (PADDING)

	public:
		class UChaAT_WaitCharacterPostDeath* STATIC_CreateTask(class UGameplayAbility* OwningAbility, float InDestroyCorpseTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitCharacterSprintCancel
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitCharacterSprintCancel : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnCharacterSprintCancel;                                 // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		class UChaAT_WaitCharacterSprintCancel* STATIC_CreateTask(class UGameplayAbility* OwningAbility);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitControlRotationYawOutOfRange
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitControlRotationYawOutOfRange : public UAbilityTask
	{
	public:
		unsigned char                                              UnknownData_GE3L[0x20];                                  // 0x0080(0x0020) MISSED OFFSET (PADDING)

	public:
		class UChaAT_WaitControlRotationYawOutOfRange* STATIC_CreateTask(class UGameplayAbility* OwningAbility, float YawMin, float YawMax);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitDelay
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitDelay : public UAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnFinish;                                                // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J6ZY[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		class UChaAT_WaitDelay* STATIC_WaitDelay(class UGameplayAbility* OwningAbility, float Time);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitLandingSpot
	 * Size -> 0x0040 (FullSize[0x00C0] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitLandingSpot : public UAbilityTask
	{
	public:
		unsigned char                                              UnknownData_VY6D[0x40];                                  // 0x0080(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitOverlapEx
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitOverlapEx : public UAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnOverLap;                                               // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_05IN[0x10];                                  // 0x0090(0x0010) MISSED OFFSET (PADDING)

	public:
		class UChaAT_WaitOverlapEx* STATIC_WaitForOverlap(class UGameplayAbility* OwningAbility, TArray<class UClass*> InIgnoreClasses);
		void OnHitCallback(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaAT_WaitVehicleWeakPointRepairingEnd
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class UChaAT_WaitVehicleWeakPointRepairingEnd : public USolarAbilityTask
	{
	public:
		unsigned char                                              UnknownData_6E9J[0x8];                                   // 0x0080(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnVehicleWeakPointRepairingEnd;                          // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J6A1[0x8];                                   // 0x0098(0x0008) MISSED OFFSET (PADDING)

	public:
		class UChaAT_WaitVehicleWeakPointRepairingEnd* STATIC_CreateTask(class UGameplayAbility* OwningAbility, struct FVehicleWeakPointSpec* RepairingVehicleWeakPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameplayAbility
	 * Size -> 0x0018 (FullSize[0x0418] - InheritedSize[0x0400])
	 */
	class USolarGameplayAbility : public UGameplayAbility
	{
	public:
		bool                                                       bTryActivateWhenGranted;                                 // 0x0400(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESolarGAInputID                                            InputID;                                                 // 0x0401(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAllowReconnection;                                      // 0x0402(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bActiveOnPress;                                          // 0x0403(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6JVR[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAbilityMeshMontage>                         CurrentAbilityMeshMontages;                              // 0x0408(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void RemoveGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		void ReceivingGiven(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec);
		bool OnLevelUp(int32_t OldLevel, const struct FGameplayAbilitySpec& Spec);
		void MontageStopForMesh(class USkeletalMeshComponent* InMesh, float OverrideBlendOutTime);
		void MontageStopForAllMeshes(float OverrideBlendOutTime);
		void MontageSetNextSectionNameForMesh(class USkeletalMeshComponent* InMesh, const class FName& FromSectionName, const class FName& ToSectionName);
		void MontageJumpToSectionForMesh(class USkeletalMeshComponent* InMesh, const class FName& SectionName);
		int32_t GetDefaultGrantedLevel(class AActor* InOwner, class AActor* InAvatar);
		class UAnimMontage* GetCurrentMontageForMesh(class USkeletalMeshComponent* InMesh);
		void ExecuteGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		void AddGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ResidentPassiveSkill
	 * Size -> 0x0020 (FullSize[0x0438] - InheritedSize[0x0418])
	 */
	class UResidentPassiveSkill : public USolarGameplayAbility
	{
	public:
		TArray<class UClass*>                                      ResidentEffectClasses;                                   // 0x0418(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1ZT6[0x10];                                  // 0x0428(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_AerialReconnaissance
	 * Size -> 0x0000 (FullSize[0x0438] - InheritedSize[0x0438])
	 */
	class UChaGA_AerialReconnaissance : public UResidentPassiveSkill
	{
	public:
		void OnSkydiveStageChanged(class ASolarCharacter* InCharacter, ESkydiveStage InOldStage, ESkydiveStage InNewStage);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterGameplayAbility
	 * Size -> 0x0048 (FullSize[0x0460] - InheritedSize[0x0418])
	 */
	class USolarCharacterGameplayAbility : public USolarGameplayAbility
	{
	public:
		struct FGameplayTagContainer                               ActivationOwnedReplicatedTags;                           // 0x0418(0x0020) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSolarGameplayEffectConfig>                  ActivationOwnedReplicatedGameplayEffects;                // 0x0438(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5K6K[0x18];                                  // 0x0448(0x0018) MISSED OFFSET (PADDING)

	public:
		class ASolarCharacter* GetOwningCharacterFromActorInfo();
		class ASolarCharacter* GetAvatarSolarCharacterFromActorInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Aim
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_Aim : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* AimGameplayEffectClass;                                  // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_ThrowSkill
	 * Size -> 0x0060 (FullSize[0x04C0] - InheritedSize[0x0460])
	 */
	class UChaGA_ThrowSkill : public USolarCharacterGameplayAbility
	{
	public:
		ESkillAnimType                                             SkillAnimType;                                           // 0x0460(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESkillAnimRightHandType                                    SkillAnimRightHandType;                                  // 0x0461(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShouldWaitMontageNotifyToThrow;                         // 0x0462(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VRLB[0x1];                                   // 0x0463(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                MontageNotifyToWait;                                     // 0x0464(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanHoldWeapon;                                          // 0x046C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OL5P[0x3];                                   // 0x046D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ActiveMontageNotifyToReady;                              // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShouldWaitActiveMontageNotifyToPrepare;                 // 0x0478(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5N0R[0x3];                                   // 0x0479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ActiveMontageNotifyToPrepare;                            // 0x047C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShouldWaitActiveMontageNotifyToThrow;                   // 0x0484(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M8WR[0x3];                                   // 0x0485(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ActiveMontageNotifyToThrow;                              // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                MontageSectionToJumpOnInputReleased;                     // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAbilityTask_NetworkSyncPoint* WaitThrowTask;                                           // 0x0498(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* ActiveMontage;                                           // 0x04A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* FireMontage;                                             // 0x04A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* CancelMontage;                                           // 0x04B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HDUD[0x8];                                   // 0x04B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void WaitToThrow();
		void StartToThrow();
		void PrepareToThrow();
		void OnRceiveWaitToThrow();
		void OnMontageNotify(const class FName& NotifyName);
		void OnMontageCompleted();
		void OnFireMontageStartBlendingOut();
		void OnActiveMontageNotify(const class FName& NotifyName);
		void OnActiveMontageCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGA_Projectile
	 * Size -> 0x0128 (FullSize[0x05E8] - InheritedSize[0x04C0])
	 */
	class USolarSkillGA_Projectile : public UChaGA_ThrowSkill
	{
	public:
		struct FSolarSkillProjectileData                           ProjectileData;                                          // 0x04C0(0x00D0) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UClass* GATargetActorClass;                                      // 0x0590(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      SpawnActorClasses;                                       // 0x0598(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* GEToSelfClass;                                           // 0x05A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* GEToTargetClass;                                         // 0x05B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseKeyUpLocation;                                       // 0x05B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseKeyUpDirection;                                      // 0x05B9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_107O[0x6];                                   // 0x05BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilityTask_WaitTargetData* WaitTargetDataTask;                                      // 0x05C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      SpawnActors;                                             // 0x05C8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AGameplayAbilityTargetActor>          TargetActorCache;                                        // 0x05D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T2XZ[0x8];                                   // 0x05E0(0x0008) Fix size for supers

	public:
		void OnWaitTargetDataTaskValid(const struct FGameplayAbilityTargetDataHandle& InTargetData);
		void OnWaitTargetDataTaskCancelled(const struct FGameplayAbilityTargetDataHandle& InTargetData);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGA_Summon
	 * Size -> 0x0030 (FullSize[0x0618] - InheritedSize[0x05E8])
	 */
	class USolarSkillGA_Summon : public USolarSkillGA_Projectile
	{
	public:
		class USolarSummonDetectionConfig* SummonConfig;                                            // 0x05E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SummonFailedNoticeID;                                    // 0x05F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseKeyUpLocationSummon;                                 // 0x05F4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L3L0[0x3];                                   // 0x05F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarSkillGATA_Summon>               SummonTargetActor;                                       // 0x05F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* ActiveMontageForGunAim;                                  // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* FireMontageForGunAim;                                    // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* CancelMontageForGunAim;                                  // 0x0610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_AirDrop
	 * Size -> 0x0078 (FullSize[0x0690] - InheritedSize[0x0618])
	 */
	class UChaGA_AirDrop : public USolarSkillGA_Summon
	{
	public:
		class UClass* TreasureBoxSpawnerClass;                                 // 0x0618(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    OutcomeID;                                               // 0x0620(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AW64[0x4];                                   // 0x0624(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAirDropSkillDatas>                          AirDropSkillSetting;                                     // 0x0628(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ChestID;                                                 // 0x0638(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BoxType;                                                 // 0x063C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CastTime;                                                // 0x0640(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReadyTime;                                               // 0x0644(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        PrepareGameplayCue;                                      // 0x0648(0x0008) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        OpenAirDropMontageTag;                                   // 0x0650(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VE0L[0x8];                                   // 0x0658(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          SpawnTransform;                                          // 0x0660(0x0030) IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate

	public:
		void OnWaitCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_AntiexposureSuit
	 * Size -> 0x0008 (FullSize[0x0440] - InheritedSize[0x0438])
	 */
	class UChaGA_AntiexposureSuit : public UResidentPassiveSkill
	{
	public:
		struct FGameplayTag                                        ExecuteCueTag;                                           // 0x0438(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnTakeDamage(class ASolarCharacter* Character, const struct FSolarPointDamageEvent& DamageEvent, float HPDamage);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_AttributeInit
	 * Size -> 0x0010 (FullSize[0x0428] - InheritedSize[0x0418])
	 */
	class UChaGA_AttributeInit : public USolarGameplayAbility
	{
	public:
		TArray<class UClass*>                                      InitializationEffectClasses;                             // 0x0418(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterTalent
	 * Size -> 0x0008 (FullSize[0x0420] - InheritedSize[0x0418])
	 */
	class UCharacterTalent : public USolarGameplayAbility
	{
	public:
		class UClass* GrantedEffectClass;                                      // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		float GetTalentCooldownDuration(class AActor* InOwner, class AActor* InAvatar);
		float GetTalentActivationDuration(class AActor* InOwner, class AActor* InAvatar);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PermanentTalent
	 * Size -> 0x0020 (FullSize[0x0440] - InheritedSize[0x0420])
	 */
	class UPermanentTalent : public UCharacterTalent
	{
	public:
		TArray<class UClass*>                                      PermanentEffectClasses;                                  // 0x0420(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RYSU[0x10];                                  // 0x0430(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PermanentTalentOnVehicle
	 * Size -> 0x0018 (FullSize[0x0458] - InheritedSize[0x0440])
	 */
	class UPermanentTalentOnVehicle : public UPermanentTalent
	{
	public:
		TArray<int32_t>                                            ActivatedVehicleTypes;                                   // 0x0440(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        GetOffVehicleEventTag;                                   // 0x0450(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveGetOffVehicle(const struct FGameplayEventData& InPayload);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_AutoHealingOnVehicle
	 * Size -> 0x0010 (FullSize[0x0468] - InheritedSize[0x0458])
	 */
	class UChaGA_AutoHealingOnVehicle : public UPermanentTalentOnVehicle
	{
	public:
		class UClass* FullHealthSignEffect;                                    // 0x0458(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9YBJ[0x8];                                   // 0x0460(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReceiveCurrentHealthChange();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_BigRechargeShield
	 * Size -> 0x0028 (FullSize[0x0488] - InheritedSize[0x0460])
	 */
	class UChaGA_BigRechargeShield : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        RechargeShieldMontageTag;                                // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTagContainer                               ActivationRequiredTagsAny;                               // 0x0468(0x0020) Edit, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_BigWaterGun
	 * Size -> 0x0060 (FullSize[0x04C0] - InheritedSize[0x0460])
	 */
	class UChaGA_BigWaterGun : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* BigWaterGunClass;                                        // 0x0460(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ABigWaterGun* CacheBigWaterGun;                                        // 0x0468(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESkillAnimType                                             SkillAnimType;                                           // 0x0470(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E5AN[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage* PreAnimMontage;                                          // 0x0478(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* ExcuteAnimMontage;                                       // 0x0480(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* PostAnimMontage;                                         // 0x0488(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* StopAnimMontage;                                         // 0x0490(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LifeTime;                                                // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1EWO[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* SlowDownGameplayEffect;                                  // 0x04A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9JH4[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilityTask_NetworkSyncPoint* StopTask;                                                // 0x04B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GTOG[0x8];                                   // 0x04B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnStopPhase();
		void OnPrePhase();
		void OnPreMontageCompleted();
		void OnPostPhase();
		void OnPostMontageCompleted();
		void OnExecutePhase();
		void OnExecuteMontageCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Bolt
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_Bolt : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        BoltMontageTag;                                          // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_CancelSprint
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_CancelSprint : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* CancelSprintEffectClass;                                 // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_ChangeCurrentCDRemain
	 * Size -> 0x0048 (FullSize[0x0460] - InheritedSize[0x0418])
	 */
	class UChaGA_ChangeCurrentCDRemain : public USolarGameplayAbility
	{
	public:
		struct FGameplayTagContainer                               AbilityQueryTags;                                        // 0x0418(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EGameplayModOp                                             RemainTimeModifierOption;                                // 0x0438(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_87ZX[0x7];                                   // 0x0439(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FScalableFloat                                      RemainTimeModifierValue;                                 // 0x0440(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_ChangeTotalCD_WithDuration
	 * Size -> 0x0038 (FullSize[0x0450] - InheritedSize[0x0418])
	 */
	class UChaGA_ChangeTotalCD_WithDuration : public USolarGameplayAbility
	{
	public:
		struct FGameplayTagContainer                               AbilityQueryTags;                                        // 0x0418(0x0020) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass* CDModifierEffect;                                        // 0x0438(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsedForNextActivation;                                  // 0x0440(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EActiveEffectDurationChangeProxy                           ActiveEffectDurationChangeProxy;                         // 0x0441(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RTHJ[0xE];                                   // 0x0442(0x000E) MISSED OFFSET (PADDING)

	public:
		void OnModifierFinished(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void ModifierAppliedFailed(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_ChangeTotalCD_WithTimes
	 * Size -> 0x0008 (FullSize[0x0458] - InheritedSize[0x0450])
	 */
	class UChaGA_ChangeTotalCD_WithTimes : public UChaGA_ChangeTotalCD_WithDuration
	{
	public:
		int32_t                                                    CDTimes;                                                 // 0x0450(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W8F1[0x4];                                   // 0x0454(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnCooldownCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_CombatRegeneration
	 * Size -> 0x0038 (FullSize[0x0498] - InheritedSize[0x0460])
	 */
	class UChaGA_CombatRegeneration : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      ForecastInterval;                                        // 0x0460(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RegenerateInterval;                                      // 0x0464(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RegenerateCueTag;                                        // 0x0468(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W11T[0x28];                                  // 0x0470(0x0028) MISSED OFFSET (PADDING)

	public:
		void PreRegenerate();
		void OnTakeDamage(class ASolarCharacter* Character, const struct FSolarPointDamageEvent& DamageEvent, float HealtDamage);
		void OnRegenerate();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Crouch
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_Crouch : public USolarCharacterGameplayAbility
	{
	public:
		unsigned char                                              UnknownData_KZAU[0x8];                                   // 0x0460(0x0008) MISSED OFFSET (PADDING)

	public:
		bool ShouldCancelCrouch();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Cruise
	 * Size -> 0x0028 (FullSize[0x0488] - InheritedSize[0x0460])
	 */
	class UChaGA_Cruise : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* ParachuteZoneEnteredEffect;                              // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ParachuteActionName;                                     // 0x0468(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAbilityTask_WaitInputAction* WaitParachuteInputTask;                                  // 0x0470(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAbilityTask_NetworkSyncPoint* WaitToParachuteTask;                                     // 0x0478(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M1GY[0x8];                                   // 0x0480(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRequestedToParachute();
		void OnParachuteRequestSynced();
		void OnParachuteRequestRejected();
		void OnIntoParachuteZone(const struct FGameplayEventData& Payload);
		void OnForceParachuteEvent(const struct FGameplayEventData& Payload);
		void OnFinishCruise(const struct FGameplayEventData& Payload);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Dance
	 * Size -> 0x0050 (FullSize[0x04B0] - InheritedSize[0x0460])
	 */
	class UChaGA_Dance : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* LeadingDanceEffect;                                      // 0x0460(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        CancelActionNames;                                       // 0x0468(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FYNW[0x38];                                  // 0x0478(0x0038) MISSED OFFSET (PADDING)

	public:
		void OnRoleAbilityInputAction(int32_t AbilityIndex, bool bPress, bool bCanActive);
		void OnMoveModeChanged(EMovementMode NewMovementMode);
		void OnMontageCompleted();
		void OnMontageBlendOut();
		void OnMobileWeaponInputAction(EInputButton InButtonType);
		void OnHandleNotifyState(class USolarAnimInstance* AnimInstance, class USolarAnimNotifyState* Notify, int32_t* OutDenial);
		void OnHandleNotify(class USolarAnimInstance* AnimInstance, class USolarAnimNotify* Notify, int32_t* OutDenial);
		void OnCancelInput();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Death
	 * Size -> 0x0010 (FullSize[0x0470] - InheritedSize[0x0460])
	 */
	class UChaGA_Death : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      DestroyCorpseTime;                                       // 0x0460(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6MYQ[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* RemoveDebuffEffectClass;                                 // 0x0468(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void DestroyCharacterCorpse(class ASolarCharacter* Character);
		void DeathEnd(class ASolarCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_DeathVerge
	 * Size -> 0x0030 (FullSize[0x0490] - InheritedSize[0x0460])
	 */
	class UChaGA_DeathVerge : public USolarCharacterGameplayAbility
	{
	public:
		TArray<class UClass*>                                      DeathVergeHPEffects;                                     // 0x0460(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZC7N[0x10];                                  // 0x0470(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        DeathVergeMaxHPDataTag;                                  // 0x0480(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeToWait;                                              // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0QEI[0x4];                                   // 0x048C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnWaitDelayFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_DuckRolling
	 * Size -> 0x0030 (FullSize[0x0490] - InheritedSize[0x0460])
	 */
	class UChaGA_DuckRolling : public USolarCharacterGameplayAbility
	{
	public:
		ESkillAnimType                                             SkillAnimType;                                           // 0x0460(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0CTZ[0x7];                                   // 0x0461(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDuckRollingConfigDataAsset* ConfigDataAsset;                                         // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* SwitchToRollingMeshEffect;                               // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* Montage;                                                 // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q0X5[0x8];                                   // 0x0480(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilityTask_WaitDelay* WaitRollingMeshTask;                                     // 0x0488(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SyncToSwitchToRollingMesh();
		void SwitchToRollingMesh();
		void OnRollingEnd();
		void OnRollingCanceled();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_EnergyBubble
	 * Size -> 0x0058 (FullSize[0x04B8] - InheritedSize[0x0460])
	 */
	class UChaGA_EnergyBubble : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* EnergyShieldClass;                                       // 0x0460(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* GATargetActorClass;                                      // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* EmptyMontage;                                            // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* AimMontage;                                              // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartSocketName;                                         // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartEnergyBubbleNotify;                                 // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ReleaseEnergyBubbleNotify;                               // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarEnergyBubble* EnergyShieldActor;                                       // 0x0498(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4360[0x8];                                   // 0x04A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilityTask_WaitTargetData* WaitTargetDataTask;                                      // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class AGameplayAbilityTargetActor>          TargetActorCache;                                        // 0x04B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnWaitTargetDataTaskValid(const struct FGameplayAbilityTargetDataHandle& InTargetData);
		void OnMontageNotify(const class FName& NotifyName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Equip
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_Equip : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        EquipMontageTag;                                         // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SideResidentPassiveSkill
	 * Size -> 0x0020 (FullSize[0x0438] - InheritedSize[0x0418])
	 */
	class USideResidentPassiveSkill : public USolarGameplayAbility
	{
	public:
		class UClass* SignEffectClass;                                         // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U3DX[0x18];                                  // 0x0420(0x0018) MISSED OFFSET (PADDING)

	public:
		bool OnSidePassiveSkillEnded(struct FSideAttributeSet* InSideAttributeSet, class ASCMPlayerState* CurrentPlayer, bool bWasCancelled);
		bool OnSidePassiveSkillActivated(struct FSideAttributeSet* InSideAttributeSet, class ASCMPlayerState* CurrentPlayer);
		void OnSideLeaving(const struct FGameplayEventData& Payload);
		void OnSideJoining(const struct FGameplayEventData& Payload);
		void OnCharacterBeforeChange();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_FastTreatment
	 * Size -> 0x0010 (FullSize[0x0448] - InheritedSize[0x0438])
	 */
	class UChaGA_FastTreatment : public USideResidentPassiveSkill
	{
	public:
		float                                                      ModifierTreatmentValue;                                  // 0x0438(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ModifierShieldValue;                                     // 0x043C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ModifierBigShieldValue;                                  // 0x0440(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3YOL[0x4];                                   // 0x0444(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Fire
	 * Size -> 0x0010 (FullSize[0x0470] - InheritedSize[0x0460])
	 */
	class UChaGA_Fire : public USolarCharacterGameplayAbility
	{
	public:
		class ASolarCharacter* ActCharacter;                                            // 0x0460(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EOMQ[0x5];                                   // 0x0468(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPrintDebugString;                                       // 0x046D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0J43[0x2];                                   // 0x046E(0x0002) MISSED OFFSET (PADDING)

	public:
		void OnFireTaskEnd();
		void OnCtrlTaskEnd();
		void DoFireTask();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_GetOffVehicle
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_GetOffVehicle : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_GetOnVehicle
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_GetOnVehicle : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_HighAlert
	 * Size -> 0x0070 (FullSize[0x04A8] - InheritedSize[0x0438])
	 */
	class UChaGA_HighAlert : public UResidentPassiveSkill
	{
	public:
		bool                                                       bShowDebug;                                              // 0x0438(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KK6S[0x3];                                   // 0x0439(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HighAlertAngle;                                          // 0x043C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HighAlertRadiusMin;                                      // 0x0440(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HighAlertRadiusMax;                                      // 0x0444(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           HighAlertBoxExtent;                                      // 0x0448(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EAlertDirection, float>                               AlertCD;                                                 // 0x0450(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FGameplayCueTag                                     CueTag;                                                  // 0x04A0(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void OnHighAlert(EAlertDirection Direction);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_HitRecover
	 * Size -> 0x0058 (FullSize[0x04B8] - InheritedSize[0x0460])
	 */
	class UChaGA_HitRecover : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      Duration;                                                // 0x0460(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      KnockbackDuration;                                       // 0x0464(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EHitRecoverType, float>                               HitbackDistance;                                         // 0x0468(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		void OnBlock(const struct FGameplayAbilityTargetDataHandle& InTargetData);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_HitShield
	 * Size -> 0x0090 (FullSize[0x04C8] - InheritedSize[0x0438])
	 */
	class UChaGA_HitShield : public UResidentPassiveSkill
	{
	public:
		class UClass* HitShieldClass;                                          // 0x0438(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceToCharacter;                                     // 0x0440(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CoolDown;                                                // 0x0444(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAngleinZ;                                             // 0x0448(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2T2D[0x4];                                   // 0x044C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               BlockShieldSpawnTags;                                    // 0x0450(0x0020) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		unsigned char                                              TriggerDamageTypes[0x50];                                // 0x0470(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_GK7U[0x8];                                   // 0x04C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnHitShield(const struct FVector& Direction);
		void OnTakeDamage(class ASolarCharacter* Character, const struct FSolarPointDamageEvent& DamageEvent, float HPDamage);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Hoarder
	 * Size -> 0x0008 (FullSize[0x0440] - InheritedSize[0x0438])
	 */
	class UChaGA_Hoarder : public USideResidentPassiveSkill
	{
	public:
		float                                                      ModifierValue;                                           // 0x0438(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XUH6[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_HomeVault
	 * Size -> 0x0030 (FullSize[0x0490] - InheritedSize[0x0460])
	 */
	class UChaGA_HomeVault : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        ClimbWaterMontageTag;                                    // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        VaultCrossMontageTag;                                    // 0x0468(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WQVS[0x20];                                  // 0x0470(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnMontageCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_InitializationFromGameMode
	 * Size -> 0x0018 (FullSize[0x0478] - InheritedSize[0x0460])
	 */
	class UChaGA_InitializationFromGameMode : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* VJetCDOverrideEffect;                                    // 0x0460(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* HJetCDOverrideEffect;                                    // 0x0468(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        SettingOverrideTag;                                      // 0x0470(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Invincible
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_Invincible : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_JetFlyAction
	 * Size -> 0x0010 (FullSize[0x0470] - InheritedSize[0x0460])
	 */
	class UChaGA_JetFlyAction : public USolarCharacterGameplayAbility
	{
	public:
		bool                                                       bVerticalFly;                                            // 0x0460(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NUPZ[0x7];                                   // 0x0461(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* BoostEffect;                                             // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_JetFlyCharge
	 * Size -> 0x0058 (FullSize[0x04B8] - InheritedSize[0x0460])
	 */
	class UChaGA_JetFlyCharge : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* VerticalChargeEffect;                                    // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* TempVerticalChargeEffect;                                // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* OnceVChargeCompletedEffect;                              // 0x0470(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* HorizontalChargeEffect;                                  // 0x0478(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* TempHorizontalChargeEffect;                              // 0x0480(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* OnceHChargeCompletedEffect;                              // 0x0488(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        TempChargeDurationTag;                                   // 0x0490(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAbilityTask_WaitGameplayEffectRemoved* OnOnceVJetChargeFinished;                                // 0x0498(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAbilityTask_WaitGameplayEffectRemoved* OnOnceHJetChargeFinished;                                // 0x04A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1WPJ[0x10];                                  // 0x04A8(0x0010) MISSED OFFSET (PADDING)

	public:
		void StartVerticalJetChargeFailed(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void StartHorizontalJetChargeFailed(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void ReceiveVerticalJetTimesChanged();
		void ReceiveVerticalChargeCDChanged(float OldCD);
		void ReceiveHorizontalJetTimesChanged();
		void ReceiveHorizontalChargeCDChanged(float OldCD);
		void OnceVerticalJetChargeFinished(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void OnceHorizontalJetChargeFinished(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_JetSlowFalling
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_JetSlowFalling : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Jump
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_Jump : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_LaunchAction
	 * Size -> 0x0010 (FullSize[0x0470] - InheritedSize[0x0460])
	 */
	class UChaGA_LaunchAction : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      WaitingLaunchingTime;                                    // 0x0460(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        LaunchCueTag;                                            // 0x0464(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E4PH[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (PADDING)

	public:
		void EndLaunch();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_LostConnection
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_LostConnection : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_LowHPShieldRecAcc
	 * Size -> 0x0038 (FullSize[0x0458] - InheritedSize[0x0420])
	 */
	class UChaGA_LowHPShieldRecAcc : public UCharacterTalent
	{
	public:
		class UClass* AccelerationEffectClass;                                 // 0x0420(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FScalableFloat                                      LowHPThreshold;                                          // 0x0428(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2OZZ[0x10];                                  // 0x0448(0x0010) MISSED OFFSET (PADDING)

	public:
		void CheckHPThreshold();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_LowHPSpeedup
	 * Size -> 0x0038 (FullSize[0x0458] - InheritedSize[0x0420])
	 */
	class UChaGA_LowHPSpeedup : public UCharacterTalent
	{
	public:
		class UClass* SpeedupEffectClass;                                      // 0x0420(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FScalableFloat                                      LowHPThreshold;                                          // 0x0428(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EA3Y[0x10];                                  // 0x0448(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnSpeedUpFinished(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void OnCoolingDownFinished(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void EffectAppliedFailed(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void CheckHPThreshold();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_MassInvisibility
	 * Size -> 0x0048 (FullSize[0x04A8] - InheritedSize[0x0460])
	 */
	class UChaGA_MassInvisibility : public USolarCharacterGameplayAbility
	{
	public:
		class UAnimMontage* SkillMontage;                                            // 0x0460(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* SkillMontageWithWeapon;                                  // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartSkillMontageNotify;                                 // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        MassInvisibilityRangeCueTag;                             // 0x0478(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* MassInvisibilityTargetAbilityClass;                      // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MassInvisibilityRangeRadius;                             // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MassInvisibilityRangeHalfHeight;                         // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        OrnamentTag;                                             // 0x0490(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* OrnamentMontage;                                         // 0x0498(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3WS5[0x8];                                   // 0x04A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnMontageNotify(const class FName& NotifyName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_MassInvisibilityTarget
	 * Size -> 0x0028 (FullSize[0x0488] - InheritedSize[0x0460])
	 */
	class UChaGA_MassInvisibilityTarget : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayCueTag                                     MassInvisibilityCueTag;                                  // 0x0460(0x0008) Edit, NoDestructor, NativeAccessSpecifierPrivate
		class UClass* MassInvisibilityBuffEffectClass;                         // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* MassInvisibilityPrepareEffectClass;                      // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* MassInvisibilityEffectClass;                             // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GW6H[0x8];                                   // 0x0480(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnMassInvisibilityPrepareEffectRemoved(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void OnMassInvisibilityEffectRemoved(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Melee
	 * Size -> 0x0030 (FullSize[0x0490] - InheritedSize[0x0460])
	 */
	class UChaGA_Melee : public USolarCharacterGameplayAbility
	{
	public:
		TArray<struct FGameplayTag>                                CrouchMeleeMontageTags;                                  // 0x0460(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FGameplayTag>                                StandMeleeMontageTags;                                   // 0x0470(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MotionWarpingAngleTolerance;                             // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G84W[0xC];                                   // 0x0484(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnStopMelee(class UGameplayAbility* InActivatedAbility);
		void GetYawToleranceMinMax(const struct FRotator& CurrentControlRotation, const struct FRotator& TargetRotation, float* YawMin, float* YawMax);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_MissileSwarm
	 * Size -> 0x0208 (FullSize[0x07F0] - InheritedSize[0x05E8])
	 */
	class UChaGA_MissileSwarm : public USolarSkillGA_Projectile
	{
	public:
		struct FMissileSwarmSkillConfig                            SkillConfig;                                             // 0x05E8(0x01D8) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<struct FMissileSwarmSpawnParameter>                 MissileSwarmSpawnConfig;                                 // 0x07C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh* PreviewMeshTemplate;                                     // 0x07D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface* PreviewMaterial;                                         // 0x07D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DB9A[0x10];                                  // 0x07E0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_MultiRecoverShield
	 * Size -> 0x0020 (FullSize[0x0480] - InheritedSize[0x0460])
	 */
	class UChaGA_MultiRecoverShield : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* ActivationEffect;                                        // 0x0460(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* CustomCoolDownEffect;                                    // 0x0468(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K54B[0x10];                                  // 0x0470(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnCoolDownEffectStart();
		void OnCoolDownEffectFinish();
		void OnActivationEffect(const struct FGameplayEventData& Payload);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_NightComes
	 * Size -> 0x0038 (FullSize[0x0498] - InheritedSize[0x0460])
	 */
	class UChaGA_NightComes : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* NightComesBuffGameplayEffect;                            // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* NightComesActorClass;                                    // 0x0468(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* SkillMontage;                                            // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* SkillMontageWithWeapon;                                  // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartSkillMontageNotify;                                 // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             SpawnOffset;                                             // 0x0488(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0AAV[0x4];                                   // 0x0494(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnMontageNotify(const class FName& NotifyName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_OpenNewTreasureBox
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_OpenNewTreasureBox : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_OpenScope
	 * Size -> 0x0058 (FullSize[0x04B8] - InheritedSize[0x0460])
	 */
	class UChaGA_OpenScope : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTagRequirements                            OngoingTagRequirements;                                  // 0x0460(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      MaxEnteringScopeOpeningTime;                             // 0x04B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T08X[0x4];                                   // 0x04B4(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnOngoingTagRequirementsMetStatusChange(bool bMet);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_OpenTreasureBox
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_OpenTreasureBox : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        OpenTreasureBoxMontageTag;                               // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_ParkourMaster
	 * Size -> 0x0030 (FullSize[0x0490] - InheritedSize[0x0460])
	 */
	class UChaGA_ParkourMaster : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* VertEffect;                                              // 0x0460(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* HoriEffect;                                              // 0x0468(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HNF0[0x20];                                  // 0x0470(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnJetFlyActivated(class UGameplayAbility* InActivatedAbility);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_PickUp
	 * Size -> 0x0030 (FullSize[0x0490] - InheritedSize[0x0460])
	 */
	class UChaGA_PickUp : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        PickUpHighEmptyMontageTag;                               // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        PickUpLowEmptyMontageTag;                                // 0x0468(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        PickUpHighGunAimMontageTag;                              // 0x0470(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        PickUpLowGunAimMontageTag;                               // 0x0478(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UCK4[0x10];                                  // 0x0480(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnWeaponSlotReplace(int32_t InWeaponSlotID, class ASolarPlayerWeapon* InWeapon);
		void OnMontageCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_RadarScanning
	 * Size -> 0x0048 (FullSize[0x04A8] - InheritedSize[0x0460])
	 */
	class UChaGA_RadarScanning : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      SpawnRadarDelayTime;                                     // 0x0460(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      LifeTime;                                                // 0x0464(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      LifeTimeNoResult;                                        // 0x0468(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7YXE[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* RadarClass;                                              // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    SpawnRadarEventID;                                       // 0x0478(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      EffectRadius;                                            // 0x047C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        CueTag;                                                  // 0x0480(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarRadarBase* SpawnedRadar;                                            // 0x0488(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XYK6[0x18];                                  // 0x0490(0x0018) MISSED OFFSET (PADDING)

	public:
		void StartSpawnRadar();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_RapidBoost
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_RapidBoost : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* JetFlyCooldownEffectClass;                               // 0x0460(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Rebirth
	 * Size -> 0x0010 (FullSize[0x0470] - InheritedSize[0x0460])
	 */
	class UChaGA_Rebirth : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* RebirthHPEffect;                                         // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* ResetJetFlyTimesEffect;                                  // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_RechargeShield
	 * Size -> 0x0028 (FullSize[0x0488] - InheritedSize[0x0460])
	 */
	class UChaGA_RechargeShield : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        RechargeShieldMontageTag;                                // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTagContainer                               ActivationRequiredTagsAny;                               // 0x0468(0x0020) Edit, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Reload
	 * Size -> 0x0018 (FullSize[0x0478] - InheritedSize[0x0460])
	 */
	class UChaGA_Reload : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        ReloadMontageTag;                                        // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        ReloadWithBoltMontageTag;                                // 0x0468(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MRCY[0x8];                                   // 0x0470(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnWeaponReloadComplete();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_RepairVehicle
	 * Size -> 0x0010 (FullSize[0x0470] - InheritedSize[0x0460])
	 */
	class UChaGA_RepairVehicle : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        RepairVehicleWeakPointsMontageTag;                       // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8GJQ[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnVehicleWeakPointRepairingEnd(bool bCompleted);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Rescue
	 * Size -> 0x0020 (FullSize[0x0480] - InheritedSize[0x0460])
	 */
	class UChaGA_Rescue : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      SucceedBeforeSoundTime;                                  // 0x0460(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        TeamRescueMontageTag;                                    // 0x0464(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_A2EE[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UChaAT_WaitDelay* DelayTask;                                               // 0x0470(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        SucceedCueTag;                                           // 0x0478(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool ShouldCancelRescue();
		void OnRescueCompleted();
		void OnMontageCompleted();
		void BeforeRescueCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_ReviveTeammates
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_ReviveTeammates : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        ReviveTeammatesMontageTag;                               // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnReviveCompleted();
		void OnAbilityExec();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_ShopVIP
	 * Size -> 0x0008 (FullSize[0x0440] - InheritedSize[0x0438])
	 */
	class UChaGA_ShopVIP : public USideResidentPassiveSkill
	{
	public:
		float                                                      ModifierValue;                                           // 0x0438(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZPZ9[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_SkydiveFly
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UChaGA_SkydiveFly : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        SkydiveSoundCue;                                         // 0x0460(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnMovementModeChanged(EMovementMode NewMovementMode);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_SkydiveLand
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_SkydiveLand : public USolarCharacterGameplayAbility
	{
	public:
		void OnMovementModeChanged(EMovementMode NewMovementMode);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_SkywardDive
	 * Size -> 0x00B8 (FullSize[0x0518] - InheritedSize[0x0460])
	 */
	class UChaGA_SkywardDive : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        SkywardDivePrepareCueTag;                                // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SkywardDiveLaunchCueTag;                                 // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PrepareTimeConfig;                                       // 0x0470(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSkywardHeightConfig;                                  // 0x0474(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  LaunchSpeedCurveConfig;                                  // 0x0478(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASkywardDiveLauncher>                 SkywardDiveLauncher;                                     // 0x0500(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3AB4[0x8];                                   // 0x0508(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CancelActionName;                                        // 0x0510(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void RealLaunchCharacter();
		void K2_DoPrepareCue(class ASolarCharacter* Character, class ASkywardDiveLauncher* Launcher);
		void K2_DoLaunchCue(class ASolarCharacter* Character, class ASkywardDiveLauncher* Launcher);
		void DoPrepareCue();
		void DoLaunchCue();
		void CancelPrepareLaunch();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Sprint
	 * Size -> 0x0018 (FullSize[0x0478] - InheritedSize[0x0460])
	 */
	class UChaGA_Sprint : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* SprintEffectClass;                                       // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        CancelSprintEventTag;                                    // 0x0468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VM69[0x8];                                   // 0x0470(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSprintCancelled();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_StickOutOfVehicle
	 * Size -> 0x0028 (FullSize[0x0488] - InheritedSize[0x0460])
	 */
	class UChaGA_StickOutOfVehicle : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      OutShotTimerForPC;                                       // 0x0460(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QL16[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               BreakOutShotTags;                                        // 0x0468(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		void OnCancelByAdditionalCheck();
		bool CheckAdditionalCancel();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_SuperRadarScan
	 * Size -> 0x00C0 (FullSize[0x0520] - InheritedSize[0x0460])
	 */
	class UChaGA_SuperRadarScan : public USolarCharacterGameplayAbility
	{
	public:
		class ASolarCharacter* CacheCharacter;                                          // 0x0460(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpawnRadarSuccess;                                      // 0x0468(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpawnedRadar;                                           // 0x0469(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBackswingPlayed;                                        // 0x046A(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4JNT[0x1];                                   // 0x046B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             HitLocation;                                             // 0x046C(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        RadarOrnamentTag;                                        // 0x0478(0x0008) Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LifeTime;                                                // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PrecastTime;                                             // 0x0484(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      BackswingTime;                                           // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GXS2[0x4];                                   // 0x048C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* RadarScanningAbilityClass;                               // 0x0490(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimMontage* ScanAnimMontage;                                         // 0x0498(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        CueTag;                                                  // 0x04A0(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MoveRadius;                                              // 0x04A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      OverlookCameraHeight;                                    // 0x04AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      OverlookCameraPitch;                                     // 0x04B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CameraMoveScale;                                         // 0x04B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem* PreviewEffect;                                           // 0x04B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUseForceLOD;                                            // 0x04C0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XVS7[0x3];                                   // 0x04C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DefaultLOD;                                              // 0x04C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    OverLookLOD;                                             // 0x04C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CancelCD;                                                // 0x04CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8W61[0x38];                                  // 0x04D0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACameraActor* CacheOverlookCamera;                                     // 0x0508(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor* CacheViewTarget;                                         // 0x0510(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent* CacheEmitter;                                            // 0x0518(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void TryCreateRadarForAI();
		void TryCreateRadar(bool bSpawn, const struct FVector& InLoc);
		void StartBackswing();
		void PlaySound(const class FString& InSoundName);
		void OnTakeDamage(class ASolarCharacter* Character, const struct FSolarPointDamageEvent& DamageEvent, float HPDamage);
		void OnSpawnRadarSuccessfulHandle(const struct FGameplayTag& Tag, int32_t NewCount);
		void OnReceivdTryCreateRadar(bool bSpawn);
		void OnPrecastReady();
		void OnPostMontageCompleted();
		void OnCameraRight(float Value);
		void OnCameraForward(float Value);
		void OnBackswingReady();
		void K2_OnPrecastReady();
		void K2_OnBackswingStart(bool bSuccess);
		void K2_OnAbilityEnd(class ASolarCharacter* Character, bool bSuccess);
		void K2_OnAbilityActive(class ASolarCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Swap
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_Swap : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Swim
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_Swim : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_SwitchVehicleSeat
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_SwitchVehicleSeat : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_TacticalDodge
	 * Size -> 0x00A0 (FullSize[0x0500] - InheritedSize[0x0460])
	 */
	class UChaGA_TacticalDodge : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* DebuffPurifyEffectClass;                                 // 0x0460(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* DebuffImmunityEffectClass;                               // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTacticalDodgeDirectionConfig                       ForwardConfig;                                           // 0x0470(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTacticalDodgeDirectionConfig                       ForwardLeftConfig;                                       // 0x0480(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTacticalDodgeDirectionConfig                       ForwardRightConfig;                                      // 0x0490(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTacticalDodgeDirectionConfig                       LeftConfig;                                              // 0x04A0(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTacticalDodgeDirectionConfig                       RightConfig;                                             // 0x04B0(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTacticalDodgeDirectionConfig                       BackwardConfig;                                          // 0x04C0(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTacticalDodgeDirectionConfig                       BackwardLeftConfig;                                      // 0x04D0(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTacticalDodgeDirectionConfig                       BackwardRightConfig;                                     // 0x04E0(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UClass* BuffQuickReloadEffectClass;                              // 0x04F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1PJ4[0x8];                                   // 0x04F8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_TeamBoost
	 * Size -> 0x0070 (FullSize[0x04D0] - InheritedSize[0x0460])
	 */
	class UChaGA_TeamBoost : public USolarCharacterGameplayAbility
	{
	public:
		class UAnimMontage* SkillMontage;                                            // 0x0460(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* SkillMontageArmed;                                       // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        OrnamentTag;                                             // 0x0470(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* OrnamentMontage;                                         // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* OrnamentMontageArmed;                                    // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartSkillMontageNotify;                                 // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* DebuffPurifyEffectClass;                                 // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* DebuffImmunityEffectClass;                               // 0x0498(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* SelfBoostEffectClass;                                    // 0x04A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* TeammateBoostEffectClass;                                // 0x04A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* TeamBoostProjectileClass;                                // 0x04B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ProjectileSpawnRelativeLocation;                         // 0x04B8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SkillRangeRadius;                                        // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SkillRangeHalfHeight;                                    // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O8QU[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnMontageNotify(const class FName& NotifyName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_TrackingMaster
	 * Size -> 0x0018 (FullSize[0x0478] - InheritedSize[0x0460])
	 */
	class UChaGA_TrackingMaster : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* TrackingMasterEffect;                                    // 0x0460(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O6BP[0x10];                                  // 0x0468(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnCharacterBeforeChange();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Treat
	 * Size -> 0x0028 (FullSize[0x0488] - InheritedSize[0x0460])
	 */
	class UChaGA_Treat : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        TreatMontageTag;                                         // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTagContainer                               ActivationRequiredTagsAny;                               // 0x0468(0x0020) Edit, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_UAVRescue
	 * Size -> 0x0040 (FullSize[0x04A0] - InheritedSize[0x0460])
	 */
	class UChaGA_UAVRescue : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* RescueUAVClass;                                          // 0x0460(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LifeTime;                                                // 0x0468(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEffectTeammates;                                        // 0x046C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MXK6[0x3];                                   // 0x046D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage* SummoEmptyMontage;                                       // 0x0470(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* SummonAnimMontage;                                       // 0x0478(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SummonTime;                                              // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PermanentSpawnDelay;                                     // 0x0484(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SkillRange;                                              // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        CueTag;                                                  // 0x048C(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZDTS[0xC];                                   // 0x0494(0x000C) MISSED OFFSET (PADDING)

	public:
		void SummonUAV();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_UAVShield
	 * Size -> 0x0040 (FullSize[0x04A0] - InheritedSize[0x0460])
	 */
	class UChaGA_UAVShield : public USolarCharacterGameplayAbility
	{
	public:
		class UClass* ShieldUAVClass;                                          // 0x0460(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VKXU[0x10];                                  // 0x0468(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LifeTime;                                                // 0x0478(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEffectTeammates;                                        // 0x047C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MBQA[0x3];                                   // 0x047D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage* SummonAnimMontage;                                       // 0x0480(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* SummonAnimMontage_Aim;                                   // 0x0488(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SummonTime;                                              // 0x0490(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_COJB[0xC];                                   // 0x0494(0x000C) MISSED OFFSET (PADDING)

	public:
		void SummonUAV();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_UpgradeShield
	 * Size -> 0x0028 (FullSize[0x0488] - InheritedSize[0x0460])
	 */
	class UChaGA_UpgradeShield : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        UpgradeShieldMontageTag;                                 // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTagContainer                               ActivationRequiredTagsAny;                               // 0x0468(0x0020) Edit, NativeAccessSpecifierPrivate

	public:
		void OnMontageInterruptOrCanceled();
		void OnMontageCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_VaultBase
	 * Size -> 0x0038 (FullSize[0x0498] - InheritedSize[0x0460])
	 */
	class UChaGA_VaultBase : public USolarCharacterGameplayAbility
	{
	public:
		class AActor* ContactActor;                                            // 0x0460(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NQ15[0x30];                                  // 0x0468(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnServerConfirm();
		void OnMontageCompleted();
		void OnMontageBlendOut();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Vault
	 * Size -> 0x00D0 (FullSize[0x0568] - InheritedSize[0x0498])
	 */
	class UChaGA_Vault : public UChaGA_VaultBase
	{
	public:
		struct FGameplayTag                                        StepMontageTag;                                          // 0x0498(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Step_CrossMontageTag;                                    // 0x04A0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Step_SprintMontageTag;                                   // 0x04A8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Step_Sprint_CrossMontageTag;                             // 0x04B0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        VaultMontageTag;                                         // 0x04B8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Vault_CrossMontageTag;                                   // 0x04C0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Vault_SprintMontageTag;                                  // 0x04C8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Vault_Sprint_CrossMontageTag;                            // 0x04D0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        ClimbMontageTag;                                         // 0x04D8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Climb_CrossMontageTag;                                   // 0x04E0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Climb_SprintMontageTag;                                  // 0x04E8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Climb_Sprint_CrossMontageTag;                            // 0x04F0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        Climb_WaterMontageTag;                                   // 0x04F8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        HighClimbMontageTag;                                     // 0x0500(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        HighClimb_CrossMontageTag;                               // 0x0508(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        HighClimb_SprintMontageTag;                              // 0x0510(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        HighClimb_Sprint_CrossMontageTag;                        // 0x0518(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              PlayerCancelVaultEventName;                              // 0x0520(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              TeammateCancelVaultEventName;                            // 0x0530(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              EnemyCancelVaultEventName;                               // 0x0540(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H86Z[0x18];                                  // 0x0550(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnRootMotionModifierDeactivate(class ACharacter* Character, class URootMotionModifier* Modifier);
		void OnHandleNotify(class USolarAnimInstance* AnimInstance, class USolarAnimNotify* Notify, int32_t* OutDenial);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_VehicleFire
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_VehicleFire : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_VehicleForceJetFlyAction
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_VehicleForceJetFlyAction : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_VehicleReload
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class UChaGA_VehicleReload : public USolarCharacterGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_WallRun
	 * Size -> 0x0090 (FullSize[0x04F0] - InheritedSize[0x0460])
	 */
	class UChaGA_WallRun : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      WallRunCameraAngleTolerance;                             // 0x0460(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WallRunJumpReactionDelay;                                // 0x0464(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FootOffset;                                              // 0x0468(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WallRunBlendOut;                                         // 0x046C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SurfaceAngleLerpSpeed;                                   // 0x0470(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxStandAngle;                                           // 0x0474(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector2D                                           LandingForceMagnitude;                                   // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    MaxTriggerNumPerAirMove;                                 // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WallRunJumpHeight;                                       // 0x0484(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WallRunJumpDist;                                         // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WallRunFailedHeight;                                     // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WallRunFailedDist;                                       // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        WithWeaponFailedMontageTag;                              // 0x0494(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        EmptyHandFailedMontageTag;                               // 0x049C(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                CancelActionName;                                        // 0x04A4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                JumpActionName;                                          // 0x04AC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UADN[0x4];                                   // 0x04B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UChaAT_WaitLandingSpot* LandingTask;                                             // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EXN0[0x30];                                  // 0x04C0(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnTakeDamage(class ASolarCharacter* Character, const struct FSolarPointDamageEvent& DamageEvent, float HealtDamage);
		void OnSyncForceBlendOut();
		void OnServerConfirm();
		void OnRequestedToJump();
		void OnCancel();
		void OnAcceptWallRunJump();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_WallRunJump
	 * Size -> 0x0040 (FullSize[0x04A0] - InheritedSize[0x0460])
	 */
	class UChaGA_WallRunJump : public USolarCharacterGameplayAbility
	{
	public:
		float                                                      CameraRotLagSpeed;                                       // 0x0460(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        WithWeaponJumpMontageTag;                                // 0x0464(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        EmptyHandJumpMontageTag;                                 // 0x046C(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        WithWeaponFailedMontageTag;                              // 0x0474(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        EmptyHandFailedMontageTag;                               // 0x047C(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EBHX[0x1C];                                  // 0x0484(0x001C) MISSED OFFSET (PADDING)

	public:
		void OnMontageCompleted();
		void OnMontageBlendOut();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGA_Zipline
	 * Size -> 0x0020 (FullSize[0x0480] - InheritedSize[0x0460])
	 */
	class UChaGA_Zipline : public USolarCharacterGameplayAbility
	{
	public:
		class FName                                                CancelActionName;                                        // 0x0460(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AF5Q[0x18];                                  // 0x0468(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnCancelled();
		void OnArrived();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_CharacterActorCueBase
	 * Size -> 0x0018 (FullSize[0x02B0] - InheritedSize[0x0298])
	 */
	class AChaGC_CharacterActorCueBase : public AGameplayCueNotify_Actor
	{
	public:
		TArray<struct FCueContent>                                 CueContents;                                             // 0x0298(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2MXB[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (PADDING)

	public:
		bool WhileActiveInternal(class ASolarCharacter* Character, const struct FGameplayCueParameters& Parameters);
		bool OnRemoveInternal(class ASolarCharacter* NullableCharacter, const struct FGameplayCueParameters& Parameters);
		void OnLocalPlayerSpectateMeStatusChanged(class ASolarCharacter* Character, bool bIsSpectating);
		bool OnExecuteInternal(class ASolarCharacter* Character, const struct FGameplayCueParameters& Parameters);
		bool OnActiveInternal(class ASolarCharacter* Character, const struct FGameplayCueParameters& Parameters);
		bool ListenLocalPlayerSpectateMeStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_AerialReconnaissanc
	 * Size -> 0x0008 (FullSize[0x02B8] - InheritedSize[0x02B0])
	 */
	class AChaGC_AerialReconnaissanc : public AChaGC_CharacterActorCueBase
	{
	public:
		float                                                      TestDistance;                                            // 0x02B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LSSD[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_AirDrop
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class AChaGC_AirDrop : public AGameplayCueNotify_Actor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_HighAlert
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class AChaGC_HighAlert : public AChaGC_CharacterActorCueBase
	{
	public:
		bool                                                       bShowDebug;                                              // 0x02B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MGI2[0x3];                                   // 0x02B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DebugTextDuration;                                       // 0x02B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DebugDistance;                                           // 0x02B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HHPP[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_JetSlowFalling
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class UChaGC_JetSlowFalling : public UGameplayCueNotify_Static
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_SuperSkillActorCueBase
	 * Size -> 0x0008 (FullSize[0x02B8] - InheritedSize[0x02B0])
	 */
	class AChaGC_SuperSkillActorCueBase : public AChaGC_CharacterActorCueBase
	{
	public:
		struct FGameplayTag                                        SuperSkillGameplayEffectTag;                             // 0x02B0(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_MassInvisibility
	 * Size -> 0x00B0 (FullSize[0x0368] - InheritedSize[0x02B8])
	 */
	class AChaGC_MassInvisibility : public AChaGC_SuperSkillActorCueBase
	{
	public:
		class UClass* InvisibilityEffectClass;                                 // 0x02B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        InvisibilityOrnamentTag;                                 // 0x02C0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                BeginInvisibleCueEvent;                                  // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    SprintingStatusNotificationID;                           // 0x02D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    SprintingStatusTipShowInterval;                          // 0x02D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WarningOtherRange;                                       // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WarningOtherRangeOutThreshold;                           // 0x02DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PrepareWarningCueEventTriggerPoint;                      // 0x02E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                PrepareWarningCueEvent;                                  // 0x02E4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TimeBeforeEndToStartEndWarning;                          // 0x02EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                EndWarningMaterialParameterName;                         // 0x02F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      EndWarningRate;                                          // 0x02F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      EndWarningCueEventTriggerPoint;                          // 0x02FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                EndWarningCueEvent;                                      // 0x0300(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* CameraModifierClass;                                     // 0x0308(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        SkillBuffGameplayEffectTag;                              // 0x0310(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        SkillPreGameplayEffectTag;                               // 0x0318(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T2UO[0x48];                                  // 0x0320(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_ParkourAcceleration
	 * Size -> 0x0078 (FullSize[0x0310] - InheritedSize[0x0298])
	 */
	class AChaGC_ParkourAcceleration : public AGameplayCueNotify_Actor
	{
	public:
		class FName                                                FlushEffectID;                                           // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                TrailEffectID;                                           // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, struct FVector2D>                        TrailEmitterParameters;                                  // 0x02A8(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FGameplayTag                                        DurationTag;                                             // 0x02F8(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4H63[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_SkydiveFly
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class AChaGC_SkydiveFly : public AChaGC_CharacterActorCueBase
	{
	public:
		float                                                      MinBoostDuration;                                        // 0x02B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsBoost;                                                // 0x02B4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9PSX[0x13];                                  // 0x02B5(0x0013) MISSED OFFSET (PADDING)

	public:
		void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_SkydiveSound
	 * Size -> 0x0020 (FullSize[0x02B8] - InheritedSize[0x0298])
	 */
	class AChaGC_SkydiveSound : public AGameplayCueNotify_Actor
	{
	public:
		TArray<class FName>                                        StartSoundGroups;                                        // 0x0298(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        StopSoundGroups;                                         // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_SkywardDiveLaunch
	 * Size -> 0x0038 (FullSize[0x02D0] - InheritedSize[0x0298])
	 */
	class AChaGC_SkywardDiveLaunch : public AGameplayCueNotify_Actor
	{
	public:
		class UAnimMontage* CharacterSkywardMontage;                                 // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* LaunchDeviceRealLaunchParticle;                          // 0x02A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* CharacterSkywardLaunchParticle;                          // 0x02A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                CharacterLaunchParticleSocketName;                       // 0x02B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartRealLaunchLoopSoundGroupName;                       // 0x02B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StopRealLaunchLoopSoundGroupName;                        // 0x02C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* CacheSkywardExtraEffect;                                 // 0x02C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_SkywardDivePrepare
	 * Size -> 0x0058 (FullSize[0x02F0] - InheritedSize[0x0298])
	 */
	class AChaGC_SkywardDivePrepare : public AGameplayCueNotify_Actor
	{
	public:
		class UAnimMontage* CharacterPrepareMontage;                                 // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* PrepareBeamParticle;                                     // 0x02A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* PreparePackageParticle;                                  // 0x02A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        PreparePackageSocketNames;                               // 0x02B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartPrepareLaunchSoundGroupName;                        // 0x02C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StopPrepareLaunchSoundGroupName;                         // 0x02C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* PrepareBeamEffect;                                       // 0x02D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    PreparePackageEffect;                                    // 0x02D8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SD7T[0x8];                                   // 0x02E8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_SwitchToDuckRollingMesh
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class AChaGC_SwitchToDuckRollingMesh : public AChaGC_CharacterActorCueBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChaGC_WallRun
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class UChaGC_WallRun : public UGameplayCueNotify_Static
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterBasalAttributeSet
	 * Size -> 0x0300 (FullSize[0x0350] - InheritedSize[0x0050])
	 */
	class UCharacterBasalAttributeSet : public UBasalAttributeSet
	{
	public:
		struct FGameplayAttributeData                              Speed;                                                   // 0x0050(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              BaseSpeed;                                               // 0x0060(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              PassiveSkillSpeedMultiple;                               // 0x0070(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ShootingSpeedMultiple;                                   // 0x0080(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CustomJumpHeightMultiple;                                // 0x0090(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              AllSpeedParamA;                                          // 0x00A0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              AllSpeedParamB;                                          // 0x00B0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              AllSpeedParamC;                                          // 0x00C0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              AllSpeedParamD;                                          // 0x00D0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              GroundSpeedParamA;                                       // 0x00E0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              GroundSpeedParamB;                                       // 0x00F0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              GroundSpeedParamC;                                       // 0x0100(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              GroundSpeedParamD;                                       // 0x0110(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SwimSpeedParamA;                                         // 0x0120(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SwimSpeedParamB;                                         // 0x0130(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SwimSpeedParamC;                                         // 0x0140(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SwimSpeedParamD;                                         // 0x0150(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              MaxShield;                                               // 0x0160(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CurrentShield;                                           // 0x0170(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ShieldMultiRecoverCoeff;                                 // 0x0180(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ShieldReductionDamageMultiple;                           // 0x0190(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              RadialDamageReductionMultiple;                           // 0x01A0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              AllDamageReductionMultiple;                              // 0x01B0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              WeaponDamageParamA;                                      // 0x01C0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              WeaponDamageParamB;                                      // 0x01D0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              WeaponDamageParamC;                                      // 0x01E0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              WeaponDamageParamD;                                      // 0x01F0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              UnarmedWeaponDamageParamB;                               // 0x0200(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              VehicleWeaponDamageParamB;                               // 0x0210(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              VehicleHitDamageParamB;                                  // 0x0220(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              VehicleAbilityDamageParamB;                              // 0x0230(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CharacterSkillDamageParamB;                              // 0x0240(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              VerticalJetTimesCD;                                      // 0x0250(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              VerticalJetInnerCD;                                      // 0x0260(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              VerticalJetTimes;                                        // 0x0270(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              VerticalJetRestTimes;                                    // 0x0280(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              HorizontalJetTimesCD;                                    // 0x0290(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              HorizontalJetInnerCD;                                    // 0x02A0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              HorizontalJetTimes;                                      // 0x02B0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              HorizontalJetRestTimes;                                  // 0x02C0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              RescueRecoveredMultiple;                                 // 0x02D0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              TreatmentDurationReductionMultiple;                      // 0x02E0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ShieldRecoveredMultiple;                                 // 0x02F0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ChargingMultiple;                                        // 0x0300(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              AutoHealingRateOnMotorbike;                              // 0x0310(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              RescueDurationReductionMultiple;                         // 0x0320(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ReviveDurationReductionBonus;                            // 0x0330(0x0010) BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              QuickReloadOverrideTime;                                 // 0x0340(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		void OnRep_VerticalJetTimesCD(const struct FGameplayAttributeData& Previous);
		void OnRep_VerticalJetTimes(const struct FGameplayAttributeData& Previous);
		void OnRep_VerticalJetRestTimes(const struct FGameplayAttributeData& Previous);
		void OnRep_VerticalJetInnerCD(const struct FGameplayAttributeData& Previous);
		void OnRep_TreatmentDurationReductionMultiple(const struct FGameplayAttributeData& OldValue);
		void OnRep_Speed(const struct FGameplayAttributeData& OldValue);
		void OnRep_ShieldMultiRecoverCoeff(const struct FGameplayAttributeData& OldValue);
		void OnRep_RescueDurationReductionMultiple(const struct FGameplayAttributeData& OldValue);
		void OnRep_MaxShield(const struct FGameplayAttributeData& OldValue);
		void OnRep_HorizontalJetTimesCD(const struct FGameplayAttributeData& Previous);
		void OnRep_HorizontalJetTimes(const struct FGameplayAttributeData& Previous);
		void OnRep_HorizontalJetRestTimes(const struct FGameplayAttributeData& Previous);
		void OnRep_HorizontalJetInnerCD(const struct FGameplayAttributeData& Previous);
		void OnRep_CurrentShield(const struct FGameplayAttributeData& OldValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterBodyScaleConfigDataAsset
	 * Size -> 0x0178 (FullSize[0x01A8] - InheritedSize[0x0030])
	 */
	class UCharacterBodyScaleConfigDataAsset : public UDataAsset
	{
	public:
		TMap<ECharacterBodyScaleType, struct FCharacterBodyScaleConfig> ConfigMap;                                               // 0x0030(0x0050) Edit, NativeAccessSpecifierPublic
		struct FCharacterAssistAimTargetConfig                     DefaultAssistAimTargetConfig;                            // 0x0080(0x00D8) Edit, NativeAccessSpecifierPublic
		TMap<ECharacterBodyScaleType, struct FCharacterAssistAimTargetConfig> AssistAimTargetConfigMap;                                // 0x0158(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterConfigAsset
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UCharacterConfigAsset : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterCruiseComponent
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UCharacterCruiseComponent : public UActorComponent
	{
	public:
		class ASolarCapsuleActor* BoardedCapsulePrivate;                                   // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FGH8[0xC];                                   // 0x00B8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CruiseStartSoundGroupName;                               // 0x00C4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IHF8[0x3C];                                  // 0x00CC(0x003C) MISSED OFFSET (PADDING)

	public:
		class ASolarCharacter* GetCharacterOwner();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterGameplayTagsConfig
	 * Size -> 0x0620 (FullSize[0x0650] - InheritedSize[0x0030])
	 */
	class UCharacterGameplayTagsConfig : public UDataAsset
	{
	public:
		struct FGameplayTag                                        CruiseAbilityTag;                                        // 0x0030(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SkydiveFlyAbilityTag;                                    // 0x0038(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SkydiveLandAbilityTag;                                   // 0x0040(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        CrouchAbilityTag;                                        // 0x0048(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        JumpAbilityTag;                                          // 0x0050(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SprintAbilityTag;                                        // 0x0058(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SwimAbilityTag;                                          // 0x0060(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VaultAbilityTag;                                         // 0x0068(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        JetFlyAbilityTag;                                        // 0x0070(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        JetFlyVertAbilityTag;                                    // 0x0078(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        JetFlyHoriAbilityTag;                                    // 0x0080(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        LaunchAbilityTag;                                        // 0x0088(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        JetSlowFallingAbilityTag;                                // 0x0090(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        EquipAbilityTag;                                         // 0x0098(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MeleeAbilityTag;                                         // 0x00A0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FireAbilityTag;                                          // 0x00A8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ReloadAbilityTag;                                        // 0x00B0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VehicleFireAbilityTag;                                   // 0x00B8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VehicleReloadAbilityTag;                                 // 0x00C0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        BoltAbilityTag;                                          // 0x00C8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        OpenScopeAbilityTag;                                     // 0x00D0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WeaponAbilityTag;                                        // 0x00D8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        GetOnVehicleAbilityTag;                                  // 0x00E0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        GetOffVehicleAbilityTag;                                 // 0x00E8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SwitchVehicleSeatAbilityTag;                             // 0x00F0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        StickOutOffVehicleAbilityTag;                            // 0x00F8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TreatAbilityTag;                                         // 0x0100(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RechargeShieldAbilityTag;                                // 0x0108(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        BigRechargeShieldAbilityTag;                             // 0x0110(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        UpgradeShieldAbilityTag;                                 // 0x0118(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        OpenTreasureBoxAbilityTag;                               // 0x0120(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        OpenNewTreasureBoxAbilityTag;                            // 0x0128(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RepairVehicleAbilityTag;                                 // 0x0130(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RescueAbilityTag;                                        // 0x0138(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        PickUpAbilityTag;                                        // 0x0140(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        AutoPickUpAbilityTag;                                    // 0x0148(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ResurrectTeammateAbilityTag;                             // 0x0150(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DeathVergeAbilityTag;                                    // 0x0158(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DeathAbilityTag;                                         // 0x0160(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RebirthAbilityTag;                                       // 0x0168(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ParkourMasterEffectTag;                                  // 0x0170(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HawkEyeEffectTag;                                        // 0x0178(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MassInvisibilityEffectTag;                               // 0x0180(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MassInvisibilityExEffectTag;                             // 0x0188(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RapidBoostEffectTag;                                     // 0x0190(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MainContinousTag;                                        // 0x0198(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SubContinousTag;                                         // 0x01A0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HasPreBuffTag;                                           // 0x01A8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DurationPauseTag;                                        // 0x01B0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SuperSkillEffectTag;                                     // 0x01B8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TacticleSkillEffectTag;                                  // 0x01C0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SkydiveSoundTag;                                         // 0x01C8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WallRunCueTag;                                           // 0x01D0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        CruisingStatusTag;                                       // 0x01D8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WalkingStatusTag;                                        // 0x01E0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FallingStatusTag;                                        // 0x01E8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FlyingStatusTag;                                         // 0x01F0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SwimmingStatusTag;                                       // 0x01F8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SkydivingStatusTag;                                      // 0x0200(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VaultingStatusTag;                                       // 0x0208(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VaultingAcceptCancelTag;                                 // 0x0210(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VaultingAcceptWeaponInputTag;                            // 0x0218(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WallRunStatusTag;                                        // 0x0220(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WallRunAttemptVaultTag;                                  // 0x0228(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        LaunchStatusTag;                                         // 0x0230(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RunningStatusTag;                                        // 0x0238(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SprintingStatusTag;                                      // 0x0240(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        StationaryStatusTag;                                     // 0x0248(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FollowViewRotationStatusTag;                             // 0x0250(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RotationFollowVelocityStatusTag;                         // 0x0258(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        CollisionIgnorePawnChannelStatusTag;                     // 0x0260(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WeaponStatusTag;                                         // 0x0268(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MeleeAttackingStatusTag;                                 // 0x0270(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FullBodyMeleeStatusTag;                                  // 0x0278(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FiringStatusTag;                                         // 0x0280(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VehicleFiringStatusTag;                                  // 0x0288(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HiddenFireStatusTag;                                     // 0x0290(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        BoltingStatusTag;                                        // 0x0298(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ReloadingStatusTag;                                      // 0x02A0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ScopeOpeningStatusTag;                                   // 0x02A8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        EnteringScopeOpeningStatusTag;                           // 0x02B0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        QuickReloadStatusTag;                                    // 0x02B8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FunctionalityStatusTag;                                  // 0x02C0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        OpeningTreasureBoxStatusTag;                             // 0x02C8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RechargingShieldStatusTag;                               // 0x02D0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RescuingStatusTag;                                       // 0x02D8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TreatingStatusTag;                                       // 0x02E0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ReviveTeammateStatusTag;                                 // 0x02E8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InVehicleTag;                                            // 0x02F0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DanceStatusTag;                                          // 0x02F8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DanceLeaderStatusTag;                                    // 0x0300(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        UsingContinuousSkill;                                    // 0x0308(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HoldingSkill;                                            // 0x0310(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        AutoCancelOnInputReleased;                               // 0x0318(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MassInvisibilityStatusTag;                               // 0x0320(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MassInvisibilityPrepareStatusTag;                        // 0x0328(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SuperRadarChooseStatusTag;                               // 0x0330(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RadarScanningStatusTag;                                  // 0x0338(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        EMPStatusTag;                                            // 0x0340(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FreezeStatusTag;                                         // 0x0348(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        PerspectiveByRadarStatusTag;                             // 0x0350(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitDebuffStatusTag;                                  // 0x0358(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        CanScoutEnemyTag;                                        // 0x0360(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DuckRollingStatusTag;                                    // 0x0368(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DeathVergeStatusTag;                                     // 0x0370(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DeathStatusTag;                                          // 0x0378(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InvincibleStatusTag;                                     // 0x0380(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitOpenScopeStatusTag;                               // 0x0388(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitWeaponInputStatusTag;                             // 0x0390(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitWeaponFireInputStatusTag;                         // 0x0398(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitMoveStatusTag;                                    // 0x03A0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitMoveCombinationStatusTag;                         // 0x03A8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitUnCrouchStatusTag;                                // 0x03B0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitSprintStatusTag;                                  // 0x03B8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitAimOffsetStatusTag;                               // 0x03C0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitLeftHandWeaponAttachTag;                          // 0x03C8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitLeftHandWeaponAttachAnimNotifyTag;                // 0x03D0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitInteractionOption;                                // 0x03D8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitContinuousTreatStatusTag;                         // 0x03E0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitFireStatusTag;                                    // 0x03E8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitDamageReactionTag;                                // 0x03F0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitJetSlowFallingTag;                                // 0x03F8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InhibitBlackHoleEffectStatusTag;                         // 0x0400(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VJetChargingStatusTag;                                   // 0x0408(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HJetChargingStatusTag;                                   // 0x0410(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        GenericTalentActivationStatusTag;                        // 0x0418(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TrackingMasterStatusTag;                                 // 0x0420(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ShieldMultiRecoverTag;                                   // 0x0428(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ShieldMultiRecoverOnGoingTag;                            // 0x0430(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        AerialReconnaissanceTagTag;                              // 0x0438(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        OpenAirDropTag;                                          // 0x0440(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ResurrectTeammateTag;                                    // 0x0448(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ReviveTeammateTag;                                       // 0x0450(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ReviveSelfTag;                                           // 0x0458(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HasRotationInputStatusTag;                               // 0x0460(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InSmokeStatusTag;                                        // 0x0468(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        InBattleTag;                                             // 0x0470(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        StartCruiseEventTag;                                     // 0x0478(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        IntoParachuteZoneEventTag;                               // 0x0480(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ForceParachuteEventTag;                                  // 0x0488(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FinishCruiseEventTag;                                    // 0x0490(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        CrouchEventTag;                                          // 0x0498(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        LaunchEventTag;                                          // 0x04A0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VaultEventTag;                                           // 0x04A8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        StepEventTag;                                            // 0x04B0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WallRunEventTag;                                         // 0x04B8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WallRunJumpEventTag;                                     // 0x04C0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HitRecoverEventTag;                                      // 0x04C8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MeleeAttackEventTag;                                     // 0x04D0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        FireEventTag;                                            // 0x04D8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        BoltEventTag;                                            // 0x04E0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        EquipEventTag;                                           // 0x04E8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SwapEventTag;                                            // 0x04F0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ReloadEventTag;                                          // 0x04F8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VehicleReloadEventTag;                                   // 0x0500(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VehicleFireEventTag;                                     // 0x0508(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        PickUpEventTag;                                          // 0x0510(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        AutoPickUpEventTag;                                      // 0x0518(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RepairVehicleEventTag;                                   // 0x0520(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DanceEventTag;                                           // 0x0528(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SpawnRadarEventTag;                                      // 0x0530(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DyingEventTag;                                           // 0x0538(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        KillOrAssistEventTag;                                    // 0x0540(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        GottenOnVehicleEventTag;                                 // 0x0548(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        GottenOffVehicleEventTag;                                // 0x0550(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VehicleForJetEventTag;                                   // 0x0558(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SideLeavingEventTag;                                     // 0x0560(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SideJoiningEventTag;                                     // 0x0568(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SuperSkillForbiddenEventTag;                             // 0x0570(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SuperSkillBlockEventTag;                                 // 0x0578(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SuperSkillForbidUIStatusTag;                             // 0x0580(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SuperSkillBlockStatusTag;                                // 0x0588(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SuperSkillCDReducedStatusTag;                            // 0x0590(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TacticalForbiddenEventTag;                               // 0x0598(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TacticalBlockEventTag;                                   // 0x05A0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TacticalForbidUIStatusTag;                               // 0x05A8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TacticalSkillCDReducedStatusTag;                         // 0x05B0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        TacticalSkillBlockStatusTag;                             // 0x05B8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        BigWaterGunActivatingTag;                                // 0x05C0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        AirDropTag;                                              // 0x05C8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        NightComesBuff;                                          // 0x05D0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        NightComesActorContinous;                                // 0x05D8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SkywardDiveTag;                                          // 0x05E0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SuperRadarScanTag;                                       // 0x05E8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RadarScanningTag;                                        // 0x05F0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        BlackHoleStatusTag;                                      // 0x05F8(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RoleAbilityRootTag;                                      // 0x0600(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RoleAbilityRootTypeTag;                                  // 0x0608(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SkillTypeTag;                                            // 0x0610(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SummonTypeTag;                                           // 0x0618(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ProjectileTypeTag;                                       // 0x0620(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SummonedJumpPadLaunchCooldownTag;                        // 0x0628(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ShieldMultiRecoverCoolDownTag;                           // 0x0630(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        GenericTalentCooldownTag;                                // 0x0638(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        VJetCooldownTag;                                         // 0x0640(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        HJetCooldownTag;                                         // 0x0648(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MaterialChangePriorityTags
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UMaterialChangePriorityTags : public UDataAsset
	{
	public:
		struct FGameplayTag                                        Default;                                                 // 0x0030(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        Radar;                                                   // 0x0038(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        Stealth;                                                 // 0x0040(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WholeShield;                                             // 0x0048(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ThermalImaging;                                          // 0x0050(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VisibilityFlagTags
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UVisibilityFlagTags : public UDataAsset
	{
	public:
		struct FGameplayTag                                        Default;                                                 // 0x0030(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        Cruise;                                                  // 0x0038(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        Stealth;                                                 // 0x0040(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        CameraOverlap;                                           // 0x0048(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DissolvedDeath;                                          // 0x0050(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        WholeShield;                                             // 0x0058(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MassInvisibility;                                        // 0x0060(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        MassInvisibilityWarning;                                 // 0x0068(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterMontageTags
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UCharacterMontageTags : public UDataAsset
	{
	public:
		struct FGameplayTag                                        TeamRescueMontageTag;                                    // 0x0030(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        RechargeShieldTag;                                       // 0x0038(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        UpgradeShieldTag;                                        // 0x0040(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        LeadingDanceTag;                                         // 0x0048(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterGlobalConfig
	 * Size -> 0x0A80 (FullSize[0x0AB0] - InheritedSize[0x0030])
	 */
	class UCharacterGlobalConfig : public UDataAsset
	{
	public:
		TMap<int32_t, struct FCharacterSpecializedComponentInfos>  CharacterSpecializedComponentInfos;                      // 0x0030(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FName                                                HeadBoneName;                                            // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     TeamPerspectiveCueTag_LocalPlayer;                       // 0x0088(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     TeamPerspectiveCueTag_Teammate;                          // 0x0090(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FGameplayTagRequirements                            TeamPerspectiveTagRequirements_Teammate;                 // 0x0098(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     OpponentPerspectiveCueTag;                               // 0x00E8(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      OpponentPerspectiveMinDistance;                          // 0x00F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OpponentPerspectiveMaxDistance;                          // 0x00F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagRequirements                            OpponentPerspectiveLocalPlayerTagRequirements;           // 0x00F8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FGameplayTagRequirements                            OpponentPerspectiveOpponentTagRequirements;              // 0x0148(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      OpponentPerspectiveDisableDelay;                         // 0x0198(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PEEX[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInjectorMeshPreset                                 RescueInjectorPreset;                                    // 0x01A0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    FastReliefPassiveTextID;                                 // 0x01F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RescueTextID;                                            // 0x01F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* HitCameraShake;                                          // 0x01F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraShakeCD;                                           // 0x0200(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AEQ8[0x4];                                   // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialParameterCollection* CameraFOVParameterCollection;                            // 0x0208(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int64_t                                                    ChargingDoneSoundCD;                                     // 0x0210(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* ExtraVJetTimesEffect;                                    // 0x0218(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* VJetChargeScaleEffect;                                   // 0x0220(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* ExtraHJetTimesEffect;                                    // 0x0228(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* HJetChargeScaleEffect;                                   // 0x0230(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        ExtraJetTimesSetterTag;                                  // 0x0238(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        JetChargeScaleSetterTag;                                 // 0x0240(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DeathBoxId;                                              // 0x0248(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnSpeed;                                               // 0x024C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnChangeSpeedThreshold;                                // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnAngleThreshold;                                      // 0x0254(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintTolerantAngle;                                     // 0x0258(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkydiveFollowingTeleportTriggerDistance;                 // 0x025C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkydiveFollowingTeleportDistance;                        // 0x0260(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JetLandingTriggerMinVelocity;                            // 0x0264(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JetLandingHeightThreshold;                               // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JetLandingVelocity;                                      // 0x026C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSpeedParamB;                                          // 0x0270(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinSpeedParamD;                                          // 0x0274(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  NetworkMaxSmoothUpdateDistanceBySpeedCurve;              // 0x0278(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  NetworkNoSmoothUpdateDistanceBySpeedCurve;               // 0x0300(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  NetworkSimulatedSmoothLocationTimeBySpeedCurve;          // 0x0388(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UCruiseAssetSet* CruiseAssetSet;                                          // 0x0410(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              AirborneStartSound;                                      // 0x0418(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              AirborneJumpSound;                                       // 0x0428(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSkydivingEffectPreset>                      SkydivingEffectClassList;                                // 0x0438(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LowerLimitOfSpeedForSkydivingSoundEffect;                // 0x0448(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinPitchToPlaySkydivingLandingEffect;                    // 0x044C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                StartSkydiveLoopSoundGroup_Speed;                        // 0x0450(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                StopSkydiveLoopSoundGroup_Speed;                         // 0x0458(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                StopSkydiveLoopSoundGroup_Height;                        // 0x0460(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VaultDegree;                                             // 0x0468(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VaultHalfHeight;                                         // 0x046C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DetectorProfile;                                         // 0x0470(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      KneeWaterInfluencesCharacterSpeed;                       // 0x0478(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WaterDraftDepthWhenDeathVerge;                           // 0x047C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoalWaterMaxDepth;                                      // 0x0480(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeavyJumpWaterMinAxisVelocity;                           // 0x0484(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FWaterEffectPreset                                  SwimmingWaterEffectPreset;                               // 0x0488(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FWaterEffectPreset                                  HeavyJumpWaterEffectPreset;                              // 0x04D8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FWaterEffectPreset>                          SoftJumpWaterEffectPresets;                              // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     InWaterLocalGameplayCueTag;                              // 0x0538(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                PickupCollisionProfileName;                              // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecommendCriticalHealth;                                 // 0x0548(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_91M0[0x4];                                   // 0x054C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTreasureBoxOperatorMeshPreset                      TreasureBoxOperatorMeshPreset;                           // 0x0550(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    AirDropSkillTextID;                                      // 0x05A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J6HB[0x4];                                   // 0x05A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TreatFX;                                                 // 0x05A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TreatmentTextID;                                         // 0x05B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinHealthRatioToShowMedicineFX;                          // 0x05BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              RevivePickupFX[0x28];                                    // 0x05C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ReviveClearFX[0x28];                                     // 0x05E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    ResurrectTextID;                                         // 0x0610(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ResurrectTime;                                           // 0x0614(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ShieldUpgradeBodyLoopFXTemplate[0x10];                   // 0x0618(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              ShieldUpgradeBodyEndFXTemplate[0x10];                    // 0x0628(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              UnknownData_B7J6[0x8];                                   // 0x0638(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FOperatorMeshPreset                                 ShieldOperatorPreset;                                    // 0x0640(0x0120) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UCurveFloat* ShieldOperatorExpandCurve;                               // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* ShieldOperatorNarrowCurve;                               // 0x0768(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                EffectAttachBone;                                        // 0x0770(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ShieldRechargeEffect;                                    // 0x0778(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ShieldBrokenEffect;                                      // 0x0788(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitEffectOffset;                                         // 0x0798(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ShieldRechargeTextID;                                    // 0x079C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ShieldRechargePassiveTextID;                             // 0x07A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ShieldReduceScreenEffectID;                              // 0x07A4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ShieldBrokenScreenEffectID;                              // 0x07AC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B5OD[0x4];                                   // 0x07B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponentConfig* FirstPersonMeshConfig;                                   // 0x07B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BaseGunCollisionTraceDis;                                // 0x07C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QHJ3[0x4];                                   // 0x07C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ECharacterBodyScaleType, float>                       GunCollisionTraceStartHighIdle;                          // 0x07C8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<ECharacterBodyScaleType, float>                       GunCollisionTraceStartHighCrouch;                        // 0x0818(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      MinDistanceGun2Wall;                                     // 0x0868(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GunCollisionXYAdjustDownSide;                            // 0x086C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GunCollisionCheckZLimit;                                 // 0x0870(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6H5G[0x4];                                   // 0x0874(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* WeaponSystemPlayerClass;                                 // 0x0878(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* WeaponSystemAIClass;                                     // 0x0880(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* TrackingMarkWidgetClass;                                 // 0x0888(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             WeaponAimStartOffset;                                    // 0x0890(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QGQR[0x4];                                   // 0x089C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               AbilitiesToCancelOnPressingWeaponAction;                 // 0x08A0(0x0020) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      DefaultHitTraceLifetime;                                 // 0x08C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DEGJ[0x4];                                   // 0x08C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* DefaultHitTraceWidgetScaleCurve;                         // 0x08C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SniperHitTraceLifetime;                                  // 0x08D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QGKQ[0x4];                                   // 0x08D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* SniperHitTraceWidgetScaleCurve;                          // 0x08D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MeleeHitTraceLifetime;                                   // 0x08E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleHitTraceLifetime;                                 // 0x08E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* VehicleHitTraceWidgetScaleCurve;                         // 0x08E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVehicleRepairToolMeshPreset                        VehicleRepairToolMeshPreset;                             // 0x08F0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    RepairWeakPointTextID;                                   // 0x0940(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_66JV[0x4];                                   // 0x0944(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* VehicleStealthEffectClass;                               // 0x0948(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTeammateHUDPreset                                  TeammateHUDPreset;                                       // 0x0950(0x0020) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      HUDZNomral;                                              // 0x0970(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HUDZSwim;                                                // 0x0974(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HUDZCrouch;                                              // 0x0978(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HUDZCrawl;                                               // 0x097C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HUDChangeTime;                                           // 0x0980(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HUDChangeSpeed;                                          // 0x0984(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckHUDDistanceToCenter;                                // 0x0988(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HUDTranslucentValue;                                     // 0x098C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* HUDComponentClass;                                       // 0x0990(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class URadarScanSoundDataAsset* RadarScanSoundDataAsset;                                 // 0x0998(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                RadarScannedEffectID;                                    // 0x09A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     RadarDetectedEffectCueTag;                               // 0x09A8(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     RadarDetectedInSmokeEffectCueTag;                        // 0x09B0(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class UClass* MassInvisibilityWarningIconClass;                        // 0x09B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CharacterMassInvisibilityWarningIcon[0x28];              // 0x09C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              VehicleMassInvisibilityWarningIcon[0x28];                // 0x09E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector                                             MassInvWarningIconScale;                                 // 0x0A10(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MassInvWarningIconOffsetDefault;                         // 0x0A1C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MassInvWarningIconOffsetCrouch;                          // 0x0A28(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MassInvWarningIconOffsetCrawl;                           // 0x0A34(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MassInvWarningIconOffsetSmoothSpeed;                     // 0x0A40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MassInvWarningIconOffsetForceNoSmoothDistance;           // 0x0A44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UScoutEnemyConfig* ScoutEnemyConfig;                                        // 0x0A48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableEMPBlockChargeNotice;                             // 0x0A50(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1DDU[0x7];                                   // 0x0A51(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGyroscopeConfig* GyroscopeConfig;                                         // 0x0A58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckInRoomInterval;                                     // 0x0A60(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageLimitTime;                                         // 0x0A64(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamagingDuration;                                        // 0x0A68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DissolvedDeathFXBindingSocketName;                       // 0x0A6C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5ZR6[0x4];                                   // 0x0A74(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      PersistentActorEffectClasses;                            // 0x0A78(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                HealthReduceScreenEffectID;                              // 0x0A88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                HealthLowScreenEffectID;                                 // 0x0A90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HealthLowTipThreshold;                                   // 0x0A98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BAXS[0x4];                                   // 0x0A9C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* EnterBattleEffect;                                       // 0x0AA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* EnterCombatEffect;                                       // 0x0AA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterMVPConfig
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UCharacterMVPConfig : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     AnimPath;                                                // 0x0030(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     LevelPath;                                               // 0x0048(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterSkillAttributeSet
	 * Size -> 0x00C0 (FullSize[0x00F0] - InheritedSize[0x0030])
	 */
	class UCharacterSkillAttributeSet : public USolarAttributeSet
	{
	public:
		struct FGameplayAttributeData                              TacticalSkillCD;                                         // 0x0030(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              TacticalSkillCDBase;                                     // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              TacticalSkillCDParamA;                                   // 0x0050(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              TacticalSkillCDParamB;                                   // 0x0060(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              TacticalSkillCDFixedValue;                               // 0x0070(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SuperSkillCD;                                            // 0x0080(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SuperSkillCDBase;                                        // 0x0090(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SuperSkillCDParamA;                                      // 0x00A0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SuperSkillCDParamB;                                      // 0x00B0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SuperSkillCDFixedValue;                                  // 0x00C0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ScoutEnemyTimeRequired;                                  // 0x00D0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ScoutEnemyDuration;                                      // 0x00E0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected

	public:
		void OnRep_TacticalSkillCDParamB(const struct FGameplayAttributeData& OldValue);
		void OnRep_TacticalSkillCDParamA(const struct FGameplayAttributeData& OldValue);
		void OnRep_TacticalSkillCDFixedValue(const struct FGameplayAttributeData& OldValue);
		void OnRep_TacticalSkillCDBase(const struct FGameplayAttributeData& OldValue);
		void OnRep_SuperSkillCDParamB(const struct FGameplayAttributeData& OldValue);
		void OnRep_SuperSkillCDParamA(const struct FGameplayAttributeData& OldValue);
		void OnRep_SuperSkillCDFixedValue(const struct FGameplayAttributeData& OldValue);
		void OnRep_SuperSkillCDBase(const struct FGameplayAttributeData& OldValue);
		void OnRep_ScoutEnemyTimeRequired(const struct FGameplayAttributeData& OldValue);
		void OnRep_ScoutEnemyDuration(const struct FGameplayAttributeData& OldValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterSkinConfig
	 * Size -> 0x0198 (FullSize[0x01C8] - InheritedSize[0x0030])
	 */
	class UCharacterSkinConfig : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     SkinIcon;                                                // 0x0030(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     DefaultIcon;                                             // 0x0048(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     SkinRes;                                                 // 0x0060(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     CharaSkinRes;                                            // 0x0078(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     ShieldRes;                                               // 0x0090(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     InvincibleMAT;                                           // 0x00A8(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftClassPath                                      AnimBPRes;                                               // 0x00C0(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> StaticMeshOrnamentsConfig;                               // 0x00D8(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig;                             // 0x0128(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, struct FChildActorOrnamentConfig> ChildActorOrnamentsConfig;                               // 0x0178(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig();
		struct FSoftObjectPath GetSkinRes();
		struct FSoftObjectPath GetSkinIcon();
		TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig();
		struct FSoftObjectPath GetInvincibleMAT();
		TMap<struct FGameplayTag, struct FChildActorOrnamentConfig> GetChildActorOrnamentsConfig();
		struct FSoftObjectPath GetCharaSkinRes();
		struct FSoftObjectPath GetAnimBPRes();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SoundGroupBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USoundGroupBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SoundGroupSimple
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USoundGroupSimple : public USoundGroupBase
	{
	public:
		class FString                                              SoundEvent;                                              // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SoundGroupByTeammate
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USoundGroupByTeammate : public USoundGroupBase
	{
	public:
		class FString                                              SelfEvent;                                               // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              TeammateEvent;                                           // 0x0038(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              OtherEvent;                                              // 0x0048(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SoundGroupByBattle
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USoundGroupByBattle : public USoundGroupBase
	{
	public:
		class FString                                              IAttackOtherEvent;                                       // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              OtherAttackMeEvent;                                      // 0x0038(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              OtherEvent;                                              // 0x0048(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CharacterSoundConfig
	 * Size -> 0x0120 (FullSize[0x0150] - InheritedSize[0x0030])
	 */
	class UCharacterSoundConfig : public UDataAsset
	{
	public:
		TMap<ECharacterSoundOpt, class FString>                    SoundEventTable;                                         // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, NativeAccessSpecifierPublic
		TMap<class FName, class USoundGroupBase*>                  SoundGroupTable;                                         // 0x0080(0x0050) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic
		TMap<EPhysicalSurface, class FName>                        SurfaceTypeToHitByBulletSoundGroup;                      // 0x00D0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FTransform                                          DefaultTransform;                                        // 0x0120(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CheckBoxGroup
	 * Size -> 0x0060 (FullSize[0x01C0] - InheritedSize[0x0160])
	 */
	class UCheckBoxGroup : public UNamedSlot
	{
	public:
		class FScriptMulticastDelegate                             OnStateChangedEvent;                                     // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStateChangedEventEx;                                   // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UCheckBox* RevertToCachedChild;                                     // 0x0180(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBox* LastCheckedChild;                                        // 0x0188(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPanelWidget* GroupRoot;                                               // 0x0190(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAllowSwitchOff;                                         // 0x0198(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EUseType                                                   UseType;                                                 // 0x0199(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7AXK[0x6];                                   // 0x019A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCheckBox*>                                   CheckBoxList;                                            // 0x01A0(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FAAO[0x10];                                  // 0x01B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetSelectIndex(int32_t Index);
		void RevertLastCheck();
		bool RemoveGroupChild(class UCheckBox* Child);
		void OnStateChanged(bool bIsChecked);
		int32_t GetSelectedIndex();
		void CleanCheckedState();
		TArray<class UCheckBox*> CheckChildrenState(int32_t* CheckedChildIndex);
		bool AddGroupChild(class UCheckBox* Child);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChooseWeaponItemObject
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UChooseWeaponItemObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_ENFJ[0x88];                                  // 0x0028(0x0088) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChooseWeaponItemWidget
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class UChooseWeaponItemWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_WGW3[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarButton* Btn_Collect;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarButton* Btn_Select;                                              // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FChooseWeaponItemState                              UiState;                                                 // 0x0360(0x0004) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VDCD[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (PADDING)

	public:
		void SelectWeapon();
		void K2_OnUIStateChanged(const struct FChooseWeaponItemState& NewState);
		void K2_InitWidget(const struct FChooseWeaponItemData& InData);
		bool K2_GetWeaponUIIcon(int32_t InWeaponTypeId, struct FSoftObjectPath* OutPath);
		void CollectWeapon();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ChooseWeaponWidget
	 * Size -> 0x0180 (FullSize[0x04C8] - InheritedSize[0x0348])
	 */
	class UChooseWeaponWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_6I9H[0x18];                                  // 0x0348(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTileView* WeaponList;                                              // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponChosenWidget* WeaponChosen_2;                                          // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponChosenWidget* WeaponChosen_3;                                          // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, struct FChooseWeaponItemData>                WeaponDatasMap;                                          // 0x0378(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<int32_t, class UChooseWeaponItemObject*>              ListWeapons;                                             // 0x03C8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<EWeaponEquipSlot, class UWeaponChosenWidget*>         EquippedWeaponWidgetMap;                                 // 0x0418(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              CollectedWeapons[0x50];                                  // 0x0468(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_94CN[0x4];                                   // 0x04B8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CloseActionName;                                         // 0x04BC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QI90[0x4];                                   // 0x04C4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SelectEquipSlot(EWeaponEquipSlot InSlot);
		void ResetChosenWidget(bool bResetFirst, bool bResetSecond);
		void RefreshWeaponList(bool bForce);
		void OnSelfOpened();
		void OnRequestCollectWeapon(int32_t InWeaponID, bool bInCollected);
		void OnListWeaponSelected(int32_t InWeaponID);
		void OnListWeaponCollected(int32_t InWeaponID);
		void OnEquipSlotSelected(EWeaponEquipSlot InSlot);
		void K2_EquipWeapon(EWeaponEquipSlot InSlot, int32_t InWeaponID);
		void InitWeaponList(TArray<struct FChooseWeaponItemData> InList);
		int32_t GetWeaponSkinId(int32_t InWeaponID);
		class UChooseWeaponItemWidget* GetListWidgetByWeaponId(int32_t InWeaponID);
		TArray<struct FChooseWeaponItemData> GetListWeapons();
		TArray<struct FChooseWeaponItemData> GetEquippedWeaponData();
		TArray<int32_t> GetCollectedWeaponsFormPlayerData();
		void EquipWeapon(EWeaponEquipSlot InSlot, int32_t InWeaponID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CircleCardView
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class UCircleCardView : public UCardView
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CommonTwiceConfirmBaseWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UCommonTwiceConfirmBaseWidget : public USolarUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ComponentButtonBaseWidget
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UComponentButtonBaseWidget : public USolarUserWidget
	{
	public:
		class USolarButton* OperateArea;                                             // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CrashReportManager
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UCrashReportManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_GH97[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (PADDING)

	public:
		void SetUserID(const class FString& InUserId);
		void SetDeviceUUID(const class FString& InDeviceUUID);
		void STATIC_ReportLuaException(const class FString& ErrorMsg, const class FString& Traceback, bool bHandled);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CrosshairCanvasPanel
	 * Size -> 0x00C0 (FullSize[0x0228] - InheritedSize[0x0168])
	 */
	class UCrosshairCanvasPanel : public UCanvasPanel
	{
	public:
		TMap<ECrossHairState, struct FStateMapItemStruct>          CrosshairStateConfigList;                                // 0x0168(0x0050) Edit, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class UWidget*>                                     IgonreWidgetToStateMap;                                  // 0x01B8(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FUICrossHairSpreadStruct>                    SpreadItemList;                                          // 0x01C8(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FUICrossHairAimColorStruct>                  AimColorItemList;                                        // 0x01D8(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTweenImage* ReloadingTween;                                          // 0x01E8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UGaugeImage* BulletGauge;                                             // 0x01F0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTweenImage* OverloadingTween;                                        // 0x01F8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UProgressBar* OverloadBar_Normal;                                      // 0x0200(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UProgressBar* OverloadBar_Warn;                                        // 0x0208(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTweenWidget* OverloadNormalPanelTween;                                // 0x0210(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UProgressBar*>                                CoolDownBars;                                            // 0x0218(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CrossHairWidget
	 * Size -> 0x00A0 (FullSize[0x0300] - InheritedSize[0x0260])
	 */
	class UCrossHairWidget : public UUserWidget
	{
	public:
		TMap<EWeaponType, struct FCrosshairLayout>                 CrosshairStorageLayout;                                  // 0x0260(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FCrosshairSprite                                    CrosshairSprites;                                        // 0x02B0(0x0030) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9NH4[0x8];                                   // 0x02E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCrosshairCanvasPanel* RootPanel;                                               // 0x02E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinSpread;                                               // 0x02F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JRW2[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCrosshairLayout                                    CurrentLayout;                                           // 0x02F8(0x0004) NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XGPA[0x4];                                   // 0x02FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetCrosshairSprite(class UPaperSprite* InSprite);
		void OnWeaponFired();
		void OnUpdateReloadProgress(float InReloadProgress, int32_t InReservedAmmo, int32_t InMaxAmmo);
		void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire);
		void OnUpdateCoolDownProgress(float InCoolDownProgress);
		void OnUpdateChargeProgress(bool InbCharging, int32_t InChargeMode, float InChargeProgress, int32_t InChargeBurstCount);
		void OnUpdateAimState(bool InbLockEnemy);
		void OnReloadStarted(float InReloadTime, int32_t InReservedAmmo);
		void OnReloadFinished(bool InbReloadSuccess, int32_t InReloadAmmo, int32_t InReservedAmmo, int32_t InMaxAmmo);
		void OnPlayWeaponSpecialFire(ECrossHairSpecialFireState InState, float PlayRate);
		void OnOverloadStateChanged(bool bEnter);
		void OnCrosshairInNormalState();
		void OnAmmoChanged(int32_t InReservedAmmo, int32_t InMaxAmmo, bool InbFirst);
		void InitializeCrosshairSpread(float Spread);
		void InitializeCrosshair(EWeaponType WeaponType, bool bIsWeaponEnergy);
		void HandleCrosshairState(ECrossHairState InCrosshairState, bool InbQuitState);
		class UWidget* GetSpreadCanvasWidget();
		class UUserWidget* GetReloadWidget();
		class UUserWidget* GetOverloadWidget();
		class UUserWidget* GetCoolDownWidget();
		class UUserWidget* GetChargeWidget();
		class UUserWidget* GetAmmoWidget();
		struct FVector2D CalcDeltaScaleBySpread(float Spread);
		struct FVector2D CalcDeltaPosBySpread(float Spread);
		float CalcDeltaAngleBySpread(float Spread);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CruiseAssetSet
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UCruiseAssetSet : public UDataAsset
	{
	public:
		struct FSoftClassPath                                      CapsuleActorClass;                                       // 0x0030(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoftClassPath>                              CruiseAbilityClasses;                                    // 0x0048(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CurvedEffectController
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class UCurvedEffectController : public UActorEffectController
	{
	public:
		struct FRuntimeFloatCurve                                  ProgressCurve;                                           // 0x0028(0x0088) Edit, NativeAccessSpecifierPublic
		ECurvedEffectControllerStopMode                            StopMode;                                                // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6NNZ[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StopTime;                                                // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6DPO[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CustomConsoleCommandsComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UCustomConsoleCommandsComponent : public UActorComponent
	{
	public:
		void ExecGMCommand(const class FString& CommandParameters, TArray<class FString> ArgsStr);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CustomGameModeHUD
	 * Size -> 0x0000 (FullSize[0x0398] - InheritedSize[0x0398])
	 */
	class ACustomGameModeHUD : public ABattleHUDBase
	{
	public:
		void ShowPanelUI(EUIPanelName PanelName);
		void ClosePanelUI(EUIPanelName PanelName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CustomNoticeTable
	 * Size -> 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
	 */
	class UCustomNoticeTable : public UDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CustomNoticeImageTable
	 * Size -> 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
	 */
	class UCustomNoticeImageTable : public UDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameManagerBase
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class AGameManagerBase : public AInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CustomRoomManager
	 * Size -> 0x01F0 (FullSize[0x0418] - InheritedSize[0x0228])
	 */
	class ACustomRoomManager : public AGameManagerBase
	{
	public:
		int32_t                                                    RoomTeamMemberLimit;                                     // 0x0228(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RoomLeftTime;                                            // 0x022C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsGameStarted;                                          // 0x0230(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EGPA[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              JobName;                                                 // 0x0238(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsWeaponSettingOpen;                                    // 0x0248(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsVehicleSettingOpen;                                   // 0x0249(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EM6O[0x6];                                   // 0x024A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, struct FCustomParamConfig>             CustomParamConfigMap;                                    // 0x0250(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TArray<struct FUserSetting>                                UserSettingList;                                         // 0x02A0(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<unsigned char>                                      WeaponTypeAvailableList;                                 // 0x02B0(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<unsigned char>                                      VehicleClassAvailableList;                               // 0x02C0(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            WeaponSettingBlacklist;                                  // 0x02D0(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            VehicleTypeSettingBlacklist;                             // 0x02E0(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             WeaponTypeAvailableChangedEvent;                         // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             WeaponSettingBlacklistChangedEvent;                      // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             VehicleClassAvailableChangedEvent;                       // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             VehicleTypeSettingBlacklistChangedEvent;                 // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BGCE[0xE8];                                  // 0x0330(0x00E8) MISSED OFFSET (PADDING)

	public:
		void WeaponTypeAvailableChangedEvent__DelegateSignature(TArray<unsigned char> WeaponTypeAvailableList);
		void WeaponSettingBlacklistChangedEvent__DelegateSignature(TArray<int32_t> WeaponSettingBlacklist);
		void VehicleTypeSettingBlacklistChangedEvent__DelegateSignature(TArray<int32_t> VehicleTypeSettingBlacklist);
		void VehicleClassAvailableChangedEvent__DelegateSignature(TArray<unsigned char> VehicleClassAvailableList);
		void ReceiveUserSettingChanged(const class FString& Name, const class FString& Value);
		void ReceiveTournamentDealy();
		void ReceivePlayerRemoved(class ASCMPlayerState* Player, ERemovedReasonType reason);
		void OnUserSettingChangedEvent(const class FString& Name, const struct FCustomParamConfig& ConfigInfo, const class FString& Value);
		void OnTournamentDealy();
		void OnRoomOwnerLeftRoom();
		void OnRep_WeaponTypeAvailableList();
		void OnRep_WeaponSettingBlacklist();
		void OnRep_VehicleTypeSettingBlacklist();
		void OnRep_VehicleClassAvailableList();
		void OnPlayerRemovedFromRoom(class ASCMPlayerState* Player, ERemovedReasonType reason);
		bool OnGameStart();
		void OnClientRoomDataReady();
		bool IsWeaponTypeAvailable(unsigned char WeaponType);
		bool IsWeaponSettingOpen();
		bool IsWeaponAvailable(int32_t weaponid);
		bool IsVehicleTypeAvailable(int32_t VehicleTypeID);
		bool IsVehicleSettingOpen();
		bool IsVehicleClassAvailable(unsigned char VehicleClassValue);
		bool IsRoomOwner(class ASCMPlayerState* Player);
		bool IsRoomHasMinimalSides();
		bool IsRoomHasEnoughPlayers();
		TArray<unsigned char> GetWeaponTypeAvailableList();
		void GetWeaponSettingLists(TArray<int32_t>* OutWeaponBlacklist, TArray<int32_t>* OutWeaponWhitelist);
		TArray<int32_t> GetWeaponSettingBlacklist();
		void GetVehicleTypeSettingLists(TArray<int32_t>* OutVehicleBlacklist, TArray<int32_t>* OutVehicleWhitelist);
		TArray<int32_t> GetVehicleTypeSettingBlacklist();
		TArray<unsigned char> GetVehicleClassAvailableList();
		class FString GetModeParam(const class FString& Name, struct FCustomParamConfig* ParamInfo);
		void ExecuteGameStart();
		bool CheckWeaponTypeCanSetting(EWeaponUIType WeaponUIType);
		bool CheckWeaponCanSetting(int32_t weaponid);
		bool CheckVehicleTypeCanSetting(int32_t VehicleTypeID);
		bool CheckVehicleClassCanSetting(EVehicleClass VehicleClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DeathTreasureBox
	 * Size -> 0x0158 (FullSize[0x0728] - InheritedSize[0x05D0])
	 */
	class ADeathTreasureBox : public ASolarTreasureBoxActor
	{
	public:
		float                                                      CharacterPickupRange;                                    // 0x05D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrEnergyValue;                                         // 0x05D4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrExtraEnergyValue;                                    // 0x05D8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7YQI[0x4];                                   // 0x05DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PlayerId;                                                // 0x05E0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              NickName;                                                // 0x05F0(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsPickuped;                                              // 0x0600(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UREO[0x7];                                   // 0x0601(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPlayerWeapon*>                          WeaponList;                                              // 0x0608(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FBoxChargingInfo>                            ChargingChars;                                           // 0x0618(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PickupRadius;                                            // 0x0628(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ResurrectDistance;                                       // 0x062C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBResurrectionState                                        CurrResurrectionState;                                   // 0x0630(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OT7I[0x3];                                   // 0x0631(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReviveTotalTime;                                         // 0x0634(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReviveStartTime;                                         // 0x0638(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RIEI[0x4];                                   // 0x063C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* PreViewMesh;                                             // 0x0640(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReviveStartSound;                                        // 0x0648(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReviveBeforeCompleteSound;                               // 0x0650(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReviveCompleteSound;                                     // 0x0658(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReviveFailedSound;                                       // 0x0660(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ResurrectionBeforeSoundTime;                             // 0x0668(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4B8W[0x4];                                   // 0x066C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* ReviveCompletePS;                                        // 0x0670(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReviveCompletePSAttachedSocket;                          // 0x0678(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviewMeshZOffset;                                      // 0x0680(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviewMeshZRotation;                                    // 0x0684(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CY40[0x10];                                  // 0x0688(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent* FXPosComponent;                                          // 0x0698(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              QualityPS[0x10];                                         // 0x06A0(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              UnknownData_MFK6[0x10];                                  // 0x06B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* RevivePreviewEffectClass;                                // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3Q79[0x8];                                   // 0x06C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ECharacterBodyScaleType, struct FSoftObjectPath>      PreviewAnim;                                             // 0x06D0(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      SphereRadius;                                            // 0x0720(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnpickableSphereRadius;                                  // 0x0724(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveSetUIEnable(bool IsShow);
		void ReceiveRemoveEffect(class ASolarCharacter* SolarChar);
		void ReceiveRefreshExtraEnergy(const class FString& Message);
		void ReceiveAddEffect(class ASolarCharacter* SolarChar);
		void OnUntrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnRep_ReviveStartTime();
		void OnRep_PickupedChanged();
		void OnRep_CurrExtraEnergyValueChanged();
		void OnRep_BResurrectionStateChanged();
		void OnRefreshPickupStatusEffect(bool IsShow);
		bool IsInResurrectRange(class ASolarCharacter* InReqCharacter, float* RealDistance);
		bool CanBuyResurrect(class ASolarCharacter* InReqCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DeathViewGoodsSlotWidget
	 * Size -> 0x00B0 (FullSize[0x03F8] - InheritedSize[0x0348])
	 */
	class UDeathViewGoodsSlotWidget : public USolarUserWidget
	{
	public:
		class UImage* Img_Icon;                                                // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Num;                                                 // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateBrush                                         ImageOuter;                                              // 0x0358(0x0098) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		int32_t                                                    ItemID;                                                  // 0x03F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WGNA[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnSpectateTargetItemsChanged(TArray<struct FReplicateItemData> InItemDatas);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DeathViewHPWidget
	 * Size -> 0x0090 (FullSize[0x03D8] - InheritedSize[0x0348])
	 */
	class UDeathViewHPWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_IN7G[0x28];                                  // 0x0348(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSplitHPBar;                                             // 0x0370(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CKYQ[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarShieldProgressBoard* AdvBar_Shield;                                           // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarHPProgressBoard* AdvBar_HP;                                               // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6HCI[0x20];                                  // 0x0388(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        HPColorNormal;                                           // 0x03A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        HPColorDying;                                            // 0x03B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A3MC[0x10];                                  // 0x03C8(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateHPBar(float InCurHealth, float InMaxHealth, float InHPGridUnit);
		void OnSpecTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnShieldValueChanged(class USinglePlayerShieldModel* ShieldModel);
		void OnShieldChanged(class USinglePlayerShieldModel* ShieldModel);
		void OnShieldAvailableChanged(class USinglePlayerShieldModel* ShieldModel);
		void OnHPModelChanged(class USinglePlayerHPModel* HPModel);
		void OnCharacterEndPlay(class ASolarCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DeathViewTeammateWidget
	 * Size -> 0x0078 (FullSize[0x03C0] - InheritedSize[0x0348])
	 */
	class UDeathViewTeammateWidget : public USolarUserWidget
	{
	public:
		float                                                      SwitchCDTime;                                            // 0x0348(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RCTJ[0x4];                                   // 0x034C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUIComponentNationalFlag* UI_Component_NationalFlag;                               // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_Input_Device;                                         // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Txt_PlayerName;                                          // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_View_Name_Bg;                                        // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_TeamPos;                                             // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_View_TeamPos_Bg;                                     // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* Panel_TeamPos;                                           // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Panel_Death;                                             // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Panel_Selected;                                          // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Loading;                                             // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget* ScaleBox_1;                                              // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Sel_Anim;                                                // 0x03A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HUPP[0x8];                                   // 0x03B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarPlayerState* CurrentPlayerState;                                      // 0x03B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void TrySelect();
		void SetTeamPos(int32_t PosInTeam);
		void SetPlayerState(class ASolarPlayerState* TargetPS);
		void OnTeammateStateChanged(bool NeedRefresh);
		void OnSelectedPlayerChanged(class ASolarPlayerState* SelectedPS);
		void OnHPChanged(unsigned char PosInTeam, float CurHP, float MaxHP);
		void OnBroadcastModeChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DeathViewWidget
	 * Size -> 0x0038 (FullSize[0x0380] - InheritedSize[0x0348])
	 */
	class UDeathViewWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_LVV6[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDeathViewHPWidget* DeathViewHP;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_ScopeUI;                                           // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_PlayerLevel;                                        // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_Lv_Head;                                             // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_Lv_Bg_2;                                             // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_Lv_Border_2;                                         // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnSpecTargetChanged(class ASolarSpectateInfo* SpectateInfo);
		void OnLocalSpecInfoReady(class ASolarSpectateInfo* SpecInfo);
		void OnCharacterLevelChanged(int32_t InLevel);
		void AddScopeToPanel(class UUserWidget* InChildWidget, bool bInSpectate);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DefenderManager
	 * Size -> 0x0090 (FullSize[0x02B8] - InheritedSize[0x0228])
	 */
	class ADefenderManager : public AGameManagerBase
	{
	public:
		class FScriptMulticastDelegate                             OnRepDefenderListNotify;                                 // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FTerminatorNotifyUIConfig                           TerminatorNotifyUIConfig;                                // 0x0238(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass* TrailEffect;                                             // 0x0260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              DefenderSide;                                            // 0x0268(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASolarPlayerState*>                           DefenderList;                                            // 0x0278(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V4KH[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TerminatorPlayerId;                                      // 0x0290(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V82T[0x18];                                  // 0x02A0(0x0018) MISSED OFFSET (PADDING)

	public:
		bool UpdateCheckTerminator(class ASCMPlayerState* InKiller, class ASCMPlayerState* InKilled);
		void StartConfirmDefender();
		void ShowDefenderUIForReplay();
		void OnRep_DefenderList();
		bool IsTerminator(const class FString& InSolarPlayerID);
		bool IsDefender(const class FString& InPlayerSide);
		TArray<class ASolarPlayerState*> GetDefenderList();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DelayNode
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class UDelayNode : public UActionNode
	{
	public:
		float                                                      DelayTime;                                               // 0x0070(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NG93[0xC];                                   // 0x0074(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DrawLinePanel
	 * Size -> 0x0140 (FullSize[0x0488] - InheritedSize[0x0348])
	 */
	class UDrawLinePanel : public USolarUserWidget
	{
	public:
		float                                                      MapSize;                                                 // 0x0348(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentFOV;                                              // 0x034C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HDCI[0x38];                                  // 0x0350(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        SafeAreaColor;                                           // 0x0388(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        PosionCircleColor;                                       // 0x0398(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        DotLineColor;                                            // 0x03A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        AirlineProgressColor;                                    // 0x03B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        CapsuleBackgroundColor;                                  // 0x03C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        AirdropBackgroundColor;                                  // 0x03D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AirdropAirlineSizeY;                                     // 0x03E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaterialCircleSize;                                      // 0x03EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DotLineDottedLength;                                     // 0x03F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DotLineDottedInterval;                                   // 0x03F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9E0X[0x8];                                   // 0x03F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDotLineData>                                DotLineDataList;                                         // 0x0400(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FCircleData>                                 CircleDataList;                                          // 0x0410(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarMapManager* MapManager;                                              // 0x0420(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASolarCapsuleRoot>                    CapsuleRoot;                                             // 0x0428(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     CircleMaterialPath;                                      // 0x0430(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DottedLineMaterialPath;                                  // 0x0448(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    CircleMaterialInstanceArray;                             // 0x0460(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UMaterialInstanceDynamic*>                    DottedLineMaterialInstanceArray;                         // 0x0470(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      InitFOV;                                                 // 0x0480(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_04G6[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (PADDING)

	public:
		void RemoveDotLine(int32_t DotLineID);
		void RemoveCircle(int32_t CircleID);
		void OnAirlineUpdate(const struct FVector2D& InNewPos);
		void OnAirlineSet(const struct FMiniMapAirlineData& InData);
		void OnAirlineClear();
		void InitializePanelFOV(float InFOV);
		int32_t AddDotLine(class AActor* StartPointActor, class AActor* EndPointActor, const struct FLinearColor& Color);
		int32_t AddCircle(const struct FVector2D& Center, float Radius, const struct FLinearColor& Color);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DuckRollingConfigDataAsset
	 * Size -> 0x0B80 (FullSize[0x0BB0] - InheritedSize[0x0030])
	 */
	class UDuckRollingConfigDataAsset : public UDataAsset
	{
	public:
		TMap<int32_t, struct FStaticMeshOverride>                  RollingMeshOverrideForSkin;                              // 0x0030(0x0050) Edit, NativeAccessSpecifierPublic
		float                                                      SwitchToRollingMeshDelay;                                // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHideCharacterMesh;                                      // 0x0084(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FI92[0x3];                                   // 0x0085(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        VisibilityTag;                                           // 0x0088(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        SwitchToRollingMeshStatusTag;                            // 0x0090(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RollingBallScale;                                        // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RollingBallRadius;                                       // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RollingBallCenterOffset;                                 // 0x00A0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideCameraDesiredDistance;                          // 0x00AC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EYCA[0x3];                                   // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CameraDesiredDistanceOverride;                           // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideCameraDistanceSmoothFactor;                     // 0x00B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5VCD[0x3];                                   // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CameraDistanceSmoothFactorOverride;                      // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RollingAngleDecelerationOnFalling;                       // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RollingAngleFrictionOnFalling;                           // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InitRollingAngleSpeed;                                   // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             InitLocalRollingAxis;                                    // 0x00C8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RollingMoveRadius;                                       // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideMovementMaxAcceleration;                        // 0x00D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TZ6W[0x3];                                   // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MovementMaxAccelerationOverride;                         // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideBrakingDecelerationWalking;                     // 0x00E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JM1O[0x3];                                   // 0x00E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BrakingDecelerationWalkingOverride;                      // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideMinAccelerationProjectRatioForValidGroundSlide; // 0x00E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PE5P[0x3];                                   // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinAccelerationProjectRatioForValidGroundSlideOverride;  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideCustomJumpParams;                               // 0x00F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2733[0x3];                                   // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCustomJumpParams                                   OverrideCustomJumpParams;                                // 0x00F4(0x000C) Edit, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                JumpSoundGroupName;                                      // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1GVM[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDuckRollingCharacterHitConfig                      CharacterHitConfig;                                      // 0x0110(0x00A0) Edit, NativeAccessSpecifierPublic
		class FName                                                ReshapingPointParameterName;                             // 0x01B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReshapingOrthoDirParameterName;                          // 0x01B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReshapingMoveDirScaleParameterName;                      // 0x01C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReshapingOrthoDirScaleParameterName;                     // 0x01C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReshapingFlattenScaleParameterName;                      // 0x01D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BounceRequiredMinSpeedOnImpactNormal;                    // 0x01D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BounceCollisionShapeScale;                               // 0x01DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BounceTriggerCooldown;                                   // 0x01E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     BounceGameplayCueTag;                                    // 0x01E4(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z8TW[0x4];                                   // 0x01EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  BounceDurationHoriCurve;                                 // 0x01F0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceDurationVertCurve;                                 // 0x0278(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceReshapingMoveDirCurve;                             // 0x0300(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceReshapingOrthoDirCurve;                            // 0x0388(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceReshapingFlattenScaleCurve;                        // 0x0410(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceReshapingScaleCurve;                               // 0x0498(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceMoveHoriDurationScaleCurve;                        // 0x0520(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceMoveVertDurationScaleCurve;                        // 0x05A8(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceMoveHoriImmovableDurationScaleCurve;               // 0x0630(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceMoveVertImmovableDurationScaleCurve;               // 0x06B8(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      BounceMoveRequiredMinSpeedOnImpactNormal;                // 0x0740(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BounceMoveMaxAllowedHoriBounceSpeed;                     // 0x0744(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BounceMoveMaxAllowedVertBounceSpeed;                     // 0x0748(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HWWH[0x4];                                   // 0x074C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  BounceMoveHoriSpeedInheritanceCurve;                     // 0x0750(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BounceMoveVertSpeedInheritanceCurve;                     // 0x07D8(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      JumpReshapingDuration;                                   // 0x0860(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_43P1[0x4];                                   // 0x0864(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  JumpReshapingMoveDirCurve;                               // 0x0868(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  JumpReshapingOrthoDirCurve;                              // 0x08F0(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      SwitchReshapingDuration;                                 // 0x0978(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YMRX[0x4];                                   // 0x097C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SwitchReshapingMoveDirCurve;                             // 0x0980(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SwitchReshapingOrthoDirCurve;                            // 0x0A08(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRangeFloat                                         RandomReshapingIntervalRange;                            // 0x0A90(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MinSpeedForRandomReshaping;                              // 0x0A98(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RandomReshapingDuration;                                 // 0x0A9C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  RandomReshapingMoveDirCurve;                             // 0x0AA0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  RandomReshapingOrthoDirCurve;                            // 0x0B28(0x0088) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DuckRollingMeshComponent
	 * Size -> 0x0090 (FullSize[0x0690] - InheritedSize[0x0600])
	 */
	class UDuckRollingMeshComponent : public UStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_1YDC[0x8];                                   // 0x0600(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* ShieldComponentClass;                                    // 0x0608(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<struct FSoftObjectPath, struct FSoftObjectPath>       MaterialEffectMaterialMapping;                           // 0x0610(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		float                                                      HeadRelativeHeight;                                      // 0x0660(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6VFS[0x4];                                   // 0x0664(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimitiveComponent* ShieldComponent;                                         // 0x0668(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UObject*>                                     MeshOverrides;                                           // 0x0670(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UObject*>                                     LoadedEffectMaterials;                                   // 0x0680(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveOnRegister();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DuckRollingProxyComponent
	 * Size -> 0x0168 (FullSize[0x0218] - InheritedSize[0x00B0])
	 */
	class UDuckRollingProxyComponent : public UActorComponent
	{
	public:
		class UClass* RollingMeshClass;                                        // 0x00B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDuckRollingMeshComponent* RollingMeshComponent;                                    // 0x00B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDuckRollingConfigDataAsset* RollingConfig;                                           // 0x00C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarCharacter* CharacterOwner;                                          // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WTY6[0xE0];                                  // 0x00D0(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          ReshapingMaterials;                                      // 0x01B0(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInterface* ReshapingMultiplePassMaterial;                           // 0x01C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WCQ2[0x50];                                  // 0x01C8(0x0050) MISSED OFFSET (PADDING)

	public:
		void OnUpdateCharacterStateAfterMovement(class USolarCharacterMovementComponent* MoveComp, float DeltaTime);
		void OnSwitchToRollingMeshTagCountChanged(const struct FGameplayTag& Tag, int32_t count);
		void OnCharacterMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.DurationTalent
	 * Size -> 0x0030 (FullSize[0x0450] - InheritedSize[0x0420])
	 */
	class UDurationTalent : public UCharacterTalent
	{
	public:
		class UClass* DurationEffectClass;                                     // 0x0420(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      DurationSubEffectClasses;                                // 0x0428(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OPSC[0x18];                                  // 0x0438(0x0018) MISSED OFFSET (PADDING)

	public:
		void StartDurationEffectFailed(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		void ReceiveDurationEffectFinished(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ElectricShop_Weapon
	 * Size -> 0x0198 (FullSize[0x04E0] - InheritedSize[0x0348])
	 */
	class UElectricShop_Weapon : public USolarUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnWeaponUpdateRequested;                                 // 0x0348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldUpdateRequested;                                 // 0x0358(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UWidgetSwitcher* WidgetSwitcher_weapon;                                   // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Weapon;                                                  // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Level_Bg;                                            // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Level_Indicator;                                         // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* Panel_Level;                                             // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Level;                                               // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Arrow;                                               // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Max;                                                 // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_Weapon;                                              // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Shield;                                              // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WidgetSwitcher_Upgrade;                                  // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Upgrade_BG;                                              // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_UpgradeState;                                        // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* Panel_ElectricCost;                                      // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_Discount;                                        // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ElectricityNum_Undiscounted;                         // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ElectricityNum;                                      // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_UpgradeState_Disable;                                // 0x03F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* Panel_ElectricCost_Disable;                              // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_Discount_2;                                      // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ElectricityNum_Undiscounted_2;                       // 0x0408(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ElectricityNum_Disable;                              // 0x0410(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_UpgradeState_Disable_2;                              // 0x0418(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Weapon_UpgradeSuccess;                                   // 0x0420(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Image_BG2_3;                                             // 0x0428(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Upgrade2;                                            // 0x0430(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Weapon_None;                                             // 0x0438(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Image_BG2;                                               // 0x0440(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Image_BG2_2;                                             // 0x0448(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Succeed_Anim;                                            // 0x0450(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsWeapon;                                               // 0x0458(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GY3V[0x17];                                  // 0x0459(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxWeaponLevel;                                          // 0x0470(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SYE6[0x34];                                  // 0x0474(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      WeaponLevelBGNames;                                      // 0x04A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              WeaponLevelBGPrefix;                                     // 0x04B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ShieldIconPrefix;                                        // 0x04C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarPlayerWeapon>                   CurrentWeapon;                                           // 0x04D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateUpgradeData(class ASolarPlayerWeapon* InWeapon, float Discount);
		void UpdateShieldUpgradeData(float Discount);
		void ShowUpgradeEffect();
		void SetWeaponWidgetSwitcherIndex(int32_t InNewIndex);
		void SetUpgradeState();
		void SetUpgradeIndicator();
		void SetIndicatorVisibility(EShopWeaponUpgradeState InState);
		void SetElectricCostState(EShopWeaponUpgradeState InState);
		void RequestUpgradeWeapon();
		void RequestUpgradeShield();
		void RefreshCurrentShieldProperty(int32_t InShieldID);
		void OnWeaponUpdateRequested__DelegateSignature(class ASolarPlayerWeapon* Weapon);
		void OnUpgradeWeaponSuccess(class ASolarPlayerWeapon* InWeapon, class ASolarCharacter* InCharacter);
		void OnUpgradeShieldSuccess(class ASolarCharacter* InCharacter);
		void OnUpgradeCooldown();
		void OnShieldUpdateRequested__DelegateSignature(class ASolarCharacter* ShieldCharacter);
		void InitWeaponUpgradeCost();
		void HideUpgradeEffect();
		float GetWeaponUpgradeCost(int32_t InWeaponLevel);
		class FString GetWeaponLvBgFullPath(int32_t WeaponLv);
		class FString GetShieldLvBgFullPath(int32_t ShieldLv);
		float GetDiscountedCost(float Cost);
		void CheckEnergyAvaliable(float InValue);
		void BindDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ElectronicTreasureBox
	 * Size -> 0x0040 (FullSize[0x0610] - InheritedSize[0x05D0])
	 */
	class AElectronicTreasureBox : public ASolarTreasureBoxActor
	{
	public:
		class FString                                              OnFinishSpawnLoopAudio;                                  // 0x05D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              OnStopLoopAudio;                                         // 0x05E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              OnOpenAudio;                                             // 0x05F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSpawnedActorHandle                                 CachedActorHandle;                                       // 0x0600(0x0004) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_76JK[0xC];                                   // 0x0604(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.EmojiBubbleSubsystem
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UEmojiBubbleSubsystem : public UGameInstanceSubsystem
	{
	public:
		class UDataTable* EmojiTable;                                              // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ShowEmojiBubbleToContainerInLobby(int32_t EmojiID, class ASolarLobbyCharacter* InLobbyCharacter, const class FString& PlayerId);
		void ShowEmojiBubbleToContainer(int32_t EmojiID, class ASolarCharacter* InCharacter);
		void ResetAllEmojiBubble();
		bool GetEmojiConfigByID(int32_t EmojiID, struct FEmojiBubbleConfig* OutConfig);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.EmojiBubbleWidget
	 * Size -> 0x0248 (FullSize[0x0590] - InheritedSize[0x0348])
	 */
	class UEmojiBubbleWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_ZG59[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShowTime;                                                // 0x0358(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EY3L[0x34];                                  // 0x035C(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetAnimation* EmojiBegin_Anim;                                         // 0x0390(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* EmojiEnd_Anim;                                           // 0x0398(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_Emoji;                                               // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsSpecialEmoji;                                          // 0x03A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QCIN[0x3];                                   // 0x03A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    EmojiOffsetInLobby;                                      // 0x03AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           LobbyEmojiSize;                                          // 0x03B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  EmojiSizeCurve;                                          // 0x03B8(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  EnemyEmojiSizeCurve;                                     // 0x0440(0x0088) Edit, NativeAccessSpecifierPublic
		int32_t                                                    TeamMateEmojiOffset;                                     // 0x04C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SelfEmojiOffset;                                         // 0x04CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<EUsePlayerType>                                     EmoteAppearSoundConfig;                                  // 0x04D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<EUsePlayerType>                                     EmoteSoundConfig;                                        // 0x04E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GTBA[0xA0];                                  // 0x04F0(0x00A0) MISSED OFFSET (PADDING)

	public:
		void UpdateEmojiContent(int32_t EmojiID);
		void SetIsInLobbyTeam(bool IsInLobbyTeam);
		void OnEndAnimationFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.EShopGoodsObject
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UEShopGoodsObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_2O5F[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ProductID;                                               // 0x0030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ItemID;                                                  // 0x0034(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Price;                                                   // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Num;                                                     // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CoolDown;                                                // 0x0040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Generation;                                              // 0x0044(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsRecommend;                                            // 0x0048(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FXQS[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateData(const struct FElectricShopItem& InItemData, bool InRecommend);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.EventAction
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class UEventAction : public UActionNode
	{
	public:
		unsigned char                                              UnknownData_YAUB[0x10];                                  // 0x0070(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ExpWidget
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class UExpWidget : public USolarUserWidget
	{
	public:
		int32_t                                                    LocalTextIndex;                                          // 0x0348(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BII1[0x4];                                   // 0x034C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarTextBlock* SolarText_WP_Exp;                                        // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Exp_Anim;                                                // 0x0358(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PlayGetEXPAnimation(int32_t InExp);
		class FString GetExpDisplayStringWithValue(int32_t Value);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.FeedbackCanvasPanel
	 * Size -> 0x0050 (FullSize[0x01B8] - InheritedSize[0x0168])
	 */
	class UFeedbackCanvasPanel : public UCanvasPanel
	{
	public:
		TMap<class FString, struct FFeedbackSingleData>            FeedbackMap;                                             // 0x0168(0x0050) Edit, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.FeedbackWidget
	 * Size -> 0x0040 (FullSize[0x02A0] - InheritedSize[0x0260])
	 */
	class UFeedbackWidget : public UUserWidget
	{
	public:
		class UFeedbackCanvasPanel* FeedbackPanel;                                           // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VisibilityTime;                                          // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VisibilityTimer;                                         // 0x026C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFeedbackSingleData                                 CurrentFeedbackSingleData;                               // 0x0270(0x0030) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.FireInputWidget
	 * Size -> 0x0238 (FullSize[0x0370] - InheritedSize[0x0138])
	 */
	class UFireInputWidget : public UWidget
	{
	public:
		struct FSlateBrush                                         JoyStickThumb;                                           // 0x0138(0x0098) Edit, NativeAccessSpecifierPrivate
		struct FSlateBrush                                         JoyStickThumbPress;                                      // 0x01D0(0x0098) Edit, NativeAccessSpecifierPrivate
		struct FSlateBrush                                         JoyStickIcon;                                            // 0x0268(0x0098) Edit, NativeAccessSpecifierPrivate
		struct FVector2D                                           VisualSize;                                              // 0x0300(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector2D                                           ThumbSize;                                               // 0x0308(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector2D                                           InputScale;                                              // 0x0310(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector2D                                           IconSize;                                                // 0x0318(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ActiveOpacity;                                           // 0x0320(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      InactiveOpacity;                                         // 0x0324(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TimeUntilDeactive;                                       // 0x0328(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPreventReCenter;                                        // 0x032C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2B6O[0x13];                                  // 0x032D(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnJoystickPressed;                                       // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoystickRelease;                                       // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInputYawAndPitch;                                      // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetJoyStickThumbBrush(const struct FButtonStyle& ButtonStyle);
		void SetJoyStickIcon(const struct FSlateBrush& Icon);
		void SetInputScale(const struct FVector2D& Scale);
		void ResetControlInput();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameArgs
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UGameArgs : public UObject
	{
	public:
		unsigned char                                              UnknownData_PTKB[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      CommandLineArgs;                                         // 0x0030(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       SkipTutorial;                                            // 0x0040(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NO45[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		bool ExecGameArgs(const class FString& Args, class FString* FailReason);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameDataManager
	 * Size -> 0x0F80 (FullSize[0x11A8] - InheritedSize[0x0228])
	 */
	class AGameDataManager : public AGameManagerBase
	{
	public:
		unsigned char                                              UnknownData_WXJW[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            IntegerValues;                                           // 0x0230(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<float>                                              FloatValues;                                             // 0x0240(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<unsigned char>                                      ByteValues;                                              // 0x0250(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<bool>                                               BoolValues;                                              // 0x0260(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     FVectorValues;                                           // 0x0270(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      FStringValues;                                           // 0x0280(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TTY2[0x60];                                  // 0x0290(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSCMHostData                                        GlobalDataMap;                                           // 0x02F0(0x0488) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class FString, struct FSCMHostData>                   SideDataMap;                                             // 0x0778(0x0050) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class FString, struct FSCMHostData>                   PlayerDataMap;                                           // 0x07C8(0x0050) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FSCMHostData                                        SideDataDefaultTemplate;                                 // 0x0818(0x0488) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FSCMHostData                                        PlayerDataDefaultTemplate;                               // 0x0CA0(0x0488) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class FString, class URank*>                          RanKMap;                                                 // 0x1128(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UFL4[0x20];                                  // 0x1178(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* DataTable;                                               // 0x1198(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable* GeneralDataTable;                                        // 0x11A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void RemoveHost(ESCMHostType HostType, const class FString& HostID);
		void RemoveData(ESCMHostType HostType, const class FString& HostID, const class FString& DataName, ESCMDataSetType DataSetType);
		void NotifyRemoveHost(ESCMHostType HostType, const class FString& HostID);
		void AddDataByTableRow(const class FName& RowName, const struct FSCMDataBoardRow& InTableRow);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameEventComponent
	 * Size -> 0x0008 (FullSize[0x00D8] - InheritedSize[0x00D0])
	 */
	class UGameEventComponent : public UGameModeCompBase
	{
	public:
		float                                                      WorldTime;                                               // 0x00D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N9E5[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (PADDING)

	public:
		void ReceiveInit();
		void InitializeEventList();
		int32_t GetAliveCount();
		void CheckEventList(float DeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameJobManager
	 * Size -> 0x0218 (FullSize[0x0440] - InheritedSize[0x0228])
	 */
	class AGameJobManager : public AGameManagerBase
	{
	public:
		class FScriptMulticastDelegate                             SideListChangeEvent;                                     // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSCMSideData>                                SideData;                                                // 0x0238(0x0010) Net, ZeroConstructor, RepNotify, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FString, uint32_t>                              SideIndexMap;                                            // 0x0248(0x0050) NativeAccessSpecifierPrivate
		TMap<class FString, class ASCMPlayerState*>                PlayerIndexMap;                                          // 0x0298(0x0050) NativeAccessSpecifierPrivate
		TArray<class ASCMPlayerState*>                             OBPlayerList;                                            // 0x02E8(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5OY9[0x20];                                  // 0x02F8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* JobDataTable;                                            // 0x0318(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSideAttributeSetArray                              SideAttributeSets;                                       // 0x0320(0x0120) Net, Protected, NativeAccessSpecifierProtected

	public:
		bool SwitchPlayerSideAndJob(class ASCMPlayerState* PlayerA, class ASCMPlayerState* PlayerB);
		bool SwitchPlayers(class ASCMPlayerState* PlayerA, class ASCMPlayerState* PlayerB);
		bool SwitchPlayerPosInTeam(class ASCMPlayerState* PlayerA, class ASCMPlayerState* PlayerB);
		bool SwitchOBPlayerAndPlayer(class ASCMPlayerState* OBPlayer, class ASCMPlayerState* Player);
		void SideListChangeEvent__DelegateSignature(TArray<struct FSCMSideData> SideList);
		void SetTimerToNoticeSideDataChanged();
		void ServerSidePosInTeamChange(const class FString& SideName);
		bool PreAssignOBToPlayer(class ASCMPlayerState* Player);
		bool PreAssignJobToPlayer(class ASCMPlayerState* Player, const class FString& Side, const class FString& Job, int32_t PosInTeam);
		void OnRep_SideDataList();
		void OnRep_OBPlayerList();
		void OnPlayerStateEndPlay(class AActor* PlayerState, EEndPlayReason EndPlayReason);
		void OnOBPlayerListChanged(class ASCMPlayerState* ChangedPlayer);
		bool IsPlayerSameTeam(class ASCMPlayerState* TargetPlayer, const class FString& TargetPlayerId);
		bool IsExistSide(const class FString& NewSide);
		TArray<int32_t> GetTeamAssignableNumArray();
		bool GetSidePreJoinPlayerList(const class FString& SideName, TArray<class ASCMPlayerState*>* OutPreJoinPlayerList);
		bool GetSidePlayerList(const class FString& SideName, TArray<class ASCMPlayerState*>* OutPlayerList);
		bool GetSideJobPlayerList(const class FString& SideName, const class FString& JobName, TArray<class ASCMPlayerState*>* OutPlayerList);
		bool GetSideData(const class FString& InSideName, struct FSCMSideData* outData);
		bool GetSideAttributeSet(struct FSideAttributeSet* OutSet, const class FString& InSideName);
		bool GetPreOBPlayerIDList(TArray<class FString>* OutPlayerIDList);
		class ASCMPlayerState* GetPlayerByPlayerID(const class FString& InPlayerID);
		bool GetOBPlayerList(TArray<class ASCMPlayerState*>* OutPlayerList);
		bool GetJobDataBySideAndJob(const class FString& NewSide, const class FString& NewJob, struct FSCMJobData* outData);
		int32_t GetAssignedSideCount();
		int32_t GetAllSidePlayerNumber();
		TArray<struct FSCMSideData> GetAllSideData();
		bool ChangePlayerToOB(class ASCMPlayerState* Player);
		bool ChangePlayerJob(class ASCMPlayerState* Player, const class FString& NewSide, const class FString& NewJob, int32_t PosInTeam);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.LevelWorldCompositionSetting
	 * Size -> 0x00A0 (FullSize[0x00D8] - InheritedSize[0x0038])
	 */
	class ULevelWorldCompositionSetting : public UDeveloperSettings
	{
	public:
		TMap<struct FSoftObjectPath, struct FVector>               BackupLevelStreamingLocationMap;                         // 0x0038(0x0050) Edit, Config, NativeAccessSpecifierPublic
		TMap<struct FSoftObjectPath, struct FLoadingScreenLevelData> LoadingScreenLevelData;                                  // 0x0088(0x0050) Edit, Config, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameLevelManager
	 * Size -> 0x0250 (FullSize[0x0478] - InheritedSize[0x0228])
	 */
	class AGameLevelManager : public AGameManagerBase
	{
	public:
		unsigned char                                              UnknownData_QVTC[0x20];                                  // 0x0228(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DesiredLoadLevel;                                        // 0x0248(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U64D[0x10];                                  // 0x0258(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      DesiredLoadElementLevels;                                // 0x0268(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FString>                                      DesiredUnLoadElementLevels;                              // 0x0278(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_87Y8[0xA8];                                  // 0x0288(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class ULevelStreamingDynamic*>         LevelKeyToObject;                                        // 0x0330(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              MovementDisabledCharacters[0x50];                        // 0x0380(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_81OE[0x60];                                  // 0x03D0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      LoadingElementLevelNames;                                // 0x0430(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FString>                                      UnLoadingElementLevelNames;                              // 0x0440(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_N7CF[0x18];                                  // 0x0450(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AGameMapElementManager* MapElementManager;                                       // 0x0468(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YZJL[0x8];                                   // 0x0470(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetMinimapFootprintVisible(bool bVisible);
		void OnStreamingLevelLoaded();
		void OnScoutPlayerDepart();
		void OnRep_DesiredUnLoadElementLevels();
		void OnRep_DesiredLoadLevel();
		void OnRep_DesiredLoadElementLevels();
		void OnLevelLoaded();
		void OnElementStreamingLevelUnLoaded();
		void OnElementStreamingLevelLoaded();
		void OnCharacterEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
		void LevelManagerTick();
		int32_t GetCurrentMapID();
		class FString GetCurrentLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameMapElementManager
	 * Size -> 0x00C0 (FullSize[0x02E8] - InheritedSize[0x0228])
	 */
	class AGameMapElementManager : public AGameManagerBase
	{
	public:
		TMap<class FString, class ASCMMapElementBase*>             MapElementListWithID;                                    // 0x0228(0x0050) NativeAccessSpecifierPrivate
		TArray<class ASCMMapElementBase*>                          MapElementList;                                          // 0x0278(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASCMPlayerStart*>                             PlayerStartList;                                         // 0x0288(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5DOC[0x50];                                  // 0x0298(0x0050) MISSED OFFSET (PADDING)

	public:
		void OnAddNewMapElement(class AActor* InNewActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameModeGlobalSetting
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UGameModeGlobalSetting : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnGlobalSettingChanged;                                  // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bCanVJetInWater;                                         // 0x0038(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanHJetInWater;                                         // 0x0039(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideVJetCD;                                         // 0x003A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SU9W[0x1];                                   // 0x003B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverridenVJetCD;                                         // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideHJetCD;                                         // 0x0040(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9UCZ[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverridenHJetCD;                                         // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableJetCost;                                          // 0x0048(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EJetAltitudeLimitationMode                                 JetAltitudeLimitationMode;                               // 0x0049(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableEnergyCost;                                       // 0x004A(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableDamage;                                           // 0x004B(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableTeamDamage;                                       // 0x004C(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableMinHPLock;                                        // 0x004D(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O4M5[0x2];                                   // 0x004E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinHPToLock;                                             // 0x0050(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableSkydiveFollowMovement;                            // 0x0054(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableBigMap;                                           // 0x0055(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowVehicleOnMap;                                       // 0x0056(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X532[0x1];                                   // 0x0057(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    KillStreakEndNoticeNumber;                               // 0x0058(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    KillLeaderMinKillNumber;                                 // 0x005C(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowRevengeNotice;                                      // 0x0060(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowKillStreakEndNotice;                                // 0x0061(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowTotalKillNotice;                                    // 0x0062(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowKillDownNotice;                                     // 0x0063(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowKillLeaderNotice;                                   // 0x0064(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowKillLeaderShutDownNotice;                           // 0x0065(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowClearTeamNotice;                                    // 0x0066(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWeaponInfiniteAmmoMode                                    WeaponInfiniteAmmoMode;                                  // 0x0067(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableWeaponPartEffectTip;                              // 0x0068(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7MZU[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              WeaponLevelDamageFactorArray;                            // 0x0070(0x0010) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDestroyItemOnDiscard;                                   // 0x0080(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDestroyWeaponOnDiscard;                                 // 0x0081(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanRebirth;                                             // 0x0082(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanLoginBattle;                                         // 0x0083(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableBattlePrompt;                                     // 0x0084(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableBattlePrompt_BeginPlay;                           // 0x0085(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableOpponentPerspective;                              // 0x0086(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bKillPlayerWhenOut;                                      // 0x0087(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ConfigGameModeId;                                        // 0x0088(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableEnemyNameMark;                                    // 0x008C(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZQCE[0x3];                                   // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EnableEnemyNameMarkDistance;                             // 0x0090(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnemyNameMarkDuration;                                   // 0x0094(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SummonedAirDropMaxSum;                                   // 0x0098(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SummonedAirDropLifeTime;                                 // 0x009C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SummonedAirDropDestroyEffectTime;                        // 0x00A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QZM9[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetWeaponInfiniteAmmoMode(EWeaponInfiniteAmmoMode NewValue);
		void SetTeamDamageEnabled(bool bNewValue);
		void SetSkydiveFollowMovementEnabled(bool bNewValue);
		void SetShowVehicleOnMap(bool bNewValue);
		void SetShowTotalKillNotice(bool InShowTotalKillNotice);
		void SetShowShowClearTeamNotice(bool InShowClearTeamNotice);
		void SetShowRevengeNotice(bool InShowRevengeNotice);
		void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice);
		void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice);
		void SetShowKillLeaderNotice(bool InShowKillLeaderNotice);
		void SetShowKillDownNotice(bool InShowKillDownNotice);
		void SetMinHPToLock(float NewValue);
		void SetMinHPLockEnabled(bool bNewValue);
		void SetKillStreakEndNoticeNumber(int32_t InKillStreakEndNoticeNumber);
		void SetKillPlayerWhenOut(bool bNewValue);
		void SetKillLeaderMinKillNumber(int32_t InKillLeaderMinKillNumber);
		void SetJetCostEnabled(bool bNewValue);
		void SetJetAltitudeLimitationMode(EJetAltitudeLimitationMode NewValue);
		void SetGameCanRebirth(bool bNewValue);
		void SetEnergyCostEnabled(bool bNewValue);
		void SetDamageEnabled(bool bNewValue);
		void SetCanVJetInWater(bool bNewValue);
		void SetCanLoginBattle(bool bNewValue);
		void SetCanHJetInWater(bool bNewValue);
		void SetBigMapEnabled(bool bNewValue);
		void ReceiveSettingChanged();
		bool IsVJetCDOverriden();
		bool IsTeamDamageEnabled();
		bool IsSkydiveFollowMovementEnabled();
		bool IsShowVehicleOnMap();
		bool IsShowTotalKillNotice();
		bool IsShowRevengeNotice();
		bool IsShowKillStreakEndNotice();
		bool IsShowKillLeaderShutDownNotice();
		bool IsShowKillLeaderNotice();
		bool IsShowKillDownNotice();
		bool IsShowClearTeamNotice();
		bool IsOpponentPerspectiveEnabled();
		bool IsMinHPLockEnabled();
		bool IsKillPlayerWhenOut();
		bool IsJetCostEnabledEnabled();
		bool IsHJetCDOverriden();
		bool IsGameCanRebirth();
		bool IsGameCanLoginBattle();
		bool IsEnergyCostEnabled();
		bool IsEnableWeaponPartEffectTip();
		bool IsDestroyWeaponOnDiscard();
		bool IsDestroyItemOnDiscard();
		bool IsDamageEnabled();
		bool IsBigMapEnabled();
		EWeaponInfiniteAmmoMode GetWeaponInfiniteAmmoMode();
		float GetOverridenVJetCD();
		float GetOverridenHJetCD();
		float GetMinHPToLock();
		int32_t GetKillStreakEndNoticeNumber();
		int32_t GetKillLeaderMinKillNumber();
		EJetAltitudeLimitationMode GetJetAltitudeLimitationMode();
		float GetDamageFactorByWeaponLevel(int32_t InWeaponLevel);
		int32_t GetConfigGameModeId();
		bool CanVJetInWater();
		bool CanHJetInWater();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameModeSettingInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameModeSettingInterface : public UInterface
	{
	public:
		class UGameModeGlobalSetting* GetGameModeSetting();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameplayTagReflectorSetting
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UGameplayTagReflectorSetting : public UObject
	{
	public:
		TMap<class FName, struct FSoftObjectPath>                  ReflectedTagsSet;                                        // 0x0028(0x0050) Edit, Config, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameplayVibrateDataAsset
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UGameplayVibrateDataAsset : public UDataAsset
	{
	public:
		TMap<EGameplayVibrateCategory, struct FVibrateIntensityPlayParams> CategoryIntensityMap;                                    // 0x0030(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameplayVibrateSettings
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UGameplayVibrateSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              GameplayVibrateConfig[0x28];                             // 0x0038(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GameReviveItemManager
	 * Size -> 0x0020 (FullSize[0x0248] - InheritedSize[0x0228])
	 */
	class AGameReviveItemManager : public AGameManagerBase
	{
	public:
		int32_t                                                    MaxReviveUsage;                                          // 0x0228(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveItemRepoTime;                                      // 0x022C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveProximityRadius;                                   // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveHeight;                                            // 0x0234(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReviveWaitTime;                                          // 0x0238(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bGlobalUseRevieItem;                                     // 0x023C(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1E0S[0x3];                                   // 0x023D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DownedReviveButtonDelayTime;                             // 0x0240(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OPZF[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetGlobalUseReviveItem(bool InCanUseItem);
		bool PlayerTryUseReviveItem(class ASolarPlayerState* InPlayerState, int32_t InUseNum);
		void OnTeammateReviveManagerRefresh();
		void OnStartReviveItemRecycleCountDownDataRequested();
		void OnRep_GlobalUseRevieItem();
		bool IsPlayerReviving(class ASolarPlayerState* InPlayerState);
		float GetReviveWaitTime();
		float GetReviveProximityRadius();
		float GetReviveItemRepoTime();
		int32_t GetReviveItemID();
		float GetReviveHeight();
		int32_t GetPlayerReviveItemNum(class ASolarPlayerState* InPlayerState);
		int32_t GetMaxReviveUsage();
		float GetDownedReviveButtonDelayTime();
		void ClearAllPlayersReviveItem();
		bool CanPlayerUseReviveItem(class ASolarPlayerState* InPlayerState, bool bCheckItemNum);
		bool CanGlobalUseReviveItem();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.Rank
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class URank : public UObject
	{
	public:
		TMap<uint32_t, class FScriptMulticastDelegate>             SpecificRankChangeEventMap;                              // 0x0028(0x0050) ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<struct FSCMRankListMulticast>                       RankListChangeMulticasts;                                // 0x0078(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3VBS[0x20];                                  // 0x0088(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESCMDataRankType                                           RankType;                                                // 0x00A8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMHostType                                               HostType;                                                // 0x00A9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z526[0x6];                                   // 0x00AA(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GaugeImage
	 * Size -> 0x0068 (FullSize[0x02C8] - InheritedSize[0x0260])
	 */
	class UGaugeImage : public UUserWidget
	{
	public:
		EGaugeType                                                 GaugeType;                                               // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInvert;                                                 // 0x0261(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1600[0x2];                                   // 0x0262(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           ImageSize;                                               // 0x0264(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InitialDegree;                                           // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSymmetric;                                              // 0x0270(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BEWM[0x3];                                   // 0x0271(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           CenterOffset;                                            // 0x0274(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S6S1[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject* ResourceObject;                                          // 0x0280(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Progress;                                                // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7LYJ[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface* MaterialDegree360;                                       // 0x0290(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface* MaterialDegree180;                                       // 0x0298(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface* MaterialDegree90;                                        // 0x02A0(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface* MaterialDegreeLR;                                        // 0x02A8(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface* MaterialDegreeUD;                                        // 0x02B0(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* TargetImage;                                             // 0x02B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic* MaterialInstance;                                        // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateProgress(float InProgress);
		void SetProgress(float InProgress);
		void SetImage(class UObject* RO);
		class UImage* GetInternalImage();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDataAsset
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarDataAsset : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_308P[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		void InitFromAsset();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GlobalVehicleWeaponConfig
	 * Size -> 0x00C0 (FullSize[0x00F8] - InheritedSize[0x0038])
	 */
	class UGlobalVehicleWeaponConfig : public USolarDataAsset
	{
	public:
		TArray<struct FAssitLockBoneWeight>                        AssistLockBoneWeight;                                    // 0x0038(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FAssitLockBoneWeight>                        SortAssistLockBoneWeight;                                // 0x0048(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CoefficientHUD;                                          // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CoefficientWorld;                                        // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CoefficientHUDUnlock;                                    // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CoefficientWorldUnlock;                                  // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HudDistFromAssistLockPawnToSecondReticle;                // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X4LW[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  AssistLockUIScaleCurve;                                  // 0x0070(0x0088) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GlobalWeaponConfig
	 * Size -> 0x0518 (FullSize[0x0550] - InheritedSize[0x0038])
	 */
	class UGlobalWeaponConfig : public USolarDataAsset
	{
	public:
		struct FWeaponAttributeGameplayTags                        WeaponAttributeTags;                                     // 0x0038(0x0018) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		EAimTraceOriginType                                        AimTraceOriginType;                                      // 0x0050(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J6YY[0x3];                                   // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MuzzleInWallCheckDistance;                               // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpreadSmoothSpeed;                                       // 0x0058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableNewShoot;                                         // 0x005C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableGunEndShake;                                      // 0x005D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableRecoilRecovery;                                   // 0x005E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRecoilRecoveryBlockGunEndShake;                         // 0x005F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecoilRecoveryScale;                                     // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EAimOffsetAdjustType                                       AimOffsetAdjustType;                                     // 0x0064(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_77XA[0x3];                                   // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           StandardViewportSize;                                    // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StandardDPIScale;                                        // 0x0070(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWeaponReceiveShadow;                                    // 0x0074(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AG9W[0x3];                                   // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* WeaponScopeSensitivityTable;                             // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSecondLimitFullForGameDrop;                             // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TDH8[0x3];                                   // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DoScopeInterval;                                         // 0x0084(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DoScopeMixedTimeThreshold;                               // 0x0088(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintingFireDelay;                                      // 0x008C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UClass*, struct FWeaponHitResponse>             WeaponHitResponseClassMap;                               // 0x0090(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TMap<class FName, struct FWeaponHitResponse>               WeaponHitResponseTagMap;                                 // 0x00E0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TMap<class UClass*, struct FWeaponHitResponse>             WeaponHitResponseSameTeamClassMap;                       // 0x0130(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TMap<class FName, struct FWeaponHitResponse>               WeaponHitResponseSameTeamTagMap;                         // 0x0180(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  HitEffectScaleRuntimeCurve;                              // 0x01D0(0x0088) Edit, NativeAccessSpecifierPublic
		bool                                                       bCanOperateWhenOverload;                                 // 0x0258(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AITD[0x7];                                   // 0x0259(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  WeaponCrosshairSpreadSpeedRuntimeCurve;                  // 0x0260(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  WeaponCrosshairBackSpeedRuntimeCurve;                    // 0x02E8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      WeaponSkillDataUIDisplayDistance;                        // 0x0370(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PriamayFireIgnoreInterval;                               // 0x0374(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AssistAimAutoFireRadius;                                 // 0x0378(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FR3C[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ECollisionChannel>                                  AssistAimAutoFireBlockTypes;                             // 0x0380(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponAssistAimConfig* AssistAimConfig;                                         // 0x0390(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     PartUpgradeMaterial;                                     // 0x0398(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PartUpgradeFadeInterval;                                 // 0x03B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1IBD[0x4];                                   // 0x03B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EPosture, class FString>                              CharaterPostureMap;                                      // 0x03B8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               BlockCharacterSprintTags;                                // 0x0408(0x0020) Edit, NativeAccessSpecifierPublic
		class UDataTable* WeaponPartEffectDescTable;                               // 0x0428(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    WeaponPartEffectTipMaxinum;                              // 0x0430(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z14R[0x4];                                   // 0x0434(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESolarHitType, class FString>                         HitFeedbackMapForUI;                                     // 0x0438(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      CrosshairAimEnemyEndTimeForPlayerWeapon;                 // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrosshairAimEnemyEndTimeForVehicleWeapon;                // 0x048C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, EPassiveTriggeredVoice>                      AudioPromptForNoAmmoTable;                               // 0x0490(0x0050) Edit, NativeAccessSpecifierPublic
		int32_t                                                    WeaponSummonBlockNoticeID;                               // 0x04E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    WeaponSummonOverRangeNoticeID;                           // 0x04E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* WeaponSkinTable;                                         // 0x04E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EWeaponPartType, class FName>                         PartSocketNameTable;                                     // 0x04F0(0x0050) Edit, NativeAccessSpecifierPublic
		class UDataTable* WeaponLODTable;                                          // 0x0540(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnableHeadShotDamageMinScale;                            // 0x0548(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W9IP[0x4];                                   // 0x054C(0x0004) MISSED OFFSET (PADDING)

	public:
		class FString GetStateByPosture(EPosture posture);
		class FString GetStateByAnimState(ECharacterStateForWeapon CharacterState);
		bool GetIsGroundByAnimState(ECharacterStateForWeapon CharacterState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GooglePADManager
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGooglePADManager : public UObject
	{
	public:
		EGooglePADErrorCode STATIC_ShowCellularDataConfirmation();
		EGooglePADErrorCode STATIC_RequestRemoval(const class FString& Name);
		EGooglePADErrorCode STATIC_RequestInfo(TArray<class FString> AssetPacks);
		EGooglePADErrorCode STATIC_RequestDownload(TArray<class FString> AssetPacks);
		void STATIC_ReleaseDownloadState(int32_t State);
		void STATIC_ReleaseAssetPackLocation(int32_t Location);
		bool STATIC_IsGooglePlayPkg();
		bool STATIC_IsAssetPackReady(const class FString& Name);
		int32_t STATIC_GetTotalBytesToDownload(int32_t State);
		EGooglePADStorageMethod STATIC_GetStorageMethod(int32_t Location);
		EGooglePADErrorCode STATIC_GetShowCellularDataConfirmationStatus(EGooglePADCellularDataConfirmStatus* status);
		EGooglePADDownloadStatus STATIC_GetDownloadStatus(int32_t State);
		EGooglePADErrorCode STATIC_GetDownloadState(const class FString& Name, int32_t* State);
		int32_t STATIC_GetBytesDownloaded(int32_t State);
		class FString STATIC_GetAssetsPath(int32_t Location);
		EGooglePADErrorCode STATIC_GetAssetPackLocation(const class FString& Name, int32_t* Location);
		TArray<class FString> STATIC_GetAllAssetPackNames();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponBulletContainerWidget
	 * Size -> 0x0070 (FullSize[0x03B8] - InheritedSize[0x0348])
	 */
	class USolarWeaponBulletContainerWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_X5UN[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EWeaponType, struct FSolarBulletContainerLayout>      BulletContainerStorageLayout;                            // 0x0350(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FBulletContainerColor                               BulletColor;                                             // 0x03A0(0x0008) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		class UCanvasPanel* RootPanel;                                               // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurrentMaxAmmo;                                          // 0x03B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWeaponType                                                CurrentWeaponType;                                       // 0x03B4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C1ZS[0x3];                                   // 0x03B5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GridBulletContainer
	 * Size -> 0x0080 (FullSize[0x0438] - InheritedSize[0x03B8])
	 */
	class UGridBulletContainer : public USolarWeaponBulletContainerWidget
	{
	public:
		class UProgressBar* BulletContainer;                                         // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* LightOverlay;                                            // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* LightAllOverlay;                                         // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_FakeBullet;                                          // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_BulletMask;                                          // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Light;                                               // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_BulletGrid;                                          // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Light_Recharge_Empty;                                // 0x03F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Empty;                                             // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_BulletEmpty;                                         // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Light_Anim;                                              // 0x0408(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* LightAll_Anim;                                           // 0x0410(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Recharge_Empty_Anim;                                     // 0x0418(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           OneBulletSize;                                           // 0x0420(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I30J[0x10];                                  // 0x0428(0x0010) MISSED OFFSET (PADDING)

	public:
		bool RequestUpdateMaxAmmoCount(int32_t InMaxAmmo, bool bIgnoreAmmoCount);
		void ReceiveUpdateMaxAmmoEvent(int32_t InMaxAmmo);
		void ReceiveUpdateBulletEvent(int32_t ReservedAmmo, bool bIsReloading, bool bIsFirstIn);
		void ReceiveUpdateAllBulletEvent();
		void ReceiveReloadFinishEvent(bool bIsReloadSuccess);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.GyroscopeConfig
	 * Size -> 0x00C8 (FullSize[0x00F8] - InheritedSize[0x0030])
	 */
	class UGyroscopeConfig : public UDataAsset
	{
	public:
		class UDataTable* dataTab;                                                 // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* gyroscopeSensitivityDataTab;                             // 0x0038(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* GyroscopeDeviceModelDataTab;                             // 0x0040(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6WD4[0xB0];                                  // 0x0048(0x00B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HeroPickCharacterData
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UHeroPickCharacterData : public UObject
	{
	public:
		int32_t                                                    CharacterId;                                             // 0x0028(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkinId;                                                  // 0x002C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CharacterProficiencyLevel;                               // 0x0030(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SGHJ[0x8];                                   // 0x0034(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EHeroOwnedType                                             OwnType;                                                 // 0x003C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AAOS[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ConfigSortNum;                                           // 0x0040(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_70X8[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              HeroName;                                                // 0x0048(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            SelectedPlayerPos;                                       // 0x0058(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ConfirmPos;                                              // 0x0068(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9484[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HeroPickCharacterCell
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class UHeroPickCharacterCell : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_TH2S[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHeroPickCharacterData* DataObj;                                                 // 0x0350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YJFL[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateHeroIconAndName(const class FString& Name);
		void ShowSelecting(bool bShow);
		void ShowConfirm();
		void SetSelect(int32_t PosInTeam);
		void SetProficiencyTypeIcon(int32_t ProficiencyLevel);
		void SetClassTypeIcon();
		void ClearSelect();
		void BP_ShowLockState(EUIHeroPickListCellState UiState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HeroPickDetail
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UHeroPickDetail : public USolarUserWidget
	{
	public:
		void UpdateCharacterDetails(int32_t CharacterId);
		void RefreshSkillInfo(int32_t SkillType, const class FString& Attribute, const class FString& SkillName, const class FString& SkillDescription);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HeroPickInfo
	 * Size -> 0x0050 (FullSize[0x0278] - InheritedSize[0x0228])
	 */
	class AHeroPickInfo : public AInfo
	{
	public:
		class FString                                              SideName;                                                // 0x0228(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EHeroPickType                                              HeroPickType;                                            // 0x0238(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OX99[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TeammateNumMode;                                         // 0x023C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UHeroPickWidget* HeroPickWidget;                                          // 0x0240(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FPlayerSelectInfo>                           PlayerSelectInfos;                                       // 0x0248(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      HeroPickTime;                                            // 0x0258(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W6P5[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WaitingToStartTime;                                      // 0x0260(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    CurrentPickPlayerIndex;                                  // 0x0264(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      Duration;                                                // 0x0268(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_38E6[0xC];                                   // 0x026C(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnRep_WaitingToStartTime();
		void OnRep_SelectPlayerChange();
		void OnRep_PlayerSelectInfos();
		void OnRep_HeroPickTime();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HeroPickManager
	 * Size -> 0x0050 (FullSize[0x0278] - InheritedSize[0x0228])
	 */
	class AHeroPickManager : public AGameManagerBase
	{
	public:
		TArray<class AHeroPickInfo*>                               HeroPickArray;                                           // 0x0228(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeroPickTime;                                            // 0x0238(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TransitionAnimTime;                                      // 0x023C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WaitingToStartTime;                                      // 0x0240(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WaitingForEndTime;                                       // 0x0244(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHeroPickRuleBase* AIPickRule;                                              // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSoftObjectPath>                             ElementLevels;                                           // 0x0250(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAllPlayerSelecting;                                   // 0x0260(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZESS[0x17];                                  // 0x0261(0x0017) MISSED OFFSET (PADDING)

	public:
		bool SideBeginHeroPick(const class FString& SideName);
		void SetHeroPickTime(float InHeroPickTime);
		void ReceiveSidePickHeroEnd(const class FString& SideName);
		void ReceiveAllHeroPickEnd();
		bool PlayerBeginHeroPick(class ASolarPlayerState* Player);
		void On_RepAllPlayerSelectEnd();
		void AllPlayersGotoPickHero();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HeroPickPlayerSlot
	 * Size -> 0x0010 (FullSize[0x0358] - InheritedSize[0x0348])
	 */
	class UHeroPickPlayerSlot : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_JIFM[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EUIHeroPickPlayerState                                     UiState;                                                 // 0x0350(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6S5U[0x7];                                   // 0x0351(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateSelectPercent(float Percent);
		void UpdateIconAndName(const class FString& HeroName, int32_t HeroExpLevel);
		void ShowConfirm();
		void SetPlayerPos(const class FString& playerName, unsigned char InPosInTeam);
		void ChangeUIStage(EUIHeroPickPlayerState State);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HeroPickRuleBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UHeroPickRuleBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HeroPickWidget
	 * Size -> 0x00A0 (FullSize[0x03E8] - InheritedSize[0x0348])
	 */
	class UHeroPickWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_RU7M[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AHeroPickInfo* PickInfo;                                                // 0x0350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTileView* CharacterList;                                           // 0x0358(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UHeroPickPlayerSlot*>                         PlayerSlots;                                             // 0x0360(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, class UHeroPickCharacterData*>               SelectDataMap;                                           // 0x0370(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OFCU[0x18];                                  // 0x03C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHeroPickDetail* UI_HeroPick_Detail;                                      // 0x03D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrentSelectCharacterID;                                // 0x03E0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Enable3DLayout;                                          // 0x03E4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZZKT[0x3];                                   // 0x03E5(0x0003) MISSED OFFSET (PADDING)

	public:
		void ShowPlayerConfirm(int32_t Pos);
		void ShowMyTurn(bool bShow);
		void ShowMainUICharacter(bool bShow);
		void SetMidCharacterNameAndIcon(int32_t InCharacterId, int32_t SkinId);
		void SetHeroHPAndSpeed(int32_t HP, int32_t Speed);
		void SetHeroFeatures(TArray<int32_t> InHeroFeatures);
		void SetCountDowText(const class FString& Text);
		void SetClassNameAndIcon(const class FString& ClassName);
		void SetCharacterNameAndIcon(const class FString& Name, const class FString& SkinName);
		void RefreshTacticalSkillIcon();
		void RefreshSuperSkillIcon();
		void RefreshPassiveSKillIcon();
		void PlayCharacterConfirmVoice(int32_t SkinId);
		int32_t GetTeammateNumMode();
		void Enable3DHeroPickLayout(bool Enalbe3DLayout);
		void Display3DHeroSelectedAnim(int32_t CharacterId, int32_t SkinId, bool IsConfirm);
		void ConfirmSelect();
		void BP_OnSelfConfirmSelected();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HitTracesWidget
	 * Size -> 0x00D0 (FullSize[0x0330] - InheritedSize[0x0260])
	 */
	class UHitTracesWidget : public UUserWidget
	{
	public:
		class UCanvasPanel* DefaultHitTraceRoot;                                     // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* MeleeHitTraceRoot;                                       // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* SniperHitTraceRoot;                                      // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* VehicleHitTraceRoot;                                     // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GaugeImageProgressMin;                                   // 0x0280(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GaugeImageProgressMax;                                   // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8L86[0xA8];                                  // 0x0288(0x00A8) MISSED OFFSET (PADDING)

	public:
		int32_t UpdateHitTrace(int32_t HitTraceID, EHitTraceType HitTraceType, float WidgetAngle, float WidgetScale);
		void RemoveHitTrace(int32_t HitTraceID);
		void ClearAllHitTraces();
		int32_t AddHitTrace(int32_t HitTraceID, EHitTraceType HitTraceType, float WidgetAngle, float WidgetScale);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterMovementCompBase
	 * Size -> 0x0088 (FullSize[0x06A0] - InheritedSize[0x0618])
	 */
	class USolarCharacterMovementCompBase : public UCharacterMovementComponent
	{
	public:
		unsigned char                                              UnknownData_KBDJ[0x8];                                   // 0x0618(0x0008) Fix Super Size
		unsigned char                                              UnknownData_OHM7[0x30];                                  // 0x0620(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TimeDiscrepancyUploadThres;                              // 0x0650(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D2VQ[0x4];                                   // 0x0654(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarClientAdjustPositionInfo                      CachedClientAdjustPositionInfo;                          // 0x0658(0x0038) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UABY[0x10];                                  // 0x0690(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterMovementComponent
	 * Size -> 0x01F0 (FullSize[0x0890] - InheritedSize[0x06A0])
	 */
	class USolarCharacterMovementComponent : public USolarCharacterMovementCompBase
	{
	public:
		unsigned char                                              UnknownData_ECIP[0x10];                                  // 0x06A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacter* SolarCharacterOwner;                                     // 0x06B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultUnscaledCapsuleHalfHeight;                        // 0x06B8(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultLazyRefreshBonesDelay;                            // 0x06BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UCAM[0x20];                                  // 0x06C0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bKeepWalkSpeedOnTurning;                                 // 0x06E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CD0A[0x3];                                   // 0x06E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinJogSpeedScaleOnBlocked;                               // 0x06E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinRunSpeedScaleOnBlocked;                               // 0x06E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinSprintSpeedScaleOnBlocked;                            // 0x06EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinCrawlSpeedScaleOnBlocked;                             // 0x06F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinSwimSpeedScaleOnBlocked;                              // 0x06F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinAccelerationProjectRatioForValidGroundSlide;          // 0x06F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideFallingGravity;                                 // 0x06FC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_08AW[0x3];                                   // 0x06FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverriddenFallingGravity;                                // 0x0700(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallingHorizontalSpeedUpperLimit;                        // 0x0704(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxLocationDifferenceToTrustClientMove;                  // 0x0708(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EClientMoveTrustType                                       ClientMoveTrustType;                                     // 0x070C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IPAC[0x35];                                  // 0x070D(0x0035) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAirMoveMode                                               CurrentAirMoveMode;                                      // 0x0742(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAirMoveMode                                               LastAirMoveMode;                                         // 0x0743(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EX9S[0x4];                                   // 0x0744(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCustomJumpParams                                   CustomJumpParams;                                        // 0x0748(0x000C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FCustomJumpParams                                   CustomLaunchParams;                                      // 0x0754(0x000C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6XAY[0x10];                                  // 0x0760(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UJetPackConfig* JetPackConfig;                                           // 0x0770(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K93S[0x18];                                  // 0x0778(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkydiveConfig* SkydiveConfig;                                           // 0x0790(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OA3K[0x20];                                  // 0x0798(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HinderAngel;                                             // 0x07B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HinderPercent;                                           // 0x07BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HinderZ;                                                 // 0x07C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SwimSpeedWhenSprintLockConfig;                           // 0x07C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SwimSpeedConfig;                                         // 0x07C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SwimSpeedSmoothSpeed;                                    // 0x07CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SwimMaxFloatingUpSpeed;                                  // 0x07D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SwimMaxSinkingSpeed;                                     // 0x07D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class APhysicsVolume>                       NextPhysicsVolume;                                       // 0x07D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UY3R[0x7D];                                  // 0x07E0(0x007D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bWantDeathVerge;                                         // 0x085D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XE5S[0x2];                                   // 0x085E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeathVergeBodyRadius;                                    // 0x0860(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DeathVergeHalfHeight;                                    // 0x0864(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BFGR[0x8];                                   // 0x0868(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor* HangingTargetObj;                                        // 0x0870(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             HangingTargetVelocity;                                   // 0x0878(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseHangingTargetVelocity;                                // 0x0884(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseHangingTargetPos;                                     // 0x0885(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EM17[0xA];                                   // 0x0886(0x000A) MISSED OFFSET (PADDING)

	public:
		void UpdateCharacterStateAfterMovement__DelegateSignature(class USolarCharacterMovementComponent* MovementComponent, float DeltaTime);
		void SetHinderZ(float InHinderZ);
		void SetHinderAngel(float InHinderAngel);
		void OnMovementBaseChanged(class ACharacter* Character, class UPrimitiveComponent* OldBase, class UPrimitiveComponent* NewBase);
		void HinderUphill(const struct FVector& SlopeNormal, struct FVector* MoveVelocity);
		EPhysicalSurface GetSteppedSurfaceType();
		EWalkMode GetLastWalkMode();
		EWalkMode GetCurrentWalkMode();
		void ForcedJump();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HomeCharacterMovementComponent
	 * Size -> 0x0070 (FullSize[0x0900] - InheritedSize[0x0890])
	 */
	class UHomeCharacterMovementComponent : public USolarCharacterMovementComponent
	{
	public:
		unsigned char                                              UnknownData_CMAI[0x20];                                  // 0x0890(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FServerMoveData>                             ServerMoves;                                             // 0x08B0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NetSyncDeltaTime;                                        // 0x08C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerifyDeltaTime;                                         // 0x08C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDelayTime;                                            // 0x08C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableMove;                                             // 0x08CC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_40XA[0x13];                                  // 0x08CD(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    CurrentServerTime;                                       // 0x08E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XN69[0x4];                                   // 0x08E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ConfigSyncDeltaTime;                                     // 0x08EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConfigVerifyStepTime;                                    // 0x08F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ConfigMaxDelay;                                          // 0x08F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConfigVerifyDistanceSquared;                             // 0x08F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K6ZX[0x4];                                   // 0x08FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetVerifyRate(float InDeltaTime);
		void SetNetSyncRate(float InDeltaTime);
		void SetMoveEnable(bool InMoveEnable);
		void SetMaxDelayTime(int32_t InMaxDelayTime);
		void GetServerTimeNow();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HomeSyncActorSubsystem
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UHomeSyncActorSubsystem : public UWorldSubsystem
	{
	public:
		class UDataTable* HomeObjectTable;                                         // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class UHomeSyncActorSubsystem* STATIC_Get(class UObject* WorldContextObject);
		void CreateHomeActor_Server(const struct FHomeActorServerData& CreateData);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_ElectricShop
	 * Size -> 0x0130 (FullSize[0x0478] - InheritedSize[0x0348])
	 */
	class UHUD_ElectricShop : public USolarUserWidget
	{
	public:
		class USolarButton* Btn_Close;                                               // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* Panel_RefreshTime;                                       // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_BG_02;                                               // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Time;                                                // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* HorizontalBox_Title;                                     // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UElectricShop_Weapon* UI_ElectricityShop_Weapon_2;                             // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UElectricShop_Weapon* UI_ElectricityShop_Weapon_3;                             // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UElectricShop_Weapon* UI_ElectricityShop_Shield;                               // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarListView* ListView_Goods;                                          // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Enter;                                              // 0x0390(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Text_Loop_Anim;                                          // 0x0398(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Passive;                                           // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_VIP;                                               // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUD_PassiveHead* UI_Passive_Head;                                         // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Bullet;                                            // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Passive;                                             // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUD_PassiveHead* UI_Passive_Head_2;                                       // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WP43[0x18];                                  // 0x03D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        TimeTextDefaultColor;                                    // 0x03E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TimeTextAlertColor;                                      // 0x03F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              AkSoundShopShow;                                         // 0x0408(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              AkSoundShopHide;                                         // 0x0418(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              PreloadListItemNum;                                      // 0x0428(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D3GU[0xF];                                   // 0x0429(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     ShopItems;                                               // 0x0438(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UElectricShop_Weapon*>                        WeaponUpgradePanels;                                     // 0x0448(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7QEW[0x20];                                  // 0x0458(0x0020) MISSED OFFSET (PADDING)

	public:
		void UpdateItemIsRecommend();
		void UpdateCountdownTime();
		void UpdateCharacterEnergy(float CurEnergy, float ChangeValue);
		void UnBindDelegate();
		void SetSelfVisibility(bool bVisible);
		void RequestUpgradeWeapon(class ASolarPlayerWeapon* InWeapon);
		void RequestUpgradeShield(class ASolarCharacter* InChara);
		void RequestPurchaseEShopItems(int32_t ProductID, bool IsRecommend);
		void ReceiveWeaponUpgrade(int32_t InWeaponSlot);
		void ReceiveShieldUpgrade(class ASolarCharacter* InCharacter);
		void PlayHUDSound(bool InVisibile);
		void OnShopGoodsCreated(class UUserWidget* InWidget);
		void OnInitElectricShop(class ASolarCharacter* InCharacter);
		void OnElectricShopVisibilitySet(bool bVisible);
		void OnClosePanel();
		void InitWeaponUpgrade(class ASolarCharacter* InCharacter);
		void InitShopItems(class ASolarElectricShop* InShop);
		void InitShieldUpgrade(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield);
		void InitElectricShopHUD(class ASolarCharacter* InCharacter);
		float GetSolarCharacterEnergy();
		class ASolarCharacter* GetBuyerSolarCharacter();
		void DelayReportStatistic();
		void DelayInitWeaponUpgrade();
		void DelayInitShopItems();
		bool CheckItemIsRecommendByID(int32_t ItemID);
		void BindDelegate();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_MarkEnemyInfo
	 * Size -> 0x0100 (FullSize[0x0448] - InheritedSize[0x0348])
	 */
	class UHUD_MarkEnemyInfo : public USolarUserWidget
	{
	public:
		class USolarTextBlock* Txt_Lvl;                                                 // 0x0348(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDeathViewHPWidget* HPAndShield;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* CanvasPanel_1;                                           // 0x0358(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Exit;                                               // 0x0360(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Enter;                                              // 0x0368(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpdateVisibleInterval;                                   // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_80TX[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* DistaceToScaleCurve;                                     // 0x0378(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              OcculusionIgnoreClasses[0x50];                           // 0x0380(0x0050) UNKNOWN PROPERTY: SetProperty
		float                                                      MinDisplayHpValue;                                       // 0x03D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HPGridUnit;                                              // 0x03D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowDebug;                                              // 0x03D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G2XL[0x7];                                   // 0x03D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   OccQueryTypes;                                           // 0x03E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Name_Exit;                                          // 0x03F0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Name_Enter;                                         // 0x03F8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_PlayerName;                                          // 0x0400(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUD_ScanEffect* ScanEffectWidget;                                        // 0x0408(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7TFJ[0x34];                                  // 0x0410(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ZOffset;                                                 // 0x0444(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void HideNameMark();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_PassiveHead
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UHUD_PassiveHead : public USolarUserWidget
	{
	public:
		class UImage* img_Hero;                                                // 0x0348(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_PickupPassive
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class UHUD_PickupPassive : public USolarUserWidget
	{
	public:
		class USolarTextBlock* Txt_Bullet;                                              // 0x0348(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHUD_PassiveHead* UI_Passive_Head;                                         // 0x0350(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L99Z[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnTogglePickupList(bool bShow);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_ScanEffect
	 * Size -> 0x0038 (FullSize[0x0380] - InheritedSize[0x0348])
	 */
	class UHUD_ScanEffect : public USolarUserWidget
	{
	public:
		class UWidgetAnimation* Anim_Scan;                                               // 0x0348(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_FadeOut;                                            // 0x0350(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ScanSound;                                               // 0x0358(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinAnimLength;                                           // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                BoneName;                                                // 0x036C(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UKMQ[0xC];                                   // 0x0374(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_SkydiveScale
	 * Size -> 0x0100 (FullSize[0x0360] - InheritedSize[0x0260])
	 */
	class UHUD_SkydiveScale : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_D7RG[0x10];                                  // 0x0260(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UProgressBar* ProgressBar_Speed;                                       // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* AltitudeDisplayAxis;                                     // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* AltitudeDisplayBox;                                      // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* SpeedDisplayAxis;                                        // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* SpeedDisplayBox;                                         // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* GroundDisplayAxis;                                       // 0x0298(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* GroundAltitudeScale;                                     // 0x02A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           AltitudeWidgetAngleRange;                                // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           SpeedWidgetAngleRange;                                   // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinSpeed;                                                // 0x02B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSpeed;                                                // 0x02BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FWrappedLocalTextID                                 AltitudeLocalTextID;                                     // 0x02C0(0x0004) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FWrappedLocalTextID                                 SpeedLocalTextID;                                        // 0x02C4(0x0004) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_67FQ[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AerialReconnaissanceRadius;                              // 0x02D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AerialReconnaissanceInterval;                            // 0x02D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* AerialReconnaissanceMarkWidgetClass;                     // 0x02D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<ESlateDetailMode, struct FSolarAerialReconnaissanceConfig> AerialReconnaissanceConfigMap;                           // 0x02E0(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class UCanvasPanel* MarkPanel;                                               // 0x0330(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BURP[0x28];                                  // 0x0338(0x0028) MISSED OFFSET (PADDING)

	public:
		void UpdateSpeedScale(float InSpeed);
		void UpdateSpeedDisplayContent(const class FText& Content);
		void UpdateAltitudeScale(float InHeight, float InZValue);
		void UpdateAltitudeDisplayContent(const class FText& Content);
		void OnUpdateCamera(float InDeltaSeconds);
		void OnSkydiveStateChanged(class ASolarCharacter* InCharacter);
		void OnCharacterDied(class ASolarCharacter* InCharacter);
		void OnAirlineHeightSet(float NewHeight);
		void K2_OnSkydiveStateChanged(bool bInFly, bool bHasPassiveSkill);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_Teammate_Profession
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class UHUD_Teammate_Profession : public UUserWidget
	{
	public:
		class USizeBox* SizeBox_Profession;                                      // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Image_216;                                               // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Icon;                                                    // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetState(ESkillStateType InState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_Teammate_State
	 * Size -> 0x02B8 (FullSize[0x0600] - InheritedSize[0x0348])
	 */
	class UHUD_Teammate_State : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_CVU0[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USizeBox* SizeBox_Relive;                                          // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Relive;                                              // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* SizeBox_Container;                                       // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* CanvasPanel_Container;                                   // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Loading;                                           // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Loading;                                             // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_PlayerBG;                                            // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* HP;                                                      // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Armor;                                                   // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarShieldProgressBoard* AdvBar_Shield_A;                                         // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KUQS[0x8];                                   // 0x03A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarHPProgressBoard* AdvBar_HP;                                               // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Lvl;                                                 // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Head;                                                // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UScaleBox* ScaleBox_NickName;                                       // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_NickName;                                           // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Tip_MarkedPoint;                                     // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* HorizontalBox_States;                                    // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Icon_AppDeactivatedOrOffline;                        // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_OutGame;                                             // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* SizeBox_Vehicle;                                         // 0x03F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Icon_Vehicle;                                        // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WidgetSwitcher_SkydiveState;                             // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WidgetSwitcher_SkydiveLeaderPos;                         // 0x0408(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WidgetSwitcher_FlyLeaderPos;                             // 0x0410(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_PlayerCover;                                         // 0x0418(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* CanvasPanel_Respond;                                     // 0x0420(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* ProgressBarRespond;                                      // 0x0428(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarButton* BtnRespond;                                              // 0x0430(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIComponentNationalFlag* UI_Component_NationalFlag;                               // 0x0438(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarUserWidget* UI_Input_Device;                                         // 0x0440(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* IconRespond;                                             // 0x0448(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Waiting_Invite_Anim;                                     // 0x0450(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Waiting_Follow_Anim;                                     // 0x0458(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* ResurrectionCountdown_Anim;                              // 0x0460(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* RespondLoopAnim;                                         // 0x0468(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* RespondedAnim;                                           // 0x0470(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Enter_Relive_Anim;                                       // 0x0478(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Loop_Relive_Anim;                                        // 0x0480(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* CD_Relive_Anim;                                          // 0x0488(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Help_Loop;                                          // 0x0490(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Remind_Loop;                                        // 0x0498(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_State_Loop;                                         // 0x04A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Fire_Anim;                                               // 0x04A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_Countdown;                                       // 0x04B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Progress_ResurrectionCD;                                 // 0x04B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Progress_RecyclingResurrection;                          // 0x04C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_KillLeader;                                          // 0x04C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_ResurrectTime;                                     // 0x04D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ResurrectTime;                                       // 0x04D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              IndexInTeam;                                             // 0x04E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ReliveState;                                             // 0x04E1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PCMY[0x2];                                   // 0x04E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Profession;                                              // 0x04E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDisplayHpValue;                                       // 0x04E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIgnoreSelfAction;                                       // 0x04EC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HAP5[0x3];                                   // 0x04ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FireAnimLoopSpeed;                                       // 0x04F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireAnimEndSpeed;                                        // 0x04F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UIDS[0x8];                                   // 0x04F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSlateBrush>                                 ReliveStateImages;                                       // 0x0500(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FLinearColor>                   PosInTeamColor;                                          // 0x0510(0x0050) Edit, EditFixedSize, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IAN1[0xA0];                                  // 0x0560(0x00A0) MISSED OFFSET (PADDING)

	public:
		void UpdateRepliableState();
		void StopHelpAnimation();
		void SetTextNickName(const class FString& InNickName);
		void SetTeammatePosAndColor(unsigned char InPosInTeam, bool bNormalState);
		void SetIsDead(bool bDead);
		void SetHelpState(int32_t InState);
		void SetActionState(int32_t InState);
		void PlayHelpAnimation();
		void OnReviveItemRecycleCountDownBegin(int32_t CurrentTime, int32_t DurationTime);
		void OnReviveDisableHint(int32_t CountDownDuration);
		void OnResurrectionStateChanged(bool IsOnResurrection);
		void OnReplyClick();
		void OnPlayerStateSet(class ASolarPlayerState* InSolarPS, bool bNormalState);
		void OnFireAnimEnd();
		bool LuaImplementedCheckIsSupportRoleClass();
		void CheckIsCompletelyDead();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_TeammateStates_Panel
	 * Size -> 0x0088 (FullSize[0x03D0] - InheritedSize[0x0348])
	 */
	class UHUD_TeammateStates_Panel : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_V6XQ[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHUD_Teammate_State* Teammate_State_2;                                        // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUD_Teammate_State* Teammate_State_3;                                        // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUD_Teammate_State* Teammate_State_4;                                        // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUD_Teammate_State* Teammate_State_5;                                        // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Change;                                             // 0x0370(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<unsigned char, class UHUD_Teammate_State*>            TeammateStateWidgets;                                    // 0x0378(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UOTH[0x8];                                   // 0x03C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateReviveIconVisibility();
		void Skydive_OnSkydivingMemberDataReplicated(class ASolarPlayerState* MemberPS);
		void SetTalentActiveInPos(ETalentState TalentState, unsigned char InPosInTeam, float AdditionalParam);
		void SetCharacterInfoInPos(int32_t InCharacterId, unsigned char InPosInTeam);
		void SetAvatarInPos(int32_t InSkinID, unsigned char InPosInTeam);
		void SetAllTeammatesState();
		void RefreshTeammateInputDevice(class ASolarPlayerState* PlayerState);
		void RefreshTeammateBattleState(class ASCMPlayerState* PlayerState);
		void RefreshKillLeaderUI(class ASolarPlayerState* KillLeader);
		void RefreshAllTeammatesStateWithoutReset();
		void RefreshAllTeammatesState(bool bNeedReset);
		void OnTeamMemberChanged(class ASolarTeamInfo* TeamInfo, class ASolarPlayerState* PlayerState);
		void OnTeammateStateWidgetRemoved();
		void OnTeammateReviveStateChanged(class ASolarPlayerState* RevivingTeammatePlayer, class ASolarPlayerState* PlayerState);
		void OnTeammateResurrectTimeChanged(class ASolarPlayerState* PlayerState, int32_t ResurrectTime);
		void OnTeammateRescueStateChanged(class ASolarCharacter* InCharacter);
		void OnTeammateRepliableMsgChanged();
		void OnTeammatePlayerStateReplicated(class ASolarPlayerState* InTeammatePS);
		void OnTeammatePlayerStateRemovedInPreparatoryPhase(unsigned char InPosInTeam, bool bInLastOne);
		void OnTeammatePlayerStateRemovedInBattlePhase(unsigned char InPosInTeam, bool bInLastOne);
		void OnTeammateCharacterAllReady(class ASolarCharacter* InCharacter);
		void OnTeammateCallForHelpNotify(class ASolarPlayerState* PlayerState);
		void OnTeammateActionStateChanged(class ASolarPlayerState* PlayerState, const struct FGameplayTag& Tag, int32_t NewCount);
		void OnTeamInfoReplicated(class ASolarTeamInfo* PreTeamInfo, class ASolarTeamInfo* MyTeamInfo);
		void OnSpectateReferToChanged(class ASolarPlayerState* ReferToPlayerState, ESpectateReferToState State);
		void OnShieldReplicated(unsigned char InPosInTeam, const struct FShieldInfo& OldShield, const struct FShieldInfo& NewShield);
		void OnSelectingJobEffectFinish(int32_t SelectedIndex);
		void OnSelectingJobEffectBegin(class ASolarCharacter* Target, int32_t Level, TArray<int32_t> EffectIDArray);
		void OnReviveManagerReplicated();
		void OnReviveItemReplicated(unsigned char InPosInTeam, unsigned char InItemNum, bool bInCanRebirth);
		void OnPlayerOperationInGameReplicated(class ASolarPlayerState* InSolarPS);
		void OnMarkedPointInNavMapReplicated(unsigned char InPosInTeam, const struct FVector2D& InMarkPosition);
		void OnHealthReplicated(unsigned char InPosInTeam, float CurrentHP, float MaxHP);
		void OnClearMarkedPointInNavMap(unsigned char InPosInTeam);
		void OnCharacterStateInGameReplicated(class ASolarPlayerState* InCharacterPS);
		void OnBroadcastModeChanged();
		void LuaImplementedTeammatesBaseInfo(int32_t CurTeamId, unsigned char InIndex, bool bBattlePhase, class UHUD_Teammate_State* StateWidget);
		bool IsSelfVisible();
		void InitTalentIconInPos(int32_t InTalentID, unsigned char InPosInTeam);
		void InitSkillCDStateInPos(int32_t InCDState, unsigned char InPosInTeam);
		void InitPlayerLevelInPos(int32_t InPlayerLv, unsigned char InPosInTeam);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_WorldMark
	 * Size -> 0x00E0 (FullSize[0x0428] - InheritedSize[0x0348])
	 */
	class UHUD_WorldMark : public USolarUserWidget
	{
	public:
		float                                                      LiveTime;                                                // 0x0348(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExtraLiveTime;                                           // 0x034C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ResponCheckRangeParam;                                   // 0x0350(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RefreshTime;                                             // 0x0354(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             WorldPos;                                                // 0x0358(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           ScreenSize;                                              // 0x0364(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           IconSize;                                                // 0x036C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsOutOfRangeLastTime;                                   // 0x0374(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasBeenAnsweredByMe;                                    // 0x0375(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIfWasChosen;                                            // 0x0376(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsCreateBySelf;                                         // 0x0377(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* ImgMarkArrow;                                            // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* ImgItemMarkArrow;                                        // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Distance;                                                // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UpdateIconStyleTime_LowLevel;                            // 0x0390(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UpdateIconStyleTime_HighLevel;                           // 0x0394(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4MDL[0x4];                                   // 0x0398(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PosInTeam;                                               // 0x039C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FWorldMarkData                                      Data;                                                    // 0x03A0(0x0050) NativeAccessSpecifierPublic
		EWorldMarkType                                             Type;                                                    // 0x03F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QTIV[0x3];                                   // 0x03F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxWorldDistance;                                        // 0x03F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinWorldDistance;                                        // 0x03F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8GTH[0x4];                                   // 0x03FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* OpacityCurve;                                            // 0x0400(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAttachToObject;                                         // 0x0408(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZR1C[0x1F];                                  // 0x0409(0x001F) MISSED OFFSET (PADDING)

	public:
		void UpdateStyleByScreenPosition(const struct FVector2D& ScreenPos, bool bOutOfRange);
		void UpdateDistance(const struct FVector& TargetPos);
		void SwitchWidget(bool bOutOfRange);
		void SetIfBeChosen(bool bIfChosen);
		void ResponseByLocal();
		void RemoveItemMarkWhenPlayerPicked();
		void LogMarkResponse();
		void InitWidget(class UObject* Owner, int32_t InPosInTeam, const struct FWorldMarkData& InWorldMarkedData, class UObject* IconImg);
		void InitAttachedWidget(class AActor* ActorAttachedTo);
		void DestroySelf();
		bool CheckIsLowLevelDevice();
		void CancelResponse();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUD_WorldMarkPanel
	 * Size -> 0x0070 (FullSize[0x03B8] - InheritedSize[0x0348])
	 */
	class UHUD_WorldMarkPanel : public USolarUserWidget
	{
	public:
		TArray<class UHUD_MarkEnemyInfo*>                          MarkdEnemyWidgets;                                       // 0x0348(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* MarkPanel;                                               // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* MarkEnemyInfoWidgetClass;                                // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* ScanEffectWidgetClass;                                   // 0x0368(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UHUD_MarkEnemyInfo*>                          MarkEnemyWidgets;                                        // 0x0370(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FD3F[0x38];                                  // 0x0380(0x0038) MISSED OFFSET (PADDING)

	public:
		void OnSuperRadarStart(TArray<class FString> InPlayers);
		void OnSuperRadarRemovePlayer(const class FString& InPlayer);
		void OnSuperRadarEnd();
		void OnSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnScoutCharactersChange(TArray<class FString> ScoutedCharacters, TArray<class FString> ToBeScoutedCharacters);
		class FString OnRegisterPositionMarkRequested(class UActorMarkBase** OutResult, class UClass* InMarkClass, const struct FVector& InPosition);
		class FString OnRegisterActorMarkRequested(class UActorMarkBase** OutResult, class UClass* InMarkClass, class AActor* FollowActor);
		void OnDamagingActorsChange();
		void OnAimingEnemy(class ASolarCharacter* InEnemy);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUDBattleHPPanel
	 * Size -> 0x0118 (FullSize[0x0460] - InheritedSize[0x0348])
	 */
	class UHUDBattleHPPanel : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_0YYI[0x28];                                  // 0x0348(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarHPProgressBoard* HP_Bar;                                                  // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_HPNumber;                                            // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarShieldProgressBoard* AdvBar_Shield_A;                                         // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5JGV[0x8];                                   // 0x0388(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextBlock* Txt_ArmorNum;                                            // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_VX;                                                // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_SP;                                                // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* HP_Bar_ICON;                                             // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* HP_Shield_ICON;                                          // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* FX_Shield;                                               // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Armor_Light_Anim;                                        // 0x03C0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        HPBarColorNormal;                                        // 0x03C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        HPBarColorDying;                                         // 0x03D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, struct FLinearColor>                         ShieldNumColorByQuality;                                 // 0x03E8(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TB93[0x28];                                  // 0x0438(0x0028) MISSED OFFSET (PADDING)

	public:
		void UpdateShieldValue(EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, const class FString& InSolarPlayerID, EShieldRechargeState RechargeState, bool bFixPreAdd);
		void UpdateShieldMaxValue(float MaxShieldValue);
		void UpdateHPBar(float InCurHealth, float InMaxHealth);
		void UnBindDelegates();
		void ShowShieldUI(bool bIsShow);
		void ShowLevelUp(int32_t NewLevel, TArray<class FString> DynamicTips);
		void ShowGainExp(int32_t ExpAdded);
		void SetHPColor(const struct FLinearColor& InHPBarColor);
		void SetHPBarAlternateColor(bool bFlag);
		void OnShieldUpgradeAnimFinished();
		void OnLevelUpInternal(int32_t NewLevel, int32_t OldLevel);
		void OnLevelUp(int32_t NewLevel);
		void OnGainExp(int32_t ExpAdded);
		void OnEnterParachuting();
		void OnEnterLanding();
		void OnEnterCruising();
		void OnCharacterRescueStateChanged(ERescueState NewRescueState);
		void OnCharacterRebirth(class ASolarCharacter* InSolarChar);
		void OnCharacterReady();
		void InitShieldHUD(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield);
		class FString GeneralHPText(float InCurHealth, float InMaxHealth);
		void ForceInitHPBar(float InCurHealth, float InMaxHealth);
		void BindDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUDBattleUIScore
	 * Size -> 0x0028 (FullSize[0x0370] - InheritedSize[0x0348])
	 */
	class UHUDBattleUIScore : public USolarUserWidget
	{
	public:
		class UImage* Image_BG_Grid02;                                         // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* KillLeader;                                              // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_CauseDamage;                                         // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Assist;                                              // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GRW7[0x8];                                   // 0x0368(0x0008) MISSED OFFSET (PADDING)

	public:
		void RefreshKillLeaderUI(class ASolarPlayerState* KillLeaderPS);
		void RefreshCauseDamage(float CauseDamage);
		void RefreshAssistNum(int32_t AssistNum);
		void OnSpectateReferToChanged(class ASolarPlayerState* ReferToPlayerState, ESpectateReferToState State);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUDCountdownWidget
	 * Size -> 0x0070 (FullSize[0x03B8] - InheritedSize[0x0348])
	 */
	class UHUDCountdownWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_KZEF[0x40];                                  // 0x0348(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGaugeImage* Image_GameProgressBar;                                   // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_GameProgressTime;                                   // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BTN_GameProgressCancel;                                  // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_GameProgressTips;                                   // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* HorizontalBox_Cancel;                                    // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUDPassiveHeadWidget* Panel_PassiveBuff;                                       // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateGameProgressTipsText(int32_t InTextId);
		void UpdateGameProgressText();
		void UpdateGameProgressBarPercent(float InPercent);
		void UpdateGameProgress(float InAddition);
		void StopGameProgress(int32_t InActionID);
		void StopCountDownProgress(int32_t InActionID);
		void StartCountDownProgress(const struct FCountDownInfo& InCountInfo);
		void SetActiveGameProgressBar(bool Inactive);
		void OnSteamCancelCountDown();
		void OnParentVisibilityChanged(bool bVisible);
		void OnCompleteInternal();
		void OnClickButtonCancel();
		void BP_UpdateStateView(ECountDownState InState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUDItemPanel
	 * Size -> 0x01A0 (FullSize[0x04E8] - InheritedSize[0x0348])
	 */
	class UHUDItemPanel : public USolarUserWidget
	{
	public:
		class UCanvasPanel* Panel_ShieldAutoRE;                                      // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Btn_Restore;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Restore;                                             // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Restore_Num;                                         // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Btn_Change;                                              // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Shield_FX;                                           // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_DoubleShiel_VX;                                    // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Unavailable_Restore;                                     // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Double;                                             // 0x0388(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Btn_Medkit;                                              // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Btn_BigShieldRecharger;                                  // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Backpack;                                          // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Btn_Backpack;                                            // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_EMP_Enter;                                          // 0x03B0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_EMP_Exit;                                           // 0x03B8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Enter_Anim;                                              // 0x03C0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Exit_Anim;                                               // 0x03C8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              RestoreIcons[0x50];                                      // 0x03D0(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              UnknownData_AC34[0x18];                                  // 0x0420(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESpecialItemID, int32_t>                              RestoreItemMap;                                          // 0x0438(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8R1W[0x8];                                   // 0x0488(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RestoreRecommendDuration;                                // 0x0490(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M5XX[0x4];                                   // 0x0494(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_Recommend;                                         // 0x0498(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarButton* Btn_Recommend;                                           // 0x04A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Recom;                                               // 0x04A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGaugeImage* Recom_Countdown;                                         // 0x04B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Recommend_Click_Exit;                               // 0x04B8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Recommend_Unclick_Exit;                             // 0x04C0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2YTI[0xC];                                   // 0x04C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PrevLevel;                                               // 0x04D4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PrevExpRatio;                                            // 0x04D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurrentLevel;                                            // 0x04DC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentExpRatio;                                         // 0x04E0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHiddenByGameplay;                                       // 0x04E4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S1X5[0x3];                                   // 0x04E5(0x0003) MISSED OFFSET (PADDING)

	public:
		void WrappedOnLevelAndExpChanged(int32_t NewLevel, float NewExpRatio);
		void UnBindDelegates();
		void SetShieldFXVisable(bool bIsVisible);
		void SetIsHiddenByGameplay(bool InNewValue);
		void ScopeUIStateChanged(bool BOpened);
		void ResetLevelAndExpDisplayToCurrent();
		void RecommendRestoreItem();
		void OnShieldValueChanged(EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, const class FString& InSolarPlayerID, EShieldRechargeState RechargeState, bool bFixPreAdd);
		void OnRoleGEShieldMultiRecoverCoolDownChange(int32_t NewCount);
		void OnRoleAbilityHideHUD(bool bHide);
		void OnPlayerStateRep(EPlayerStateRepType RepType, class APlayerState* PlayerState);
		void OnLevelAndExpChanged();
		void OnEnterLanding();
		void OnEnterCruising();
		void OnEMP(bool bInForbidden);
		void OnConsumeItemUpdated();
		void OnCharacterRescueStateChanged(ERescueState NewRescueState);
		void OnCharacterHPChanged(float CurrentHP, float MaxHP);
		void OnBtnShieldRechargerClicked();
		void OnBtnRestoreClicked();
		void OnBtnRecommendClicked();
		void OnBtnMedkitClicked();
		void OnBtnChangeClicked();
		void OnBtnBigShieldRechargerClicked();
		void OnBtnBackpackClicked();
		bool IsBattleHUDInSpectateMode();
		bool GetIsHiddenByGameplay();
		void BindDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUDJobEffectPanel
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class UHUDJobEffectPanel : public USolarUserWidget
	{
	public:
		class UClass* ItemWidgetClass;                                         // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3NV0[0x10];                                  // 0x0350(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarButton* Btn_Detail;                                              // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ShowDetailPanel();
		void RefreshSplashEffectColor(const struct FBattleUpgradeEffectCategoryColorSet& ColorSet);
		void OnSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnSpectateInfoRep(class ASolarSpectateInfo* SpectateInfo);
		void OnNewEffectAppear(class UJobEffectItemWidget* Widget, int32_t Index, int32_t TotalCount);
		void OnEffectUpdate(class UJobEffectItemWidget* Widget, int32_t Index, const class FText& LabelContent);
		void OnBattleUpgradeEffect(ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum);
		void CloseDetailPanel();
		void AddItemWidgetToPanel(class UJobEffectItemWidget* ItemWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUDPassiveHeadWidget
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class UHUDPassiveHeadWidget : public USolarUserWidget
	{
	public:
		class UImage* Img_Head;                                                // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_Buff;                                                // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HFT4[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetData(int32_t InContributorCharacterId, int32_t InLocalTipsID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUDShieldMaterial
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class UHUDShieldMaterial : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_VRET[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetAnimation* Anim_GetMT_3;                                            // 0x0350(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_GetMT;                                              // 0x0358(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Loop;                                               // 0x0360(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnShieldUpgradeShopInteract();
		void OnShieldUpgradeItemChanged(int32_t InNewCount, int32_t InLastCount);
		void OnShieldAvailableChanged(bool bAvailable);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMapElementBase
	 * Size -> 0x0070 (FullSize[0x0298] - InheritedSize[0x0228])
	 */
	class ASolarMapElementBase : public AActor
	{
	public:
		unsigned char                                              UnknownData_7AGC[0x10];                                  // 0x0228(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Side;                                                    // 0x0238(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Job;                                                     // 0x0248(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ElementID;                                               // 0x0258(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESGameMode_ElementType                                     Type;                                                    // 0x0268(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EElementStateType                                          State;                                                   // 0x0269(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EElementVisibilityType                                     Visibility;                                              // 0x026A(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KZXM[0x5];                                   // 0x026B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* BP_HandleActorRPC;                                       // 0x0270(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ElementTypeName;                                         // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              GroupKey;                                                // 0x0280(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseSceneActorOptimization;                              // 0x0290(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TH84[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetElementVisibility(EElementVisibilityType NewType);
		EElementStateType SetElementState(EElementStateType NewState);
		void OnRep_ElementVisibility();
		void OnRep_ElementState();
		void OnElementVisibilityChanged(EElementVisibilityType CurrentVisibility);
		void OnElementStateChanged(EElementStateType CurrentState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HumanoidTarget
	 * Size -> 0x0018 (FullSize[0x02B0] - InheritedSize[0x0298])
	 */
	class AHumanoidTarget : public ASolarMapElementBase
	{
	public:
		unsigned char                                              UnknownData_F98Y[0x18];                                  // 0x0298(0x0018) MISSED OFFSET (PADDING)

	public:
		void ServerOnTargetTakeDamage(float Damage, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HuntTeammateStatesPanelWidget
	 * Size -> 0x0058 (FullSize[0x03A0] - InheritedSize[0x0348])
	 */
	class UHuntTeammateStatesPanelWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_CRKA[0x4];                                   // 0x0348(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeltaTime;                                               // 0x034C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, class UHuntTeammateStateWidget*>             TeammateStatesMap;                                       // 0x0350(0x0050) BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HuntTeammateStateWidget
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class UHuntTeammateStateWidget : public USolarUserWidget
	{
	public:
		bool                                                       bHasInitTalent;                                          // 0x0348(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasTalentStateSet;                                      // 0x0349(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FDA4[0x2];                                   // 0x034A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PlayerPosInTeam;                                         // 0x034C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerNickName;                                          // 0x0350(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UnBindPlayerCard();
		void SetTextNickName(const class FString& NickName);
		void SetTeammatePosAndColor(int32_t PosInTeam, bool IsNormalState);
		void SetStateWidgetVisibility(ESlateVisibility InVisibility);
		void SetHealthPercent(float Percent);
		void ResetToDefault();
		void RefreshTalent(class ASolarPlayerState* PlayerState);
		void RefreshCurrentPlayerOperationInGame(bool IsVisible);
		void RefreshCurrentCharacterStateInGame(bool IsInVehicle, bool IsDying, bool IsAbnormalState);
		bool HasBindedPlayer(class ASCMPlayerState* Player);
		void BindPlayerCard(class ASCMPlayerState* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HyperlinkDecorator
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UHyperlinkDecorator : public URichTextBlockDecorator
	{
	public:
		class UDataTable* HlinkSet;                                                // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              HlContent;                                               // 0x0030(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ClickFunc();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.IMChatObject
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UIMChatObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_IES9[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       GMEIsInRoom;                                             // 0x0030(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       NertcIsInRoom;                                           // 0x0031(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HHQE[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		void UnInitEvents();
		void SendPlayerPosToIMServerEveryFrame(const struct FVector& PlayerPosition, const struct FRotator& PlayerRotator, float DeltaTime);
		void NotifyBattlePlayerChanged(int32_t NumPlayers, int32_t PreviousNumPlayers);
		void InitEnvents();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.InteractionDetectionComponent
	 * Size -> 0x0000 (FullSize[0x0560] - InheritedSize[0x0560])
	 */
	class UInteractionDetectionComponent : public USphereComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ItemAttributeSet
	 * Size -> 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
	 */
	class UItemAttributeSet : public USolarAttributeSet
	{
	public:
		struct FGameplayAttributeData                              MaxSMGAmmo;                                              // 0x0030(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CurrentSMGAmmo;                                          // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              MaxARAmmo;                                               // 0x0050(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CurrentARAmmo;                                           // 0x0060(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              MaxSRAmmo;                                               // 0x0070(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CurrentSRAmmo;                                           // 0x0080(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              MaxSGAmmo;                                               // 0x0090(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CurrentSGAmmo;                                           // 0x00A0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              MaxEnergyAmmo;                                           // 0x00B0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              CurrentEnergyAmmo;                                       // 0x00C0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ItemCutDownMultiple;                                     // 0x00D0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              TempSTGAmmoIncrement;                                    // 0x00E0(0x0010) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              TempSMGAmmoIncrement;                                    // 0x00F0(0x0010) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              TempShieldRechargerIncrement;                            // 0x0100(0x0010) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		void OnRep_MaxSRAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_MaxSMGAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_MaxSGAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_MaxEnergyAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_MaxARAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_ItemCutDownMultiple(const struct FGameplayAttributeData& OldValue);
		void OnRep_CurrentSRAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_CurrentSMGAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_CurrentSGAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_CurrentEnergyAmmo(const struct FGameplayAttributeData& OldValue);
		void OnRep_CurrentARAmmo(const struct FGameplayAttributeData& OldValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WidgetControlGroup
	 * Size -> 0x0020 (FullSize[0x0280] - InheritedSize[0x0260])
	 */
	class UWidgetControlGroup : public UUserWidget
	{
	public:
		class UNamedSlot* ControlledWidget;                                        // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UWidgetControlUnit*>                          WidgetControls;                                          // 0x0268(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5NC7[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetControlledWidgetActive(bool bActive);
		bool IsControlledWidgetActive(bool bUpdateCache);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JetFlyControlGroup
	 * Size -> 0x0020 (FullSize[0x02A0] - InheritedSize[0x0280])
	 */
	class UJetFlyControlGroup : public UWidgetControlGroup
	{
	public:
		class UWidgetControlUnit* CDControl;                                               // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetControlUnit* TimesControl;                                            // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetControlUnit* ForceControl;                                            // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsedForVertical;                                        // 0x0298(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QLOH[0x7];                                   // 0x0299(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WidgetControlUnit
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class UWidgetControlUnit : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_OTZ3[0x18];                                  // 0x0260(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetControlActive(bool bActive);
		void OnOtherActiveChanged(class UWidgetControlUnit* OtherUnit);
		void OnGroupInitialized(class UWidgetControlGroup* ControlGroup);
		bool IsControlActive();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JetFlyEMPControl
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class UJetFlyEMPControl : public UWidgetControlUnit
	{
	public:
		class UWidgetAnimation* Anim_EMP;                                                // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnEMPEffected(class ASolarCharacter* EffectedCharacter, bool bEMPActive);
		void InitializeWithCharacter(class ASolarCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JetFlyForceControl
	 * Size -> 0x0070 (FullSize[0x02E8] - InheritedSize[0x0278])
	 */
	class UJetFlyForceControl : public UWidgetControlUnit
	{
	public:
		unsigned char                                              UnknownData_ICL1[0x70];                                  // 0x0278(0x0070) MISSED OFFSET (PADDING)

	public:
		void SwitchForceControlWidget(bool bRapidBoost);
		void SetContentVisibility(bool bShowContent);
		void SetContentColorAndOpacity(const struct FLinearColor& Color);
		void OnRapidBoostActivationChanged(bool bActivated);
		void OnJetModuleLvChanged(int32_t NewLevel);
		void OnForbiddenTypesChanged(EJetFlyForbiddenType Type, bool bAdded);
		void InitializeWithCharacter(class ASolarCharacter* OwningCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JetFlyIcon
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UJetFlyIcon : public USolarUserWidget
	{
	public:
		bool                                                       bUsedForVertical;                                        // 0x0348(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZWG[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (PADDING)

	public:
		void RefreshOnEMPStateChanged(bool bActive);
		void RefreshColorForLevel(int32_t Level, const struct FItemQualityData& Config);
		void OnJetModuleLvChanged(int32_t NewLevel);
		void OnEMPEffected(class ASolarCharacter* EffectedCharacter, bool bEMPActive);
		void OnCharacterSet(class ASolarCharacter* InCharacter);
		void OnCharacterSelfRebirth(class ASolarCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JetFlyInnerCDControl
	 * Size -> 0x0038 (FullSize[0x02B0] - InheritedSize[0x0278])
	 */
	class UJetFlyInnerCDControl : public UWidgetControlUnit
	{
	public:
		class UGaugeImage* ImgCD;                                                   // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* TxtCD;                                                   // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      OtherInactiveControls;                                   // 0x0288(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A2EH[0x18];                                  // 0x0298(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnCDStateChanged(bool bStart);
		void OnCDProgressSet(float InValue, float InPercent);
		void InitializeWithCharacter(class ASolarCharacter* OwningCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JetFlyTimesControl
	 * Size -> 0x00C0 (FullSize[0x0338] - InheritedSize[0x0278])
	 */
	class UJetFlyTimesControl : public UWidgetControlUnit
	{
	public:
		unsigned char                                              UnknownData_PDBO[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage* ProgressGrid;                                            // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* FinishPrompt;                                            // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_CD_Prompt;                                          // 0x0298(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_EMP;                                                // 0x02A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Resume;                                             // 0x02A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* ProgressGridBase;                                        // 0x02B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        ProgressColor;                                           // 0x02B8(0x0010) Edit, EditFixedSize, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                GridName;                                                // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ProgressName;                                            // 0x02D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LFS2[0x28];                                  // 0x02D8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidget* FlushAngel;                                              // 0x0300(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_RapidBoostFlush;                                    // 0x0308(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   VisibleSegment_Vert;                                     // 0x0310(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   VisibleSegment_Hori;                                     // 0x0320(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZI01[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRapidBoostActivationChanged(bool bActivated);
		void OnJetTimesChanged(int32_t NewTimes);
		void OnJetModuleLvChanged(int32_t NewLv);
		void OnJetMaxTimesChanged(int32_t NewTimes);
		void OnEMPEffected(class ASolarCharacter* EffectedCharacter, bool bEMPActive);
		void OnChargingProgressSet(float InValue, float InPercent);
		void OnChargeStateChanged(bool bStart);
		void InitializeWithCharacter(class ASolarCharacter* OwningCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JetPackConfig
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UJetPackConfig : public UDataAsset
	{
	public:
		float                                                      CurrentSpeedResidueHorizontal;                           // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentSpeedResidueVertical;                             // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AltitudeLimitation;                                      // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DashHeightForLimitedAltitude;                            // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlantDashInputThreshold;                                 // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalDashTime;                                        // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalDashHeight;                                      // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalDashAngle;                                       // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalDashMaxHorizontalEndSpeed;                       // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalDashBreakableTime;                               // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalDashCameraFadeOutTime;                           // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlantDashTime;                                           // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlantDashHeight;                                         // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlantDashAngle;                                          // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlantDashMaxHorizontalEndSpeed;                          // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlantDashBreakableTime;                                  // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlantDashCameraFadeOutTime;                              // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorizontalDashTime;                                      // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorizontalDashDistance;                                  // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorizontalDashAngle;                                     // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorizontalDashEndSpeed;                                  // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorizontalDashBreakableTime;                             // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorizontalDashCameraFadeOutTime;                         // 0x0088(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnderWaterHorizontalDashTime;                            // 0x008C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnderWaterHorizontalDashDistance;                        // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnderWaterHorizontalDashBreakableTime;                   // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnderWaterHorizontalDashCameraFadeOutTime;               // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVehicleEjectParams                                 DefaultVehicleEjectParams;                               // 0x009C(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BHN5[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMovablePad
	 * Size -> 0x0278 (FullSize[0x04D8] - InheritedSize[0x0260])
	 */
	class USolarMovablePad : public UUserWidget
	{
	public:
		EInputEventHandleType                                      InputEventHandle;                                        // 0x0260(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IMZG[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPressed;                                               // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReleased;                                              // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMoving;                                                // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EMovablePadLimitationFlag                                  LimitationFlag;                                          // 0x0298(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XB6L[0x7];                                   // 0x0299(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBorder* PadBase;                                                 // 0x02A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNamedSlot* MovableWidget;                                           // 0x02A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWidgetStationary;                                       // 0x02B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BKHE[0x3];                                   // 0x02B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMargin                                             InnerPadding;                                            // 0x02B4(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AS14[0x4];                                   // 0x02C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         NormalBackground;                                        // 0x02C8(0x0098) Edit, Protected, NativeAccessSpecifierProtected
		struct FSlateBrush                                         PressedBackground;                                       // 0x0360(0x0098) Edit, Protected, NativeAccessSpecifierProtected
		struct FKey                                                PointerAction;                                           // 0x03F8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FKey                                                MoveXAxis;                                               // 0x0410(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FKey                                                MoveYAxis;                                               // 0x0428(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnlySimulateCapturedMove;                               // 0x0440(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsingTouchPriority;                                     // 0x0441(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETouchMovePriority                                         TouchMovePriority;                                       // 0x0442(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2VCH[0x95];                                  // 0x0443(0x0095) MISSED OFFSET (PADDING)

	public:
		void ForceReleasePad();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JetPad
	 * Size -> 0x0040 (FullSize[0x0518] - InheritedSize[0x04D8])
	 */
	class UJetPad : public USolarMovablePad
	{
	public:
		unsigned char                                              UnknownData_A5S9[0x10];                                  // 0x04D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBorder* PadBaseUnder;                                            // 0x04E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPanelWidget* RapidBoostEffects;                                       // 0x04F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* RapidBoostEffect01;                                      // 0x04F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* RapidBoostEffect02;                                      // 0x0500(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_RapidBoost_Loop;                                    // 0x0508(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bJetVertical;                                            // 0x0510(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MMVR[0x7];                                   // 0x0511(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRapidBoostActivationChanged(bool bActivated);
		void OnJetModuleLevelChanged(int32_t NewLevel);
		void InitializeWithCharacter(class ASolarCharacter* OwningCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JobEffectDetailItemWidget
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class UJobEffectDetailItemWidget : public USolarUserWidget
	{
	public:
		class UImage* Image_Icon;                                              // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarRichTextBlock* Text_Info;                                               // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Text_Category;                                           // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Text_Name;                                               // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void RefreshColor(const struct FBattleUpgradeEffectCategoryColorSet& ColorSet);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPanelWidget
	 * Size -> 0x0050 (FullSize[0x0398] - InheritedSize[0x0348])
	 */
	class USolarPanelWidget : public USolarUserWidget
	{
	public:
		class UCanvasPanel* CanvasPanel_Bg;                                          // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* CanvasPanel_Content;                                     // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptDelegate                                      AnimationEnterStartedEvent;                              // 0x0358(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      AnimationEnterFinishedEvent;                             // 0x0368(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      AnimationExitStartedEvent;                               // 0x0378(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      AnimationExitFinishedEvent;                              // 0x0388(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate

	public:
		void OnAnimationExitStarted();
		void OnAnimationExitFinished();
		void OnAnimationEnterStarted();
		void OnAnimationEnterFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JobEffectDetailPanel
	 * Size -> 0x0000 (FullSize[0x0398] - InheritedSize[0x0398])
	 */
	class UJobEffectDetailPanel : public USolarPanelWidget
	{
	public:
		TArray<class UJobEffectDetailItemWidget*> GetItemWidgets();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JobEffectItemWidget
	 * Size -> 0x0010 (FullSize[0x0358] - InheritedSize[0x0348])
	 */
	class UJobEffectItemWidget : public USolarUserWidget
	{
	public:
		class USolarTextBlock* Text_Number;                                             // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Icon;                                                // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void RefreshColor(const struct FBattleUpgradeEffectCategoryColorSet& ColorSet);
		void PlayRefreshAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JobEffectSelectOptionWidget
	 * Size -> 0x0038 (FullSize[0x0380] - InheritedSize[0x0348])
	 */
	class UJobEffectSelectOptionWidget : public USolarUserWidget
	{
	public:
		class UImage* Image_Icon;                                              // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarRichTextBlock* Text_Info;                                               // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Text_Category;                                           // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Select;                                             // 0x0360(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Button_Select;                                           // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OnSelected;                                              // 0x0370(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic

	public:
		void RefreshColor(const struct FBattleUpgradeEffectCategoryColorSet& ColorSet);
		void OnSelected__DelegateSignature(class UJobEffectSelectOptionWidget* Widget);
		void OnSelectButtonClicked();
		void OnSelectAnimFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.JobEffectSelectPanel
	 * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
	 */
	class UJobEffectSelectPanel : public USolarUserWidget
	{
	public:
		class UWidgetAnimation* Anim_Enter;                                              // 0x0348(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Quit;                                               // 0x0350(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UJobEffectSelectOptionWidget*>                OptionWidgets;                                           // 0x0358(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PT3B[0x10];                                  // 0x0368(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnSelectingJobEffectBegin(class ASolarCharacter* Target, int32_t Level, TArray<int32_t> EffectIDArray);
		void OnOptionWidgetClicked(class UJobEffectSelectOptionWidget* OptionWidget);
		void OnFadeOutFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.KeyMappingFileMgr
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UKeyMappingFileMgr : public UObject
	{
	public:
		unsigned char                                              UnknownData_RY6J[0x80];                                  // 0x0028(0x0080) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.KeyMappingManager
	 * Size -> 0x0248 (FullSize[0x0270] - InheritedSize[0x0028])
	 */
	class UKeyMappingManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_RE6Z[0xF8];                                  // 0x0028(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnKeyMappingUpdate;                                      // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKeyMappingConfirm;                                     // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKeyboardUpdate;                                        // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WP3Y[0x10];                                  // 0x0150(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class FString>                         OccupiedKeyMap;                                          // 0x0160(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VORV[0xB0];                                  // 0x01B0(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UKeyMappingFileMgr* KeyMappingFileMgr;                                       // 0x0260(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LTZT[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (PADDING)

	public:
		void SwitchKeyMappingPlanIndex(int32_t PlanIndex);
		void SwitchKeyMapping(const class FString& ActionName, int32_t SettingIndex, bool Enable, bool Force);
		void ResetKeyMapping();
		bool IsComboKey(const class FString& KeyName);
		void ImportKeyMappingSetting();
		bool HasKeyModified();
		TArray<class FString> GetAllActionNames(int32_t PlanIndex);
		TArray<class FString> GetActionKeyMapping(const class FString& ActionName, int32_t PlanIndex, int32_t SettingIndex);
		void ApplyResult();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.KillInfoManager
	 * Size -> 0x02A0 (FullSize[0x04C8] - InheritedSize[0x0228])
	 */
	class AKillInfoManager : public AGameManagerBase
	{
	public:
		TArray<EKillNoticeType>                                    KillEffectsOrder;                                        // 0x0228(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<EKillNoticeType>                                    GlobalInfoList;                                          // 0x0238(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_73MZ[0x150];                                 // 0x0248(0x0150) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              KillLeaderID;                                            // 0x0398(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    KillLeaderKillNum;                                       // 0x03A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1V0I[0x4];                                   // 0x03AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AnnihilatorID;                                           // 0x03B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8XPF[0x8];                                   // 0x03C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              KillLeaderChangeVoiceName;                               // 0x03C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              KillLeaderShutDownVoiceName;                             // 0x03D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeKillLeaderVoiceName;                                   // 0x03E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ShutDownKillLeaderVoiceName;                             // 0x03F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, class FString>                               KillTotalVoiceMap;                                       // 0x0408(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FString                                              RevengeVoiceName;                                        // 0x0458(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              KillDownVoiceName;                                       // 0x0468(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ClearTeamVoiceName;                                      // 0x0478(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ShutDownVoiceName;                                       // 0x0488(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              KillDefenderVoiceName;                                   // 0x0498(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCustomNoticeImageTable* NoticeImageConfig;                                       // 0x04A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KEFT[0x18];                                  // 0x04B0(0x0018) MISSED OFFSET (PADDING)

	public:
		bool PlayKillInfoVoice(int32_t InNoticeID, int32_t InKillNum, const class FScriptDelegate& InDelegate);
		void OnRep_KillLeaderID();
		void ClientKillInfoNotify(class ASolarPlayerState* InKiller, class ASolarPlayerState* InVictim, int32_t KillExtraInfoHashValue);
		void ClientKillEffectNotify(class ASolarPlayerState* InKiller, class ASolarPlayerState* InVictim, int32_t KillEffectExtraInfoHashValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ListEntry_Goods
	 * Size -> 0x01F8 (FullSize[0x0540] - InheritedSize[0x0348])
	 */
	class UListEntry_Goods : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_GWUE[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnItemPurchaseRequested;                                 // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RequestEnergyGetter;                                     // 0x0360(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RequestItemRecommendation;                               // 0x0370(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class UWidgetSwitcher* WidgetSwitcher_State;                                    // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* State_Normal;                                            // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Recommend;                                         // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Item1_BG;                                            // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Item1;                                               // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_ItemCount;                                           // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_ItemName;                                            // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Introduce;                                           // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WidgetSwitcher_Buy;                                      // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarButton* Btn_Buy;                                                 // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_Discount;                                        // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ElectricityNum_Undiscounted;                         // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ElectricityNeeded;                                   // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarButton* Btn_CantBuy;                                             // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_Discount_CantBuy;                                // 0x03F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ElectricityNum_Undiscounted_CantBuy;                 // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_ElectricityNeeded_CantBuy;                           // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_BuySucceed;                                        // 0x0408(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Image_BG2_3;                                             // 0x0410(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_BuySucceed;                                          // 0x0418(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_NotAvailable;                                      // 0x0420(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Image_BG2;                                               // 0x0428(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_NotAvailable;                                        // 0x0430(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Refresh;                                           // 0x0438(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* State_CD;                                                // 0x0440(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* Progress_CD;                                             // 0x0448(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_InPrepare;                                           // 0x0450(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_CD;                                                  // 0x0458(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Succeed_Anim;                                            // 0x0460(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Refresh_Anim;                                            // 0x0468(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Recommend_Anim;                                          // 0x0470(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P6S6[0x98];                                  // 0x0478(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AkNameGoodsRefresh;                                      // 0x0510(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              AkNameGoodsBuy;                                          // 0x0520(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              AkNameGoodsBuyFailed;                                    // 0x0530(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateTexts(const class FString& Name, const class FString& Info, int32_t Num, int32_t Price, int32_t UndiscountedPrice);
		void UpdateIfNotAvailable();
		void UpdateCDText();
		void UpdateButtonBuy();
		void ShowItemRefreshEffect();
		void SetIsRecommendState(bool InIsRecommend);
		bool RequestItemRecommendation__DelegateSignature(int32_t ItemID);
		float RequestEnergyGetter__DelegateSignature();
		void OnSucceedAnimFinish();
		void OnPurchaseSuccess(int32_t InProductID, class ASolarCharacter* InCharacter);
		void OnListItemObjectSetInternal(class UObject* InObject);
		void OnItemRefreshEffectFinish();
		void OnItemRefreshAnimFinish();
		void OnItemRefresh(class ASolarElectricShop* InElectricShop);
		void OnItemPurchaseRequested__DelegateSignature(int32_t ProductID, bool bRecommend);
		void OnItemCDRefresh(class ASolarElectricShop* InElectricShop);
		void OnClickBtnCantBuy();
		void OnClickBtnBuy();
		void HidePurchaseEffect();
		float GetRemainningCD();
		int32_t GetItemID();
		float GetDiscountedPrice(float Price);
		void CheckToShowItemRefreshEffect();
		void CheckStartCD(bool InCheckBuyer);
		void CheckRecommendStateImmediately();
		void CheckEnergyAvaliableImmediately();
		void CheckEnergyAvaliable(float CurrentValue);
		void CachedNewData(const struct FElectricShopItem& InNewItemData);
		void BindDelegates();
		void AsyncLoadTextutes(int32_t InQuality, const class FString& Icon, EItemType InType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.LoadingAnim
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ULoadingAnim : public UUserWidget
	{
	public:
		void StopLoadingAnimation();
		void StartLoadingAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.LoadingBgDataAsset
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class ULoadingBgDataAsset : public UDataAsset
	{
	public:
		TArray<struct FULoadingDataEntry>                          LoadingDataConfig;                                       // 0x0030(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLoadingSetting
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USolarLoadingSetting : public UDeveloperSettings
	{
	public:
		TArray<float>                                              DataTraceTimeTrigger;                                    // 0x0038(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableLoadingReport;                                    // 0x0048(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableShowLoadingTasks;                                 // 0x0049(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PG9I[0x6];                                   // 0x004A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ReportMapMustHaveStr;                                    // 0x0050(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.LoadingUIBase
	 * Size -> 0x0248 (FullSize[0x04A8] - InheritedSize[0x0260])
	 */
	class ULoadingUIBase : public ULoadingWidgetBase
	{
	public:
		class UImage* Img_Bg;                                                  // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* LoadProgress;                                            // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Percent_Num;                                         // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Tips;                                                // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Tips_Title;                                          // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Tips_Left;                                           // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Tips_Mid;                                            // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Tips_Right;                                          // 0x0298(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, class UTexture2D*>                     BGImgMap;                                                // 0x02A0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Task_2;                                              // 0x02F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Task_3;                                              // 0x02F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Task_4;                                              // 0x0300(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Task_5;                                              // 0x0308(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Task_6;                                              // 0x0310(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Task_7;                                              // 0x0318(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Task_8;                                              // 0x0320(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EXV6[0x158];                                 // 0x0328(0x0158) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FULoadingDataEntry>                          ShowBgLoadingArray;                                      // 0x0480(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LOV2[0x10];                                  // 0x0490(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FakeProgress;                                            // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QKDU[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void StartDisplayLoading(TArray<struct FULoadingDataEntry> InLoadingBgArray, float InShowBgTime, bool bInOrder, float InShowTipsTime);
		void SetTips(const class FText& InTips);
		void SetLoadingProgress(float InPercent);
		void SetFakeProgress(float NewProgress);
		void SetBGImgFromPath(const struct FSoftObjectPath& Path);
		void SetBGImg(const class FString& ImgName);
		void OnWidgetReleasedAsLoadingScreen(class UObject* Outer);
		void OnWidgetCreatedAsLoadingScreen(class UObject* Outer);
		void OnLevelPreLoad(const class FString& MapPackageName);
		void OnAsyncLoadingFlushUpdate();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MapMarkBase
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class UMapMarkBase : public USolarUserWidget
	{
	public:
		class UMiniMapBase* MapOwner;                                                // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           MarkIconRealLoc;                                         // 0x0350(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           MarkIconAlignment;                                       // 0x0358(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsOnBigMap;                                              // 0x0360(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EMarkerType                                                MarkerType;                                              // 0x0361(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsMapObject;                                             // 0x0362(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       MoveAble;                                                // 0x0363(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SupportEdge;                                             // 0x0364(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SupportEdgeWithBigMap;                                   // 0x0365(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TCFD[0x2];                                   // 0x0366(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor* TargetActorRef;                                          // 0x0368(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FTYG[0x18];                                  // 0x0370(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateIconWithActor(class AActor* InTargetActor);
		void SetUpdateState(bool ShouldUpdateLocation);
		void SetMarkPos(const struct FVector& Loc);
		void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);
		void SetColorOpacityIndex(unsigned char InColorOpacityIndex);
		void OnBigMapOpen();
		void InitVehicleMarkIcon(int32_t VehicleID);
		void InitStaticIcon(int32_t MarkID);
		void InitMarkIcon(int32_t MarkID, class AActor* InTargetActor, bool InMoveable);
		void EdgeFix(const struct FVector2D& Pos);
		void CleanData();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MapSelectPointCellWidget
	 * Size -> 0x0048 (FullSize[0x0390] - InheritedSize[0x0348])
	 */
	class UMapSelectPointCellWidget : public USolarUserWidget
	{
	public:
		bool                                                       bCellSelectionState;                                     // 0x0348(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XOB2[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMapCellSelectionAccess                                    SelectionAccess;                                         // 0x0350(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W9TE[0x7];                                   // 0x0351(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CellAddress;                                             // 0x0358(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TK9S[0x20];                                  // 0x0368(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarMapSelectPoint* SelectPointElement;                                      // 0x0388(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetSelectionAccess(EMapCellSelectionAccess InState);
		void OnSelectionStateChanged(bool InState);
		void OnSelectionAccessChanged(EMapCellSelectionAccess CurrentState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MapSelectPointNoticeMap
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UMapSelectPointNoticeMap : public USolarUserWidget
	{
	public:
		class ASolarMapSelectPoint* SelectPointElement;                                      // 0x0348(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnTouchPanel(const struct FVector2D& InPosition);
		void OnInitialMap(int32_t InMinimapID);
		void OnAddNewCell(const struct FVector2D& InNewPosition, class UMapSelectPointCellWidget* InNewCellWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MapSelectPointWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UMapSelectPointWidget : public USolarUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MarkIconWidget
	 * Size -> 0x0038 (FullSize[0x03C0] - InheritedSize[0x0388])
	 */
	class UMarkIconWidget : public UMapMarkBase
	{
	public:
		class FString                                              AtlasPath;                                               // 0x0388(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SpriteType;                                              // 0x0398(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ImageMarker;                                             // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O145[0x10];                                  // 0x03B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetTransparent(float TransparentPercent);
		void SetMarkerType(EMarkerType Type, bool bRefreshSlot, bool bNeedSyncLoadIcon);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MassInvisibilityEffectController
	 * Size -> 0x05A8 (FullSize[0x05D0] - InheritedSize[0x0028])
	 */
	class UMassInvisibilityEffectController : public UActorEffectController
	{
	public:
		struct FMassInvStateTransitionData                         Transition_EnterPrepare;                                 // 0x0028(0x0090) Edit, NativeAccessSpecifierPublic
		struct FMassInvStateTransitionData                         Transition_PrepareToNormal;                              // 0x00B8(0x0090) Edit, NativeAccessSpecifierPublic
		struct FMassInvStateTransitionData                         Transition_NormalToSprint;                               // 0x0148(0x0090) Edit, NativeAccessSpecifierPublic
		struct FMassInvStateTransitionData                         Transition_SprintToNormal;                               // 0x01D8(0x0090) Edit, NativeAccessSpecifierPublic
		struct FMassInvStateTransitionData                         Transition_AnyToEnd;                                     // 0x0268(0x0090) Edit, NativeAccessSpecifierPublic
		struct FMassInvMaterialParams                              OriginalParams;                                          // 0x02F8(0x0028) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FMassInvStateMaterialParams                         TeammateParams;                                          // 0x0320(0x0078) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FMassInvStateMaterialParams                         OpponentParams;                                          // 0x0398(0x0078) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SprintTillingCurve;                                      // 0x0410(0x0088) Edit, NativeAccessSpecifierPublic
		class FName                                                OrnamentMatAnimParamName;                                // 0x0498(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  OrnamentMatAnimCurve;                                    // 0x04A0(0x0088) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C29X[0xA8];                                  // 0x0528(0x00A8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MaterialEffectBase
	 * Size -> 0x0110 (FullSize[0x0160] - InheritedSize[0x0050])
	 */
	class UMaterialEffectBase : public UActorEffect
	{
	public:
		unsigned char                                              UnknownData_VXCC[0x110];                                 // 0x0050(0x0110) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MaterialSimpleEffect
	 * Size -> 0x0060 (FullSize[0x01C0] - InheritedSize[0x0160])
	 */
	class UMaterialSimpleEffect : public UMaterialEffectBase
	{
	public:
		struct FNormalMaterialChange                               MaterialChange;                                          // 0x0160(0x0050) Edit, NativeAccessSpecifierPublic
		TArray<struct FSoftObjectPath>                             NoChangeMaterials;                                       // 0x01B0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MaterialVariableEffect
	 * Size -> 0x0010 (FullSize[0x01D0] - InheritedSize[0x01C0])
	 */
	class UMaterialVariableEffect : public UMaterialSimpleEffect
	{
	public:
		TArray<struct FMaterialVariableChange>                     VariableChanges;                                         // 0x01C0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MemberStateBase
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class UMemberStateBase : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_583A[0x4];                                   // 0x0260(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimalSize;                                             // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateWithCurrentMemberIndex(unsigned char CurrentIndex);
		void UnbindMemberEvent(unsigned char MemberIndex);
		void OnMinimalSizeSet(float NewSize);
		void ChangeMemberIndex(unsigned char NewIndex);
		void BindMemberEvent(unsigned char MemberIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MemberNational
	 * Size -> 0x0010 (FullSize[0x0278] - InheritedSize[0x0268])
	 */
	class UMemberNational : public UMemberStateBase
	{
	public:
		class UImage* ImgFlagIcon;                                             // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5ELJ[0x8];                                   // 0x0270(0x0008) MISSED OFFSET (PADDING)

	public:
		void RefreshFlag(int32_t InFlagID, bool bUsingClan);
		void OnPlayerFlagDisplayOptionChanged(bool bDisplay);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MicroPhoneOperationBase
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UMicroPhoneOperationBase : public USolarUserWidget
	{
	public:
		void Init(class UUserWidget* Owner);
		void CloseSpeakOperator();
		void CloseMicOperator();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MiniMapBase
	 * Size -> 0x0058 (FullSize[0x03A0] - InheritedSize[0x0348])
	 */
	class UMiniMapBase : public USolarUserWidget
	{
	public:
		int32_t                                                    MaxPool;                                                 // 0x0348(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4RVK[0x4];                                   // 0x034C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, struct FMapMarkElemArray>              MapMarkPool;                                             // 0x0350(0x0050) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void RemoveMarkIcon(class UMapMarkBase* InMapMark);
		void RemoveDotLineOnMap(int32_t DotLineID);
		void RemoveAllMapMarks();
		bool RecycleMapMark(const class FString& MapMarkName, class UMapMarkBase* MapMarkToRecycle);
		void MapScaleFormat(class UMapMarkBase* MapMark);
		class UMapMarkBase* InitMarkIconOnMapFrame(class UClass* InMapMarkClass, const struct FVector2D& Pivot, int32_t ZOrder);
		class UMapMarkBase* InitMarkIcon(class UClass* InMapMarkClass, const struct FVector2D& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32_t ZOrder);
		void InitMapMarkPool();
		class UMapMarkBase* GetFreeMapMark(const class FString& MapMarkName);
		class UMapMarkBase* CreateMapMark(const class FString& MapMarkName);
		int32_t AddDotLineOnMap(class AActor* StartPointActor, class AActor* EndPointActor, const struct FLinearColor& DotLineColor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MiniMapBGWidget
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UMiniMapBGWidget : public USolarUserWidget
	{
	public:
		class USolarImage* Img_Map;                                                 // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MiniMapWidget
	 * Size -> 0x0358 (FullSize[0x06F8] - InheritedSize[0x03A0])
	 */
	class UMiniMapWidget : public UMiniMapBase
	{
	public:
		unsigned char                                              UnknownData_CLG2[0x14];                                  // 0x03A0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMiniMapData                                        MiniMapData;                                             // 0x03B4(0x0018) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       AutoOffset;                                              // 0x03CC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OnCar;                                                   // 0x03CD(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       WithIconScale;                                           // 0x03CE(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5LX9[0x1];                                   // 0x03CF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AspectRatio;                                             // 0x03D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EMapState                                                  CurrentState;                                            // 0x03D4(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OP0S[0x3];                                   // 0x03D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           SelfNavSlotSize;                                         // 0x03D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, class UPlayerNavWidget*>                     PlayerNavMap;                                            // 0x03E0(0x0050) BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic
		class USizeBox* MapFOVSizeBox;                                           // 0x0430(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* MapOffset;                                               // 0x0438(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* SolarImageMap;                                           // 0x0440(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* ImageFrameLayer;                                         // 0x0448(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* MarkerLayer;                                             // 0x0450(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UScaleBox* MapScale;                                                // 0x0458(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* RenderTargetCanvas;                                      // 0x0460(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_EMP;                                                 // 0x0468(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* IconMeshRectangleWidget;                                 // 0x0470(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* AnimIconMeshWidget;                                      // 0x0478(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FConfigMiniMapMeshWidgetData                        MiniMapMeshWidgetConfigData;                             // 0x0480(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		class UPlayerNavWidget* SelfNav;                                                 // 0x0498(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           CurrentMapOffset;                                        // 0x04A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           MapIconScale;                                            // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarMapManager* MapMgr;                                                  // 0x04B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMiniMapBGWidget* MapImageWidget;                                          // 0x04B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBelongToBigMap;                                         // 0x04C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6WHS[0x3];                                   // 0x04C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ClampMarkTickRate;                                       // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EAirdropStatus, struct FAirdropMeshWidgetData>        AirdropMeshWidgetDataMap;                                // 0x04C8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AdjustMapRatio;                                          // 0x0518(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AdjustWorldDis;                                          // 0x051C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AirdropAnimOutsideScale;                                 // 0x0520(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AirdropClearTime;                                        // 0x0524(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UGKR[0x4];                                   // 0x0528(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FConfigMiniMapMeshWidgetData                        ReviveMarkNormalParms;                                   // 0x052C(0x0018) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FConfigMiniMapMeshWidgetData                        ReviveMarkAnimParms;                                     // 0x0544(0x0018) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ReviveMarkAnimTime;                                      // 0x055C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IconSizeFormatInterval;                                  // 0x0560(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8T9X[0x10];                                  // 0x0564(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUpdateSelfNav;                                          // 0x0574(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T3D4[0x53];                                  // 0x0575(0x0053) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* CacheFOVScaleCurve;                                      // 0x05C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_44VB[0x128];                                 // 0x05D0(0x0128) MISSED OFFSET (PADDING)

	public:
		void VehicleClear(bool IsOwner);
		void UpdateVehicleModeMapFOV();
		void UpdatePoisonEffect(float PosX, float PosY, float Radius);
		void UpdateMeshWidgetMarkSlotSize(const class FString& MarkKey, const struct FVector2D& InMarkSlotSize);
		void UpdateMeshWidgetMarkColorOpacityIndex(const class FString& MarkKey, int32_t InColorOpacityIndex);
		void UpdateMeshWidgetIconTexId(const class FString& MarkKey, int32_t InIconTexId);
		void UpdateEmp();
		void StopReviveTeammateAnim(const class FString& InKey);
		class FString SpawnMeshWidgetMapMarkInfo(EMarkerType InMarkType, const struct FVector2D& InMarkPos, const class FString& InMarkName, int32_t InMarkIndex);
		void SetMapFOVBySpeed(float InSpeed);
		void SetMapFOVAutoOffset(float InNewFOV);
		void SetMapFOV(float InNewFOV, const struct FVector2D& InScaleCenter);
		void SetBelongToBigMap(bool bIsBelongToBigMap);
		void SetAirdropMeshWidgetStatus(const class FString& InKey, EAirdropStatus InNewStatus);
		void RemoveMeshWidgetMark(const class FString& MarkKey);
		void RemoveAllNav();
		void RegisterDataProvider();
		void RefreshLastVehicleLocation();
		void PlayReviveTeammateAnim(const class FString& InKey, unsigned char InColorIdx);
		void OnSpecTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnReviveWorldMarkRemoved(const class FString& InPlayerID);
		void OnReviveWorldMarkPlayAnim(class ASolarPlayerState* InPlayerState);
		void OnReviveWorldMarkCreated(const class FString& InPlayerID);
		void OnRemoveReviveWorldMark(class ASolarPlayerState* InPlayerState);
		void OnRemoveAllReviveWorldMark();
		void OnMiniMapDataInitialized();
		void OnFOVScaleChangedByPoison(class UCurveFloat* InCurve);
		void OnCreateReviveWorldMark(class ASolarPlayerState* InPlayerState, const struct FVector& InWorldLoc);
		void OnAllReviveWorldMarkRemoved();
		void KeepSelfInTheCenter();
		bool IsReviveWorldMarkCreated(const class FString& InPlayerID);
		void InitMinFOV(float InFOV);
		void InitMapFovAndSize();
		void InitFovAndSize();
		void IconSizeFormat();
		class UPlayerNavWidget* GetSelfNav();
		struct FVector2D GetMinAndMaxFOV();
		class ASolarPlayerState* GetCameraFocusedCharacterState();
		void FormatAirline(float InScaleValue);
		void ClearVehicleMarkWidget();
		void ClearPlayerMarkPoint();
		void ClearMiniMapMarkWidget();
		void AdjustMapOffset(const struct FVector2D& MapLocation);
		class FString AddMeshWidgetMark(const struct FVector2D& InPosition, const struct FVector2D& InMarkSlotSize, EMarkerType InMarkType, float InRenderTransformScaleX, const class FString& InMarkName, int32_t InMarkIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MissileSwarmLauncher
	 * Size -> 0x0198 (FullSize[0x03C0] - InheritedSize[0x0228])
	 */
	class AMissileSwarmLauncher : public AActor
	{
	public:
		bool                                                       bDrawDebug;                                              // 0x0228(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OQIW[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EjectSpeed;                                              // 0x022C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EjectGravity;                                            // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EjectTimeLength;                                         // 0x0234(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BoostSpeed;                                              // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BoostCtrlSpread;                                         // 0x023C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamagePerBullet;                                         // 0x0240(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExplodeRadius;                                           // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTeammateDamage;                                         // 0x0248(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_09DA[0x7];                                   // 0x0249(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   CanDamageObjectTypes;                                    // 0x0250(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* ExplodeMarkParticle;                                     // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* BulletParticle;                                          // 0x0268(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* RibbonTrajectoryParticle;                                // 0x0270(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* EjectParticle;                                           // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* BoostParticle;                                           // 0x0280(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* ExplodeParticle;                                         // 0x0288(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9AWW[0x20];                                  // 0x0290(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UParticleSystemComponent*>                    ExplodeMarkEffects;                                      // 0x02B0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* OwnerCharacter;                                          // 0x02C0(0x0008) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            PlayerRotation;                                          // 0x02C8(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RJH8[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* SpawnerMesh;                                             // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh* SpawnerTemplateMesh;                                     // 0x02E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnerAnimTime;                                         // 0x02E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MissileShootTime;                                        // 0x02EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RemoveAnimTime;                                          // 0x02F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SpawnerMeshMaterialParamName;                            // 0x02F4(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RocketSpawnerMeshOffset;                                 // 0x02FC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RocketSpawnerMeshPitchOffset;                            // 0x0308(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DTUZ[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        MuzzleSocketNames;                                       // 0x0310(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnerMoveInterpSpeed;                                  // 0x0320(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnerMoveInterpMinSpeed;                               // 0x0324(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseForwardAxisY;                                        // 0x0328(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X3EZ[0x7];                                   // 0x0329(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimationAsset* SpawnerIdleAnim;                                         // 0x0330(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationAsset* SpawnerFireAnim;                                         // 0x0338(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnerStartSoundName1P;                                 // 0x0340(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnerStartSoundName3P;                                 // 0x0350(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnerEndSoundName1P;                                   // 0x0360(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnerEndSoundName3P;                                   // 0x0370(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FireSoundName1P;                                         // 0x0380(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FireSoundName3P;                                         // 0x0390(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FireImpactSoundName;                                     // 0x03A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UEYP[0x10];                                  // 0x03B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void ServerUpdateCharacterRotation(const struct FRotator& InRotation);
		void NetMulticastEmitMissileSwarm(TArray<struct FMissileSwarmSpawnParameter> InSwarm, TArray<struct FVector> InTargetLocs);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MMC_GenericCooldown
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UMMC_GenericCooldown : public UGameplayModMagnitudeCalculation
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MobileWidgetDebuggerLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMobileWidgetDebuggerLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_IsWidgetFastPathVisible(class UWidget* InWidget);
		TArray<class UClass*> STATIC_GetAllWidgetClass(class UObject* WorldContextObject, bool bIncludeDebug);
		class UClass* STATIC_ConvertToUserWidgetClass(class UObject* InObject);
		class UObject* STATIC_ConvertToObject(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MobileWidgetDebugger
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMobileWidgetDebugger : public UObject
	{
	public:
		class UWidget* FindWidget(class UClass* BaseWidgetClass, TArray<class FName> WidgetRelationList, TArray<class FString>* OutErrorMsg, bool bPrintLog);
		class UMobileWidgetDebugger* STATIC_Create(class UObject* Outer);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ModMagnitudeCalcProxy
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UModMagnitudeCalcProxy : public UObject
	{
	public:
		TWeakObjectPtr<class USolarModMagnitudeCalc>               CDOOwner;                                                // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UModMagnitudeCalcProxy* STATIC_CreateProxy(class USolarModMagnitudeCalc* InCDOOwner, class UClass* ProxyClass);
		float CalculateBaseMagnitude(const struct FGameplayEffectSpec& Spec);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MultiplePassMaterialEffect
	 * Size -> 0x0068 (FullSize[0x01C8] - InheritedSize[0x0160])
	 */
	class UMultiplePassMaterialEffect : public UMaterialEffectBase
	{
	public:
		struct FMultiplePassMaterialChange                         MaterialChange;                                          // 0x0160(0x0068) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.NgaiAIControllerComponent
	 * Size -> 0x0170 (FullSize[0x0220] - InheritedSize[0x00B0])
	 */
	class UNgaiAIControllerComponent : public UActorComponent
	{
	public:
		class ASolarCharacterBase* EnemyCharacterBase;                                      // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JPT0[0x168];                                 // 0x00B8(0x0168) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.NgaiGameModeComponent
	 * Size -> 0x19148 (FullSize[0x19218] - InheritedSize[0x00D0])
	 */
	class UNgaiGameModeComponent : public UGameModeCompBase
	{
	public:
		unsigned char                                              UnknownData_VPEA[0x19148];                               // 0x00D0(0x19148) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.NoticeMapBase
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UNoticeMapBase : public USolarUserWidget
	{
	public:
		void SetMap(int32_t MapID);
		void LuaInitMap(int32_t MapID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBBigMapWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UOBBigMapWidget : public USolarUserWidget
	{
	public:
		void OnSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBDetailData
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UOBDetailData : public UObject
	{
	public:
		class ASolarPlayerState* SolarPlayerState;                                        // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDetailedListViewInfo                               DetailedListViewInfo;                                    // 0x0030(0x0040) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7NDB[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBSettlementBase
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UOBSettlementBase : public USolarUserWidget
	{
	public:
		class UOBSettlementRoot* OBSettleRoot;                                            // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBDetailedDataList
	 * Size -> 0x0098 (FullSize[0x03E8] - InheritedSize[0x0350])
	 */
	class UOBDetailedDataList : public UOBSettlementBase
	{
	public:
		class UWidgetSwitcher* Btn_Switcher;                                            // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_TeamName;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_Rank;                                                // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UListView* PlayerListPanel;                                         // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_TitleBox;                                            // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_TitleBg;                                             // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_TitleBox_3;                                          // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F891[0x8];                                   // 0x0388(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPlayerState*>                           AllTeammatePS;                                           // 0x0390(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarPlayerState* MVPPlayerState;                                          // 0x03A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UOBDetailData* TeamRowDataObject;                                       // 0x03A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FDetailedTeamListViewInfo>                   DetailedTeamListViewInfos;                               // 0x03B0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WK5J[0x28];                                  // 0x03C0(0x0028) MISSED OFFSET (PADDING)

	public:
		void SetIsCheater(bool bIsCheater);
		void RefreshWindow(bool bIsPopDetailWindow);
		void RefreshRankColor(int32_t InRank);
		void InitPlayerCompetitionDetailWindow(TArray<struct FDetailedListViewInfo> DetailedListViewInfos, const class FString& TeamName, int32_t InRank, bool bIsPopDetailWindow);
		void InitPanel(class UOBSettlementRoot* InOwner);
		void InitCompetitionDetailWindow(const struct FDetailedTeamListViewInfo& DetailedTeamListViewInfo, bool bIsPopDetailWindow);
		void InitAsDetailWindow(unsigned char InTeamId, int32_t InRank, class UOBSettlementRoot* InOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBDetailedDataRow
	 * Size -> 0x0070 (FullSize[0x03B8] - InheritedSize[0x0348])
	 */
	class UOBDetailedDataRow : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_1PJS[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarImage* Image_MVP;                                               // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentNationalFlag* UI_NationalFlag;                                         // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_Name;                                                // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_KillNum;                                             // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_Slash;                                               // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_AssistNum;                                           // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_DMGDealt;                                            // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_DMGTaken;                                            // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_HPRestored;                                          // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_Time;                                                // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_MVPScore;                                            // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_Input_Device;                                         // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBDetailData* DetailRowData;                                           // 0x03B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetIsCheater(bool bIsCheater);
		void InitDetailedDataRow(class UObject* ListItemObject);
		void EnableMVPTag(bool bIsMVP);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBFreeViewControlWidget
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class UOBFreeViewControlWidget : public USolarUserWidget
	{
	public:
		class UWalkWidgetNew* ViewJoyStick;                                            // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarInputButton* Btn_Up;                                                  // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarInputButton* Btn_Down;                                                // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1T3N[0x8];                                   // 0x0360(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetOBFreeViewUpAndDownButtonVisibility(bool bVisible);
		void OnUpdateWidgetVisibility();
		void OnUISettingUIOperationChanged(bool bVisible);
		void OnSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBGlobalControlWidget
	 * Size -> 0x0108 (FullSize[0x0450] - InheritedSize[0x0348])
	 */
	class UOBGlobalControlWidget : public USolarUserWidget
	{
	public:
		bool                                                       bIsPCStyleForDesign;                                     // 0x0348(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FM47[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarButton* Btn_SwitchCameraMode;                                    // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher* Switcher_CameraMode;                                     // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarButton* Btn_SwitchPlayer;                                        // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher* WidgetSwitcher_Visibility;                               // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarButton* Btn_SwitchUIVisibility;                                  // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher* WidgetSwitcher_Player;                                   // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarButton* Btn_SwitchPlay;                                          // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher* WidgetSwitcher_Play;                                     // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_SwitchPlayerSlc;                                     // 0x0390(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_UIVisibilitySlc;                                     // 0x0398(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_Mobile;                                            // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_Player_List_PC;                                    // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBTeamListPopupWidget* UI_OB_TeamList_Popup_PC;                                 // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBTeamListPopupWidget* UI_OB_TeamList_Popup;                                    // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHorizontalBox* HorizontalBox_List_Shortcut;                             // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_UIItemSetting;                                     // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarCheckBox* CheckBox_UIAll;                                          // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarCheckBox* CheckBox_EnablePerspective;                              // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarCheckBox* CheckBox_UIOperation;                                    // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_OB_HUD_ShortcutKey;                                   // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_BattleUI_Map;                                      // 0x03F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_Loading;                                           // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget* OB_BattleUI_Map;                                         // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget* SafeAreaProgressUI;                                      // 0x0408(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBProgressBar* UI_OB_ProgressBar;                                       // 0x0410(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCheckBoxGroup* CheckBoxGroup_HeadInfoStyle;                             // 0x0418(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UButton* MapSwitcher;                                             // 0x0420(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* Anim_Setting_In;                                         // 0x0428(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* Anim_Setting_Exit;                                       // 0x0430(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_37PB[0x8];                                   // 0x0438(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOBTeamListPopupWidget* CurrentTeamList;                                         // 0x0440(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AUDO[0x8];                                   // 0x0448(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetShortCutKeyMode(EBattleOBHUDType CurrentType);
		void SetLiveWatchOnlyStyle();
		void OnToggleShortCutKey();
		void OnToggleProgressControlButton();
		void OnToggleProgress();
		void OnTogglePlayerList();
		void OnTogglePerspective(bool bEnable);
		void OnPreConstruct(bool IsDesignTime);
		void OnPlayingScrubCharactersCreated();
		void OnHeadInfoStyleChanged(EOBPlayerHeadInfoWidgetStyle Style);
		void OnCheckBoxUIOperationStateChanged(bool bIsChecked);
		void OnCheckBoxUIAllStateChanged(bool bIsChecked);
		void OnCheckBoxHeadInfoStyleStateChanged(TArray<class UCheckBox*> ChildChangedArray, int32_t CheckedChildIndex);
		void OnCheckBoxEnablePerspectiveChanged(bool bIsChecked);
		void OnBtnSwitchUIVisibilityClicked();
		void OnBtnSwitchPlayerClicked();
		void OnBtnSwitchPlayClicked();
		void OnBtnSwitchCameraModeClicked();
		void OnBigMapOpen();
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBGlobalInfoWidget
	 * Size -> 0x0028 (FullSize[0x0370] - InheritedSize[0x0348])
	 */
	class UOBGlobalInfoWidget : public USolarUserWidget
	{
	public:
		class UTextBlock* Text_PlayerNum;                                          // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Text_TeamNum;                                            // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVerticalBox* VerticalBox_Sync;                                        // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USizeBox* DummyPlayerInfo;                                         // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarOBUIModel* SolarOBUIModel;                                          // 0x0368(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateRemainPanelView();
		void OnGameStateSet(class AGameStateBase* GameState);
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		void OnAutoPlaybackSpeedUpStop();
		void OnAutoPlaybackSpeedUpStart();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBHeadInfoMeshWidget
	 * Size -> 0x02A8 (FullSize[0x05F0] - InheritedSize[0x0348])
	 */
	class UOBHeadInfoMeshWidget : public USolarUserWidget
	{
	public:
		class USizeBox* SizeBox_Container;                                       // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_Info;                                              // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* TeamMeshWidget;                                          // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* OB_Shield;                                               // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* OB_Shield_Damage;                                        // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* OB_Shield_BG;                                            // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* OB_HP;                                                   // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* OB_HP_Damage;                                            // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* OB_HP_BG;                                                // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* OB_HeadInfo_BG;                                          // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMeshRectangleWidget* OB_Progress_BG;                                          // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UScaleBox* ScaleBox_NickName;                                       // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* UIComp_PlayerName;                                       // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* BP_PlayerName;                                           // 0x03B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FConfigMeshData                                     ConfigMeshData;                                          // 0x03B8(0x00F8) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ProgressEasingSpeed;                                     // 0x04B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        HPColorNormal;                                           // 0x04B4(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        HPColorDying;                                            // 0x04C4(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        IncreaseColor;                                           // 0x04D4(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        DecreaseColor;                                           // 0x04E4(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XUWR[0xFC];                                  // 0x04F4(0x00FC) MISSED OFFSET (PADDING)

	public:
		void UpdateMeshProviderData();
		void OnScrubCharactersCreated();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBHeadInfoWidget
	 * Size -> 0x0080 (FullSize[0x03C8] - InheritedSize[0x0348])
	 */
	class UOBHeadInfoWidget : public USolarUserWidget
	{
	public:
		class USolarImage* Image_TeamBG;                                            // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Image_Frame;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_TeamNum;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Image_TeamBG_Middle;                                     // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Image_Frame_Middle;                                      // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_TeamNum_Middle;                                     // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Text_NickName;                                           // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FOBTeammateInfo                                     Data;                                                    // 0x0380(0x0040) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V6FW[0x8];                                   // 0x03C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdatePlayerHeadInfoWidgetStyle(EOBPlayerHeadInfoWidgetStyle InHeadInfoWidgetStyle);
		void OnUpdateDistanceBetweenPlayerAndOBCamera();
		EOBPlayerHeadInfoWidgetStyle GetHeadInfoWidgetStyleFromDistance(float InDistance);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBHighlightBattleWidget
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class UOBHighlightBattleWidget : public USolarUserWidget
	{
	public:
		class UDeathViewHPWidget* OBHP;                                                    // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_Lvl;                                                 // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              CurrentPlayerID;                                         // 0x0358(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnCharacterLevelChanged(int32_t NewLevel);
		void InitDataByPlayerID(const class FString& PlayerId, class FString* playerName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBHighlightOverviewWidget
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class UOBHighlightOverviewWidget : public USolarUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OverviewPlayEnd;                                         // 0x0348(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TranslatePlayBeginOver;                                  // 0x0358(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TranslatePlayEndOver;                                    // 0x0368(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             HighlightPlayEnd;                                        // 0x0378(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic

	public:
		void SwitchKillToolData(EReplayActivityHeatKillUseType ToolType, int32_t KillToolID);
		void ShowHighlightTranslateNum(int32_t TranslateNum);
		void ShowHighlightOverviewData(const struct FPlayerHighlightOverview& OverviewData);
		void ShowHighlightMarkResult(float TotalScore, const class FString& MarkName);
		void ShowHighlightKillToolEffect(const class FString& ToolName);
		void ShowHighlightKillNum(int32_t KillNum, float KillEffectTime);
		void OnTranslatePlayEndOver();
		void OnTranslatePlayBeginOver();
		void OnOverviewPlayEnd();
		void OnHighlightPlayEnd();
		void HighlightOver();
		void HighlightFragmentOver();
		void ContinueHighlightTranslate();
		void CollectReplayPlayerOverviewData(const class FString& PlayerId, struct FReplayPlayerOverviewData* PlayerOverviewData);
		void CalcHighlightMarkResult(float Score, TArray<struct FReplayActivityKillDetail> KillDetails);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.HUDDispatcherBase
	 * Size -> 0x1280 (FullSize[0x12A8] - InheritedSize[0x0028])
	 */
	class UHUDDispatcherBase : public UObject
	{
	public:
		unsigned char                                              UnknownData_63MA[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSkydivingLeaderIndexReplicated;                        // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkydivingMemberStatusUpdated;                          // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      TrySkydiveUnfollow;                                      // 0x0058(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VHN5[0x58];                                  // 0x0068(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SkydivingLeaderTransferCooldown;                         // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkydivingLeaderVoiceCooldown;                            // 0x00C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M40A[0x38];                                  // 0x00C8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTeammateStateReplicated;                               // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammatePlayerStateReplicated;                         // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterPSInGameChanged;                              // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerOperationInGameChanged;                          // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammatePSRemoveWhenPreparation;                       // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammatePSRemoveWhenBattle;                            // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateHPChanged;                                     // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateShieldChanged;                                 // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateReviveItemChanged;                             // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateReviveManagerChanged;                          // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReviveStateChanged;                                    // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateReviveStateChanged;                            // 0x01B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateResurrectTimeChanged;                          // 0x01C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateCallForHelpNotify;                             // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F275[0x10];                                  // 0x01E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnKillLeaderChangedNotify;                               // 0x01F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2MRW[0x40];                                  // 0x0200(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTeammateNetStateChanged;                               // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNavMapMarked;                                          // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNavMapMarkCleared;                                     // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTalentInitialized;                                     // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateCharacterIdChanged;                            // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateSkinIdChanged;                                 // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLevelChanged;                                          // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkillCDStateChanged;                                   // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateTalentStateChanged;                            // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpecTargetChanged;                                     // 0x02D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBindHPPanelDelegate;                                   // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBindItemPanelDelegate;                                 // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBindPowerBarDelegate;                                  // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefreshBackpackItemDelegate;                           // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefreshBackpackEquipDelegate;                          // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefreshBackpackWeaponDelegate;                         // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefreshBackpackWeaponPartDelegate;                     // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefreshBroadCastModeDelegate;                          // 0x0350(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetActiveOpenBoxBtnDelegate;                           // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetActiveOpenBoxProgressDelegate;                      // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetTreasureBoxActorDelegate;                           // 0x0380(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetAirdropBoxActorDelegate;                            // 0x0390(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHideTreasureBoxUIDelegate;                             // 0x03A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHideAirdropBoxUIDelegate;                              // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetPickupSwitchDelegate;                               // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAirdropCharChangeDelegate;                             // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAirdropProgressChangeDelegate;                         // 0x03E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerNumberChanged;                                   // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCapsulePlayerNumChanged;                               // 0x0400(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBombingStarted;                                        // 0x0410(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBombingStopped;                                        // 0x0420(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemDiscarded;                                         // 0x0430(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSettingRequestOpened;                                  // 0x0440(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSettingRequestClosed;                                  // 0x0450(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMigrateAccountVisibilityRequestChanged;                // 0x0460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCustomizeVisibilityRequestChanged;                     // 0x0470(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDriveCustomizeOpened;                                  // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDriveCustomizeClosed;                                  // 0x0490(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBackpackTookPickup;                                    // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBackpackReleasedPickup;                                // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleCursorVisibility;                                // 0x04C0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBackpackVisibilitySet;                                 // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnElectricShopVisibilitySet;                             // 0x04E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBigMapVisibilitySet;                                   // 0x04F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRescueBtnVisibilitySet;                                // 0x0500(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBuyResurrectBtnVisibilitySet;                          // 0x0510(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBigMapCloseButtonClicked;                              // 0x0520(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupFlagChanged;                                     // 0x0530(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupListVisibilityChanged;                           // 0x0540(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupItemSet;                                         // 0x0550(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupItemCalculated;                                  // 0x0560(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupCheckValidUpdated;                               // 0x0570(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupCheckHighlightUpdated;                           // 0x0580(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupCheckStatesUpdated;                              // 0x0590(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupItemSelected;                                    // 0x05A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTogglePickupDelegate;                                  // 0x05B0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerDead;                                            // 0x05C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoyStickSprintStateReset;                              // 0x05D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoyStickInputReset;                                    // 0x05E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoyStickResetAll;                                      // 0x05F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTutorialSequenceRequested;                             // 0x0600(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDrivingTutorialStopped;                                // 0x0610(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFireButtonsInputReset;                                 // 0x0620(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeamDeathMatchLeaderboard;                             // 0x0630(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameModeChangeWeapon;                                  // 0x0640(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bBackpackVisible;                                        // 0x0650(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bElectricShopVisible;                                    // 0x0651(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBigMapVisible;                                          // 0x0652(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMapVehicleSpawnListVisible;                             // 0x0653(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRescueBtnVisible;                                       // 0x0654(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBuyResurrectBtnVisible;                                 // 0x0655(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L67Y[0x2];                                   // 0x0656(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnInBattle;                                              // 0x0658(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNotInBattle;                                           // 0x0668(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRadarStationUpdated;                                   // 0x0678(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAngleViewEnabled;                                      // 0x0688(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterSwimStateChanged;                             // 0x0698(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterWaterClimbAvailable;                          // 0x06A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHitTraceUpdated;                                       // 0x06B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHitTraceRemoved;                                       // 0x06C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHitTraceCleared;                                       // 0x06D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProfessionFunctionalChanged;                           // 0x06E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBackpackModeChanged;                                   // 0x06F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupListAdd;                                         // 0x0708(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupListRemove;                                      // 0x0718(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateStateChanged;                                  // 0x0728(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepliableMessageChanged;                               // 0x0738(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerFlagDisplayChanged;                              // 0x0748(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectateModeEntered;                                   // 0x0758(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectateModeExited;                                    // 0x0768(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectateReferToChanged;                                // 0x0778(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectateTargetItemsChanged;                            // 0x0788(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMarkButtonHoverChanged;                                // 0x0798(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMarkButtonTouchMoved;                                  // 0x07A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMarkButtonBeenLongPressed;                             // 0x07B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMarkButtonDragSelectEnded;                             // 0x07C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleModeChanged;                                     // 0x07D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WI3N[0x8];                                   // 0x07E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterSet;                                          // 0x07F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterIDSet;                                        // 0x0800(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterHPChanged;                                    // 0x0810(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0LF5[0x20];                                  // 0x0820(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterDead;                                         // 0x0840(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterEnterWater;                                   // 0x0850(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterSelfRebirth;                                  // 0x0860(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterLevelUp;                                      // 0x0870(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterGainExp;                                      // 0x0880(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterLevelExpChanged;                              // 0x0890(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterAllReady;                                     // 0x08A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleUpgradeEffect;                                   // 0x08B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectingBattleUpgradeEffectBegin;                     // 0x08C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectingBattleUpgradeEffectFinish;                    // 0x08D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectateBattleUpgradeEffectUpdate;                     // 0x08E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammateRebirth;                                       // 0x08F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamagingActorsChange;                                  // 0x0900(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAimingEnemy;                                           // 0x0910(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnScoutCharactersChange;                                 // 0x0920(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LYLC[0x8];                                   // 0x0930(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterLevelChanged;                                 // 0x0938(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z1M3[0x10];                                  // 0x0948(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRapidBoostActivationChanged;                           // 0x0958(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTrySpawnSuperRadar;                                    // 0x0968(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSuperScaningStart;                                     // 0x0978(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSuperScaningRemovePlayer;                              // 0x0988(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSuperScaningEnd;                                       // 0x0998(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSuperScanCameraMoveForward;                            // 0x09A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSuperScanCameraMoveRight;                              // 0x09B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSuperScaningWidgetShow;                                // 0x09C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityChange;                                     // 0x09D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityStartCD;                                    // 0x09E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityEndCD;                                      // 0x09F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityCDDurationChange;                           // 0x0A08(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityStartCDUTCTimeUpdate;                       // 0x0A18(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityStateChange;                                // 0x0A28(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityEnd;                                        // 0x0A38(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityContinous;                                  // 0x0A48(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityBuffContinous;                              // 0x0A58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityBuffUpdate;                                 // 0x0A68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityBuffEnd;                                    // 0x0A78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityBuffPause;                                  // 0x0A88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityBuffResume;                                 // 0x0A98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityHideControlHUD;                             // 0x0AA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityInputAction;                                // 0x0AB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityAddSummonBuff;                              // 0x0AC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleAbilityUsingStatusChanged;                         // 0x0AD8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterNightComesActorChanged;                       // 0x0AE8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMobileWeaponInputAction;                               // 0x0AF8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoleGEShieldMultiRecoverCoolDownEffect;                // 0x0B08(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMemberFlagIDChanged01;                                 // 0x0B18(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMemberFlagIDChanged02;                                 // 0x0B28(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMemberFlagIDChanged03;                                 // 0x0B38(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMemberFlagIDChanged04;                                 // 0x0B48(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSideAttributeSetRemoved;                               // 0x0B58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSideAttributeSetAdded;                                 // 0x0B68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSideAttributeSetChanged;                               // 0x0B78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDrivingStateChanged;                                   // 0x0B88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVehicleWeaponAbilityActivated;                         // 0x0B98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVehicleScopeInitialized;                               // 0x0BA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVehicleScopeValueChanged;                              // 0x0BB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEquipVehicleWeaponDelegate;                            // 0x0BC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVehicleWeaponScopeDelegate;                            // 0x0BD8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTransformerChangeWeaponDelegate;                       // 0x0BE8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVehicleTypeChangeDelegate;                             // 0x0BF8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVehicleWeaponNoAmmoAlert;                              // 0x0C08(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVehicleAbilityActivationChanged;                       // 0x0C18(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMapVehicleSpawnListInitialized;                        // 0x0C28(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInputSprintLockStart;                                  // 0x0C38(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintIconActived;                                     // 0x0C48(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintIconHide;                                        // 0x0C58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintLockIconActived;                                 // 0x0C68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeamMessageReceive;                                    // 0x0C78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetForbiddenChanged;                                  // 0x0C88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetForbiddenChanged;                                  // 0x0C98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetTotalTimesSet;                                     // 0x0CA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetTotalTimesSet;                                     // 0x0CB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetRestTimesSet;                                      // 0x0CC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetRestTimesSet;                                      // 0x0CD8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetChargeStateChanged;                                // 0x0CE8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetCDStateChanged;                                    // 0x0CF8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetChargeStateChanged;                                // 0x0D08(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetCDStateChanged;                                    // 0x0D18(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetTimesCharging;                                     // 0x0D28(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetTimesCharging;                                     // 0x0D38(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetCoolingDown;                                       // 0x0D48(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetCoolingDown;                                       // 0x0D58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetModuleLevelChanged;                                // 0x0D68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetModuleLevelChanged;                                // 0x0D78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkydiveFlyStateChanged;                                // 0x0D88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkydiveAltitudeUpdate;                                 // 0x0D98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkydiveSpeedUpdate;                                    // 0x0DA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowGameNoticeDelegate;                                // 0x0DB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartCountDownDelegate;                                // 0x0DC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStopCountDownDelegate;                                 // 0x0DD8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHideInteractionListRequested;                          // 0x0DE8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCancelHideInteractionListRequested;                    // 0x0DF8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractionTriggerAppear;                              // 0x0E08(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractionTriggerDisappear;                           // 0x0E18(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartInteractionCountDown;                             // 0x0E28(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStopInteractionCountDown;                              // 0x0E38(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartReviveTeammateCountDownDelegate;                  // 0x0E48(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStopReviveTeammateCountDownDelegate;                   // 0x0E58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReviveWillBeDisabledHintDelegate;                      // 0x0E68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartReviveItemRecycleCountDownDelegate;               // 0x0E78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X7NA[0x50];                                  // 0x0E88(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnOverlapElectricShopDelegate;                           // 0x0ED8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateVehicleInteractionDelegate;                      // 0x0EE8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCruiseHeightSet;                                       // 0x0EF8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnterCruisingDelegate;                                 // 0x0F08(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnterParachutingDelegate;                              // 0x0F18(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnterLandingDelegate;                                  // 0x0F28(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEShopWeaponUpgradeDelegate;                            // 0x0F38(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEShopShieldUpgradeDelegate;                            // 0x0F48(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEShopPurchaseSuccessDelegate;                          // 0x0F58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEShopItemCDRefreshDelegate;                            // 0x0F68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEShopItemRefreshDelegate;                              // 0x0F78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEShopSlotWeaponUpgradeDelegate;                        // 0x0F88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEShopWeaponChangeDelegate;                             // 0x0F98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEShopPoolRefreshDelegate;                              // 0x0FA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TryOpenElectricShopDelegate;                             // 0x0FB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnTeammateHomePanelGetting;                              // 0x0FC8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHomeBattleUIGetting;                                   // 0x0FD8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHomeMainBuildGetting;                                  // 0x0FE8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHomeFriendListGetting;                                 // 0x0FF8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHomeLevelUpUIGetting;                                  // 0x1008(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldAvailableChanged;                                // 0x1018(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldChanged;                                         // 0x1028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRechargeShieldEnd;                                     // 0x1038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldFXUpdated;                                       // 0x1048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldValueChanged;                                    // 0x1058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMaxShieldValueUpdate;                                  // 0x1068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             FOnSteamRechargeShield;                                  // 0x1078(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TryCancelCountDown;                                      // 0x1088(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemyShieldChanged;                                    // 0x1098(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemyShieldValueChanged;                               // 0x10A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldUpgradeStart;                                    // 0x10B8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldUpgradeInterrupt;                                // 0x10C8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldUpgradeFinish;                                   // 0x10D8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldUpgradeItemCountChanged;                         // 0x10E8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldUpgradeItemCountChangedBP;                       // 0x10F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAckShieldUpgradeShopInteract;                          // 0x1108(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptDelegate                                      TryOpenTreasureBoxDelegate;                              // 0x1118(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      TryOpenAirDropTreasureBoxDelegate;                       // 0x1128(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TryCancelAirDropTreasureBoxDelegate;                     // 0x1138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      TryPickupFirstItemDelegate;                              // 0x1148(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      CheckPickupItemValidDelegate;                            // 0x1158(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             SelectPreviousItem;                                      // 0x1168(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             SelectNextItem;                                          // 0x1178(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1RID[0x10];                                  // 0x1188(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPickupEntryPlayAnim;                                   // 0x1198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRequstPickupEntryPlayAnim;                             // 0x11A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRequstPickupEntryPlayAnimCustom;                       // 0x11B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             NotifyTeammateReviving;                                  // 0x11C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnInteractEvent;                                         // 0x11D8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleControlTeammateStateRemoved;                     // 0x11E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetBackpackDropMaskVisibility;                         // 0x11F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndBackpackDragDrop;                                   // 0x1208(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EC2H[0x20];                                  // 0x1218(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBattleHUDVisibilityChanged;                            // 0x1238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMicroPhonePressed;                                     // 0x1248(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpeakerPressed;                                        // 0x1258(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSwitchEMP;                                             // 0x1268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleAssitAim;                                        // 0x1278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleAutoFire;                                        // 0x1288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTreatmentEnd;                                          // 0x1298(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened);
		void VehicleWeaponNoAmmoAlert__DelegateSignature();
		void VehicleTypeChanged__DelegateSignature();
		void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, unsigned char InAbilityIndex, float InDurationTime);
		void TwoIntUIInteractDelegate__DelegateSignature(int32_t Value01, int32_t Value02);
		void TwoIntImplementableDelegate__DelegateSignature(int32_t Value01, int32_t Value02);
		bool TrySkydiveUnfollow__DelegateSignature();
		void TransformerWeaponChanged__DelegateSignature(ETransformerType InType);
		void ToggledBigMapVisibility();
		void ToggledBackpackVisibility();
		void StopDrivingTutorial();
		void SprintLockIconActived__DelegateSignature(const struct FVector2D& InSprintPosition);
		void SolarPlayerStateDelegate__DelegateSignature(class ASolarPlayerState* InPlayerState);
		void SimpleUIInteractDelegate__DelegateSignature();
		void SimpleTriggerDelegate__DelegateSignature();
		void SimpleStringDelegate__DelegateSignature(const class FString& Value);
		void SimpleSpectatorDelegate__DelegateSignature();
		void SimplePlayerStateDelegate__DelegateSignature(class ASolarPlayerState* TeammatePS);
		void SimpleOnRefreshDelegate__DelegateSignature();
		bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup);
		bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int32_t InIthisID);
		bool SimpleOnBindRetDelegate__DelegateSignature();
		void SimpleOnBindDelegate__DelegateSignature();
		void SimpleImplementableDelegate__DelegateSignature();
		void SimpleFloatDelegate__DelegateSignature(float Value);
		void SimpleCharacterLuaDelegate__DelegateSignature();
		void SimpleBoolDelegate__DelegateSignature(bool Value);
		void ShowSuperScanChooseUI(bool bShow);
		void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(int32_t ShieldLevel, int32_t ShieldMaxLevel, int32_t ShieldUpgradeItemNum, int32_t NeedShieldUpgradeItemNum, int32_t MaxShieldUpgradeItemNum);
		void SetRescueBtnVisibility(bool bVisible);
		void SetMapVehicleSpawnListVisibility(bool bVisible);
		void SetElectricShopVisibility(bool bVisible);
		void SetBuyResurrectBtnVisibility(bool bVisible);
		void SetBigMapVisibility(bool bVisible);
		void SetBackpackVisibility(bool bInValue);
		void RequestHideInteractionList();
		void RequestCancelHideInteractionList();
		void RemoveItemFromPickup(class UObject* InCardItem, bool bPickup);
		void PlayerTutorialSequence(bool bPlay);
		void PickupListRemoveDelegate__DelegateSignature(class UObject* CardItem, bool bPickup);
		void PickupListDelegate__DelegateSignature(class UObject* CardItem);
		void OnWidgetVisibilitySet__DelegateSignature(bool bVisible);
		void OnWidgetButtonClicked__DelegateSignature();
		void OnVehicleWeaponAbilityActivated__DelegateSignature(bool bInActive);
		void OnVehicleScopeValueChanged__DelegateSignature(float InValue);
		void OnVehicleScopeInitialized__DelegateSignature(class UUserWidget* Widget, bool bInSpectate);
		void OnUpdateVehicleInteractionDelegate__DelegateSignature(EVehicleInterationUIState UiState, class ASolarVehiclePawn* InVehicleComponent);
		void OnTutorialSequenceRequested__DelegateSignature(bool bPlay);
		void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn);
		void OnTreatmentDelegate__DelegateSignature();
		void OnTeamMessageReceive__DelegateSignature(const class FString& MemberName, const class FString& Message1, bool bLocalPlayer, bool bSound, int32_t PosInTeam, const class FString& Message2);
		void OnTeammateTalentStateChanged__DelegateSignature(ETalentState TalentState, unsigned char PosInTeam, float AdditionalParam);
		void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh);
		void OnTeammateShieldChanged__DelegateSignature(unsigned char PosInTeam, const struct FShieldInfo& OldShield, const struct FShieldInfo& NewShield);
		void OnTeammateReviveStateChanged__DelegateSignature(class ASolarPlayerState* RevivingMePlayer, class ASolarPlayerState* SolarPlayerState);
		void OnTeammateReviveItemChanged__DelegateSignature(unsigned char PosInTeam, unsigned char ReviveItemNum, bool bCanRebirth);
		void OnTeammateResurrectTimeChanged__DelegateSignature(class ASolarPlayerState* SolarPlayerState, int32_t ResurrectTime);
		void OnTeammateRescueStateChanged__DelegateSignature(class ASolarCharacter* InCharacter);
		void OnTeammatePlatStateRemove__DelegateSignature(unsigned char PosInTeam, bool bLastOne);
		void OnTeammateIntegerDataChanged__DelegateSignature(int32_t Data, unsigned char PosInTeam);
		void OnTeammateHPChanged__DelegateSignature(unsigned char PosInTeam, float CurrentHP, float MaxHP);
		void OnTeammateCallForHelpNotify__DelegateSignature(class ASolarPlayerState* SolarPlayerState);
		void OnTeammateBattleStateChanged__DelegateSignature(class ASCMPlayerState* TeammateState);
		void OnTeammateActionStateChanged__DelegateSignature(class ASolarPlayerState* SolarPlayerState, const struct FGameplayTag& Tag, int32_t NewCount);
		void OnSwitchEMP__DelegateSignature(class ASolarCharacter* InCharacter, bool InbSwitchOnEMP);
		void OnSuperScaningWidgetShow__DelegateSignature(bool bShow);
		void OnSuperScaningStart__DelegateSignature(TArray<class FString> InScanPlayers);
		void OnSuperScaningRemovePlayer__DelegateSignature(const class FString& InRemovePlayer);
		void OnSuperScaningEnd__DelegateSignature();
		void OnStopCountDownDelegate__DelegateSignature(int32_t InTextId);
		void OnSteamRechargeShieldDecl__DelegateSignature(bool bUseBigRecharger);
		void OnStartCountDownDelegate__DelegateSignature(const struct FCountDownInfo& InCountDownInfo);
		void OnSprintIconHide__DelegateSignature();
		void OnSprintIconActived__DelegateSignature(const struct FVector2D& InSprintPosition);
		void OnSpectateTargetItemsChanged__DelegateSignature(TArray<struct FReplicateItemData> InItemDatas);
		void OnSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarSpectateInfo* SpectateInfo);
		void OnSpectateReferToChanged__DelegateSignature(class ASolarPlayerState* ReferToPlayerState, ESpectateReferToState State);
		void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(class ASolarSpectateInfo* SpectateInfo);
		void OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature(float CauseDamage);
		void OnSpecTargetOrLocalAssistChanged__DelegateSignature(int32_t Assist);
		void OnSpecTargetChanged__DelegateSignature(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnSkydivingMemberDataUpdated__DelegateSignature(class ASolarPlayerState* MemberPS);
		void OnSkydivingFollowRequestResponded__DelegateSignature(class ASolarPlayerState* Follower, bool bAgreed);
		void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed);
		void OnSkydiveFlyStateChanged__DelegateSignature(class ASolarCharacter* InCharacter);
		void OnSkydiveDataUpdate__DelegateSignature(float NewData);
		void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue);
		void OnSkillActivationChanged__DelegateSignature(bool bActivated);
		void OnSideAttributeSetRemoved__DelegateSignature(const class FString& SideName);
		void OnSideAttributeSetChanged__DelegateSignature(const class FString& SideName, const struct FSideAttributeSet& SideRef);
		void OnShowGameNotice__DelegateSignature(int32_t InNoticeID, const struct FHUDNoticeParams& InNoiceParams);
		void OnShieldValueChanged__DelegateSignature(EShieldWidgetState WidgetState, float CurValue, float ChangeValue, const class FString& SolarPlayerID, EShieldRechargeState ShieldRechargeState, bool bFixPreAdd);
		void OnShieldDelegate__DelegateSignature();
		void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield);
		void OnShieldAvailableChanged__DelegateSignature(bool bAvailable);
		void OnSetTreasureBoxActorDelegate__DelegateSignature(class AActor* InActor);
		void OnSetPickupSwitchDelegate__DelegateSignature(EPickupItemType InType, bool InFlag);
		void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible);
		void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive);
		void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int32_t SelectedIndex);
		void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(class ASolarCharacter* Target, int32_t Level, TArray<int32_t> EffectIDArray);
		void OnScoutedCharactersChange__DelegateSignature(TArray<class FString> ScoutedCharacters, TArray<class FString> ToBeScoutedCharacters);
		void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int32_t NewCount);
		void OnRoleAbilityUsingStatusChanged__DelegateSignature(const struct FGameplayTag& Tag, int32_t NewCount);
		void OnRoleAbilityStateChange__DelegateSignature(int32_t RoleAbilityIndex, int32_t State);
		void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int32_t RoleAbilityIndex, float InServerTime);
		void OnRoleAbilityStartCD__DelegateSignature(int32_t RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay);
		void OnRoleAbilityInputAction__DelegateSignature(int32_t RoleAbilityIndex, bool bPress, bool bCanActive);
		void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide);
		void OnRoleAbilityEndCD__DelegateSignature(int32_t RoleAbilityIndex);
		void OnRoleAbilityEnd__DelegateSignature(int32_t RoleAbilityIndex);
		void OnRoleAbilityContinous__DelegateSignature(int32_t RoleAbilityIndex, bool bTurnOn, float Duration);
		void OnRoleAbilityChange__DelegateSignature(int32_t RoleAbilityIndex, bool bHaveAbility, int32_t CharacterId, int32_t PlayerLevel);
		void OnRoleAbilityCDDurationChange__DelegateSignature(int32_t RoleAbilityIndex, int32_t Duration, bool bDurationReduced);
		void OnRoleAbilityBuffUpdate__DelegateSignature(const struct FActiveGameplayEffectHandle& ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime);
		void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, class ASolarCharacter* SourceCharacter, unsigned char AbilityIndex);
		void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, const struct FActiveGameplayEffectHandle& InGameplayEffectHandle);
		void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, class ASolarCharacter* SourceCharacter, unsigned char AbilityIndex, float Duration, float PreDuration, const struct FActiveGameplayEffectHandle& ActiveEffectHandle);
		void OnRoleAbilityAddSummonBuff__DelegateSignature(const struct FSoftObjectPath& ImagePath, class AActor* InActor);
		void OnReviveStateChanged__DelegateSignature(class ASolarPlayerState* RevivingMePlayer);
		void OnRepliableMessageChanged__DelegateSignature();
		void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead);
		void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius);
		void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay);
		void OnPlayerDead__DelegateSignature(const struct FKillInfo& DeathMsgInfo);
		void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible);
		void OnPickupItemSet__DelegateSignature(TArray<class AActor*> ObjectList, EPickupItemType Type);
		void OnPickupItemSelected__DelegateSignature(class UObject* SelectWidget, int32_t SelectWidgetThisID);
		void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf);
		void OnPickupCheckValidUpdated__DelegateSignature(const struct FItemCountsList& ItemCountsList);
		void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate);
		void OnPickupCheckHighlightUpdated__DelegateSignature(EPickupItemType Type, bool IsRecommend);
		void OnOverlapElectricShopDelegate__DelegateSignature(bool InOverlap);
		void OnNavMapMarked__DelegateSignature(unsigned char PosInTeam, const struct FVector2D& MarkPosition);
		void OnNavMapMarkCleared__DelegateSignature(unsigned char PosInTeam);
		void OnMobileWeaponInputAction__DelegateSignature(EInputButton InButtonType);
		void OnMemberFlagIDChanged__DelegateSignature(int32_t FlagID, bool bClanFlag);
		void OnMaxShieldValueUpdate__DelegateSignature(float MaxShieldVal);
		void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter, const struct FVector2D& TouchLocalPos);
		void OnMarkButtonSimpleTriggered__DelegateSignature();
		void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered);
		void OnKillLeaderChangedNotify__DelegateSignature(class ASolarPlayerState* KillLeader);
		void OnJetTimesChanged__DelegateSignature(int32_t NewTimes);
		void OnJetModuleLevelChanged__DelegateSignature(int32_t NewLevel);
		void OnJetFlyStateChanged__DelegateSignature(bool bStart);
		void OnJetFlyForbiddenChanged__DelegateSignature(EJetFlyForbiddenType ForbiddenType, bool bAdded);
		void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent);
		void OnInteractionTriggerDelegate__DelegateSignature(const struct FInteractionTriggerInfo& TriggerInfo);
		void OnInputTypeChanged__DelegateSignature(class ASolarPlayerState* PlayerState);
		void OnInputSprintLockStart__DelegateSignature();
		void OnInitElectricShopDelegate__DelegateSignature(class ASolarCharacter* InCharacter);
		class UUserWidget* OnHomelandGetWidget__DelegateSignature();
		int32_t OnHitTraceUpdated__DelegateSignature(int32_t HitTraceID, EHitTraceType HitTraceType, float Angle, float WidgetScale);
		void OnHideUIByThisIDDelegate__DelegateSignature(int64_t InThisID);
		void OnEShopWeaponUpgradeDelegate__DelegateSignature(class ASolarPlayerWeapon* InWeapon, class ASolarCharacter* InCharacter);
		void OnEShopWeaponChangeDelegate__DelegateSignature(class ASolarCharacter* InCharacter);
		void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int32_t InWeaponSlot);
		void OnEShopShieldUpgradeDelegate__DelegateSignature(class ASolarCharacter* InCharacter);
		void OnEShopPurchaseSuccessDelegate__DelegateSignature(int32_t InProductID, class ASolarCharacter* InCharacter);
		void OnEShopInfoUpdateDelegate__DelegateSignature(class ASolarElectricShop* InElectricShop);
		void OnEnemyShieldValueChanged__DelegateSignature(EShieldWidgetState WidgetState, float CurValue, float ChangeValue, const class FString& SolarPlayerID, EShieldRechargeState ShieldRechargeState, bool bFixPreAdd);
		void OnEnemyShieldChanged__DelegateSignature(const class FString& SolarPlayerID, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield);
		void OnDrivingTutorialStopped__DelegateSignature();
		void OnDrivingStateChanged__DelegateSignature(EDriveState DriveState);
		void OnDamagingActorsChange__DelegateSignature();
		void OnCreateReviveWorldMarkDelegate__DelegateSignature(class ASolarPlayerState* InPlayerState, const struct FVector& InWorldLoc);
		void OnCharacterStateChanged__DelegateSignature();
		void OnCharacterSet__DelegateSignature(class ASolarCharacter* ControlledCharacter);
		void OnCharacterSelfRebirth__DelegateSignature(class ASolarCharacter* RebirthCharacter);
		void OnCharacterRescueStateChanged__DelegateSignature(ERescueState NewRescueState);
		void OnCharacterNightComesActorChanged__DelegateSignature(class AActor* InActor);
		void OnCharacterLevelUp__DelegateSignature(int32_t NewLevel, int32_t OldLevel);
		void OnCharacterLevelExpChanged__DelegateSignature(int32_t NewLevel, float NewExpRatio);
		void OnCharacterLevelChanged__DelegateSignature(int32_t InLevel);
		void OnCharacterIDSet__DelegateSignature(int32_t CharacterId);
		void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP);
		void OnCharacterGainExp__DelegateSignature(int32_t ExpAdded);
		void OnCharacterDead__DelegateSignature(class ASolarCharacter* InCharacter);
		void OnCharacterAllReady__DelegateSignature(class ASolarCharacter* ControlledCharacter);
		void OnBombingStarted__DelegateSignature(int32_t BombId, const struct FVector& Location, float Radius);
		void OnBattleUpgradeEffect__DelegateSignature(ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum);
		void OnBattleModeChanged__DelegateSignature(unsigned char NewModeType);
		void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible);
		void OnBackpackTookPickup__DelegateSignature(const struct FVector2D& NewPosition);
		void OnAirdropBoxInfoChangeDelegate__DelegateSignature(class AAirDropTreasureBox* InAirdropBox);
		void OnAimingEnemy__DelegateSignature(class ASolarCharacter* InEnemy);
		void MapVehicleSpawnListInitialized__DelegateSignature();
		void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int32_t TeamIndex, const class FString& playerName, bool IsLocalPlayer);
		void JoyStickSimpleDeleghate__DelegateSignature();
		bool IsElectricShopVisible();
		bool IsBigMapVisible();
		void IntUIInteractDelegate__DelegateSignature(int32_t Value);
		void IntImplementableDelegate__DelegateSignature(int32_t Value);
		void InternalCallSkydiveSpeed();
		void InternalCallSkydiveFlyStateChanged();
		void IntCharacterLuaDelegate__DelegateSignature(int32_t Value);
		void IntBackpackDelegate__DelegateSignature(int32_t Value);
		class USolarUserWidget* GetWorldMarkPanel();
		class UUserWidget* GetTeammateHomePanel();
		class UHUDDispatcherBase* STATIC_GetHUDDispatcher_FromUI(class UWidget* InWidget);
		class UHUDDispatcherBase* STATIC_GetHUDDispatcher_FromPC(class APlayerController* InPC);
		class UHUDDispatcherBase* STATIC_GetHUDDispatcher_FromHUD(class AHUD* InHUD);
		class UHUDDispatcherBase* STATIC_GetHUDDispatcher_FromCharacter(class ASolarCharacter* InCharacter, bool bCheckControlled);
		class UUserWidget* GetHomeMainBuild();
		class UUserWidget* GetHomeLevelUpUI();
		class UUserWidget* GetHomeFriendList();
		class UUserWidget* GetHomeBattleUI();
		void EquipVehicleWeapon__DelegateSignature(class ASolarVehicleWeapon* InVehicleWeapon);
		void BroadcastVJetForbiddenChanged(EJetFlyForbiddenType Types, bool bAdded);
		void BroadcastVJetCDStateChanged(bool bCD);
		void BroadcastTrySpawnSuperRadar(bool bSpawn);
		bool BroadcastTryPickupFirstItem(bool bAutoPickup);
		void BroadcastToggleCursorVisibility(bool bIsVisible);
		void BroadcastToggleAutoFire();
		void BroadcastToggleAssitAim();
		void BroadcastSpectateTargetItemsChanged(TArray<struct FReplicateItemData> InItemDatas);
		void BroadcastSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void BroadcastSpectateBattleUpgradeEffectUpdate(class ASolarSpectateInfo* SpectateInfo);
		void BroadcastSkydiveSpeed();
		bool BroadcastShieldValueChanged(EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, const class FString& InSolarPlayerID, EShieldRechargeState ShieldRechargeState, bool bFixPreAdd);
		void BroadcastShieldUpgradeStart();
		void BroadcastShieldUpgradeShopInteract();
		void BroadcastShieldUpgradeItemCountChanged(int32_t NewCount, int32_t LastCount);
		void BroadcastShieldUpgradeInterrupt();
		void BroadcastShieldUpgradeFinish();
		void BroadcastShieldFXUpdated();
		bool BroadcastShieldChanged(float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield);
		bool BroadcastShieldAvailable(bool bAvailable);
		void BroadcastSettingRequestOpened(int32_t InOwnerType);
		void BroadcastSettingRequestClosed();
		void BroadcastSetBackpackDropMaskVisibility(bool bVisible);
		void BroadcastSelectPreviousItem();
		void BroadcastSelectNextItem();
		void BroadcastSelectingBattleUpgradeEffectFinish(int32_t SelectedIndex);
		void BroadcastSelectingBattleUpgradeEffectBegin(class ASolarCharacter* Target, int32_t Level, TArray<int32_t> EffectIDArray);
		void BroadcastScoutCharactersChange(TArray<class FString> ScoutedCharacters, TArray<class FString> ToBeScoutedCharacters);
		void BroadcastRescueBtnVisibility();
		void BroadcastRequsetPickupEntryPlayAnimCustom(class UObject* InCustomObj);
		void BroadcastRequsetPickupEntryPlayAnim(int32_t InThisID);
		void BroadcastProfessionFunctionalChanged(bool bEnabled);
		void BroadcastPlayerFlagDisplayChanged(bool bDisplay);
		void BroadcastPickupToggleChanged();
		void BroadcastPickupEntryPlayAnim(float InAnimTime);
		void BroadcastOnTeammateStateChangedDelegate();
		void BroadcastOnTeammateRebirth();
		void BroadcastOnStopRescueTeammateCountDown(int32_t InTextId);
		void BroadcastOnStopInteractionCountDown(const struct FCountDownInfo& InCountInfo);
		void BroadcastOnStopCountDownDelegate(int32_t InTextId);
		void BroadcastOnStartReviveItemRecycleCountDown(int32_t CurrentTime, int32_t DurationTime);
		void BroadcastOnStartRescueTeammateCountDown(const struct FCountDownInfo& InCountDownInfo);
		void BroadcastOnStartInteractionCountDown(const struct FCountDownInfo& InCountInfo);
		void BroadcastOnStartCountDownDelegate(const struct FCountDownInfo& InCountDownInfo);
		void BroadcastOnSkydiveFlyStateChanged();
		void BroadcastOnShowGameNoticeDelegate(int32_t InNoticeID, const struct FHUDNoticeParams& InNoticeParams);
		void BroadcastOnSetTreasureBoxActorDelegate(class AActor* InActor);
		void BroadcastOnSetPickupSwitchDelegate(EPickupItemType InType, bool InFlag);
		void BroadcastOnSetAirdropBoxActorDelegate(class AActor* InActor);
		void BroadcastOnSetActiveOpenBoxProgressDelegate(bool Inactive);
		void BroadcastOnSetActiveOpenBoxBtnDelegate(bool Inactive);
		void BroadcastOnRightMouseButtonDownEvent();
		void BroadcastOnReviveWorldMarkPlayAnim(class ASolarPlayerState* InPlayerState);
		void BroadcastOnReviveWillBeDisabledHint(int32_t HintDuration);
		void BroadcastOnReviveStateChanged(class ASolarPlayerState* RevivingMeTeammatePlayer);
		void BroadcastOnReviveDisabledHint();
		void BroadcastOnRemoveReviveWorldMark(class ASolarPlayerState* InPlayerState);
		void BroadcastOnRemoveAllReviveWorldMark();
		void BroadcastOnRefreshBackpackWeaponPartDelegate();
		void BroadcastOnRefreshBackpackWeaponDelegate();
		void BroadcastOnRefreshBackpackItemDelegate();
		void BroadcastOnRefreshBackpackEquipDelegate();
		void BroadcastOnOverlapElectricShopDelegate(bool InOverlap);
		void BroadcastOnOnCreateReviveWorldMark(class ASolarPlayerState* InPlayerState, const struct FVector& InWorldLoc);
		void BroadcastOnInteractionTriggerDisappear(const struct FInteractionTriggerInfo& TriggerInfo);
		void BroadcastOnInteractionTriggerAppear(const struct FInteractionTriggerInfo& TriggerInfo);
		bool BroadcastOnInteractEvent();
		void BroadcastOnInitElectricShopDelegate(class ASolarCharacter* InCharcter);
		void BroadcastOnHideTreasureBoxUIDelegate(int64_t InThisID);
		void BroadcastOnHideAirdropBoxUIDelegate(int64_t InThisID);
		void BroadcastOnGameUserPickupSettingChanged();
		void BroadcastOnEShopWeaponUpgradeDelegate(class ASolarPlayerWeapon* InWeapon, class ASolarCharacter* InCharacter);
		void BroadcastOnEShopWeaponChangeDelegate(class ASolarCharacter* InCharacter);
		void BroadcastOnEShopSlotWeaponUpgradeDelegate(int32_t InWeaponSlot);
		void BroadcastOnEShopShieldUpgradeDelegate(class ASolarCharacter* InCharacter);
		void BroadcastOnEShopPurchaseSuccessDelegate(int32_t InProductID, class ASolarCharacter* InCharacter);
		void BroadcastOnEShopPoolRefreshDelegate(class ASolarElectricShop* InElectricShop);
		void BroadcastOnEShopItemRefreshDelegate(class ASolarElectricShop* InElectricShop);
		void BroadcastOnEShopItemCDRefreshDelegate(class ASolarElectricShop* InElectricShop);
		void BroadcastOnBindPowerBarDelegates();
		void BroadcastOnBindItemPanelDelegates();
		void BroadcastOnBindHPPanelDelegates();
		void BroadcastOnBattleControlTeammateStateRemoved();
		void BroadcastOnAirdropProgressChangeDelegate(class AAirDropTreasureBox* InAirdropBox);
		void BroadcastOnAirdropCharChangeDelegate(class AAirDropTreasureBox* InAirdropBox);
		void BroadcastMigrateAccountVisibilityRequestChanged(bool bVisible);
		void BroadcastMaxShieldValueUpdate(float MaxShieldValue);
		void BroadcastJoyStickSprintStateReset();
		void BroadcastJoyStickResetAll();
		void BroadcastJoyStickInputReset();
		void BroadcastItemDiscarded(int32_t InItemID, int32_t InTotalCount);
		void BroadcastHJetTimesChargingProgress(float Value, float Percent);
		void BroadcastHJetForbiddenChanged(EJetFlyForbiddenType Types, bool bAdded);
		void BroadcastHJetCDStateChanged(bool bCD);
		void BroadcastFireButtonsReset();
		bool BroadcastEnemyShieldValueChanged(EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, const class FString& InSolarPlayerID, EShieldRechargeState ShieldRechargeState, bool bFixPreAdd);
		bool BroadcastEnemyShieldChanged(const class FString& InSolarPlayerID, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield);
		void BroadcastEndBackpackDragDrop(bool bVisible);
		void BroadcastDriveCustomizeOpened(int32_t InLayoutType);
		void BroadcastDriveCustomizeClosed();
		void BroadcastDamagingActorsChange();
		void BroadcastCustomizeVisibilityRequestChanged(bool bVisible);
		bool BroadcastCheckPickupItemVaild(int32_t InThisID);
		void BroadcastCharacterRescueStateChanged(ERescueState NewRescueState);
		void BroadcastCharacterLevelExpChanged(int32_t NewLevel, float NewExpRatio);
		void BroadcastCharacterHPState();
		void BroadcastCharacterGainExp(int32_t ExpAdded);
		void BroadcastBuyResurrectBtnVisibility();
		void BroadcastBattleUpgradeEffect(ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum);
		void BroadcastBattleModeChanged(unsigned char InModeType);
		void BroadcastBattleHUDVisibilityChanged(bool bVisible);
		void BroadcastBackpackTakesPickup(const struct FVector2D& NewPosition);
		void BroadcastBackpackReleasesPickup();
		void BroadcastBackpackModeChanged(int32_t NewMode);
		void BroadcastAimingEnemy(class ASolarCharacter* InEnemy);
		void BoolUIInteractDelegate__DelegateSignature(bool bValue);
		void BoolGameModeLuaDelegate__DelegateSignature(bool bValue);
		void BoolCharacterLuaDelegate__DelegateSignature(bool bValue);
		void BindLocalSpectateDelegates(class ASolarSpectateInfo* SpectateInfo);
		void AddItemToPickup(class UObject* InCardItem);
		void ActionWheelCommandExecDelegate__DelegateSignature();
		void ActionWheelCommandCancelDelegate__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBHUDDispatcher
	 * Size -> 0x0148 (FullSize[0x13F0] - InheritedSize[0x12A8])
	 */
	class UOBHUDDispatcher : public UHUDDispatcherBase
	{
	public:
		class FScriptMulticastDelegate                             OnUISettingHeadInfoStyleChanged;                         // 0x12A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleUISettingPlayerList;                             // 0x12B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleScoreboard;                                      // 0x12C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleProgressControlButton;                           // 0x12D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleProgress;                                        // 0x12E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTogglePerspective;                                     // 0x12F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleShortCutKey;                                     // 0x1308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnterSettlementStage;                                  // 0x1318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReplayActivityHeatFragmentUpdated;                     // 0x1328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReplayActivityHeatWidgetClicked;                       // 0x1338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleOBHUDTypeChanged;                                // 0x1348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FHS2[0x70];                                  // 0x1358(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBigMapWidgetPlayerNameSizeChange;                      // 0x13C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerWidgetChecked;                                   // 0x13D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T0IG[0x8];                                   // 0x13E8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBKeyboardWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UOBKeyboardWidget : public USolarUserWidget
	{
	public:
		class UUserWidget* FindKeyWidgetByKeyName(const class FString& KeyName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RebuildableMeshRectangleWidget
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class URebuildableMeshRectangleWidget : public UMeshRectangleWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBMiniMapWidget
	 * Size -> 0x0260 (FullSize[0x05A8] - InheritedSize[0x0348])
	 */
	class UOBMiniMapWidget : public USolarUserWidget
	{
	public:
		class FString                                              CurrentCheckedPlayerID;                                  // 0x0348(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMiniMapWidget* MiniMapWidget;                                           // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URebuildableMeshRectangleWidget* PlayerNavIconMeshWidget;                                 // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URebuildableMeshRectangleWidget* PlayerNavDirMeshWidget;                                  // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URebuildableMeshRectangleWidget* PlayerNavNameMeshWidget;                                 // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URebuildableMeshRectangleWidget* PlayerNavDeadMeshWidget;                                 // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URebuildableMeshRectangleWidget* PlayerNavGunLineMeshWidget;                              // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* PlayerNavRTCanvas;                                       // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MiniMapPlayerNavScale;                                   // 0x0390(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GunLineDelayTime;                                        // 0x0394(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOBPlayerNavWidget* SpectatorNavWidget;                                      // 0x0398(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, struct FTeamPlayerNavArray>                  MapOBTeamPlayerNavWidgets;                               // 0x03A0(0x0050) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UClass* SpectatorNavWidgetClass;                                 // 0x03F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* OBTeamPlayerNavWidgetClass;                              // 0x03F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2GGZ[0x10];                                  // 0x0400(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D* MiniMapTexture;                                          // 0x0410(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7K81[0x10];                                  // 0x0418(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           RTTexSize;                                               // 0x0428(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NavIconType;                                             // 0x0430(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FMiniMapData                                        OBMiniMapData;                                           // 0x0434(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6GBS[0x15C];                                 // 0x044C(0x015C) MISSED OFFSET (PADDING)

	public:
		void SpectatePlayer();
		void RefreshTexture();
		void OnSetPlayerEmitBullet(const struct FVector& StartLoc, const struct FVector& AimLoc, const class FString& SolarPlayerID);
		void OnSetOBTeamPlayerNamePanelScale(EPlayerNamePanelScale InPanelScale);
		void OnSetCurrentCheckedPlayerWidget(const class FString& SelectedPlayerID);
		void OnPlayingScrubStart();
		void OnOBTeamPlayerNavInitialized();
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		void InitRenderTexResources();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBPlayerInfoWidget
	 * Size -> 0x00A0 (FullSize[0x03E8] - InheritedSize[0x0348])
	 */
	class UOBPlayerInfoWidget : public USolarUserWidget
	{
	public:
		class USolarTextBlock* Text_TeamNum;                                            // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Text_NickName;                                           // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_KillNum;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDeathViewHPWidget* OBHP;                                                    // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_PlayerLevel;                                        // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_Lv_Head;                                             // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_Lv_Bg_2;                                             // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_Left;                                              // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UButton* Btn_Arrow_Left;                                          // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_Right;                                             // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UButton* Btn_Arrow_Right;                                         // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_Input_Device;                                         // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N5CU[0x30];                                  // 0x03A8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UOBPlayerWeaponWidget*>                       SlotWeaponCacheWidgets;                                  // 0x03D8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SpectatePrevTeammate();
		void SpectateNextTeammate();
		void SetIsCheater(bool bCheater);
		void OnWeaponSlotEquip(int32_t InWeaponSlotID, class ASolarPlayerWeapon* InWeapon);
		void OnWeaponSlotActive(int32_t InWeaponSlotID, class AActor* InActiveWeapon);
		void OnSpectateTargetChanged();
		void OnScrubCharactersCreated();
		void OnPlayerKillNumChange(unsigned char KillCount);
		void OnPlayerInputTypeChanged(class ASolarPlayerState* InPS);
		void OnCharacterLevelChanged(int32_t NewLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBPlayerMoreInfoWidget
	 * Size -> 0x0070 (FullSize[0x03B8] - InheritedSize[0x0348])
	 */
	class UOBPlayerMoreInfoWidget : public USolarUserWidget
	{
	public:
		class USolarImage* Img_Super_Skill;                                         // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGaugeImage* Super_Skill_Countdown;                                   // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* Super_Skill_Progress_CD;                                 // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Super_Skill_Forbid;                                  // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_Super_Skill_Shadow;                                  // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Super_Skill_Progress;                                // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_Tactical_Skill;                                      // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGaugeImage* Tactical_Skill_Countdown;                                // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* Tactical_Skill_Progress_CD;                              // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Tactical_Skill_Forbid;                               // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_Tactical_Skill_Shadow;                               // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Tactical_Skill_Progress;                             // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QUNP[0x10];                                  // 0x03A8(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdatePlayerVJetFlyChargeUI(float RemainTime, float Percent);
		void UpdatePlayerMoreInfoUI();
		void UpdatePlayerJetFlyInfoUI();
		void UpdatePlayerHJetFlyChargeUI(float RemainTime, float Percent);
		void UnregisterDelegates();
		void StopRoleAbilityContinueAnim(int32_t RoleAbilityIndex);
		void SetChargeState(bool bStart, bool InUsedForVertical);
		void RegisterDelegates();
		void PlayRoleAbilityRefreshAnim(int32_t RoleAbilityIndex);
		void PlayRoleAbilityContinueAnim(int32_t RoleAbilityIndex);
		void OnVJetChargeStateChanged(bool bStart);
		void OnSpectateTargetItemsChanged(TArray<struct FReplicateItemData> InItemDatas);
		void OnSpecTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnRoleAbilityStateChange(int32_t RoleAbilityIndex, int32_t State);
		void OnRoleAbilityStartCD(int32_t RoleAbilityIndex, float StartCDServerTime, float StartCDTime);
		void OnRoleAbilityContinous(int32_t RoleAbilityIndex, bool bTurnOn, float Duration);
		void OnRoleAbilityChange(int32_t RoleAbilityIndex, bool bHaveAbility, int32_t CharacterId, int32_t PlayerLevel);
		void OnRoleAbilityCDDurationChange(int32_t RoleAbilityIndex, int32_t Duration, bool bDurationReduced);
		void OnHJetChargeStateChanged(bool bStart);
		void OnCharacterJetFlyModuleLevelChanged(int32_t NewLv);
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		int32_t GetSpectatedPlayerItemMaxPileByID(int32_t InItemID);
		int32_t GetSpectatedPlayerItemCountByID(int32_t InItemID);
		int32_t GetCharacterJetModuleLevel(bool InUsedForVertical);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PlayerNavWidget
	 * Size -> 0x0038 (FullSize[0x0380] - InheritedSize[0x0348])
	 */
	class UPlayerNavWidget : public USolarUserWidget
	{
	public:
		class UWidgetSwitcher* IconSwitcher;                                            // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* PlayerNav;                                               // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* PlayerOutOfMapNav;                                       // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* FOV;                                                     // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ImageRoleNav;                                            // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* PlayerOrder;                                             // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FFD6[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (PADDING)

	public:
		void SwitchPlayerNav(bool bOutOfBounds);
		void SetBrushResourceObject(class UObject* InSprite);
		void ResetPlayerNav();
		void ReceivePlayerDead();
		void OnAllPlayerNavVisibilityChanged(bool bVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBPlayerNavWidget
	 * Size -> 0x0098 (FullSize[0x0418] - InheritedSize[0x0380])
	 */
	class UOBPlayerNavWidget : public UPlayerNavWidget
	{
	public:
		class FString                                              CurrentSolarPlayerID;                                    // 0x0380(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RecommendedZOrder;                                       // 0x0390(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U4KM[0x14];                                  // 0x0394(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage* Arror;                                                   // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Fire_Arror;                                              // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Text_TeamNumb;                                           // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_Bg;                                                  // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_Frame;                                               // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_death;                                               // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_FrameArrow;                                          // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* panel_player;                                            // 0x03E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* panel_OB;                                                // 0x03E8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* wgs_mod;                                                 // 0x03F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIComponentPlayerName* text_playername;                                         // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarButton* Btn_Player;                                              // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_NameBg;                                              // 0x0408(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsWidgetChecked;                                         // 0x0410(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OTAL[0x7];                                   // 0x0411(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetWidgetBeChecked(bool InIsChecked);
		void SetPlayerNamePanelScale(EPlayerNamePanelScale InPanelScale);
		void SetPlayerIsFire(bool InIsFire);
		float GetPlayerNamePanelScale(EPlayerNamePanelScale InPanelScale);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBPlayerWeaponWidget
	 * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
	 */
	class UOBPlayerWeaponWidget : public USolarUserWidget
	{
	public:
		class UWidgetSwitcher* Switcher_Status;                                         // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_WP;                                                  // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_WPSelected;                                          // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASolarPlayerWeapon>                   OwnerWeapon;                                             // 0x0360(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XQGE[0x8];                                   // 0x0368(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        LoadWeaponIconHandle;                                    // 0x0370(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class UTexture2D* GetWeaponTexture();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBProgressBar
	 * Size -> 0x0070 (FullSize[0x03B8] - InheritedSize[0x0348])
	 */
	class UOBProgressBar : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_FZOF[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TotalTime;                                               // 0x0350(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentTime;                                             // 0x0354(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsPause;                                                // 0x0358(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedShowActivityHeatData;                               // 0x0359(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZWGU[0x6];                                   // 0x035A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSetReplayTime;                                         // 0x0360(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class UButton* Btn_Rewind;                                              // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UButton* Btn_PausePlay;                                           // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UButton* Btn_FastForward;                                         // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarButton* Btn_Speed_Left;                                          // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarButton* Btn_Speed_Right;                                         // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Txt_CurrentTime;                                         // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Txt_TotalTime;                                           // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_PlaybackSpeed;                                       // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher* WidgetSwitcher_PausePlay;                                // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateSlider();
		void UpdatePlaybackSpeed();
		void SetTotalTime();
		void SetTextByTime(class UTextBlock* TextBlock, float InTime);
		void SetCurrentTime();
		void RegisterEvent();
		void OnWidgetRefreshed();
		void OnSliderValueChanged(float Value);
		void OnSetReplayTime__DelegateSignature();
		void OnReplayActivityHeatWidgetClicked(float ReplayTime);
		void OnClickSkipForwardButton();
		void OnClickSkipBackButton();
		void OnClickPlaybackSpeedUp();
		void OnClickPlaybackSlowDown();
		void OnClickPausePlayButton();
		void CallTogglePauseDispatcher(bool bPause);
		void CallOnSkipTimeDispatcher(float InTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBRootWidget
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UOBRootWidget : public USolarUserWidget
	{
	public:
		class UCanvasPanel* Panel_ScopeUI;                                           // 0x0348(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void AddScopeToPanel(class UUserWidget* InChildWidget, bool bInSpectate);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBScoreboard
	 * Size -> 0x00C8 (FullSize[0x0418] - InheritedSize[0x0350])
	 */
	class UOBScoreboard : public UOBSettlementBase
	{
	public:
		class UWidgetAnimation* Anim_Enter;                                              // 0x0350(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UScrollBox* ScrollBox_TeamList;                                      // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Top3;                                                    // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Bg_Settlement;                                           // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Bg_InGame;                                               // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBScoreboardSingleTopTeam* FirstTeam;                                               // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBScoreboardSingleTopTeam* SecondTeam;                                              // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBScoreboardSingleTopTeam* ThirdTeam;                                               // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UButton* CloseBtn;                                                // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHorizontalBox* Btn;                                                     // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHorizontalBox* Remain_Total;                                            // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTileView* TileView_Others;                                         // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_PlayerRemain;                                        // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_PlayerTotal;                                         // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_TeamRemain;                                          // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_TeamTotal;                                           // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		E_Type_OB_Scoreboard                                       WidgetTypeChoice;                                        // 0x03D0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CH9V[0x7];                                   // 0x03D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCupViewInfo                                        CupViewInfo;                                             // 0x03D8(0x0028) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ER3K[0x8];                                   // 0x0400(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UOBScoreboardSingleTopTeam*>                  TopThreeTeamWidget;                                      // 0x0408(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateTeamTotal();
		void UpdateTeamRemain();
		void UpdatePlayerTotal();
		void UpdatePlayerRemain();
		void SetWidgetType(E_Type_OB_Scoreboard WidgetType);
		void OnWidgetTypeChangedEvent();
		void OnTeamDataChanged();
		void InitPanelWithData(TArray<struct FDetailedTeamListViewInfo> TeamDetailedInfo, struct FCupViewInfo* InCupViewInfo);
		void InitPanelInGame(class UOBSettlementRoot* InOnwer);
		void InitPanel(class UOBSettlementRoot* InOnwer);
		void CloseScoreboardInGame();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBScoreboardSingleOtherTeam
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class UOBScoreboardSingleOtherTeam : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_SBC7[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOBScoreboardSingleTeam* UI_OB_Scoreboard_SingleTeam;                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_Rank;                                                // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetIsCheater(bool bIsCheater);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBScoreboardSingleTeam
	 * Size -> 0x00E8 (FullSize[0x0430] - InheritedSize[0x0348])
	 */
	class UOBScoreboardSingleTeam : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_0ZWQ[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SideName;                                                // 0x0350(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Rank;                                                    // 0x0360(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1YZB[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOBSettlementRoot* UIOBRoot;                                                // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_TeamNumber;                                          // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_TitleBox;                                            // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_TitleBg;                                             // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarButton* Btn_ViewDetail;                                          // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOverlay* Overlay_Spectating;                                      // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_ScoreboardUnit;                                    // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBScoreboard* ParentScoreboard;                                        // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDetailedListViewInfo>                       CurrentDetailedInfo;                                     // 0x03A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TeamID;                                                  // 0x03B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9DM0[0x7];                                   // 0x03B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TeamName;                                                // 0x03C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASolarPlayerState*>                           Teammate;                                                // 0x03D0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J3DB[0x50];                                  // 0x03E0(0x0050) MISSED OFFSET (PADDING)

	public:
		void LuaShowDetailedDataList(class UWidget** OutWidget);
		void InitPanelWithData(struct FDetailedTeamListViewInfo* DetailedTeamInfo, int32_t InRank, class UOBScoreboard* InScoreboard);
		void InitPanel(unsigned char InTeamId, int32_t InRank, class UOBSettlementRoot* InOBRoot, bool bInGame, bool bSpectating);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBScoreboardSingleTeamData
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UOBScoreboardSingleTeamData : public UObject
	{
	public:
		unsigned char                                              UnknownData_XROA[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDetailedTeamListViewInfo>                   DetailedTeamListViewInfo;                                // 0x0040(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBSettlementRoot* UIOBRoot;                                                // 0x0050(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBScoreboardSingleTopTeam
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class UOBScoreboardSingleTopTeam : public USolarUserWidget
	{
	public:
		class UTexture2D* RankIcon;                                                // 0x0348(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBScoreboardSingleTeam* UI_OB_Scoreboard_SingleTeam;                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_Rank;                                                // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void InitPanelWithData(struct FDetailedTeamListViewInfo* DetailedTeamInfo, int32_t Rank, class UOBScoreboard* InScoreboard);
		void InitPanel(unsigned char InTeamId, int32_t InRank, class UOBSettlementRoot* InOBRoot);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBScoreboardUnit
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class UOBScoreboardUnit : public USolarUserWidget
	{
	public:
		class ASolarPlayerState* PlayerState;                                             // 0x0348(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_PlayerName;                                          // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_KillNum;                                             // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_Assist;                                              // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Txt_DMGD;                                                // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_Input_Device;                                         // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GVGI[0x10];                                  // 0x0378(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdatePlayerKillNum(class ASolarPlayerState* PS);
		void UpdatePlayerDamageDealt(float NewValue);
		void UpdatePlayerAssistNum(class ASolarPlayerState* PS);
		void SetRebirthOpacity();
		void SetIsCheater(bool bIsCheater);
		void SetDeathOpacity();
		void SetConnectStateOpacity(bool bUselessParam);
		void OnCharacterDead(class ASolarCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBSettlementRoot
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class UOBSettlementRoot : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_R347[0x18];                                  // 0x0348(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetSwitcher* PageSwitcher;                                            // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBVictoryTeam* UI_OB_VictoryTeam;                                       // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBDetailedDataList* UI_OB_DetailedData_List;                                 // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBScoreboard* UI_OB_Scoreboard_AllTeam;                                // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DPWT[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (PADDING)

	public:
		void ToggleScoreboard();
		void SortTeamsByTeamRank();
		void SkipSettlement();
		void ShowPage(int32_t PageIndex);
		void ShowNextPage();
		void SetSwitcherVisibility(ESlateVisibility InVisibility);
		void OnTDMVictoryAnimFinished();
		void OnEnterSettlementStage();
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		void EnterTDMSettlement();
		void EnterBRSettlement();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBSpectateInfoWidget
	 * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
	 */
	class UOBSpectateInfoWidget : public USolarUserWidget
	{
	public:
		class UCanvasPanel* Panel_CurrentTeam;                                       // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_CurrentPlayerInfo;                                 // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_Direction;                                         // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBTeamInfoWidget* OB_TeamInfo;                                             // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget* UI_OB_Target_Switcher;                                   // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_712G[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUISettingUIAllChanged(bool bShow);
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBTeamInfoWidget
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class UOBTeamInfoWidget : public USolarUserWidget
	{
	public:
		class USolarImage* Image_TeamBG;                                            // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_TeamNum;                                            // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_TeamKillCount;                                      // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVerticalBox* Panel_Teammates;                                         // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_91NV[0x20];                                  // 0x0368(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnTeamKillCountChanged(unsigned char KillCount);
		void OnTeamDataChanged();
		void OnSpectateTargetChanged();
		void OnScrubCharactersCreated();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBTeamListItemObject
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UOBTeamListItemObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_U0U0[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBTeamListItemWidget
	 * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
	 */
	class UOBTeamListItemWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_RHBU[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarImage* Image_TeamBG;                                            // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Image_Frame;                                             // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Text_TeamNum;                                            // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVerticalBox* Panel_Teammates;                                         // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBTeamListItemObject* DataObject;                                              // 0x0370(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetIsCheater(bool bCheater);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBTeamListPopupWidget
	 * Size -> 0x0038 (FullSize[0x0380] - InheritedSize[0x0348])
	 */
	class UOBTeamListPopupWidget : public USolarUserWidget
	{
	public:
		class UOBTeamListWidget* OBTeamList;                                              // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_TabControl_TeamList;                                  // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* Anim_Enter;                                              // 0x0358(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* Anim_Exit;                                               // 0x0360(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NGVN[0x18];                                  // 0x0368(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateNearbyTeamList();
		void ToggleShowPlayerList();
		void ShowNearbyTeamList();
		void ShowAllTeamList();
		void OnUISettingUIAllChanged(bool bShow);
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		void OnAnimExitFinished();
		bool IsOBTeamListVisible();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBTeamListWidget
	 * Size -> 0x0078 (FullSize[0x03C0] - InheritedSize[0x0348])
	 */
	class UOBTeamListWidget : public USolarUserWidget
	{
	public:
		class USolarListView* ListView_Teams;                                          // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1MYT[0x58];                                  // 0x0350(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarOBUIModel* SolarOBUIModel;                                          // 0x03A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UObject*>                                     TeamItemObjects;                                         // 0x03B0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnTeamDataChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBTeammateInfoWidget
	 * Size -> 0x0068 (FullSize[0x03B0] - InheritedSize[0x0348])
	 */
	class UOBTeammateInfoWidget : public USolarUserWidget
	{
	public:
		class UUIComponentPlayerName* Text_NickName;                                           // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* Text_KillNum;                                            // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarButton* Btn_Spectate;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDeathViewHPWidget* OBHP;                                                    // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Image_SpectateIcon;                                      // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Image_BoardedVehicleIcon;                                // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOverlay* Overlay_Spectating;                                      // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_Input_Device;                                         // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZSBJ[0x28];                                  // 0x0388(0x0028) MISSED OFFSET (PADDING)

	public:
		void UpdateRebirthUI(class ASolarCharacter* InSolarCharacter);
		void UpdateBuyResurrectionItemPlayerID(const class FString& PlayerId);
		void SetIsCheater(bool bCheater);
		void OnUpdateBoardedVehicleIcon();
		void OnTeammateDead();
		void OnTeammateAlive();
		void OnSpectateTargetChanged();
		void OnScrubCharactersCreated();
		void OnPlayerStateChange(bool bUselessParam);
		void OnPlayerRebirth();
		void OnPlayerKillNumChange(unsigned char KillCount);
		void OnPlayerInputTypeChanged(class ASolarPlayerState* InPS);
		void OnPlayerDeadChange();
		void OnCharacterDead(class ASolarCharacter* InCharacter);
		void OnBtnSpectateClick();
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBVictory
	 * Size -> 0x0040 (FullSize[0x0390] - InheritedSize[0x0350])
	 */
	class UOBVictory : public UOBSettlementBase
	{
	public:
		unsigned char                                              UnknownData_VGUZ[0x10];                                  // 0x0350(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetAnimation* OpenVictoryAnim;                                         // 0x0360(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* CloseVictoryAnim;                                        // 0x0368(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XNED[0x20];                                  // 0x0370(0x0020) MISSED OFFSET (PADDING)

	public:
		void PlayAnim();
		void OnOpenVictoryAnimFinished();
		void OnCloseVictoryAnimFinished();
		void OnAnimEnd__DelegateSignature();
		void InitPanel(class UOBSettlementRoot* InOwner);
		void BroadcastOnAnimEnd();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBVictoryMember
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UOBVictoryMember : public USolarUserWidget
	{
	public:
		class ASolarPlayerState* PlayerState;                                             // 0x0348(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void InitPlayer(class ASolarPlayerState* InState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OBVictoryTeam
	 * Size -> 0x0048 (FullSize[0x0398] - InheritedSize[0x0350])
	 */
	class UOBVictoryTeam : public UOBSettlementBase
	{
	public:
		class UOBVictory* BigVictory;                                              // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOBVictory* SmallVictory;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* TeamPanel;                                               // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_TeamNum;                                             // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_KillNum;                                             // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_TeamCnt;                                             // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHorizontalBox* AvatarHorization;                                        // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* Anim_Enter;                                              // 0x0388(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DMTC[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnAnimEndEvent();
		void InitPanel(class UOBSettlementRoot* InOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OpenTreasureBoxProgressWidget
	 * Size -> 0x0048 (FullSize[0x0390] - InheritedSize[0x0348])
	 */
	class UOpenTreasureBoxProgressWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_LYRE[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarBattleModel* BattleViewModel;                                         // 0x0350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C4DQ[0x10];                                  // 0x0358(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UButton* Button_Open;                                             // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Button_Cancel;                                           // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* ProgressBar_Percent;                                     // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ProgressBar_Percent_PC;                                  // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Time;                                                // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateProgress(class ASolarTreasureBoxActor* InBoxActor, float InProgress);
		void UnBindDelegates();
		bool TryOpenAirdropBox();
		void SetTBoxActor(class ASolarTreasureBoxActor* InBoxActor);
		void SetSelfVisibility(bool InShow);
		void SetAirdropBoxActor(class AActor* InBoxActor);
		void OnPressCancelButtonPC();
		bool OnPressButtonPC();
		void OnPressButtonOpen();
		void OnPressButtonCancel();
		void OnOpenCharacterChanged(class AAirDropTreasureBox* InBoxActor);
		void OnDrivingStateChanged(EDriveState InDriveState);
		void OnBtnActiveChanged(bool Inactive);
		void OnAirdropProgressChanged(class AAirDropTreasureBox* InBoxActor);
		void HideSelfByThisID(int64_t InThisID);
		void ForceCancel();
		bool BSameThisID(int64_t InThisID);
		void BindDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OpenTreasureBoxWidget
	 * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
	 */
	class UOpenTreasureBoxWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_82S0[0x20];                                  // 0x0348(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UButton* Button_Open;                                             // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_CostNum;                                            // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateCost();
		void UpdateButtonState();
		void UnBindDelegates();
		bool TryOpenTreasureBox();
		void SetTreasureBoxActor(class AActor* InBoxActor);
		void SetTBoxActor(class ASolarTreasureBoxActor* InBoxActor);
		void SetSelfVisibility(bool InShow);
		void OnOpenBox();
		void OnDrivingStateChanged(EDriveState InDriveState);
		void OnClickButtonOpen();
		void HideSelfByThisID(int64_t InThisID);
		bool BSameThisID(int64_t InThisID);
		void BindDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OpponentPerspectiveEffectController
	 * Size -> 0x0248 (FullSize[0x0270] - InheritedSize[0x0028])
	 */
	class UOpponentPerspectiveEffectController : public UActorEffectController
	{
	public:
		float                                                      ParamsSmoothSpeed;                                       // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HM2E[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FOpponentPerspectiveMaterialParams                  DefaultMaterialParams;                                   // 0x0030(0x0220) Edit, NativeAccessSpecifierPrivate
		TArray<struct FOpponentPerspectiveMaterialParamsConditional> ConditionalMaterialParams;                               // 0x0250(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MGJT[0x10];                                  // 0x0260(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.OrnamentComponentVisibilityConfig
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UOrnamentComponentVisibilityConfig : public UDataAsset
	{
	public:
		struct FGameplayTagRequirements                            VisibleTagRequirements;                                  // 0x0030(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		struct FGameplayTag                                        VisibilityFlagTag;                                       // 0x0080(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FGameplayTagRequirements GetVisibleTagRequirements();
		struct FGameplayTag GetVisibilityFlagTag();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PakHashManager
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UPakHashManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_DAQA[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPakHashCheckFailed;                                    // 0x0030(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		bool                                                       bEnablePakHash;                                          // 0x0040(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QW4G[0x1F];                                  // 0x0041(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class FString>                         MountedPakHashMap;                                       // 0x0060(0x0050) NativeAccessSpecifierPrivate

	public:
		bool IsPakFileHashsReady();
		bool IsEnablePakHash();
		TMap<class FString, class FString> GetReadyPakFileHashs();
		TArray<class FString> GetAllMountedPakNames();
		bool CheckAllMountedPaks(TMap<class FString, class FString> BasePakMap, TMap<class FString, class FString> PatchPakMap);
		void CalculatePakFileMD5();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ParallelMoveSubsystem
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class UParallelMoveSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_1TKP[0x48];                                  // 0x0030(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PassiveSkillDataAsset
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class UPassiveSkillDataAsset : public UPrimaryDataAsset
	{
	public:
		struct FSoftClassPath                                      SkillClassPath;                                          // 0x0030(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SkillIconPath;                                           // 0x0048(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FWrappedLocalTextID                                 SkillName;                                               // 0x0060(0x0004) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FWrappedLocalTextID                                 SkillDescription;                                        // 0x0064(0x0004) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPassiveSkillLevelDescription>               LevelUpConfigs;                                          // 0x0068(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PassiveSkillIcon
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class UPassiveSkillIcon : public UUserWidget
	{
	public:
		class UImage* ImgIcon;                                                 // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AXIT[0x10];                                  // 0x0268(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateImageIcon(int32_t InCharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PickupButtonWidget
	 * Size -> 0x00E0 (FullSize[0x0428] - InheritedSize[0x0348])
	 */
	class UPickupButtonWidget : public USolarUserWidget
	{
	public:
		class UCheckBox* CheckBox_Normal;                                         // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* SizeBox_Normal;                                          // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CurrentCheckBoxSpName;                                   // 0x0358(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CheckBoxIconNormalSpName;                                // 0x0368(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CheckBoxIconHightLightSpName;                            // 0x0378(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CheckBoxIconPrefix;                                      // 0x0388(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           Vecter2DZero;                                            // 0x0398(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           Vecter2DOne;                                             // 0x03A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPickupItemType                                            FirstExistType;                                          // 0x03A8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPickupItemType                                            CurrentDisplayType;                                      // 0x03A9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8M18[0x6];                                   // 0x03AA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      CurrentDispayActorList;                                  // 0x03B0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M08A[0x68];                                  // 0x03C0(0x0068) MISSED OFFSET (PADDING)

	public:
		void UpdateCheckBoxesVisibilityRef(int32_t InItemCount);
		void UnbindPickUpDelegates();
		void SetPickupSwitchByType(EPickupItemType InType, bool InFlag);
		void SetItemDataRef(TArray<class AActor*> InObjectList, EPickupItemType InType);
		void OnUpdatePickupListStates(bool bItemUpdate);
		void OnUpdateCheckBoxesHighLight(EPickupItemType InType, bool IsRecommend);
		void OnTogglePickupListByKeyboard();
		void OnTogglePickupList(bool Flag, bool NotSelf);
		void OnPickupListClear();
		void OnCheckNormal(bool IsChecked);
		void BindPickUpDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PickupItemObject
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UPickupItemObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_QQ2G[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPickupListItemType                                        ListViewDataType;                                        // 0x0030(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_11EU[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject* CustomizedData;                                          // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, struct FPickupListViewItemData>              MergedDatas;                                             // 0x0040(0x0050) NativeAccessSpecifierPublic

	public:
		void ResetData();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PickupItemWidget
	 * Size -> 0x0360 (FullSize[0x06A8] - InheritedSize[0x0348])
	 */
	class UPickupItemWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_K7NC[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* CanvasPanel_Anim;                                        // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Debug;                                                   // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Item;                                                    // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Quality_BG;                                          // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Quality_BG_Line;                                     // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ItemImage_BG;                                            // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ItemImage;                                               // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* TagImage;                                                // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ImgBulletType;                                           // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* ItemName;                                                // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* ItemCount;                                               // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* ItemCountAdd;                                            // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* ItemDesc;                                                // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_WeaponSkill;                                         // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* ItemSubDesc;                                             // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* CardItemIcon;                                            // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Mark;                                                    // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* SizeBox_Select;                                          // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSolarItemData                                      PreviewItemData;                                         // 0x03E0(0x00B8) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, struct FPickupListViewItemData>              MergedDatas;                                             // 0x0498(0x0050) Protected, NativeAccessSpecifierProtected
		EPickupListItemType                                        ListViewDataType;                                        // 0x04E8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VX5P[0x7];                                   // 0x04E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject* CustomizeData;                                           // 0x04F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              WeaponPartPrePath;                                       // 0x04F8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ItemPrePath;                                             // 0x0508(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorNormal;                                             // 0x0518(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorRecommend;                                          // 0x0528(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorWeaponUp;                                           // 0x0538(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorWeaponDown;                                         // 0x0548(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EWeaponType, struct FSoftObjectPath>                  WeaponType2BulltSpMap;                                   // 0x0558(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		int32_t                                                    WeaponMaxLevelLocalID;                                   // 0x05A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeaponUpgradeLocalID;                                    // 0x05AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bForceResetAnim;                                         // 0x05B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMarkForceUpdate;                                        // 0x05B1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KN34[0x7B];                                  // 0x05B2(0x007B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bImplementedUpdateFunc;                                  // 0x062D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UH2U[0x2];                                   // 0x062E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLinearColor>                                ImgQualityBGColors;                                      // 0x0630(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSlateColor>                                 ItemNameColors;                                          // 0x0640(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, class UTexture2D*>                           CacheQualityBgMap;                                       // 0x0650(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VFZR[0x8];                                   // 0x06A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateQuality(int32_t SpecifyQuality);
		void TryResetEntryAnim();
		void OnUpdateCustomizedItem(class UObject* InObject);
		void OnRquestEntryPlayAnimCustom(class UObject* InCustomObj);
		void OnRquestEntryPlayAnim(int32_t InThisID);
		void OnGameUserSettingChanged();
		void OnCustomizedItemClicked(class UObject* InObject);
		void OnCheckBoxMarkChanged(bool bIsChecked);
		void MarkItemInPickupList();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PickupListWidget
	 * Size -> 0x0180 (FullSize[0x04C8] - InheritedSize[0x0348])
	 */
	class UPickupListWidget : public USolarUserWidget
	{
	public:
		class USizeBox* SizeBoxItemList;                                         // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarListView* ItemList;                                                // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPickupSightWidget* UI_Pickup_Sight;                                         // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           ScopeOffset;                                             // 0x0360(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PickupItemCount;                                         // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RefreshSelectDelay;                                      // 0x036C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                PickupPreActionName;                                     // 0x0370(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                PickupNextActionName;                                    // 0x0378(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           ZeroVector;                                              // 0x0380(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        PushHandler;                                             // 0x0388(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DisplayLength;                                           // 0x0390(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsMovePos;                                              // 0x0394(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TY89[0x3];                                   // 0x0395(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SelectScopeThisID;                                       // 0x0398(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XED5[0x1C];                                  // 0x039C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int64_t, class UPickupItemObject*>                    CachedPickupItemsMap;                                    // 0x03B8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<int32_t, class UPickupItemObject*>                    MergedPickupItemsMap;                                    // 0x0408(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<class UObject*>                                     WarppedItemList;                                         // 0x0458(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UObject*>                                     WarppedTeamCardList;                                     // 0x0468(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XL0S[0x50];                                  // 0x0478(0x0050) MISSED OFFSET (PADDING)

	public:
		void UnbindPickUpDelegates();
		bool TryPickupFirstItem(bool bAutoPickup);
		void SetSelectPreviousItem();
		void SetSelectNextItem();
		void SetIsMovePostion(bool InIsMovePos);
		void RemoveCardItem(class UObject* InCardItem, bool bPickup);
		void RefreshPickupSightWidget(class UObject* InSelectWidget, int32_t InSelectWidgetThisID);
		void RefreshListViewNextTick();
		void OnTogglePickupList(bool bShow, bool NotToSelf);
		void OnPickupListCalculated(TArray<class AActor*> InActorList, EPickupItemType InType);
		void OnEntryPlayPickupAnim(float InAnimTime);
		void OnDrivingStateChanged(EDriveState InDriveState);
		class UObject* GetCustomObjData(class UObject* InItemData);
		bool CheckIsPickupItemValid(int32_t InThisID);
		void BindPickUpDelegates();
		void AddCardItem(class UObject* InCardItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PickupSightWidget
	 * Size -> 0x00A8 (FullSize[0x03F0] - InheritedSize[0x0348])
	 */
	class UPickupSightWidget : public USolarUserWidget
	{
	public:
		class UImage* Img_WeaponA;                                             // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_WeaponB;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Backpack;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_DisableA;                                            // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_DisableB;                                            // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Border_A;                                            // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Border_B;                                            // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Disable_Bag;                                         // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_WP_UnarmA;                                         // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_WP_UnarmB;                                         // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Arrow_Left;                                        // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Arrow_Right;                                       // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* WeaponPartA;                                             // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* WeaponPartB;                                             // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* WeaponPartBag;                                           // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWeaponPartType                                            PickScopeType;                                           // 0x03C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XH3Y[0x3];                                   // 0x03C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PickScopeLevel;                                          // 0x03C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor* PickActor;                                               // 0x03C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PickThisId;                                              // 0x03D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemType                                                  PickActorType;                                           // 0x03D4(0x0001) ELEMENT_SIZE_MISMATCH ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SX97[0x3];                                   // 0x03D5(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		struct FLinearColor                                        ColorDisable;                                            // 0x03D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XIHL[0x8];                                   // 0x03E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateBagScope();
		void OnWeaponUpgradeLevel(int32_t InWeaponSlot);
		void OnWeaponUpdate(class ASolarCharacter* InCharacter);
		void OnClickWeaponB(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent);
		void OnClickWeaponA(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent);
		void OnClickImgDisableBag(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent);
		void OnClickImgDisableB(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent);
		void OnClickImgDisableA(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent);
		void OnClickBag(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PlayerMark
	 * Size -> 0x0020 (FullSize[0x0280] - InheritedSize[0x0260])
	 */
	class UPlayerMark : public UUserWidget
	{
	public:
		class UImage* PlayerMarkImage;                                         // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Length;                                                  // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMapManager* MapManager;                                              // 0x0270(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           MarkPoint;                                               // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PlayerOperationList
	 * Size -> 0x03C8 (FullSize[0x0710] - InheritedSize[0x0348])
	 */
	class UPlayerOperationList : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_MOSJ[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class UWidget*>                        CollectedLayout;                                         // 0x0358(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NF4S[0x50];                                  // 0x03A8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPlayerWidgetState                                         WidgetVisibilityState;                                   // 0x03F8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C3BZ[0x7];                                   // 0x03F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_AngleView;                                         // 0x0400(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetControlGroup* FlyActiveControl;                                        // 0x0408(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetControlGroup* JetActiveControl;                                        // 0x0410(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMovablePad* FreeLookPad;                                             // 0x0418(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* FreeLookIcon;                                            // 0x0420(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_SprintActive;                                        // 0x0428(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_SprintLock;                                          // 0x0430(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* FX_CircleLoop;                                           // 0x0438(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              PressedFreeLook[0x28];                                   // 0x0440(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ReleasedFreeLook[0x28];                                  // 0x0468(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              SkydiveSprintImage[0x28];                                // 0x0490(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              SkydiveSprintHoveredImage[0x28];                         // 0x04B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              VehicleAutoMoveImage[0x28];                              // 0x04E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              VehicleAutoMoveHoveredImage[0x28];                       // 0x0508(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UCanvasPanel* Panel_SpectateHide;                                      // 0x0530(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUDCountdownWidget* Panel_CountDown;                                         // 0x0538(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputButton* BT_Jump;                                                 // 0x0540(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BTN_TeamRescue;                                          // 0x0548(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WidgetSwitcher_RescueBTN;                                // 0x0550(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUDPassiveHeadWidget* UI_PassiveHead_item;                                     // 0x0558(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Crouch;                                            // 0x0560(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Sprint;                                                  // 0x0568(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* SprintActiveOncePanel;                                   // 0x0570(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_JoystickLock;                                        // 0x0578(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* FX_CircleOnce_Anim;                                      // 0x0580(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* FX_CircleLoop_Anim;                                      // 0x0588(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    JoystickLockTipsSprintTextID;                            // 0x0590(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    JoystickLockTipsSkydiveTextID;                           // 0x0594(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BTN_BuyResurrection;                                     // 0x0598(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_ShieldUpgrade;                                     // 0x05A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* Switcher_State;                                          // 0x05A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Btn;                                               // 0x05B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_CD;                                                // 0x05B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarButton* Btn_ShiledUpgrade;                                       // 0x05C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Light;                                               // 0x05C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Enter_Light_2;                                       // 0x05D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Enter_Light_3;                                       // 0x05D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Loop_Light_2;                                        // 0x05E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Loop_Light_3;                                        // 0x05E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Loop_Arrow_4;                                        // 0x05F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J3L7[0x8];                                   // 0x05F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage* Img_Shield;                                              // 0x0600(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_GameProgressTime;                                   // 0x0608(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BTN_GameProgressCancel;                                  // 0x0610(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGaugeImage* Image_GameProgressBar;                                   // 0x0618(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_ShieldUpgrade_Enter;                                // 0x0620(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_ShieldUpgrade_Exit;                                 // 0x0628(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CircleOnceAnimInterval;                                  // 0x0630(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FastReliefSkillCharacterID;                              // 0x0634(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XO1E[0x50];                                  // 0x0638(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarButton* BT_ElectricShop;                                         // 0x0688(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6SOW[0xC];                                   // 0x0690(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EShopHUDCheckTime;                                       // 0x069C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EShopHUDName;                                            // 0x06A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0JF2[0x8];                                   // 0x06B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHorizontalBox* Vehicle_Drive;                                           // 0x06B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* Vehicle_Passenger;                                       // 0x06C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* Vehicle_Passenger_PC;                                    // 0x06C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Vehicle_Repair_Status;                                   // 0x06D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Vehicle_Drive_Passenger;                           // 0x06D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarVehicleHealthWidget* UI_Vehicle_Health;                                       // 0x06E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WidgetSwitcher_VehicleRepair;                            // 0x06E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWalkWidgetNew* WalkJoyStick;                                            // 0x06F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bJoyStickVisible : 1;                                    // 0x06F8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AQA9[0x7];                                   // 0x06F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_FollowDance;                                       // 0x0700(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputButton* Btn_FollowDance;                                         // 0x0708(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateFreeLookUI(bool bHide);
		void SwitchWidgetVisibilityByState(EPlayerWidgetState NewState);
		void SetUIShowForSwimming(bool bSwimming);
		void SetUIShowForSpectateMode(bool InSepectateMode);
		void SetShowBattleControls(bool bShow);
		void SetRescueBtnVisibility(bool bShow);
		void SetJoyStickForVehicle();
		void SetJoyStickForSkydive();
		void SetJoyStickForNormal();
		void SetJoyStickDisplay(bool bShow, bool bParachutingType);
		void SetForceCollapsedFreeLook(bool bCollapsed);
		void SetCanClimbFromWater(bool bEnable);
		void SetBuyResurrecBTNVisibility(bool bShow);
		void ScopeUIStateChanged(bool BOpened);
		void ResetJoyStickSprintState();
		void ResetJoyStickControlInput();
		void ResetJoyStick();
		void RecheckElectricShopInteraction();
		void OnVehicleWeaponAbilityActivated(bool bInActive);
		void OnVehicleTypeChanged();
		void OnUpdateVehicleInteractionUIState(EVehicleInterationUIState InUiState, class ASolarVehiclePawn* InVehicleComponent);
		void OnTerminateSprintFree();
		void OnSprintLockIconActiveFunc(const struct FVector2D& SprintPosition);
		void OnSprintIconHideFunc();
		void OnSprintIconActiveFunc(const struct FVector2D& SprintPosition);
		void OnSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnShieldUpgradeStart();
		void OnShieldUpgradeItemChanged(int32_t NewCount, int32_t LastCount);
		void OnShieldUpgradeInterrupt();
		void OnShieldUpgradeFinish();
		void OnShieldChanged(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield);
		void OnShieldAvailableChanged(bool bShow);
		void OnSettingConfigSaved();
		void OnPickupSwitchChanged(bool Inactive, bool InNotToSelf);
		void OnLocalPlaySet();
		void OnInVehicleJoyStickChange(EDriveState InDriveState);
		void OnFreeLookPadRelease(const struct FGeometry& InGeometry, const struct FPointerEvent& Event);
		void OnFreeLookPadPressed(const struct FGeometry& InGeometry, const struct FPointerEvent& Event);
		void OnEnterParachuting();
		void OnEnterLanding();
		void OnEnterCruising();
		void OnElectricShopBtnClickedPC();
		void OnElectricShopBtnClicked();
		void OnDrivingStateChanged(EDriveState InDriveState);
		void OnClickFollowDance();
		void OnClickBuyResurrection();
		void OnClickBtnTeamRescue();
		void OnClickBtnShieldUpgrade();
		void OnClickBtnCancelShieldUpgrade();
		void OnCharacterUsingSkillStatusChanged(const struct FGameplayTag& Tag, int32_t NewCount);
		void OnCharacterSet(class ASolarCharacter* ControlledCharacter);
		void OnCharacterOverlapedElectricShop(bool InFlag);
		void OnCharacterIDSet(int32_t InCharacterId);
		void InputSprintLockStart();
		void InputSprintFreeStart();
		EDriveState GetLocallPlayerDriveState();
		void DoUpdateEShopButton();
		bool CheckEShopHUDActive();
		void ApplyPlayerJoyStickLayout();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PlayerOperationListPC
	 * Size -> 0x0008 (FullSize[0x0718] - InheritedSize[0x0710])
	 */
	class UPlayerOperationListPC : public UPlayerOperationList
	{
	public:
		class UCanvasPanel* Panel_MobileHide;                                        // 0x0710(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnChangedDriveState(EDriveState InDriveState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponRecoilComponent
	 * Size -> 0x0178 (FullSize[0x0228] - InheritedSize[0x00B0])
	 */
	class UWeaponRecoilComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_EG8Y[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameInstanceBase* GameInstance;                                            // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHActive;                                                // 0x00C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVActive;                                                // 0x00C1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRActive;                                                // 0x00C2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HXKI[0x5];                                   // 0x00C3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarWeapon* MyWeaponActor;                                           // 0x00C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USingleWeaponConfig* WeaponConfig;                                            // 0x00D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat* YawCurve;                                                // 0x00D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat* PitchCurve;                                              // 0x00E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat* RollCurve;                                               // 0x00E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat* ScopeRollCurve;                                          // 0x00F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat* ScopePitchCurve;                                         // 0x00F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FRichCurveKey>                               OriginalScopePitchKeys;                                  // 0x0100(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAmmoConfig* CurrentAmmoConfig;                                       // 0x0110(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2JTX[0xC8];                                  // 0x0118(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCurveFloat*>                                 YawCurveArray;                                           // 0x01E0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UCurveFloat*>                                 PitchCurveArray;                                         // 0x01F0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat* PitchEndCurve;                                           // 0x0200(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UCurveFloat*>                                 RollCurveArray;                                          // 0x0208(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UCurveFloat*>                                 ScopeRollCurveArray;                                     // 0x0218(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetRecoilVActive(bool bActive);
		void SetRecoilRActive(bool bActive);
		void SetRecoilHActive(bool bActive);
		void SetRecoilActive(bool bActive);
		bool JudgeHorizontalRecoilDir(const struct FVector& factorVector, bool bCurrentRight, int32_t instantCout);
		bool IsRunning();
		class UCurveFloat* GetYawCurve(uint32_t Mode, class UAmmoConfig* AmmoConfig);
		class UCurveFloat* GetRollCurve(uint32_t Mode, class UAmmoConfig* AmmoConfig);
		class UCurveFloat* GetPitchCurve(uint32_t Mode, class UAmmoConfig* AmmoConfig);
		struct FRotator GetCurrentRecoil();
		struct FRotator GetAndClearCurrentRecoil();
		void Fire(bool hipfire, bool Primary);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PlayerWeaponRecoilComponent
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class UPlayerWeaponRecoilComponent : public UWeaponRecoilComponent
	{
	public:
		unsigned char                                              UnknownData_43YJ[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECharacterStateForWeapon                                   CurrentCharacterState;                                   // 0x0230(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPosture                                                   CurrentPostureType;                                      // 0x0231(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QY87[0x6];                                   // 0x0232(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PostLoadEffectUIData
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPostLoadEffectUIData : public UGameplayEffectUIData
	{
	public:
		bool                                                       bPostLoaded;                                             // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GNZ3[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReceivePostLoadUIData(const struct FGameplayEffectSpec& OwnerSpec);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PreviewActor
	 * Size -> 0x0318 (FullSize[0x0540] - InheritedSize[0x0228])
	 */
	class APreviewActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_PZZK[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          DefaultSpawnTransform;                                   // 0x0230(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformRight;                                      // 0x0260(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformBattlePassRight;                            // 0x0290(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformLuckDraw;                                   // 0x02C0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformCarouselDraw;                               // 0x02F0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformGetReward;                                  // 0x0320(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformGrowTask;                                   // 0x0350(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformSupplyBoxRaffle;                            // 0x0380(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformSupplyBoxLobby;                             // 0x03B0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShowTransformCharacterWarehouse;                         // 0x03E0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              DissolveCurvePath[0x28];                                 // 0x0410(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DissolveMatPath[0x28];                                   // 0x0438(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FresnelCurvePath[0x28];                                  // 0x0460(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FresnelMatPath[0x28];                                    // 0x0488(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              SwitchParticleEffectPath[0x28];                          // 0x04B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_YGOA[0x8];                                   // 0x04D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPlaySwitchEffect;                                       // 0x04E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NCR7[0x3];                                   // 0x04E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwitchEffectInterval;                                    // 0x04E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SelfDelayShowSeconds;                                    // 0x04E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7T11[0x4];                                   // 0x04EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBackpackAnimInfo                                   BackpackAnimInfo;                                        // 0x04F0(0x000C) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PIUI[0x44];                                  // 0x04FC(0x0044) MISSED OFFSET (PADDING)

	public:
		void UpdatePreviewActorConfig(const struct FVector& DefaultLoc);
		void TransformToMirror(EItemType ItemType, const struct FTransform& OriginalTransform);
		void TransformCapsuleToMirror(const struct FTransform& OriginalTransform);
		void TransformBackpackToMirror(const struct FTransform& OriginalTransform);
		void StartPlaySwitchEffect();
		void StartPlayFresnelEffect();
		void StartPlayDissovleEffect();
		void ShowAnimLuaCall();
		void ShowAnim();
		void ShowActorWithTrans(const struct FTransform& InOffset);
		void ShowActor();
		void SetSwitchEffectCompProperties(class UMeshComponent* EffectComp, class UMeshComponent* DefaultComp, struct FSwitchEffectInfo* EffectInfo, class UMaterialInterface* EffectMat);
		void SetSwitchEffectComp(TArray<class UActorComponent*> DefaultComps, class UMaterialInterface* EffectMat, TArray<struct FSwitchEffectInfo>* EffectInfos);
		void PlayAnimInfo(const struct FVertexAnimInfo& InAnimInfo);
		void PlayAnim(int32_t InStartFrame, int32_t InEndFrame, float InLength, bool InLoop);
		void HideActor();
		void DetachFX(class AActor* FXActor);
		void CreateStaticOrnaments(class USkeletalMeshComponent* SkeletalMesh, TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> OrnamentsConfig);
		void CreateSkeletalOrnaments(class USkeletalMeshComponent* SkeletalMesh, TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> OrnamentsConfig);
		void CreateOrnaments(class USkeletalMeshComponent* SkeletalMesh, class UCharacterSkinConfig* SkinConfig);
		void CreateChildActorOrnaments(class USkeletalMeshComponent* SkeletalMesh, TMap<struct FGameplayTag, struct FChildActorOrnamentConfig> OrnamentsConfig);
		class AActor* AttachFX(const class FString& FXBPPath, const class FString& SokectName, bool AutoActivate);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PreviewHomeActor
	 * Size -> 0x0010 (FullSize[0x0550] - InheritedSize[0x0540])
	 */
	class APreviewHomeActor : public APreviewActor
	{
	public:
		class USolarHomeActorManager* HomeActorMgr;                                            // 0x0540(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* StaticMeshComp;                                          // 0x0548(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetMaterial(int32_t InItemID);
		class UDataTable* GetTextureDataTable();
		class USolarHomeShaderConfig* GetShaderConfig();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.QuickChatUnit
	 * Size -> 0x0030 (FullSize[0x0290] - InheritedSize[0x0260])
	 */
	class UQuickChatUnit : public UUserWidget
	{
	public:
		class UButton* BtnUnit;                                                 // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* TxtChat;                                                 // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1VRV[0x20];                                  // 0x0270(0x0020) MISSED OFFSET (PADDING)

	public:
		void SendChatMessage();
		void OnChatMessageReleased();
		void OnChatMessagePressed();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.QuickVoice
	 * Size -> 0x00C8 (FullSize[0x0410] - InheritedSize[0x0348])
	 */
	class UQuickVoice : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_1NL5[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* CanvasPanel_61;                                          // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Cancel;                                                  // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* GetIn;                                                   // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Rescue;                                                  // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* FollowMe;                                                // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Weapon;                                                  // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Vehicle;                                                 // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Attack;                                                  // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Defend;                                                  // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Someone;                                                 // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_Point;                                           // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Content;                                             // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Arrow_1;                                             // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Enter;                                              // 0x03C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Exit_Enter;                                              // 0x03C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PointMoveRange;                                          // 0x03D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PointMoveSensitivity;                                    // 0x03D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CancelSelectRadius;                                      // 0x03D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N7IZ[0x4];                                   // 0x03DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USolarCheckBox*>                              AllCheckBoxs;                                            // 0x03E0(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UBUT[0x20];                                  // 0x03F0(0x0020) MISSED OFFSET (PADDING)

	public:
		void ReceiveMarkButtonTouchMoved(float DegreeToCenter, const struct FVector2D& TouchLocalPos);
		void ReceiveMarkButtonHoverChanged(bool bIsHovered);
		void ReceiveMarkButtonDragSelectEnded(bool bPlayerDead);
		void ReceiveMarkButtonBeenLongPressed();
		void OnSelectedChanged(int32_t ChosenIndex);
		void OnExitAnimFinished();
		void OnCustomGameStateChanged(ESCMInGameState NewGameState);
		void OnCharacterDead(class ASolarCharacter* InCharacter);
		void InitCheckBoxesArray();
		void DoSelectOption(int32_t ChosenIndex);
		void CloseQuickChatWheel();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RadarEffectController
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class URadarEffectController : public UActorEffectController
	{
	public:
		unsigned char                                              UnknownData_UNUW[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RandomPackActorBase
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ARandomPackActorBase : public AActor
	{
	public:
		void InitAnimationPosition(class USkeletalMeshComponent* Mesh);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RoleSkillWidget
	 * Size -> 0x0180 (FullSize[0x04C8] - InheritedSize[0x0348])
	 */
	class URoleSkillWidget : public USolarUserWidget
	{
	public:
		class UImage* icon_Skill;                                              // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_SkillType;                                           // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Skill;                                               // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* img_Bg_Border;                                           // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImage* Img_Bg_2;                                                // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_SkillBg;                                             // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Loop;                                                // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* Img_Loop_Box;                                            // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Loop_Anim;                                               // 0x0388(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* LevelUp_Anim;                                            // 0x0390(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_ReduceCD;                                          // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Progress;                                            // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* Progress_CD;                                             // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Refresh_Anim;                                            // 0x03B0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Reduce_Anim;                                             // 0x03B8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Forbid;                                              // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Continuous;                                        // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Continued_Loop_Anim;                                     // 0x03D0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Progress_Duration;                                       // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Loop_New;                                            // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Skill_Continuous;                                    // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_BtnBg;                                               // 0x03F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BtnCancel;                                               // 0x03F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMovablePad* RoleSkillPad;                                            // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget* PanelKeyMapping;                                         // 0x0408(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PadPaddingOnPress;                                       // 0x0410(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RU7D[0x8];                                   // 0x0414(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ERoleWidgetType                                            RoleWidgetType;                                          // 0x041C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PRRK[0x3];                                   // 0x041D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLinearColor>                                ImgBorderColor;                                          // 0x0420(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                IconColor;                                               // 0x0430(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                ImgBGColor;                                              // 0x0440(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<float>                                              TacticalIconCapacity;                                    // 0x0450(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                QualityColorBase;                                        // 0x0460(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                QualityColorDecorate;                                    // 0x0470(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInCD;                                                   // 0x0480(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IRKH[0x47];                                  // 0x0481(0x0047) MISSED OFFSET (PADDING)

	public:
		void UpdateReduceCDWidgetColor(int32_t QualityIndex);
		void OnSuperScaningWidgetShow(bool bShow);
		void OnRoleAbilityStateChange(int32_t AbilityIndex, int32_t State);
		void OnRoleAbilityStartCDServerTimeUpdate(int32_t AbilityIndex, float InServerTime);
		void OnRoleAbilityStartCD(int32_t AbilityIndex, float InStartCDServerTime, float StartCDTimeForReplay);
		void OnRoleAbilityInputAction(int32_t AbilityIndex, bool bPress, bool bCanActive);
		void OnRoleAbilityEndCD(int32_t AbilityIndex);
		void OnRoleAbilityEnd(int32_t AbilityIndex);
		void OnRoleAbilityContinous(int32_t AbilityIndex, bool bTurnOn, float Duration);
		void OnRoleAbilityChange(int32_t AbilityIndex, bool bHaveRoleAbility, int32_t CharacterId, int32_t PlayerLevel);
		void OnRoleAbilityCDDurationChange(int32_t AbilityIndex, int32_t Duration, bool bDurationReduced);
		void OnPadRelease(const struct FGeometry& InGeometry, const struct FPointerEvent& Event);
		void OnPadPress(const struct FGeometry& InGeometry, const struct FPointerEvent& Event);
		void OnExitSpectateMode();
		void OnEntertSpectateMode();
		void OnControllerCharacterSet(class ASolarCharacter* ControlledCharacter);
		void OnChangeDriveState(EDriveState InDriveState);
		void OnCancelBtnRelease();
		void OnCancelBtnPress();
		void OnBattleHUDVisibleChange(bool bVisible);
		void CancelAbility();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RotationBarMarkWidget
	 * Size -> 0x0050 (FullSize[0x02B0] - InheritedSize[0x0260])
	 */
	class URotationBarMarkWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_S1QE[0x28];                                  // 0x0260(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                FlagName;                                                // 0x0288(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                TextName;                                                // 0x0290(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* FlagImage;                                               // 0x0298(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* TextBlock;                                               // 0x02A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class AActor>                               TargetActor;                                             // 0x02A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetupOrder(int32_t InOrderID);
		void SetUpdateState(bool ShouldUpdateLocation);
		void SetPosition(const struct FVector2D& InPosition);
		void SetFlagIcon(class UPaperSprite* InSprite);
		void InitializeMark(class AActor* InTargetActor, bool InMoveable);
		float GetAngle();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RotationBarWidget
	 * Size -> 0x00D8 (FullSize[0x0420] - InheritedSize[0x0348])
	 */
	class URotationBarWidget : public USolarUserWidget
	{
	public:
		TMap<unsigned char, class URotationBarMarkWidget*>         MarkList;                                                // 0x0348(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class URotationBarMarkWidget*>                      CustomMarkList;                                          // 0x0398(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class URotationBarMarkWidget*>                      BuildingFlagList;                                        // 0x03A8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class URotationBarMarkWidget*>                      ActorMarkList;                                           // 0x03B8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* MarkWidgetClass;                                         // 0x03C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              MarkWidgetName;                                          // 0x03D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              MarkAtlasType;                                           // 0x03E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                PanelName;                                               // 0x03F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DirectionImage1Name;                                     // 0x03F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DirectionImage2Name;                                     // 0x0400(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* DirectionPanel;                                          // 0x0408(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* DirectionImage1;                                         // 0x0410(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* DirectionImage2;                                         // 0x0418(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ShowMark(unsigned char InPosInTeam, const struct FVector& InPosition);
		TArray<class URotationBarMarkWidget*> ShowActorMarkWithArray(TArray<class AActor*> TargetActor);
		class URotationBarMarkWidget* ShowActorMark(class AActor* TargetActor);
		void OnRotationBarVisibilityChanged(bool bVisible);
		void InitBuildingFlag();
		TArray<int32_t> GetLocationIconIDs(int32_t InMapID);
		struct FBuildingData GetBuildingData(int32_t InIconID);
		class URotationBarMarkWidget* CreateCustomMark(class UClass* RotationBarMarkClass, const struct FVector& InMarkPos, int32_t InZOrder);
		bool ContainMapID(int32_t InMapID);
		void CleanMark(unsigned char InPosInTeam);
		void CleanCustomMark(class URotationBarMarkWidget* InMarkWidget);
		void CleanActorMarkWithWidgetArray(TArray<class URotationBarMarkWidget*> TargetMarkWidget);
		void CleanActorMarkWithWidget(class URotationBarMarkWidget* TargetMarkWidget);
		void CleanActorMarkWithActorArray(TArray<class AActor*> TargetActor);
		void CleanActorMarkWithActor(class AActor* TargetActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SafeAreaProgressWidget
	 * Size -> 0x00D8 (FullSize[0x0420] - InheritedSize[0x0348])
	 */
	class USafeAreaProgressWidget : public USolarUserWidget
	{
	public:
		class UImage* Var_Avatar;                                              // 0x0348(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Var_PoisonBar;                                           // 0x0350(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Var_ImageWarnning;                                       // 0x0358(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Var_TextDistance;                                        // 0x0360(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Var_TextTime;                                            // 0x0368(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPanelWidget* Var_TimePanel;                                           // 0x0370(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7847[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Warning01[0x28];                                         // 0x0380(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              Warning02[0x28];                                         // 0x03A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_RV16[0x50];                                  // 0x03D0(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameMode
	 * Size -> 0x0248 (FullSize[0x0558] - InheritedSize[0x0310])
	 */
	class ASolarGameMode : public AGameMode
	{
	public:
		class FScriptMulticastDelegate                             PreStartPlay;                                            // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      CalledStartPlay;                                         // 0x0320(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PostStartPlay;                                           // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PreHandleMatchHasStarted;                                // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      CalledHandleMatchHasStarted;                             // 0x0350(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PostHandleMatchHasStarted;                               // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PreRestartPlayer;                                        // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      CalledRestartPlayer;                                     // 0x0380(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PostRestartPlayer;                                       // 0x0390(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PreEndPlay;                                              // 0x03A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      CalledEndPlay;                                           // 0x03B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PostEndPlay;                                             // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UGameModeCompBase*>                           GameModeComponents;                                      // 0x03D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YY7C[0x4];                                   // 0x03E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    GamePlayMode;                                            // 0x03E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      ManagerClasses;                                          // 0x03E8(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CharacterClassPath;                                      // 0x03F8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CharacterIdInTrainningCourse;                            // 0x0408(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkinIdInTrainningCourse;                                 // 0x040C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BagIdInTrainingCourse;                                   // 0x0410(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bManuallyModifyCharacter;                                // 0x0414(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S2LY[0x3];                                   // 0x0415(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpecifiedCharacterSkinID;                                // 0x0418(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bManuallyModifyCharacterBagId;                           // 0x041C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K3S2[0x3];                                   // 0x041D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpecifiedCharacterBagID;                                 // 0x0420(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bManuallyModifyCharacterBagTrailId;                      // 0x0424(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0UCT[0x3];                                   // 0x0425(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpecifiedCharacterBagTrailID;                            // 0x0428(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I8LA[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPostSpawnDefaultSolarCharacterAtTransform;             // 0x0430(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USolarGameModeAIComponent* AIMgrComponent;                                          // 0x0440(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarGameModeStatisticsComponent* StatComponent;                                           // 0x0448(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarTeamInfo*>                              Teams;                                                   // 0x0450(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarTeamInfo*>                              AliveTeams;                                              // 0x0460(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarPlayerState*>                           AlivePlayers;                                            // 0x0470(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* TeamClass;                                               // 0x0480(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* TeamDataTable;                                           // 0x0488(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L04H[0xB0];                                  // 0x0490(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarFlyTrail* FlyTrailActor;                                           // 0x0540(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      BannedPlayerIDList;                                      // 0x0548(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdatePlayerDataForBotAI(int32_t AIConfigID, class ASolarPlayerState* PlayerState);
		void UpdatePlayerData(int32_t CharacterSkinID, int32_t CharacterBagID, int32_t CharacterBagTrailID, class ASolarPlayerState* PlayerState);
		void UpdateDeserterTag(class ASolarPlayerState* PlayerState);
		void UpdateBotPlayerData(class ASolarPlayerState* PlayerState);
		void UpdateAliveTeamsAndPlayers();
		class FString TryKickOutOnlinePlayer(const class FString& PlayerId, bool IsAllowReconnect);
		void SolarGM_SetAntiCheatData(const class FString& InVariableName, float InMin, float InMax, float InThreshold, bool bInBanPlayer);
		void SetGamePlayMode(int32_t InGamePlayMode);
		void SendHitMsgWithBool(class ASolarCharacterBase* HitedPlayer, ESolarHitType MsgType, float Damage, bool bo);
		void SendHitMsg(class ASolarCharacterBase* HitedPlayer, ESolarHitType MsgType, float Damage, const class FString& Params);
		void RestartPlayerTakeChargeEvent__DelegateSignature(bool* bOutSuccess, TArray<class UGameModeCompBase*> ComponentCollection, class AController* NewPlayer);
		void RestartPlayerEvent__DelegateSignature(TArray<class UGameModeCompBase*> ComponentCollection, class AController* NewPlayer);
		void PresettleAll();
		void PreAssignTeam(unsigned char DesiredTeamID, class ASolarPlayerState* PlayerState);
		void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(class ASolarPlayerState* NewPlayer, class ASolarCharacter* NewCharacter);
		void OnStartBattleresponded();
		bool OnPlayerReJoinRequest(const class FString& PlayerId, class FString* ErrorMsg);
		void NotifyItemStateChanged(class AActor* Item, int32_t State);
		void KickOutPlayerToLobby(const class FString& InPlayerID);
		void KickOutAllPlayerToLobby();
		bool IsBannedForCheating(const class FString& PlayerId);
		void InitCharacterClassPath(int32_t CharacterId);
		void GetTeams(TArray<class ASolarTeamInfo*>* OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);
		TArray<int32_t> GetRandomAISkinID(class ASolarPlayerState* InPS);
		int32_t GetMatchTeammateCount();
		int32_t GetGamePlayMode();
		class UGameModeGlobalSetting* STATIC_GetGameModeSetting(class UObject* WorldContextObject);
		void GetEmptyTeams(TArray<class ASolarTeamInfo*>* OutTeams, bool Reverse);
		int32_t GetBotAINumber();
		void GameModeComponentTakeChargeEvent__DelegateSignature(bool* bOutSuccess, TArray<class UGameModeCompBase*> ComponentCollection);
		void GameModeComponentEvent__DelegateSignature(TArray<class UGameModeCompBase*> ComponentCollection);
		void EndPlayTakeChargeEvent__DelegateSignature(bool* bOutSuccess, TArray<class UGameModeCompBase*> ComponentCollection, EEndPlayReason EndPlayReason);
		void EndPlayEvent__DelegateSignature(TArray<class UGameModeCompBase*> ComponentCollection, EEndPlayReason EndPlayReason);
		class ASolarPlayerState* CreateBotAISingle(int32_t CharacterId, const struct FVector& Location, TArray<ETeamType> JoinPolicies, class UClass* ControllerClass, int32_t Difficultly);
		class ASolarPlayerState* CreateBotAIAndJoinTeamByName(int32_t CharacterId, const struct FVector& Location, const class FString& TeamName, class UClass* ControllerClass, int32_t Difficultly);
		class ASolarPlayerState* CreateBotAIAndJoinTeamByID(int32_t CharacterId, const struct FVector& Location, unsigned char TeamID, class UClass* ControllerClass, int32_t Difficultly);
		class ASolarPlayerState* CreateBotAIAndJoinTeam(int32_t CharacterId, const struct FVector& Location, class ASolarTeamInfo* TeamInfo, class UClass* ControllerClass, int32_t Difficultly);
		bool CanPlayerBattle(class ASolarPlayerState* PlayerState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SBattleGameMode
	 * Size -> 0x0030 (FullSize[0x0588] - InheritedSize[0x0558])
	 */
	class ASBattleGameMode : public ASolarGameMode
	{
	public:
		class FScriptMulticastDelegate                             OnPlayerDisconnectedGame;                                // 0x0558(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerReconnectedGame;                                 // 0x0568(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PF6D[0x8];                                   // 0x0578(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SettlementStageConfigID;                                 // 0x0580(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WUB6[0x4];                                   // 0x0584(0x0004) MISSED OFFSET (PADDING)

	public:
		void SettlePlayerBattleData(class ASolarPlayerState* Player);
		void ReceiveBattleSettlement();
		void ReceiveBattleOver();
		void OnPlayerLeaveDSTimeOut(class ASolarPlayerState* PlayerState);
		bool IsAutoSettlementWhenKilled();
		bool IsAllowReconnectGame(class ASolarPlayerState* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameState
	 * Size -> 0x01B0 (FullSize[0x0448] - InheritedSize[0x0298])
	 */
	class ASolarGameState : public AGameState
	{
	public:
		unsigned char                                              UnknownData_N54X[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPlayerState*>                           SolarPlayerStateArray;                                   // 0x02A0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarPlayerState*>                           RealPlayerStateArray;                                    // 0x02B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowBattlePrompt : 1;                                   // 0x02C0(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OP5T[0x7];                                   // 0x02C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            MapVehicleSpawnTypes;                                    // 0x02C8(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7E0B[0x10];                                  // 0x02D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPrePooledBundle>                            PrePooledBundles;                                        // 0x02E8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RemainingPlayersCount;                                   // 0x02F8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AlivePlayersCount;                                       // 0x02FC(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RemainingTeamCount;                                      // 0x0300(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PlayersCount;                                            // 0x0304(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TeamCount;                                               // 0x0308(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TotalBoardingNum;                                        // 0x030C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CapsulePlayerNum;                                        // 0x0310(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SettlementStageConfigID;                                 // 0x0314(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              LimitMaxReplicatedNumClasses[0x50];                      // 0x0318(0x0050) UNKNOWN PROPERTY: SetProperty
		float                                                      StartTime;                                               // 0x0368(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumPlayers;                                              // 0x036C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GameWarmID;                                              // 0x0370(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TeammateNumMode;                                         // 0x0374(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLuaReportBattleEndServer;                               // 0x0378(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HM65[0x7];                                   // 0x0379(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameStartConditionList                             GameStartConditions;                                     // 0x0380(0x0058) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class USolarGameplayConfigComponent* GameplayConfigComponent;                                 // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASolarTeamInfo*>                              Teams;                                                   // 0x03E0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              NumReplicatedTeams;                                      // 0x03F0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RW32[0x4F];                                  // 0x03F1(0x004F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarPlayerActivityHeatComponent* SolarPlayerActivityHeatComponent;                        // 0x0440(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetTeamLastVehicleLocation(unsigned char InTeamId, const struct FVector& InVehiclePosition);
		void SetSettlementStageConfigID(int32_t InConfigID);
		void ServerUpdateMapVehicleSpawnTypes(TArray<int32_t> InSpawnTargetVehicleTypes);
		void PlayTeamVictoryVoice();
		void OnSafeAreaIndexChanged(int32_t NewIndex);
		void OnRep_SettlementStageConfigID();
		void OnRep_RemainingTeamCountChange();
		void OnRep_OnPlayersCountChange();
		void OnRep_OnAlivePlayersCountChange();
		void OnRep_NumReplicatedTeams();
		void OnRep_NumPlayers(int32_t PreviousNumPlayers);
		void OnRep_CapsulePlayerNum();
		void OnRecordingConnectionChanged();
		void OnLocalSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarSpectateInfo* SpectateInfo);
		void NotifyCheatedPlayer(class ASolarPlayerState* CheatedPlayerState, const class FText& OutReason);
		void NotifyBombingEnd(int32_t BombId);
		void NotifyBombingBegin(int32_t BombId, const struct FVector& Location, float Radius);
		void NotifyAbnormalPlayer(class ASolarPlayerState* AbnormalPlayerState, const class FText& OutReason);
		void NetMulticastNotifyCheatedPlayer(class ASolarPlayerState* CheatedPlayerState, const class FText& BanReason);
		void K2_SetCanShowBattlePrompt(bool NewValue);
		bool IsSupportWeaponUpgrade();
		bool IsSupportCharacterTacticalAbility();
		bool IsSupportCharacterSuperAbility();
		bool IsSupportCharacterRole();
		bool IsSupportCharacterInGameLeveling();
		float GetWorldStartTimeSeconds();
		int32_t GetWatchingPlayerCount(bool IgnoreOffline);
		void GetTeams(TArray<class ASolarTeamInfo*>* OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);
		class ASolarPlayerState* GetTeamPlayerState(unsigned char InTeamId, unsigned char InPosInTeam);
		int32_t GetTeamNumCount();
		unsigned char GetTeammateNum(unsigned char InTeamId);
		class ASolarTeamInfo* GetTeamByName(const class FString& InTeamName);
		class ASolarTeamInfo* GetTeam(unsigned char InTeamId);
		ERoleSkillOperation GetTacticalSkillStateOperationOnInit();
		ERoleSkillOperation GetSuperSkillStateOperationOnInit();
		class ASolarPlayerState* GetSpecTargetOrLocalPlayerState();
		class ASolarSafeArea* GetSolarSafeArea();
		int32_t GetSettlementStageConfigID();
		int32_t GetRemainingTeamCount();
		int32_t GetRemainingPlayersCount();
		void GetPlayerTeams(TArray<class ASolarTeamInfo*>* OutTeams, bool FilterAlreadySettled);
		class ASolarPlayerState* GetPlayerStateByPlayerId(const class FString& InPlayerID);
		class ASolarPlayerState* GetPlayerStateByNickName(const class FString& InNickName);
		int32_t GetPlayersCount();
		class ASolarCharacter* GetPlayerByPlayerID(const class FString& InPlayerID);
		void GetOnlyPlayerTeams(TArray<class ASolarTeamInfo*>* OutTeams, bool FilterAlreadySettled);
		void GetOnlyBotTeams(TArray<class ASolarTeamInfo*>* OutTeams, bool FilterAlreadySettled);
		class ASolarPlayerState* GetOfflinePlayerState(const class FString& OfflinePlayerId);
		class ASolarPlayerState* GetLocalSolarPlayerState();
		bool GetCanShowBattlePrompt();
		float GetBattleStartTimeSeconds();
		void GetAllCharactersExceptTeammate(TArray<class ASolarCharacter*>* CharacterArray);
		int32_t GetAliveSolarPlayersCount(bool IgnoreOffline);
		int32_t GetAlivePlayersCount();
		unsigned char GetAlivePlayerNumInTeamExceptDying(unsigned char InTeamId, bool bExceptCheater);
		unsigned char CalculateTeamNum();
		void CacheSafeArea(class ASolarSafeArea* SafeArea);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SBattleGameState
	 * Size -> 0x0020 (FullSize[0x0468] - InheritedSize[0x0448])
	 */
	class ASBattleGameState : public ASolarGameState
	{
	public:
		unsigned char                                              UnknownData_7E0Z[0x18];                                  // 0x0448(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsBattleEnd;                                             // 0x0460(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsBattleSettlement;                                      // 0x0461(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBattleEndType                                             BattleEndType;                                           // 0x0462(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8A71[0x5];                                   // 0x0463(0x0005) MISSED OFFSET (PADDING)

	public:
		bool IsBattleOver();
		bool GetIsBattleSettlement();
		EBattleEndType GetBattleEndType();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SBattleRoyaleGameModeAIComp
	 * Size -> 0x0020 (FullSize[0x0180] - InheritedSize[0x0160])
	 */
	class USBattleRoyaleGameModeAIComp : public USolarGameModeAIComponent
	{
	public:
		bool                                                       bBotSkipAICruise;                                        // 0x0160(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IG5T[0x3];                                   // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxLootDistanceToAirline;                                // 0x0164(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanSelectLootZoneOutPoisonCircle;                       // 0x0168(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VBWK[0x17];                                  // 0x0169(0x0017) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCustomGameMode
	 * Size -> 0x01B8 (FullSize[0x0740] - InheritedSize[0x0588])
	 */
	class ASCustomGameMode : public ASBattleGameMode
	{
	public:
		unsigned char                                              UnknownData_R8KZ[0x8];                                   // 0x0588(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeOutSeconds;                                          // 0x0590(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4KZK[0xB4];                                  // 0x0594(0x00B4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCGMLogicComponent* LogicComponent;                                          // 0x0648(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCGMDeathComponent* DeathComponent;                                          // 0x0650(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YNXM[0x10];                                  // 0x0658(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASCMPlayerController*>                        WaitingPlayers;                                          // 0x0668(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YI9E[0x10];                                  // 0x0678(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerJoin;                                            // 0x0688(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAIJoin;                                                // 0x0698(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerOutEvent;                                        // 0x06A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      GameManagerClasses;                                      // 0x06B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* LogicComponentClass;                                     // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* DeathComponentClass;                                     // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* PlayerRPCComponentClass;                                 // 0x06D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X4L4[0x60];                                  // 0x06E0(0x0060) MISSED OFFSET (PADDING)

	public:
		void TimerStartGame();
		void StartBattle();
		bool RequestAllowReconnectGame(class ASCMPlayerState* InPC);
		void ReceiveSpectatorJoinData(class ASCMPlayerState* Player);
		void ReceiveServerLevelLoaded(const class FString& LevelName);
		bool ReceivePlayerTeamPreJoinRequest(TArray<class ASCMPlayerState*> PreJoinPlayers, int32_t TeamID);
		bool ReceivePlayerReJoinRequest(const class FString& PlayerId, class FString* ErrorMsg);
		void ReceivePlayerReJoin(class ASCMPlayerState* NewPlayer);
		void ReceivePlayerPreLogin(const class FString& PlayerId, class ASCMPlayerState* OfflinePlayer, class FString* ErrorMsg);
		void ReceivePlayerNonSpectatorJoinData(class ASCMPlayerState* Player);
		void ReceivePlayerLevelLoaded(class ASCMPlayerController* Player, const class FString& LevelName);
		void ReceivePlayerJoinData(const class FString& PlayerId);
		void ReceivePlayerJoinBattle(class ASCMPlayerState* NewPlayer, bool IsAI);
		void ReceivePlayerJoin(class ASCMPlayerState* NewPlayer, bool IsAI);
		void ReceivePlayerCheat(class ASolarPlayerState* InCheater);
		void ReceivePlayerCancelJoin(const class FString& PlayerId);
		void ReceivePlayerBattleEnd(class ASCMPlayerState* Player, ESCMPlayerOutType OutType);
		void ReceivePlayerAbnormal(class ASolarPlayerState* InAbnormalPlayer);
		void ReceiveOBPlayersChanged();
		void ReceiveGameModeInit();
		void ReceiveBattleTick(float InBattleTime, float DeltaTime);
		void ReceiveBattleEnd();
		void ReceiveBattleBegin();
		void OnTeamInTournamentSettled(const class FString& Side, unsigned char TeamID);
		void OnReceivePlayerLogin(class APlayerController* PlayerController);
		void OnReceivePlayerBattleStart(class APlayerController* PlayerController);
		void OnReceiveBattleStart();
		void OnPlayerSettled(class ASCMPlayerState* Player);
		void OnPlayerOut__DelegateSignature(class ASCMPlayerState* Player, ESCMPlayerOutType OutType);
		void OnPlayerOfflineTimeOut(class ASCMPlayerState* OfflineTimeoutPlayer);
		void OnPlayerJoin__DelegateSignature(class ASCMPlayerState* Player);
		void OnPlayerGiveUp(class ASCMPlayerState* OfflineTimeoutPlayer);
		void OnMatchEnd(int32_t RPCID);
		void OnDSClose();
		void OnBotAIDataReady(int32_t AICount);
		void OnAIJoin__DelegateSignature(class ASCMPlayerState* BotAI);
		void NotifyDSBattleOver();
		void NotifyBotAIDataReady(int32_t AICount);
		bool IsEnableLogicComp();
		int32_t GetCurMapID();
		void CreateHomeActor(const class FString& Path);
		bool CheckLogicComponentIsA();
		bool ChangePlayerCharacter(class ASCMPlayerState* Player, int32_t CharacterId, int32_t SkinId);
		bool ChangeBotAICharacter(class ASolarPlayerState* Player, int32_t CharacterId, int32_t SkinId);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCBattleRoyaleGameMode
	 * Size -> 0x0000 (FullSize[0x0740] - InheritedSize[0x0740])
	 */
	class ASCBattleRoyaleGameMode : public ASCustomGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCBountyGameMode
	 * Size -> 0x0000 (FullSize[0x0740] - InheritedSize[0x0740])
	 */
	class ASCBountyGameMode : public ASCustomGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterBase
	 * Size -> 0x0118 (FullSize[0x05E0] - InheritedSize[0x04C8])
	 */
	class ASolarCharacterBase : public ACharacter
	{
	public:
		unsigned char                                              UnknownData_2F8C[0x8];                                   // 0x04C8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_299Y[0x24];                                  // 0x04D0(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSpawnedActorHandle                                 CachedActorHandle;                                       // 0x04F4(0x0004) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarAbilityComponent* SolarAbilityComponent;                                   // 0x04F8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPendingEnterWater;                                      // 0x0500(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BZ2N[0x7];                                   // 0x0501(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacterBase* InstigatorCharacter;                                     // 0x0508(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UParticleSystem>                      DedicatedDeathEffect;                                    // 0x0510(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              DeathEffectSoft[0x28];                                   // 0x0518(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_SHHN[0x34];                                  // 0x0540(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VehicleCollisionProtectionTimeOnJumpingOff;              // 0x0574(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PushYScale;                                              // 0x0578(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PushXScaleOnSwimming;                                    // 0x057C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PushYScaleOnSwimming;                                    // 0x0580(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PushZScaleOnSwimming;                                    // 0x0584(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAbilitySystemComponent* SolarAbilitySystemComponent;                             // 0x0588(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BBC5[0x24];                                  // 0x0590(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHoldSignificanceWhenDyingForAutonomous;                 // 0x05B4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OG94[0x3];                                   // 0x05B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x05B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x05C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterSoundConfig* CharacterSoundConfig;                                    // 0x05C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QC88[0x10];                                  // 0x05D0(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetAttributeWithGAS(const struct FGameplayAttribute& InAttribute, EGameplayModOp ModifyType, float InValue);
		void ResetAudioComponentTransform();
		void PostAkEventByName(const class FString& EventName1, const class FString& EventName2);
		void OnRep_PendingEnterWater();
		void MulticastAddHitTrace(const struct FHitTraceInfo& Info);
		bool K2_IsInWater();
		bool K2_IsAlive();
		bool IsPlayerLocallyControlled();
		bool IsInWater();
		bool IsInSight(const struct FVector& InTargetPos, float InMaxAngle, bool bHorizontalOnly);
		bool IsInRoom();
		bool IsBlocked(class AActor* InOtherActor);
		bool InSameTeamWithFirstPlayerController();
		void InitSolarAkGameObject(class UActorComponent* Component, bool bReset);
		class FString GetSoundEventString(ECharacterSoundOpt SoundOpt);
		class USolarAkGameObject* GetSolarAkGameObject();
		class USolarAbilitySystemComponent* GetSafeASC();
		float GetMaxHealth();
		float GetCurrentHealth();
		ESolarCharacterType GetCharacterType();
		struct FVector GetCharacterLocation(bool bMiddle);
		struct FVector GetCharacterDirection();
		class USolarBackpackComponent* GetBackpack();
		void ClientOnPushedByVehicle();
		bool CheckOpenParticleOptimization(int32_t Bias);
		void ChangeCurrentHealthWithGAS(EGameplayModOp ModifyType, float InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacter
	 * Size -> 0x1AB0 (FullSize[0x2090] - InheritedSize[0x05E0])
	 */
	class ASolarCharacter : public ASolarCharacterBase
	{
	public:
		unsigned char                                              UnknownData_YXW8[0x80];                                  // 0x05E0(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             PendingBeginPlay;                                        // 0x0660(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WJR8[0x18];                                  // 0x0670(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerStatePossessDelegate;                            // 0x0688(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateRepDelegate;                                // 0x0698(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		ESolarCharacterType                                        SolarCharacterType;                                      // 0x06A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G65S[0x5B];                                  // 0x06A9(0x005B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           CharacterCapsuleSizeOverride;                            // 0x0704(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KCIW[0x1];                                   // 0x070C(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bInRoom;                                                 // 0x070D(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AIVX[0x2D];                                  // 0x070E(0x002D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReconnectionParams                                 ReconnectionParams;                                      // 0x073B(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_N7WL[0x1C];                                  // 0x073C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarAnimInstance* SolarAnimInstance;                                       // 0x0758(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<ESpecAnimInstType, class UAnimInstance*>              SolarAnimInstances;                                      // 0x0760(0x0050) BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_507G[0x14];                                  // 0x07B0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BodyHitSoundCount;                                       // 0x07C4(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    BodyHitByPunchSoundCount;                                // 0x07C8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6E0L[0x4];                                   // 0x07CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPile*>                                  ChargingPileQueue;                                       // 0x07D0(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WWY0[0x28];                                  // 0x07E0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterIDSet;                                        // 0x0808(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkinIDSet;                                             // 0x0818(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterSkinReset;                                    // 0x0828(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		ECharacterBodyScaleType                                    BodyScaleType;                                           // 0x0838(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XLGN[0x3];                                   // 0x0839(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AssignedCharacterID;                                     // 0x083C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AssignedSkinID;                                          // 0x0840(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P634[0xC];                                   // 0x0844(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FGameplayTag, class USkeletalMeshComponent*>   SkeletalOrnaments;                                       // 0x0850(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, class UStaticMeshComponent*>     StaticOrnaments;                                         // 0x08A0(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, class UChildActorComponent*>     ChildActorOrnaments;                                     // 0x08F0(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, struct FCharacterTagListenerForOrnamentComp> OrnamentCompVisibleTagDependencies;                      // 0x0940(0x0050) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FOrnamentMontageInfo                                OrnamentMontageInfo;                                     // 0x0990(0x0018) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O3NT[0x140];                                 // 0x09A8(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarAttributeSubComponent* AttributeSubComp;                                        // 0x0AE8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7ANQ[0x38];                                  // 0x0AF0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarBackpackActor* SolarBackpackActor;                                      // 0x0B28(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarBackpackComponent* SolarBackpackComponent;                                  // 0x0B30(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GL0C[0x20];                                  // 0x0B38(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBackpackItemUpdate;                                    // 0x0B58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBackpackEnergyUpdate;                                  // 0x0B68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBackpackEquipUpdate;                                   // 0x0B78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBatteryIdUpdate;                                       // 0x0B88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnergyStateUpdate;                                     // 0x0B98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChargeInfoUpdate;                                      // 0x0BA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnConsumableNumUpdated;                                  // 0x0BB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMaxEnergyUpdate;                                       // 0x0BC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCurEnergyUpdate;                                       // 0x0BD8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBackpackWeaponPartUpdate;                              // 0x0BE8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<int32_t, int32_t>                                     ShieldUpMatCostMap;                                      // 0x0BF8(0x0050) NativeAccessSpecifierPublic
		TMap<int32_t, int32_t>                                     MaxPileMap;                                              // 0x0C48(0x0050) NativeAccessSpecifierPublic
		TArray<struct FReplicateMaxPileData>                       MaxPileArray;                                            // 0x0C98(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, struct FSolarItemData>                       IdKeyItemMap;                                            // 0x0CA8(0x0050) NativeAccessSpecifierPublic
		TArray<struct FReplicateItemData>                          IdKeyItemArray;                                          // 0x0CF8(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EItemType, struct FSolarItemData>                     TypeKeyItemMap;                                          // 0x0D08(0x0050) NativeAccessSpecifierPublic
		TArray<struct FReplicateItemData>                          TypeKeyItemArray;                                        // 0x0D58(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FReplicateItemData>                          WeaponDataArray;                                         // 0x0D68(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, struct FSolarItemData>                       WeaponDataMap;                                           // 0x0D78(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0XBG[0x50];                                  // 0x0DC8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            WeaponPartsArray;                                        // 0x0E18(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ONIT[0x8];                                   // 0x0E28(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<unsigned char>                                      IgnoreScopeSlots;                                        // 0x0E30(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              EnergyState;                                             // 0x0E40(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B2QQ[0x3];                                   // 0x0E41(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxEnergyValue;                                          // 0x0E44(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrEnergyValue;                                         // 0x0E48(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxExtraEnergyValue;                                     // 0x0E4C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrExtraEnergyValue;                                    // 0x0E50(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    EnergyModuleID;                                          // 0x0E54(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AddedEnergyMax;                                          // 0x0E58(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ExtraEnergyModuleID;                                     // 0x0E5C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AddedExtraEnergyMax;                                     // 0x0E60(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    VJetPackModuleID;                                        // 0x0E64(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HJetPackModuleID;                                        // 0x0E68(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F1P8[0x1];                                   // 0x0E6C(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSettingEnergyCostEnabled;                               // 0x0E6D(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SNDL[0x2];                                   // 0x0E6E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DayLightID;                                              // 0x0E70(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SolarChargeRatio;                                        // 0x0E74(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReviveItemCleared;                                      // 0x0E78(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OS4C[0x3];                                   // 0x0E79(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBackpackJetPrepelInfo                              JetPropellingInfo;                                       // 0x0E7C(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		EBackpackPropellingMode                                    BackpackPropellingMode;                                  // 0x0E88(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QCB0[0x3];                                   // 0x0E89(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           InputVector;                                             // 0x0E8C(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_995P[0xC];                                   // 0x0E94(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarInputActionContext* InputActionContext;                                      // 0x0EA0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EIdleTurnType                                              IdleTurnType;                                            // 0x0EA8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YUSY[0x7];                                   // 0x0EA9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            CharacterLookAt;                                         // 0x0EB0(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HS4S[0x24];                                  // 0x0EBC(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCharacterOperationEvent                            CharacterOperationEvt;                                   // 0x0EE0(0x0010) NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W4L7[0x18];                                  // 0x0EF0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHealthUpdateDelegate;                                  // 0x0F08(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      PendingRegeneration;                                     // 0x0F18(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DiedTime;                                                // 0x0F1C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KSOM[0x4];                                   // 0x0F20(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsDeathVerge : 1;                                       // 0x0F24(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2CI3[0x13];                                  // 0x0F25(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarTeamRescueComponent* SolarTeamRescueComponent;                                // 0x0F38(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASolarCharacter>                      RescuingCharater;                                        // 0x0F40(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASolarUAVRescue>                      RescuingUAV;                                             // 0x0F48(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ERescueState                                               CurrentRescueState;                                      // 0x0F50(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ERescueState                                               LastRescueState;                                         // 0x0F51(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GI4O[0x2E];                                  // 0x0F52(0x002E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarCharacter>                      RescuedCharater;                                         // 0x0F80(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RescuedStartTime;                                        // 0x0F88(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JV75[0x4];                                   // 0x0F8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* RescueInjector;                                          // 0x0F90(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0IT9[0x24];                                  // 0x0F98(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RescueTime;                                              // 0x0FBC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_S2LA[0x8];                                   // 0x0FC0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPlayerWeapon*>                          DeathBoxWeaponArray;                                     // 0x0FC8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSolarItemData>                              DeathBoxArray;                                           // 0x0FD8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DeathBoxEnergy;                                          // 0x0FE8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_946K[0x4];                                   // 0x0FEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarWaterActorNew* WaterActor;                                              // 0x0FF0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent* SwimmingWaterEffect;                                     // 0x0FF8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent* HeavyJumpWaterEffect;                                    // 0x1000(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UParticleSystemComponent*>                    HorizontalFlyWaterEffects;                               // 0x1008(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8BHW[0x10];                                  // 0x1018(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarItemComponent* SolarItemComponent;                                      // 0x1028(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarPickupComponent* SolarPickupComponent;                                    // 0x1030(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsElectricStoreOpened;                                  // 0x1038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LUTX[0x7];                                   // 0x1039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarTreatmentComponent* SolarTreatmentComponent;                                 // 0x1040(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarTreatmentState                                       CurrentTreatState;                                       // 0x1048(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RVG1[0x3];                                   // 0x1049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TreatmentCount;                                          // 0x104C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D6B4[0x8];                                   // 0x1050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnShieldRecharge;                                        // 0x1058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldBreak;                                           // 0x1068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowShieldHUD;                                         // 0x1078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowShieldHUDItem;                                     // 0x1088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldUpFX;                                            // 0x1098(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCurShieldValueChanged;                                 // 0x10A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldIDChanged;                                       // 0x10B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldValueLow;                                        // 0x10C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldValueChanged;                                    // 0x10D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_99D2[0x4];                                   // 0x10E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrShieldId;                                            // 0x10EC(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurUniqueShieldId;                                       // 0x10F0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxShieldValue;                                          // 0x10F4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NextUpgradeShieldID;                                     // 0x10F8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NextUpgradeShieldEnergy;                                 // 0x10FC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrShieldValue;                                         // 0x1100(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EShieldState                                               CurrShieldState;                                         // 0x1104(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8HVK[0x3];                                   // 0x1105(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrShieldLevel;                                         // 0x1108(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7MVG[0x4];                                   // 0x110C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasPreAdd;                                              // 0x1110(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TZ88[0xA7];                                  // 0x1111(0x00A7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* ShieldRepairOperator;                                    // 0x11B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh* ShieldOperatorSM;                                        // 0x11C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh* ShieldOperatorBigSM;                                     // 0x11C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* ShieldRepairFX;                                          // 0x11D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* ShieldMultiRecoverFX;                                    // 0x11D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* ShieldUpgradeBodyFX;                                     // 0x11E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* ShieldUpgradeOperator;                                   // 0x11E8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh* ShieldUpgradeOperatorSM;                                 // 0x11F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimeline                                           ShieldOperatorExpandTimeline;                            // 0x11F8(0x0098) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FTimeline                                           ShieldOperatorNarrowTimeline;                            // 0x1290(0x0098) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<EShieldSoundType, struct FShieldSoundData>            ShieldSounds;                                            // 0x1328(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R5ZQ[0x8];                                   // 0x1378(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* TreasureBoxOperator;                                     // 0x1380(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ADeathTreasureBox* CurChargingDeathBox;                                     // 0x1388(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ADeathTreasureBox*>                           DeathBoxes;                                              // 0x1390(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CSO2[0x8];                                   // 0x13A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLocalPlayerSpectateMeStatusChanged;                    // 0x13A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S162[0x30];                                  // 0x13B8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnHUDNickNameSet;                                        // 0x13E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHUDTeamPosSet;                                         // 0x13F8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHUDDistanceSet;                                        // 0x1408(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHUDDistanceDisplaySet;                                 // 0x1418(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnHUDRescueBtnActivitySet;                               // 0x1428(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class USolarTeammateHUDWidgetComponent* TeammateHUDComp;                                         // 0x1438(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J6V7[0x8];                                   // 0x1440(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HUDZNomral;                                              // 0x1448(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HUDChangeTime;                                           // 0x144C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XXE3[0x18];                                  // 0x1450(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarRadarComponent* SolarRadarComponent;                                     // 0x1468(0x0008) Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRadarDataSpecContainer                             ActivatedRadars;                                         // 0x1470(0x0120) Net, ContainsInstancedReference, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASolarRadarStation>                   TargetRadarStation;                                      // 0x1590(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarElectricShop>                   TargetElectricShop;                                      // 0x1598(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WGL1[0x10];                                  // 0x15A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        StatisticsTimerHandle;                                   // 0x15B0(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2KII[0x70];                                  // 0x15B8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacter* CachedInstigatorCharacter;                               // 0x1628(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C30U[0x14];                                  // 0x1630(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ArmorReduceValue;                                        // 0x1644(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeadHitValue;                                            // 0x1648(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PM5E[0x4];                                   // 0x164C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTakeDamageDelegate;                                    // 0x1650(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M742[0x14];                                  // 0x1660(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InstigatorCharacterWeaponItemID;                         // 0x1674(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FCriticalHitInfo>                            CriticalHits;                                            // 0x1678(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_13BJ[0x68];                                  // 0x1688(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorldMarkComponent* WorldMarkComponent;                                      // 0x16F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UIMChatObject* IMChatObj;                                               // 0x16F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AIActorCapacity;                                         // 0x1700(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IEB3[0xAC];                                  // 0x1704(0x00AC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StandJogSpeed;                                           // 0x17B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StandRunSpeed;                                           // 0x17B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StandSprintSpeed;                                        // 0x17B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrouchJogSpeed;                                          // 0x17BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrouchRunSpeed;                                          // 0x17C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrouchSprintSpeed;                                       // 0x17C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SXLE[0x8];                                   // 0x17C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnJogSetClient;                                          // 0x17D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bIsSprintingMove;                                        // 0x17E0(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8K6E[0x57];                                  // 0x17E1(0x0057) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarCharacterMovementComponent* CachedSolarCharacterMovement;                            // 0x1838(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UnknownData_PF78 : 1;                                    // 0x1840(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsJog : 1;                                              // 0x1840(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FGNM[0x3];                                   // 0x1841(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MoveSpeedReduceBonusInHipFire;                           // 0x1844(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MoveSpeedReduceBonusInAdsHipFire;                        // 0x1848(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PUXV[0x10];                                  // 0x184C(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECustomJumpType                                            CurrentCustomJumpType;                                   // 0x185C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1MAZ[0x2];                                   // 0x185D(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EJetFlyType                                                CurrentJetFlyType;                                       // 0x185F(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNewJetFlyCheckFlag : 1;                                 // 0x1860(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WI7I[0x47];                                  // 0x1861(0x0047) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence* CruiseStartAnim;                                         // 0x18A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* CruiseLoopAnim;                                          // 0x18B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* CruiseEndAnim;                                           // 0x18B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PrepareToParachuteStartTime;                             // 0x18C0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PrepareToParachuteDuration;                              // 0x18C4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             PrepareToParachuteLocation;                              // 0x18C8(0x000C) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             AgreedParachuteLocation;                                 // 0x18D4(0x000C) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E6C2[0x18];                                  // 0x18E0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CapsuleID;                                               // 0x18F8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableCruising;                                         // 0x18FC(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KTP7[0x3];                                   // 0x18FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCapsuleRoot* BoardedRoot;                                             // 0x1900(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECruiseState                                               CruiseState;                                             // 0x1908(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M630[0x3];                                   // 0x1909(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ForceParachuteCountDown;                                 // 0x190C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCharacterCruiseComponent* CruiseComponentPrivate;                                  // 0x1910(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M54D[0x8];                                   // 0x1918(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSkydiveTraced;                                         // 0x1920(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class AExponentialHeightFog* HeightFogActor;                                          // 0x1930(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    SkydiveFlyingEffects;                                    // 0x1938(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    SkydiveLandingEffects;                                   // 0x1948(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    SkydiveWholeLifetimeEffects;                             // 0x1958(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESkydiveStage                                              CurrentSkydiveStage;                                     // 0x1968(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KA9U[0x7];                                   // 0x1969(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSkydivingStageChangedDelegate;                         // 0x1970(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8SIZ[0x20];                                  // 0x1980(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UActorComponent* FollowedLeaderMovementComponent;                         // 0x19A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M7YF[0x30];                                  // 0x19A8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponSystemPlayerBase* WeaponSystemComponent;                                   // 0x19D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AXMX[0x8];                                   // 0x19E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterFired;                                        // 0x19E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4YFO[0x18];                                  // 0x19F8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* FirstPersonMesh;                                         // 0x1A10(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_95IP[0x10];                                  // 0x1A18(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarPlayerWeapon* TempSwitchWeapon;                                        // 0x1A28(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarPlayerWeapon* CachedCurrentWeapon;                                     // 0x1A30(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FRN6[0xC8];                                  // 0x1A38(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponSystemVehicleComponent* WeaponSystemVehicle;                                     // 0x1B00(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RMUJ[0x18];                                  // 0x1B08(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBoardedVehicleInfo                                 BoardedVehicleInfo;                                      // 0x1B20(0x0010) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bOutVehicleShot;                                         // 0x1B30(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SWEU[0xC7];                                  // 0x1B31(0x00C7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* VehicleRepairToolMesh;                                   // 0x1BF8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YOU1[0x18];                                  // 0x1C00(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterActivateEMP;                                  // 0x1C18(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterSwitchEMPEffect;                              // 0x1C28(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		bool                                                       bActiveEMP;                                              // 0x1C38(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bActiveInfiniteAmmo;                                     // 0x1C39(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNoticedCantCharge;                                      // 0x1C3A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESkillAnimType                                             CurrentSkillAnimType;                                    // 0x1C3B(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESkillAnimRightHandType                                    CurrentSkillAnimRightHandType;                           // 0x1C3C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H81F[0x3];                                   // 0x1C3D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* MassInvWarningIconComponent;                             // 0x1C40(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OAPT[0x38];                                  // 0x1C48(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UScoutEnemyObject* ScoutEnemyObj;                                           // 0x1C80(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDuckRollingMeshComponent* CachedDuckRollingMeshComponent;                          // 0x1C88(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9PVC[0x78];                                  // 0x1C90(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              WallRunSurfaceAngle;                                     // 0x1D08(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EWallRunState                                              WallRunState;                                            // 0x1D09(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_09IW[0x2];                                   // 0x1D0A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LeadDanceID;                                             // 0x1D0C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NESQ[0xA0];                                  // 0x1D10(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DebugStringBotAIInfo;                                    // 0x1DB0(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              DebugStringToDrawGASServer;                              // 0x1DC0(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              DebugStringDSTransferLog;                                // 0x1DD0(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RoleAbilityCharacterID;                                  // 0x1DE0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQNV[0x4];                                   // 0x1DE4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            RoleAbilityBoundPlayerLevels;                            // 0x1DE8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FGameplayAbilitySpecHandle>                  RoleAbilitySpecHandles;                                  // 0x1DF8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<float>                                              RoleAbilityStartCDServerTime;                            // 0x1E08(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9WT0[0x40];                                  // 0x1E18(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BattleUpgradeEffectCurrentLevel;                         // 0x1E58(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K3I1[0x4];                                   // 0x1E5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBattleUpgradeEffectContainer                       BattleUpgradeEffects;                                    // 0x1E60(0x0120) Net, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LFSS[0x80];                                  // 0x1F80(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarUAVRescue>                      PermanentRescueUAV;                                      // 0x2000(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OHAA[0x20];                                  // 0x2008(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class ASkywardDiveLauncher*, bool>                    AvailableSkywardDiveLaunchers;                           // 0x2028(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ASU3[0x18];                                  // 0x2078(0x0018) MISSED OFFSET (PADDING)

	public:
		bool WorldToScreen(const struct FVector& Location, struct FVector2D* Screen);
		void UseDanceEmoteByID(int32_t ID);
		void UpgradeShieldResponse(bool bSuccess);
		void UpgradeGenericSkill(int32_t LevelUp);
		void UpgradeClassTypeSkill(int32_t LevelUp);
		void UpdateWeaponCrosshair(float InDeltaTime);
		void UpdateVehicleStealthProgress(float StealthMaterialPercent);
		void UpdateTeammateHUDData(unsigned char InNewPosInTeam);
		void UpdateShieldUpgradeMatMaxPile();
		void UpdateShieldPropertyByAblility();
		void UpdateRoleAbilityState(unsigned char RoleAbilityIndex, ERoleSkillOperation Ope);
		void UpdateJetFlyDataToSpectating();
		void UpdateExtraMagToSpectateInfo(class ASolarSpectateInfo* SpectateInfo);
		void UpdateDyingAttr(float DeltaTime);
		float UpdateCurrentHealth(float UpdateValue, EHealthChangeType ChangeType, class ASolarCharacter* InInstigatorCharacter, class AActor* InDamageCauserActor, struct FSolarPointDamageEvent* DamageEvent);
		void UpdateBattleUpgradeEffectToSpectateInfo(class ASolarSpectateInfo* SpectateInfo);
		void UnbindActorToSelfTeam(class AActor* Actor);
		void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);
		void TurnCharacterToDirection(const struct FVector& Dir);
		void TryStopSpectateCountdown();
		void TryStopShieldRecharge();
		void TryStatisticsRechargedTimes();
		void TryStartSpectateCountdown();
		void TryStartShieldRecharge(bool bUseBigRecharger);
		void TrySetTeammateHUDShow();
		void TrySetTeammateHUDHide();
		void TrySetTeamateHUDVisiblity();
		void TryRechargeShield(bool bUseBigRecharger);
		void TryHideShieldOperator();
		void TryDiscardShieldUpgradeMatItems(int32_t InItemNum);
		void TryCreatingOwnTeammate();
		void TryBreakShieldRecharge();
		void TryBreakScopeStatus();
		void TryBindPowerBarDelegates();
		void TryBindPickupDelegates();
		void TryBindItemPanelDelegates();
		void TryBindHPPanelDelegates();
		void TryAutoMarkItemForTeammateServer(TArray<struct FSolarItemData> ItemData);
		void ToggleDebugInfo();
		void ToggleDebugGASInfo();
		void TickShieldOperatorTimeline(float InDeltaTime);
		float TakeDamageResolve(float Damage, const struct FSolarPointDamageEvent& DamageEvent, class ASCMPlayerState* EventInstigator, class AActor* DamageCauser);
		void Suicide();
		void StopTreatmentProgressBar();
		void StopTreatment();
		void StopShieldRechargeProgressBar();
		void StopShieldRechargeProgress();
		void StopRescueProgressBar(int32_t TextID);
		void StopRepairWeakPointProgressBar();
		void StopClimbSound();
		void StatisticElectricShopOnActivated(const struct FVector& InLocation);
		void StartTreatmentProgressBar(float Duration);
		void StartTreatment();
		void StartShieldRechargeProgressBar(float InRechargeDuration, int32_t InContributorCharacterId);
		void StartShieldRechargeProgress();
		void StartRescueProgressBar(float Duration, float RemainingTime, int32_t TextID, bool bShowBtn, bool bIsUAV);
		void StartRepairWeakPointProgressBar(float Duration);
		void SpecAnimInstStopMontage(ESpecAnimInstType SpecAnimType, class UAnimMontage* AnimMontage);
		float SpecAnimInstPlayMontage(ESpecAnimInstType SpecAnimType, class UAnimMontage* AnimMontage, float InPlayRate, const class FName& StartSectionName);
		class UAnimMontage* SpecAnimInstGetCurrentMontage(ESpecAnimInstType SpecAnimType);
		void SpawnDeathBoxActor();
		void SolarLaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride, class AActor* JumpPad);
		void ShowShieldUIFX(int32_t ShiledID);
		void ShowShieldUI(bool IsShow);
		void ShowRevivePickupEffect();
		void ShowReviveClearEffect();
		void ShowRescueInjector();
		void ShowNoticeCantCharge();
		bool ShouldForceOverrideDamageTaken(float Damage, const struct FSolarPointDamageEvent& DamageEvent, class ASCMPlayerState* EventInstigator, class AActor* DamageCauser, float* OverrideDamageTaken);
		void ShieldUpgradeToNextLevel();
		void ShieldOperatorInterpFunc(float InValue);
		void SetSpectateTargetCharacter(class ASolarCharacter* InSpectateTargetCharacter);
		void SetSelfEnergyCostEnable(bool bEnable);
		void SetOpenScopeDuration(float InDuration, bool bInOpenScope);
		void SetNewCharacterSkin(class USkeletalMesh* NewMesh, class UMaterialInterface* NewMaterial, class UClass* NewAnimClass);
		void SetMaxWalkSpeed(float NewWalkSpeed);
		void SetInfiniteAmmoState(bool Enable);
		void SetCurrShieldValue(float InValue);
		void SetCurrExtraEnergy(float Amount);
		void SetBackpackConfig(int32_t InCharacterId);
		void SetActiveRescueBtn(bool bIsActive);
		void ServerUseItemRequest(int32_t ItemID, int32_t Num);
		bool ServerUpgradeShield();
		void ServerUpdateWallRunState(EWallRunState NewState);
		void ServerUpdateWallRunAngle(unsigned char ClientAngle);
		void ServerTryRechargeShield(float InRecoverySpeed);
		void ServerTriggerRadarStation(class ASolarRadarStation* InRadarStation);
		void ServerSwitchVehicleSeat(float LocalTime, class ASolarVehiclePawn* InVehicle, int32_t TargetSeatIndex, const struct FVector_NetQuantize& VehicleLocation, const struct FVector_NetQuantizeNormal& VehicleEuler);
		void ServerSwitchShield(const struct FSolarItemData& NewShieldData);
		void ServerStatisticsRechargedTimes(int32_t RechargedTimes, int32_t BigRechargedTimes);
		void ServerStatisticElectricShopOnActivated(const struct FVector& InLocation);
		void ServerStartRescue(class ASolarCharacter* TargetCharacter);
		void ServerSetTreasureBoxState(class ASolarTreasureBoxActor* TreasureBox, ETreasureBoxState NewState, class ASolarCharacter* RequestCharacter);
		void ServerSetJetPackModule(int32_t NewJetPackModuleID, bool bForVertical);
		void ServerSetInputVector(uint16_t AxisX, uint16_t AxisY);
		void ServerSetIdleTurnType(EIdleTurnType TurnType);
		void ServerSetEnergyState(EEnergyState State);
		void ServerSetDebugCharacterGASValue(int32_t Value);
		void ServerSetCurChargingDeathBox(class ADeathTreasureBox* DeathBox);
		void ServerSetChargingPile(bool bEnter, class ASolarPile* InChargingPile);
		void ServerSetCharacterOperation(ECharacterOperation InType, class UObject* Target);
		void ServerSetCanBeDamaged(bool bInCanBeDamaged);
		void ServerSendGameplayEvent(const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload);
		void ServerSelectLevelSkill(int32_t Level, int32_t SelectedIndex);
		void ServerRPCUpgradeWeapon(class ASolarElectricShop* InTargetShop, class ASolarPlayerWeapon* InTargetWeapon);
		void ServerRPCUpgradeShield();
		void ServerRPCTakeWeaponPartToBag(int32_t Slot, int32_t WeaponPartType);
		void ServerRPCTakeBagPartToWeapon(int32_t Slot, int32_t WeaponPartType);
		void ServerRPCSwitchWeaponPart(int32_t Slot, int32_t WeaponPartType);
		void ServerRPCSetSelfEnergyCostEnable(bool bEnable);
		void ServerRPCPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, class ASolarElectricShop* InTargetShop);
		void ServerRPCDisplayAllElectricShops();
		void ServerRPCDiscardWeaponPart(int32_t Slot, int32_t WeaponPartType);
		void ServerRPCDiscardWeapon(int32_t InSlot);
		void ServerRPCDiscardItem(int32_t InItemID, int32_t InItemNum);
		void ServerRequestStartResurrect(class ADeathTreasureBox* TargetDeathBox);
		void ServerRequestCancelResurrect();
		void ServerPlayTreatmentCancelSound();
		void ServerPickUpWeapon(class AActor* Actor, bool bIsAutoPickup, const struct FVector& ClientCharPos, const struct FVector& ClientItemPos);
		void ServerPickUpTreasureItem(class ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID, bool bIsAutoPickup, int32_t TargetIndex, const struct FVector& ClientCharPos, const struct FVector& ClientItemPos);
		void ServerPickUpItem(class ASolarItemActor* ItemActor, bool bIsAutoPickup, int32_t TargetIndex, const struct FVector& ClientCharPos, const struct FVector& ClientItemPos);
		void ServerPerformShieldUpgradeInteract(class ASolarShieldUpgradeItemShop* InShop);
		void ServerOpenAirDropTreasureBox(class AAirDropTreasureBox* InAirDropTreasureBox);
		void ServerOnDestructActor(class ASolarDestructibleActor* DestructibleActor, class ASolarVehiclePawn* VehiclePawn, float SpeedDifference, const struct FVector& Impulse, const struct FVector& ImpactPoint);
		void ServerMoveNoBaseEx(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode, uint32_t ClientCustomMoveData);
		void ServerMoveDualNoBaseEx(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode, uint32_t ClientCustomMoveData);
		void ServerKillMe(ESCMDamageType DamageType);
		void ServerInitSheildComp(int32_t InShiledID);
		void ServerHideShieldOperator();
		void ServerGMVehicleSubHealth(int32_t SubHealth);
		void ServerGetOnVehicle(float LocalTime, class ASolarVehiclePawn* InVehicle, int32_t SeatIndex);
		void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, const struct FVector_NetQuantizeNormal& EjectDirection);
		void ServerGetOffVehicleEjected(bool bNeedNotify, const struct FVector_NetQuantizeNormal& EjectDirection, const struct FVehicleEjectParams& Params);
		void ServerGetOffVehicle(bool bNeedNotify);
		void ServerDetectBlock();
		void ServerConsumeExtraEnergy(float InAmount, EEnergyUsage InUsage);
		void ServerConsumeEnergy(float InAmount, EEnergyUsage InUsage);
		void ServerClearJetModule();
		void ServerClearEnergyState(EEnergyState State);
		void ServerChangeRechargeState(bool bRecharge, bool bUseBigRecharger);
		void ServerCancelVehicleAbility(unsigned char AbilityIndex);
		void ServerCancelVault(float InAnimPosition, const struct FVector& InLandLocation);
		void ServerCancelRescue();
		void ServerCancelOpenAirDropTreasureBox(class AAirDropTreasureBox* InAirDropTreasureBox);
		void ServerCancelMeleeWarp();
		void ServerBackpackGM(EGmType InGmType, int32_t InItemID, int32_t InItemNum, int32_t InSlot);
		void ServerAskForActiveAbilityInfosToRestoreOnReconnected();
		void ServerApplyVehicleAbility(unsigned char AbilityIndex);
		void ServerAddVehicleTime(float InAddTime);
		void RoleAbilityForbiddenAbilityTagCallback(const struct FGameplayTag& Tag, int32_t NewCount, unsigned char AbilityIndex);
		void RoleAbilityEndedCallBack(class UGameplayAbility* InAbility);
		void RoleAbilityCoolDownTagCallback(const struct FGameplayTag& Tag, int32_t NewCount, unsigned char AbilityIndex);
		void RoleAbilityCoolDownResetCallback(const struct FGameplayTag& Tag, int32_t NewCount, unsigned char AbilityIndex);
		void RoleAbilityCommittedCallBack(class UGameplayAbility* InAbility);
		void RoleAbilityActiveCallBack(class UGameplayAbility* InAbility);
		void ReturnMostValuableItemIDServer(unsigned char TeammatePosInTeam, int64_t ItemThisID);
		void ResponseChosenMark();
		void RequestUseBackpackItemServer(int32_t InItemID, int32_t InItemNum);
		void RequestToStopVehicleRepairing();
		void RequestToStartVehicleRepairing(class ASolarVehiclePawn* InVehicle);
		void RequestPlayShieldSound(struct FShieldSoundData* ShieldSound, bool bIsOnly1P);
		void RequestDisplayAllElectricShops();
		void RequestCancelRescue();
		void RemoveTreasureBoxOperator();
		void RemoveTempComponent(class UPrimitiveComponent* TargetComp);
		void RemoveTempAttributeModifies(int32_t AttributeID, bool bCumulOrFact, const class FName& Tag);
		void RemoveShieldUpgradeOperator();
		void RemoveShieldRepairEffectItem();
		void RemoveShieldOperator();
		void RefreshWeaponDataMapAndArray();
		void RefreshTypeItemMapAndArray();
		void RefreshTeammateHUDUI(class ASolarPlayerState* SelfData);
		void RefreshRenderConsoleVarForSkydive();
		void RefreshMaxPileMapAndArray();
		void RefreshIdItemMapAndArray();
		void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);
		void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);
		void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);
		void ReceivedOnShieldIdChanged(int32_t LastShieldId);
		void ReceiveAfterTakeDamageResolve(float Damage, const struct FSolarPointDamageEvent& DamageEvent, class ASCMPlayerState* EventInstigator, class AActor* DamageCauser);
		void QuitVehicleWholeShield();
		void QuitVehicleStealth();
		void PurchaseEShopItemsResponse(int32_t InProductID, bool bSuccess, class ASolarElectricShop* InTargetShop);
		void PostNotEnoughEnergyNotice();
		void PlaySquatSound();
		void PlaySpeedUpEffect(bool bIsUp);
		void PlayShieldSoundByType(EShieldSoundType ShieldSoundType);
		void PlayParachuteStartSound();
		void PlayMontageOnOrnament(const struct FGameplayTag& OrnamentTag, class UAnimMontage* MontageToPlay);
		void PlayerStateReplicatedForHUD();
		void OnVaultInput();
		void OnUsingSkillStatusChanged(const struct FGameplayTag& Tag, int32_t NewCount);
		void OnUpdateShieldId();
		void OnUIDurationGameplayEffectRemoved(const struct FActiveGameplayEffect& ActiveGameplayEffect);
		void OnUIDurationGameplayEffectApplied(class UAbilitySystemComponent* ASC, const struct FGameplayEffectSpec& InGameplayEffectSpec, const struct FActiveGameplayEffectHandle& InGameplayEffectHandle);
		void OnUAVSpawnRelatedTagChange(const struct FGameplayTag& Tag, int32_t NewCount);
		void OnTeamIDChange();
		void OnTakeDamage__DelegateSignature(class ASolarCharacter* Character, const struct FSolarPointDamageEvent& DamageEvent, float HPDamage);
		void OnStartResurrectProgress(int32_t InTextId, float InDuration, float InRemaining, bool bShowCancel);
		void OnSpawnExpItem();
		void OnSkydiveTraced__DelegateSignature(const struct FHitResult& HitResult);
		void OnSkydiveStageChanged(ESkydiveStage LastStage, ESkydiveStage CurrentStage);
		void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);
		bool OnShouldTakeDamage(float Damage, const struct FSolarPointDamageEvent& DamageEvent, class ASCMPlayerState* EventInstigator, class AActor* DamageCauser);
		void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);
		void OnShieldValueChanged__DelegateSignature(EShieldWidgetState WidgetState, float CurValue, float ChangeValue, EShieldRechargeState ShieldRechargeState, bool bFixPreAdd);
		void OnShieldRechargeStart();
		void OnShieldRechargeProgressBarComplete();
		void OnShieldRechargeProgressBarCancel();
		void OnShieldRechargeEnd();
		void OnShieldIDChangedDelegate__DelegateSignature(bool bShiledAvailable, float CurValue, float MaxValue, int32_t QualityColor, bool bIsAdvancedShield);
		void OnSheildUpFXDelegate__DelegateSignature();
		void OnSheildRechargeDelegate__DelegateSignature();
		void OnSheildBreakDelegate__DelegateSignature();
		void OnReplayCameraModeChanged(EReplayCameraMode OldMode, EReplayCameraMode CurMode);
		void OnRepItemWeaponParts();
		void OnRepIgnoreScopeSlots();
		void OnRep_WeaponSystemVehicle();
		void OnRep_WeaponSystemComponentChanged();
		void OnRep_WeaponDataMap();
		void OnRep_VJetPackModuleID();
		void OnRep_TypeKeyItemArrayChange();
		void OnRep_TreatmentState(ESolarTreatmentState LastState);
		void OnRep_TreatmentCount(int32_t LastCount);
		void OnRep_SettingEnergyCostChanged();
		void OnRep_RoleAbilityStartCDServerTime();
		void OnRep_RoleAbilitySpecHandles();
		void OnRep_ReviveItemCleared();
		void OnRep_RescueState();
		void OnRep_RescuedStartTime(float LastRescuedStartTime);
		void OnRep_PlayBodyHitSound(int32_t LastBodyHitSoundCount);
		void OnRep_PlayBodyHitByPunchSound(int32_t LastBodyHitByPunchSoundCount);
		void OnRep_PendingRegeneration();
		void OnRep_OutVehicleShotState();
		void OnRep_OrnamentMontageInfo(const struct FOrnamentMontageInfo& LastInfo);
		void OnRep_MaxPileArrayChange();
		void OnRep_MaxExtraEnergyChanged();
		void OnRep_JetPropellingInfo();
		void OnRep_IsDeathVerge();
		void OnRep_IdKeyItemArrayChange();
		void OnRep_HJetPackModuleID();
		void OnRep_ForceParachuteCountDown();
		void OnRep_ExtraEnergyModuleIDChanged();
		void OnRep_EnergyStateChanged();
		void OnRep_EnableCruising();
		void OnRep_DiedTime();
		void OnRep_CurUniqueShieldId();
		void OnRep_CurrShieldValue(float PreviousValue);
		void OnRep_CurrShieldState(EShieldState LastState);
		void OnRep_CurrShieldId(int32_t InLastShieldId);
		void OnRep_CurrentSkydiveStage(ESkydiveStage LastStage);
		void OnRep_CurrentSkillAnimType();
		void OnRep_CurrentEnergyChanged(float LastEnergyValue);
		void OnRep_CurChargingDeathBoxChanged(class ADeathTreasureBox* PreBox);
		void OnRep_CruiseState();
		void OnRep_CharacterCapsuleSizeOverride();
		void OnRep_CapsuleID();
		void OnRep_BackpackPropellingMode();
		void OnRep_AssignedCharacterID();
		void OnRep_ActiveInfiniteAmmo();
		void OnRep_ActiveEMP();
		void OnPlayingScrubCharactersCreated();
		void OnPlayerKilled(class ASCMPlayerState* KillerPlayer, struct FSolarPointDamageEvent* InDamageEvent, class AActor* InDamageCauser);
		void OnPlayerKill(class ASCMPlayerState* KilledPlayer, struct FSolarPointDamageEvent* InDamageEvent, class AActor* InDamageCauser);
		void OnPlayerDataRepAsPlayer(unsigned char TeamID);
		void OnPlayerBackpackEnergyUpdate();
		void OnPickupSettingChanged();
		void OnOwnTeammateHUDCreated(class ASolarPlayerState* SelfData);
		void OnOutVehicleStateChanged();
		void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue);
		void OnLocalPlayerSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarSpectateInfo* LocalPlayerSpectateInfo);
		void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(class ASolarCharacter* Character, bool bIsSpectating);
		void OnLevelSequence_PlayAirborneJumpSound();
		void OnJogSetClient__DelegateSignature(bool bSet);
		void OnHUDTeamPosSet__DelegateSignature(unsigned char PosInTeam);
		void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);
		void OnHUDNickNameSet__DelegateSignature(const class FString& NickName);
		void OnHUDDistanceSet__DelegateSignature(float Distance);
		void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);
		void OnHealthUpdated__DelegateSignature(class ASolarCharacter* Character);
		bool OnExitOpenTreasureBox();
		bool OnEnterOpenTreasureBox();
		void OnEnterCombat(EEnterBattleType battleType);
		void OnEnergyStateUpdateEvent__DelegateSignature(unsigned char InEnergyState);
		void OnDrivingStateChanged(class ASolarVehiclePawn* SolarVehicle, EDriveState NewDriveState, EDriveState OldDriveState, int32_t NewSeatIndex, int32_t OldSeatIndex);
		void OnDetectRadarStation(bool bEnter, class ASolarRadarStation* InRadarStation);
		void OnDetectElectricShop(bool bEnter, class ASolarElectricShop* InElectricShop);
		void OnCurShieldValueChangedDelegate__DelegateSignature(EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, const class FString& InSolarPlayerID);
		void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue);
		void OnConsumableNumChangedEvent__DelegateSignature();
		void OnClientMovementComponentEnabled();
		void OnChargeInfoUpdateEvent__DelegateSignature(class ASolarCharacter* OwnerCharacter, float ChargeFrequency, float ChargeQuantity);
		void OnCharacterSpawnDeathBox(bool bCheat, bool bKilledByTeammate, int32_t InExpItemCount, int32_t InMaxSheildMatCount);
		void OnCharacterSkinReset__DelegateSignature();
		void OnCharacterDeathEnd();
		void OnCharacterDaraSet__DelegateSignature(int32_t DataID);
		void OnCancelResurrectProgress(int32_t InTextId);
		void OnBatteryIdUpdateEvent__DelegateSignature(int32_t InBatteryId);
		void OnBackpackWeaponPartUpdateEvent__DelegateSignature();
		void OnBackpackItemUpdateEvent__DelegateSignature();
		void OnBackpackEquipUpdateEvent__DelegateSignature();
		void OnBackpackEnergyUpdateEvent__DelegateSignature();
		void OnApplyDyingDamage(float DeltaTime);
		void NotifyLeaveSafeArea();
		void NotifyEnterSafeArea();
		void NetTriggerRadarStation();
		bool NetGetOnVehicle(class ASolarVehiclePawn* InVehicle, int32_t SeatIndex);
		bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);
		void MultiSetGetOffVehicleLocationAndRotation(const struct FVector& DropLocation, float TeleportRotYaw);
		void MultiResetCharacter(const struct FVector& Location, const struct FRotator& Rotation, bool bClearWeapons);
		void MultiOnRebirth();
		void MulticastPlayDuckRollingHitCharacterEffect(class ASolarCharacter* TargetCharacter, const struct FVector& HitLocation, bool bNoDamage);
		void MarkWarningOnWorld();
		void MarkQuickChatOnWorld(const class FString& IconImg);
		void MarkPointOnWorld();
		void MarkItemInPickupList(const struct FVector& ItemLocation, const struct FSolarItemData& ItemData);
		void K2_SetCanShowBattlePrompt(bool NewValue);
		void K2_RemoveGameplayTag(const struct FGameplayTag& Tag, bool bReplicated);
		void K2_PlaySoundGroup(const class FName& GroupName, const struct FSoundGroupPlayContext& Context);
		bool K2_IsSwimming();
		bool K2_IsInAir();
		bool K2_HasMatchingGameplayTag(const struct FGameplayTag& Tag);
		class UWidgetComponent* K2_GetTeamHUDComp();
		class AHUD* K2_GetControlledHUD();
		void K2_AddGameplayTag(const struct FGameplayTag& Tag, bool bReplicated);
		bool IsWeaponsAvailable();
		bool IsWeaponCauseTeamDamage();
		bool IsViewportFocused();
		bool IsVerticalJetFlying();
		bool IsVehicleFire();
		bool IsTeammateWithLocalOrSpecTargetPlayer(bool bIncludingSelf);
		bool IsTeammateWith(class ASolarCharacter* Other);
		bool IsTeamHUDValid();
		bool IsSprinting();
		bool IsSpectatingOtherPlayer();
		bool IsSkyCharging();
		bool IsShieldValueLow();
		bool IsShieldMaxLevel();
		bool IsShieldFullyCharged();
		bool IsScopeOpening();
		bool IsRescuing();
		bool IsReplayPlaying();
		bool IsReloading();
		bool IsRechargerEnough();
		bool IsPlayerLocallyControlledOrSpectated();
		bool IsPileCharging();
		bool IsOwnerOffline();
		bool IsOpeningTreasureBox();
		bool IsNoCharging();
		bool IsMovingOnGround(EVelocityStatus VelocityStatus);
		bool IsMeleeAttacking();
		bool IsMaxLevelInGame();
		bool IsLocalPlayerSpectateAsThirdPerson();
		bool IsLaunching();
		bool IsJumping();
		bool IsJetFlying();
		bool IsInVehicle();
		bool IsInSkywardDive();
		bool IsInsideVehicle();
		bool IsInShoulderOrScopeView();
		bool IsInScopeView();
		bool IsInRescueState();
		bool IsInMassInvisibilityPrepare();
		bool IsInMassInvisibility();
		bool IsInInvisibleStatus();
		bool IsInDeathVerge();
		bool IsHumanCharacter();
		bool IsHorizontalJetFlying();
		bool IsHoldingWeapon();
		bool IsFullHealth();
		bool IsFullBodyMeleeAttacking();
		bool IsFiring();
		bool IsExistWeaponSeatedVehicleSeat();
		bool IsEnergyCostAndChargeDisabled();
		bool IsE2M();
		bool IsDying();
		bool IsDoingAnyAttack();
		bool IsCruising();
		bool IsClimbing(bool bIncludeWallRun);
		bool IsCharacterDebugBlockDetectionEnabled();
		bool IsCanShowTeammateHUD();
		bool IsBoxCharging();
		bool IsBolting();
		bool IsBigRechargerEnough();
		bool IsBeingSpectated();
		bool IsBeingRescue();
		bool IsAllEnergyFull();
		bool IsAiming();
		bool IsAbleToContinueRecharge();
		void InputRoleAbilityTacticalReleased();
		void InputRoleAbilityTacticalPressed();
		void InputRoleAbilitySuperReleased();
		void InputRoleAbilitySuperPressed();
		void InputCancelRoleAbility();
		void InitShieldUpgradeMatMaxPile();
		void InitShieldPropertyByConfig();
		void InitShieldOperatorTimeline();
		void InitializeCharacterData(int32_t InCharacterId, int32_t InSkinID);
		void InitGameStatisticEquipment();
		void InitCharacterDefaultShield(const struct FSolarItemData& InShiledID);
		void IncreaseRechargedTimes();
		void HideShieldUpgradeOperator();
		void HideShieldRepairEffectItem();
		void HideShieldOperator();
		void HideRescueInjector();
		bool HasBlockBetweenUs(class AActor* A, class AActor* B, bool bIsVehicle, bool bShowLog);
		bool HasAnyShieldEquiped();
		bool HasAnyRecharger();
		bool HandleDying(EHealthChangeType ChangeType, class AController* InstigatorController);
		TMap<EWeaponPartType, int32_t> GetWeaponPartsMap();
		TArray<int32_t> GetWeaponPartsArray();
		bool GetWeaponItemDataBySlot(int32_t InSlot, struct FSolarItemData* ItemData);
		TMap<int32_t, struct FSolarItemData> GetWeaponDataMap();
		int32_t GetVerticalJetFlyTotalTimes();
		int32_t GetVerticalJetFlyRestTimes();
		void GetVerticalJetFlyCharging(float* OutValue, float* OutPercent);
		void GetVerticalJetFlyCD(float* OutValue, float* OutPercent);
		class ASolarVehicleWeapon* GetVehicleWeapon();
		unsigned char GetVehicleAbilityCounter();
		TMap<EItemType, struct FSolarItemData> GetTypeKeyItemMap();
		float GetTreatmentRemaining();
		float GetTreatmentDuration();
		void GetTeamHUDTranslucentData(float* CheckDistance, float* TranslucentValue);
		class UUserWidget* GetTeamHUD();
		class ASolarSpectateInfo* GetSpectateInfo();
		class UAnimInstance* GetSpecAnimInstance(ESpecAnimInstType SpecAnimType);
		class ASolarReplayPlayerController* GetSolarReplayPlayerController();
		class ASolarPlayerState* GetSolarPlayerState();
		class FString GetSolarPlayerID();
		class ASolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);
		class USolarCharacterMovementComponent* GetSolarCharacterMovementComponent();
		class ASolarBotAIController* GetSolarAIController();
		class USolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple();
		struct FVector GetSocketLocationAtPrimaryMesh(const class FName& InSocketName);
		float GetSkydiveLandingHeight();
		class UCharacterSkinConfig* STATIC_GetSkinConfig(int32_t InSkinID);
		int32_t GetShieldWorthByID(int32_t InShieldID);
		int32_t GetShieldUpgradeNeedMatNum();
		int32_t GetShieldUpgradeMatNum();
		int32_t GetShieldUpgradeMatMaxPile();
		float GetShieldRecoveryAmount();
		float GetShieldRechargeRemainningTime();
		float GetShieldRechargeDuration();
		int32_t GetShieldMaxLevel();
		class USolarCharacterMovementComponent* GetSafeSolarCharacterMovement();
		ERoleSkillStatus GetRoleAbilityState(unsigned char RoleAbilityIndex);
		class ASolarUAVRescue* GetRescuingUAV();
		class ASolarCharacter* GetRescuingCharacter();
		float GetRescueTime();
		float GetRecoveryDuartionModify();
		float GetRecoveryAmountModify();
		class ASolarUAVRescue* GetPermanentRescueUAV();
		struct FRotator GetNormalizeCameraRotation();
		bool GetNewItemData(int32_t InItemID, int32_t InItemNum, struct FSolarItemData* OutItemData);
		unsigned char GetMyTeamID();
		float GetMaxShieldValue();
		float GetMaxExtraEnergy();
		float GetMaxEnergy();
		class ASolarPlayerState* GetLastDownBy();
		int32_t GetJetPackModuleLevel(bool bVertical);
		int32_t GetItemNumById(int32_t InItemID);
		int32_t GetItemMaxPile(int32_t InItemID);
		bool GetItemDataByType(EItemType ItemType, struct FSolarItemData* ItemData);
		bool GetItemDataById(int32_t InItemID, struct FSolarItemData* ItemData);
		bool GetIsActiveEMP();
		struct FVector GetInputVector();
		TMap<int32_t, struct FSolarItemData> GetIdKeyItemMap();
		int32_t GetHorizontalJetFlyTotalTimes();
		int32_t GetHorizontalJetFlyRestTimes();
		void GetHorizontalJetFlyCharging(float* OutValue, float* OutPercent);
		void GetHorizontalJetFlyCD(float* OutValue, float* OutPercent);
		int32_t GetGenericSkillLevel();
		float GetFactorialAttributeModifies(int32_t AttributeID);
		int32_t GetExtraEnergyModuleID();
		float GetEnergyConsumptionModify();
		EDriveState GetDriveState();
		class AActor* GetDamagerCauserActor();
		float GetCurrShieldValue();
		int32_t GetCurrShieldID();
		float GetCurrExtraEnergy();
		class ASolarPlayerWeapon* GetCurrentWeapon();
		EWalkMode GetCurrentWalkMode();
		float GetCurrentVehicleAbilityCooldownRemaining(unsigned char AbilityIndex);
		float GetCurrentVehicleAbilityCooldownDuration(unsigned char AbilityIndex);
		int32_t GetCurrentShieldLevel();
		ECustomJumpType GetCurrentCustomJumpType();
		float GetCurrEnergy();
		float GetCumulativeAttributeModifies(int32_t AttributeID);
		class APlayerController* GetControllingOrReplayController();
		class UStaticMesh* GetClipMeshOfHoldingWeapon();
		int32_t GetClassTypeSkillLevel();
		void GetChargingStateForUI(bool* IsSky, bool* IsPile, bool* IsBox, bool* IsE2M);
		struct FRotator GetCharacterLookAt();
		bool GetCanShowBattlePrompt();
		struct FRotator GetCameraRotation();
		struct FVector GetCameraLocation();
		void GetAllSkydiveLandingEffects(TArray<class UParticleSystemComponent*>* OutEffects);
		void GetAllSkydiveFlyingEffects(TArray<class UParticleSystemComponent*>* OutEffects);
		void GatheringDeathBoxItem(bool bCheat, bool bKilledByTeammate, int32_t InExpItemCount, int32_t InMaxSheildMatCount);
		void GameStatisticsWeaponHit(class ASolarCharacterBase* DamageCauserCharacter, const struct FSolarPointDamageEvent& DamageInfo, float ActualDamage);
		void GameStatisticsVehicleLanded(const struct FHitResult& Hit);
		void GameStatisticsVehicleInAir();
		void GameStatisticsVehicleHit(class AActor* DamageCauser, float HitDamage);
		void GameStatisticsItemChange(int32_t ItemID, EItemChangeType PickType, int32_t OldNum, int32_t NewNum, int32_t TriggerType);
		void GameStatisticsGodWeapon();
		void GameStatisticsGetOnVehicleReason(int32_t Type, const class FString& Type_Parameter);
		void GameStatisticsGetOffVehicleReason(class ASolarWeapon* CurrentWeapon, const class FString& Param);
		void GameStatisticsEquipment();
		void GameStatisticsElectricShopActivated(const struct FVector& InLocation);
		void GameStatisticsDamageReason(const struct FSolarPointDamageEvent& InDamageEvent, float ActualDamage);
		void GameStatisticsCharacterSkill(bool bIsSuperSkill);
		void GameStatisticsBackpackFly(const struct FBackpackStatisticsInfo& InBackpackStatisticsInfo);
		void ForceBreakSprintState();
		void FindMostValuableItemClient(TArray<struct FSolarItemData> ItemData, unsigned char FromWhichTeammate);
		void ExitDyingMovement();
		void ExitDeathVerge(bool bClientSimulation);
		void ExecuteGM(const class FString& GMType, const class FString& Param1, const class FString& Param2);
		void EnterVehicleWholeShield(class UMaterialInterface* ShieldMaterialSource);
		void EnterVehicleStealth();
		void EnterDyingMovement();
		void EnterDeathVerge(bool bClientSimulation);
		void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);
		void DoReceivingPoisonDamage();
		void DoOperation(ECharacterOperation OperationType, class UObject* Target);
		void DisCardShield();
		void CreateTreasureBoxOperator();
		void CreateShieldUpgradeOperator();
		void CreateShieldRepairEffectItem();
		void CreateShieldOperator();
		class UWidgetComponent* CreateOwnTeammateHUDInternal(class ASolarPlayerState* SelfData);
		class UWidgetComponent* CreateOwnTeammateHUD();
		void ClientUpdateTracking(int32_t Mode, int32_t Index, const struct FVector& Location);
		void ClientSuperRadarOnceScanned(int32_t ScannedNum);
		void ClientStartRecharge(float InCurrentValue, float InRecoveryDuration, float InRecoveryAmount, EShieldRechargeState ShieldRechargeType, int32_t InShieldContributorCharacterId, bool bFixPreAdd);
		void ClientSetServerBlockDetectionResult(const class FString& Info);
		void ClientRPCDisplayAllElectricShops(TArray<struct FVector> AllPositions);
		void ClientRestoreActiveAbilitiesOnReconnected(TArray<struct FRestoreAbilityInfo> SpecHandles);
		void ClientReceiveVehicleWeaponMessageArray(TArray<struct FPlayerWeaponMsg> InPlayerWeaponMessageArray);
		void ClientReceiveVehicleWeaponMessage(const struct FPlayerWeaponMsg& InPlayerWeaponMessage);
		void ClientReceiveScanResult(TArray<struct FScannedInfo_NetQuantize> ScannedDatas, float SpanTimer);
		void ClientReceiveCharacterWeaponMessageArray(TArray<struct FPlayerWeaponMsg> InPlayerWeaponMessageArray);
		void ClientReceiveCharacterWeaponMessage(const struct FPlayerWeaponMsg& InPlayerWeaponMessage);
		void ClientRadarOnceScanned(int32_t ScannedNum);
		void ClientPlaySoundGroup(const class FName& GroupName);
		void ClientPlayKillEffect(class ASolarWeapon* AttackerWeapon);
		void ClientPlayHitEffect(const struct FHitResult& HitResult, class UClass* BulletClass, ESolarHitType HitType, class APlayerController* Attacker, const struct FVector& RelativeVector, float VFXScale, class ASolarWeapon* AttackerWeapon);
		void ClientOpenAirdropResponse(bool bIsOpening);
		void ClientOnTriggerCharacterDown();
		void ClientOnShieldUpgrade();
		void ClientOnReconnecting(const struct FReconnectionParams& Params);
		void ClientOnContinuousTreatmentStarted();
		void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, const struct FGameplayTag& InTag);
		void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, const struct FGameplayTag& InTag);
		void ClientNotifyGameProgressCondition(const struct FGameplayTag& InProgressTag);
		void ClientNotifyCharacterExposed(float InRadarLifeTime, const struct FGameplayTag& InTag);
		void ClientNoticePickup(int32_t ItemID, int32_t ItemQuality);
		void ClientLeaveFromSkywardDiveLauncher(class ASkywardDiveLauncher* InLauncher);
		void ClientKilledCharacter();
		void ClientHideShieldOperator();
		void ClientEnterAndRefreshSkywardDiveLauncher(class ASkywardDiveLauncher* InLauncher, bool bInHasAvailableDevice);
		void ClientCreateTreatEffect();
		void ClientCompleteRecharge(float InCurrentValue, float InChangeValue);
		void ClientCancelRecharge(bool BreakAnimOnly, float InCurrentValue, float InChangeValue, float MaxShieldVal, EShieldCancelRechargeReason CancelReason);
		void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, unsigned char RoleAbilityIndex);
		void ClientAddHitTrace(const struct FHitTraceInfo& Info);
		void ClientAckValidShieldUpgradeInteract(class ASolarShieldUpgradeItemShop* InShop, EShieldUpgradeInteractAckType AckReason);
		void ClearGameStatisticEquipment();
		void ClearDeathBoxData();
		float CheckSelfAltitudeInstantlyByTrace(struct FHitResult* HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);
		void ChangeSeatByIndex(int32_t TargetSeatIndex);
		void ChangeSeatByDefault();
		void CGM_SpawnDeathBox();
		void CGM_EnterDeath();
		bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);
		bool CanRebirth();
		bool CanOperateBackpack();
		bool CanMarkPointOnWorld();
		void CancelVehicleAbility();
		void CancelTreatment();
		void CalculateBubbleKillNum(TArray<class ASolarCharacter*>* InstigatorCharacters, class AActor* AttackWeapon);
		void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, unsigned char RoleAbilityIndex);
		void BreakRechargeShield();
		void BindUpdateHUDToOnHealthUpdateDelegateProc(class ASolarCharacter* Character);
		void BindLocalPlayerSpectateDelegates(class ASolarSpectateInfo* LocalSpecInfo);
		void BindActorToSelfTeam(class AActor* Actor);
		void BeginplayPending__DelegateSignature();
		void BeginPlayBlueprint();
		void AutoMarkItemForTeammateClient(int64_t ItemThisID);
		void ApplyVehicleAbility(unsigned char AbilityIndex);
		void AfterTakeDamageResolve(float Damage, const struct FSolarPointDamageEvent& DamageEvent, class ASCMPlayerState* EventInstigator, class AActor* DamageCauser);
		void AfterDealDamageResolve(float Damage, const struct FSolarPointDamageEvent& DamageEvent, class ASCMPlayerState* EventInstigator, class AActor* DamageCauser);
		void AddTrackingTarget(class ASolarCharacterBase* Tracked);
		void AddTempAttributeModifies(int32_t AttributeID, bool bCumulOrFact, const class FName& Tag, float Value);
		void AddDebugString(const class FString& DebugString);
		void AddCurrExtraEnergyValue(float DeltaEnergy);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMCharacter
	 * Size -> 0x0000 (FullSize[0x2090] - InheritedSize[0x2090])
	 */
	class ASCMCharacter : public ASolarCharacter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMLoadLevelAction
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class USCMLoadLevelAction : public UBlueprintAsyncActionBase
	{
	public:
		unsigned char                                              UnknownData_II4K[0x28];                                  // 0x0030(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnElementLoadComplete;                                   // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadComplete;                                          // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		class USCMLoadLevelAction* STATIC_LoadLevel(class UObject* WorldContextObject, const class FString& LevelName, TArray<class FString> Elements);
		void HandleLoadComplete();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMLoadElementAction
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class USCMLoadElementAction : public UBlueprintAsyncActionBase
	{
	public:
		unsigned char                                              UnknownData_11FG[0x18];                                  // 0x0030(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnElementLoadComplete;                                   // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		class USCMLoadElementAction* STATIC_LoadElementLevel(class UObject* WorldContextObject, TArray<class FString> Elements);
		void HandleElementLoadComplete();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMUnLoadElementAction
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class USCMUnLoadElementAction : public UBlueprintAsyncActionBase
	{
	public:
		unsigned char                                              UnknownData_KFRY[0x18];                                  // 0x0030(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnElementUnLoadComplete;                                 // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		class USCMUnLoadElementAction* STATIC_UnLoadElementLevel(class UObject* WorldContextObject, TArray<class FString> Elements);
		void HandleElementUnLoadComplete();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMMapElementBase
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ASCMMapElementBase : public AActor
	{
	public:
		bool                                                       bPersistent;                                             // 0x0228(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HLV2[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Side;                                                    // 0x0230(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Job;                                                     // 0x0240(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ElementID;                                               // 0x0250(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMMapElementType                                         Type;                                                    // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMMapElementStateType                                    State;                                                   // 0x0261(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMMapElementVisibilityType                               Visibility;                                              // 0x0262(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W5U0[0x5];                                   // 0x0263(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* MapElementRPCComponentClass;                             // 0x0268(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ElementName;                                             // 0x0270(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseSceneActorOptimization;                              // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7ZS0[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (PADDING)

	public:
		ESCMMapElementVisibilityType SetElementVisibility(ESCMMapElementVisibilityType NewType);
		ESCMMapElementStateType SetElementState(ESCMMapElementStateType NewState);
		void OnRep_ElementVisibility();
		void OnRep_ElementState();
		void OnElementVisibilityChanged(ESCMMapElementVisibilityType CurrentVisibility);
		void OnElementStateChanged(ESCMMapElementStateType CurrentState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMMapElementRPCComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class USCMMapElementRPCComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMMatchChannelAction
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class USCMMatchChannelAction : public UBlueprintAsyncActionBase
	{
	public:
		unsigned char                                              UnknownData_CYKS[0x18];                                  // 0x0030(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject* WorldContextObject;                                      // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnMatchChannelChange;                                    // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		class USCMMatchChannelAction* STATIC_OpenMatchChannel(class UObject* WorldContextObject, EMatchType MatchType, TArray<int32_t> PlayerStructure, int32_t MaxMatchTime);
		void HandleMatchChannelChange(bool InMatchResult, int32_t RPCID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerController
	 * Size -> 0x08F8 (FullSize[0x0EA0] - InheritedSize[0x05A8])
	 */
	class ASolarPlayerController : public APlayerController
	{
	public:
		unsigned char                                              UnknownData_1MJG[0x40];                                  // 0x05A8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPawnReplicated;                                        // 0x05E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateRepDelegate;                                // 0x05F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCatchInputActionDelegate;                              // 0x0608(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnterLandingDelegate;                                  // 0x0618(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNotifiedMarkedItemWasPickedUpDelegate;                 // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USolarInputManager* InputManager;                                            // 0x0638(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UQRH[0x8];                                   // 0x0640(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAiPalComponent* AiPalComponent;                                          // 0x0648(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarEasyAntiCheatComponent* AntiCheatComponent;                                      // 0x0650(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHUDSpawnedDelegate;                                    // 0x0658(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W3JV[0xF0];                                  // 0x0668(0x00F0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarInputModePolicyComponent* SolarInputModePolicyComponent;                           // 0x0758(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class USolarInputActionContext*>                    InputActionContextArray;                                 // 0x0760(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GVP4[0x8];                                   // 0x0770(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           InputMovementVector;                                     // 0x0778(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InputRotatePitch;                                        // 0x0780(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LA48[0xC];                                   // 0x0784(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ActionWheelHoldDownTime;                                 // 0x0790(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YGA9[0x10];                                  // 0x0794(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WorldMarkMessageDelayTime;                               // 0x07A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WarningMarkRadius;                                       // 0x07A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PingHoldDownTime;                                        // 0x07AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VoiceWheelMouseMoveRatio;                                // 0x07B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WheelRadius;                                             // 0x07B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CancelRadius;                                            // 0x07B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OpenMarkWheelRadius;                                     // 0x07BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6EMP[0x68];                                  // 0x07C0(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UActorMarkBase*>                              DeathBoxWorldMarks;                                      // 0x0828(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NYE0[0x4];                                   // 0x0838(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeathBoxMarksRefreshInterval;                            // 0x083C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EW77[0x4];                                   // 0x0840(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxDeathBoxWorldMarkNumber;                              // 0x0844(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* DeathBoxMarkClass;                                       // 0x0848(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W8MG[0x28];                                  // 0x0850(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* FollowArmClass;                                          // 0x0878(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* FollowCameraClass;                                       // 0x0880(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FreeLookSmoothSpeed;                                     // 0x0888(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AQ3P[0x1C];                                  // 0x088C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarCharacterSpringArmComponent* FollowArm;                                               // 0x08A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarCharacterCameraComponent* FollowCamera;                                            // 0x08B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GSS9[0xA8];                                  // 0x08B8(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PlayerId;                                                // 0x0960(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8FOD[0x18];                                  // 0x0970(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VehicleInteractionDistance;                              // 0x0988(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IKW0[0x4];                                   // 0x098C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarVehiclePawn*>                           InteractingVehicles;                                     // 0x0990(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarVehiclePawn* BestInteractingVehicle;                                  // 0x09A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FENZ[0x68];                                  // 0x09A8(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTeammateHUDDodgeSet;                                   // 0x0A10(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class ASolarCharacter*, int32_t>                      TeammateCandidates;                                      // 0x0A20(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsAlreadyParachuted;                                    // 0x0A70(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BON6[0x7];                                   // 0x0A71(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGameplayHitInfo>                            WeaponMessageArray;                                      // 0x0A78(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_499S[0x18];                                  // 0x0A88(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AActor>>                       UniqueActorArray;                                        // 0x0AA0(0x0010) ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HangUpTime;                                              // 0x0AB0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K0KI[0x1C];                                  // 0x0AB4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UUserWidget>                          DamageTextWidget;                                        // 0x0AD0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarDamageText>                            SameFrameDamageTextDataCache;                            // 0x0AD8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        SameFrameDamageTextDataHandle;                           // 0x0AE8(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9U3I[0xA8];                                  // 0x0AF0(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSpectateInfoRep;                                       // 0x0B98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NZKT[0x60];                                  // 0x0BA8(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftClassPath                                      SwitchTargetCameraControlCompClass;                      // 0x0C08(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowCursorWhenSpectateOthers;                           // 0x0C20(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1ZA5[0x3];                                   // 0x0C21(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpectateNetCamUpdatePositionLimit;                       // 0x0C24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z7O9[0x8];                                   // 0x0C28(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerController* ScoutPlayerController;                                   // 0x0C30(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor* ScoutViewTarget;                                         // 0x0C38(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp;                      // 0x0C40(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GASA[0x8];                                   // 0x0C48(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            UsableJetpacks;                                          // 0x0C50(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            UsableTailFlames;                                        // 0x0C60(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            AllCharacterSkins;                                       // 0x0C70(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                PickUpExpItemSound;                                      // 0x0C80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CachedRechamberSound;                                    // 0x0C88(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8P0C[0x3C];                                  // 0x0C98(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                EMPScreenEffectName;                                     // 0x0CD4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AntiCheatUploadInterval;                                 // 0x0CDC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFixedAntiCheatData                                 FixedAntiCheatData;                                      // 0x0CE0(0x001C) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DKTM[0x84];                                  // 0x0CFC(0x0084) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      CustomAntiCheatNames;                                    // 0x0D80(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      CustomAntiCheatContents;                                 // 0x0D90(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OKSH[0x100];                                 // 0x0DA0(0x0100) MISSED OFFSET (PADDING)

	public:
		void WorldMarkWheelYAxis(float Movement);
		void WorldMarkWheelXAxis(float Movement);
		void WorldMarkDelayExecFunction();
		void UseMedicine();
		void UpdateEnableAiPalRate(int32_t Rate);
		void UnMarkWorldInLevel(int64_t instanceID);
		void Turn(float Value);
		void TryRecordBattlePlayerData();
		void TryRechargeShield(bool bUseBigRecharger);
		void TriggerVoiceByType(EPassiveTriggeredVoice VoiceType);
		void TriggerVoiceByNumber(int32_t VoiceIndex);
		void ToggleEMPScreenEffect(bool bInVisible);
		void ToggleCursor();
		void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget);
		void SwtichVehicleSeatNotification();
		void SwitchWeaponByReverseOrder();
		void SwitchWeaponByOrder();
		void SwitchSpectatedCharacterInTeam(int32_t PosInTeam);
		void SwitchInputBinding(const class FName& InputName, EInputSwitchType SwitchTpye);
		void StopSpectateCountdown();
		void StopRecordingAtDS();
		void StartSpectateCountdown(const struct FRepCountdownData& InCountdownData);
		void StartRecordingAtDS(const class FString& Filename, const class FString& UploadUrl, ERecordingType ForceRecordingType);
		void SolarSlot(int32_t ID);
		void SolarShowPanelUI(int32_t Type);
		void SolarServerNetProfileStop();
		void SolarServerNetProfileStart();
		void SolarOpenUI(const class FString& UIID, int32_t RootID);
		void SolarModule(int32_t ID);
		void SolarISPC(const class FString& _str);
		void SolarGM_Weapon(const class FString& Type, const class FString& paramOne, const class FString& paramTwo);
		void SolarGM_UpdateTaskInfo();
		void SolarGM_TeleportToBotAIServer(uint32_t CtrlIndex);
		void SolarGM_StopRecordingAtDS();
		void SolarGM_StopBotAIBehaviorTreeServer(bool bStop);
		void SolarGM_StartShrinkSafeArea();
		void SolarGM_StartRecordingAtDS(const class FString& Filename, const class FString& UploadUrl, ERecordingType ForceRecordingType);
		void SolarGM_SpawnBotAIAtCrosshairByNumServer(int32_t Num, int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel);
		void SolarGM_SpawnBotAIAtCrosshair(int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel);
		void SolarGM_SpawnAIAtCrosshairServer(int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel);
		void SolarGM_ShowRedZoneDamage(bool IsShow);
		void SolarGM_ShowNotice(int32_t NoticeId);
		void SolarGM_SetTeamID(int32_t InTeamId);
		void SolarGM_SetStatDataForDebug();
		void SolarGM_SetSolarPlayerID(const class FString& InSolarPlayer);
		void SolarGM_SetReconnection(bool IsReconnection);
		void SolarGM_SetPlayerData(const class FString& InPlayerID);
		void SolarGM_SetGyroscopeTiltZThresholdSwitch(const class FString& bSwitch);
		void SolarGM_SetGyroscopeTiltZThreshold(float Value);
		void SolarGM_SetGyroscopeTiltYThreshold(float Value);
		void SolarGM_SetGyroscopeTiltFrameCount(float Value);
		void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);
		void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);
		void SolarGM_ServerStartShrinkSafeArea();
		void SolarGM_ServerShowRedZoneDamage(bool IsShow);
		void SolarGM_ServerSetTeamID(int32_t InTeamId);
		void SolarGM_ServerSetStatDataForDebug();
		void SolarGM_ServerSetSolarPlayerID(const class FString& InSolarPlayer);
		void SolarGM_ServerSetReconnection(bool IsReconnection);
		void SolarGM_ServerSetPlayerData(const class FString& InPlayerID);
		void SolarGM_ServerMarkVehicleSpawnerInMap();
		void SolarGM_ServerDumpAllPlayer();
		void SolarGM_ServerDebugOffline();
		void SolarGM_ServerConsoleCommand(const class FString& InConsoleCommand);
		void SolarGM_ServerClosePoisonDamage(bool isClose);
		void SolarGM_ServerChangeDayLight(int32_t ID);
		void SolarGM_ResetZoneBombsFire();
		void SolarGM_RedZoneServer(int32_t ZoneId);
		void SolarGM_RedZone(int32_t ZoneId);
		void SolarGM_PoisonServer(const class FString& GMType);
		void SolarGM_Poison(const class FString& GMType);
		void SolarGM_PlayerUndetectableByAIServer(int32_t debugValue);
		void SolarGM_PlayerUndetectableByAI(int32_t debugValue);
		void SolarGM_NoviceGuidance(int32_t ActionID, bool bOn);
		void SolarGM_NotifyPlayerHasCheatByNickName(const class FString& NickName);
		void SolarGM_NotifyPlayerHasCheat(const class FString& SolarPlayerID);
		void SolarGM_KillAllAIServer(bool KillBot);
		void SolarGM_KickMeOut();
		void SolarGM_InitTaskInfo();
		void SolarGM_GoPreviousHomeCameraMode();
		void SolarGM_GoNextHomeCameraMode();
		void SolarGM_GoHomeCameraModeByIndex(int32_t Index);
		void SolarGM_GMGoSpectatePreviousPlayer();
		void SolarGM_GMGoSpectatePlayerByIndex(uint32_t Index);
		void SolarGM_GMGoSpectateNextPlayer();
		void SolarGM_Freelook(bool Open);
		void SolarGM_DumpAllPlayer(bool bSendToServer);
		void SolarGM_DebugOffline();
		void SolarGM_DebugAllAIServer(int32_t debugValue);
		void SolarGM_DebugAllAI(int32_t debugValue);
		void SolarGM_ClosePoisonDamage(bool isClose);
		void SolarGM_ClientShowRedZoneDamage(const struct FVector& bombLocation, const struct FVector& characterlocation, float Distance, float Damage);
		void SolarGM_ClientSetPlayerData(const class FString& InPlayerID);
		void SolarGM_ClientMarkVehicleSpawnerInMap(TArray<struct FVector> VehicleSpawnerLocations, TArray<int32_t> VehicleSpawnerSpawnIds);
		void SolarGM_ClientGotoLogin();
		void SolarGM_ClientDumpAllPlayer(const class FString& DumpString);
		void SolarGM_Character(const class FString& GMType, const class FString& Param1, const class FString& Param2);
		void SolarGM_ChangeVehicleVectorProperty(const class FString& InPropertyName, float InX, float InY, float InZ);
		void SolarGM_ChangeVehicleRotatorProperty(const class FString& InPropertyName, float InPitch, float InYaw, float InRoll);
		void SolarGM_ChangeVehicleIntProperty(const class FString& InPropertyName, int32_t inInt);
		void SolarGM_ChangeVehicleGASAttribute(const class FString& InPropertyName, float InValue);
		void SolarGM_ChangeVehicleFloatProperty(const class FString& InPropertyName, float InFloat);
		void SolarGM_ChangeVehicleCurveProperty(const class FString& InPropertyName, unsigned char InChangeType, float InKey, float InValue);
		void SolarGM_ChangeVehicleBoolProperty(const class FString& InPropertyName, bool InBool);
		void SolarGM_ChangeDayLight(int32_t ID);
		void SolarGM_BattleLua(const class FString& CmdName, TArray<class FString> Params);
		void SolarGM_Battle(const class FString& CmdName, TArray<class FString> Params);
		void SolarGM(const class FString& _str);
		void SolarEnergy(int32_t InMode, int32_t ID);
		void SolarCloseUI(const class FString& UIID);
		void SolarClosePanelUI(int32_t Type);
		void SolarClientNetProfileStop();
		void SolarClientNetProfileStart();
		void ShowBackpackUI();
		void SetInputActionSwitch(int32_t ActionID, bool bOn);
		void SetAllTeammateHUDDodge(bool bDodge);
		void ServerUpdateTaskInfo();
		void ServerUnforbidRoleAbilitySkillDebugOnly();
		void ServerTriggleScreenshotTask(const class FString& TargetPlayerId);
		void ServerTeleportTo(const struct FVector& DestLocation);
		void ServerSyncPlayerSelfReport();
		void ServerSwitchSpectatedCharacterInTeam(int32_t PosInTeam);
		void ServerSpawnVehicleWithVehicleID(int32_t VehicleID);
		void ServerSpawnVehicle(int32_t SpawnID);
		void ServerSpawnTreasureBox(int32_t TreasureBoxID);
		void ServerSpawnSolarRadar(const class FString& BpPath);
		void ServerSpawnOutcomeContent(int32_t OutcomeID);
		void ServerSpawnChargingPile(const class FString& BpPath);
		void ServerSpawnAirship(float Loc_X, float Loc_Y);
		void ServerSpawnAirdrop(int32_t AirdropID);
		void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);
		void ServerSolarWeaponReload(int32_t PrimaryAmmoCap, int32_t SecondaryAmmoCap);
		void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);
		void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);
		void ServerSolarSetPlayerValue(const class FString& InType, const class FString& InValue);
		void ServerSolarAmmoSpreadPerBullet(int32_t AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);
		void ServerSolarAmmoRangeSpeedDamage(int32_t AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);
		void ServerSolarAmmoFiring(int32_t AmmoIndex, int32_t FireCostType, int32_t FireCostPerAttack, int32_t FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);
		void ServerSolarAmmoBoltAndMag(int32_t AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);
		void ServerSolarAmmoBasicMovement(int32_t AmmoIndex, int32_t TimedExplode, int32_t BounceTimes, float LifeTime, float BaseReloadTime, int32_t TrajectoryType, float CustomValue);
		void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD);
		void ServerSetPlayerLevel(int32_t InLevel);
		void ServerSetHangUpBehavior();
		void ServerSetFreeLook(bool bInFreeLook);
		void ServerSetClientRecording_Impl(bool bInRecording);
		void ServerSetAppLifetimeState(EAppLifetimeState NewLifeState);
		void ServerSetActorOwner(class AActor* TargetActor);
		void ServerScreenshotProcessing(const struct FSShotImageInfo& ImageInfo);
		void ServerRPCResetZoneBombsFire();
		void ServerResetUniqueSkillCDDebugOnly();
		void ServerRequestTransferSkydivingLeaderTo(unsigned char PosInTeam);
		void ServerRequestSkydivingFollow(class ASolarPlayerState* LeaderPlayerState);
		void ServerReqStartReviveItemRecycleCountDownData();
		void ServerPlayerUpgrade(int32_t InLevel);
		void ServerPlayerResumeSettlement();
		void ServerPlayerRequestLogout();
		void ServerPlayerOutBySelf(ESCMPlayerOutPath InPath);
		void ServerPlayerGoToSettlement();
		void ServerNotifyShowEmoji(int32_t EmojiID, class ASolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);
		void ServerNotifyPlayerHasCheatByNickName(const class FString& NickName);
		void ServerNotifyPlayerHasCheat(const class FString& SolarPlayerID);
		void ServerNetProfile(bool startOrStop);
		void ServerInitTaskInfo();
		void ServerGoSpectatePreviousPlayer();
		void ServerGoSpectatePlayerByPlayerIdInternal(const class FString& SolarPlayerID);
		void ServerGoSpectatePlayerByPlayerId(const class FString& SolarPlayerID);
		void ServerGoSpectatePlayerByIndex_Internal(int32_t Index);
		void ServerGoSpectatePlayerByIndex(int32_t Index);
		void ServerGoSpectateNextPlayer();
		void ServerGainExperience(int32_t InExp);
		void ServerEnableCheats();
		void ServerCmd(const class FString& Cmd);
		void ServerClearUniqueSkillCDDebugOnly();
		void ServerChangeVehicleVectorProperty(const class FString& InPropertyName, float InX, float InY, float InZ);
		void ServerChangeVehicleRotatorProperty(const class FString& InPropertyName, float InPitch, float InYaw, float InRoll);
		void ServerChangeVehicleIntProperty(const class FString& InPropertyName, int32_t InFloat);
		void ServerChangeVehicleGASAttribute(const class FString& InPropertyName, float InValue);
		void ServerChangeVehicleFloatProperty(const class FString& InPropertyName, float InFloat);
		void ServerChangeVehicleCurveProperty(const class FString& InPropertyName, unsigned char InChangeType, float InKey, float InValue);
		void ServerChangeVehicleBoolProperty(const class FString& InPropertyName, bool InBool);
		void ServerCancelSkydivingFollow();
		void SendRepliableMessageServer(int32_t Message);
		void SendRepliableMessageInMsgBucket(TArray<int32_t> MessageIDs);
		void SendRepliableMessageByMessageID(int32_t ID);
		void SendQuickMessageServer(const class FString& Message, bool bSound);
		void SendQuickMessageNewServer(int32_t VoiceType);
		void SendQuickMessageNewClient(const class FString& NickName, int32_t VoiceType, int32_t CharID, int32_t SkinId, bool bGender, int32_t PosInTeam, bool bLocalPlayer, bool bShowLocMessage);
		void SendQuickMessageClient(const class FString& NickName, const class FString& Message, bool IsLocalPlayer, bool bSound, int32_t PosInTeam);
		void SendLocalizationTeamMessageServer(int32_t TextID, TArray<struct FLocTextParam> TextParams, const class FString& SoundEvent);
		void SendLocalizationTeamMessageNewServer(TArray<struct FLocTextParam> TextParams, int32_t SoundID1, int32_t SoundDI2);
		void SendLocalizationTeamMessageNewClient(int32_t CharacterId, int32_t SkinId, bool bGender, int32_t SoundID1, const class FString& NickName, TArray<struct FLocTextParam> TextParams, int32_t PosInTeam, int32_t SoundID2);
		void SendLocalizationTeamMessageClient(class ASolarPlayerState* SenderPS, int32_t TextID, TArray<struct FLocTextParam> TextParams, const class FString& SoundEvent, int32_t PosInTeam);
		void SendLocalizationTeamMessage(int32_t TextID, TMap<class FString, int32_t> TextParamsId, const class FString& SoundEvent1, const class FString& SoundEvent2);
		void SendDamageTextDataNextTick(const struct FSolarDamageText& InSolarDamageText);
		void ResetJoyStickControlInput();
		void ResetAllInput();
		void RequestTransferSkydivingLeaderTo(unsigned char PosInTeam);
		void RequestSkydivingFollow(class ASolarPlayerState* LeaderPlayerState);
		void RequestNotifyShowEmoji(int32_t EmojiID, class ASolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);
		void RecordSpectateInfoToBI(struct FSpectateReportInfo* SpectateReportInfo);
		void QuickMessageLuaCall(const class FString& Message, bool bSound);
		int32_t QueryStage();
		void PushInputModeUIOnly(const class FName& Name, bool bShowCursor, class UWidget* InWidgetToFocus, bool bLockMouseToViewport);
		void PushInputModeGameOnly(const class FName& Name, bool bShowCursor);
		void PushInputModeGameAndUI(const class FName& Name, bool bShowCursor, class UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);
		void PostInputAction(const class FName& ActionName, EInputEvent KeyEvent);
		void PostAkEventByName(const class FString& EventName1, const class FString& EventName2);
		void PopInputMode(const class FName& Name);
		void PlayerGoToSettleMent();
		void PlayerGotoLobbyWithLogout();
		void PassiveTriggeredVoice(EPassiveTriggeredVoice VoiceType);
		void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);
		void OnTeamNumChangeFun(ESCMDataChangeType ChangeType, int32_t OldValue, int32_t NewValue);
		void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);
		void OnSuperScaningStart(TArray<class FString> InScanPlayers);
		void OnSuperScaningRemovePlayer(const class FString& InRemovePlayer);
		void OnSuperScaningEnd();
		void OnStopUpdateSpectateInfo(class ASolarSpectateInfo* SpecInfo);
		void OnSpectateTargetItemsChanged(class ASolarSpectateInfo* SpecInfo);
		void OnSpectateTargetChangedHandler(class ASolarPlayerState* OldTarget, class ASolarSpectateInfo* MySpecInfo);
		void OnSpectateInfoRep__DelegateSignature(class ASolarSpectateInfo* SpectateInfo);
		void OnSkydivingStatusUpdated(class ASolarPlayerState* SelfPlayerState, bool bInIsSkydiving);
		void OnShowGameNotice(int32_t InNoticeID, TMap<class FString, class FString> InNoticeParams);
		TArray<class URotationBarMarkWidget*> OnShowActorMarkDelegate__DelegateSignature(TArray<class AActor*> MarkActors);
		void OnSeamlessTravelEnd();
		void OnScopeAxisInput(float InAxisValue);
		void OnReviveSelfTriggered(bool bAppear);
		void OnReceiveBattleEnd();
		void OnPutAwayWeaponPressed();
		void OnPlayerStateSpectateInfoRepHandler(class ASolarSpectateInfo* SpecInfo);
		void OnPlayerStateRepHandlerForSpectate(EPlayerStateRepType RepType, class APlayerState* InPlayerState);
		void OnPawnReplicated__DelegateSignature();
		void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(int64_t InItemInstanceId);
		void OnEnterVoyageDelegate__DelegateSignature();
		void OnEnterLanding();
		void OnCustomizeLevelLoaded();
		void OnClientRecordingChanged(bool bInRecording);
		void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(TArray<class URotationBarMarkWidget*> MarkWidgets);
		void OnCleanActorMarkWithActorsDelegate__DelegateSignature(TArray<class AActor*> MarkActors);
		void OnCharacterRebirthLua();
		void OnCharacterDeathLua();
		void OnCatchInputActionDelegate__DelegateSignature(const class FName& ActionName, EInputEvent InputEventType);
		void OnBeginUpdateSpectateInfo(class ASolarSpectateInfo* SpecInfo);
		void OnBeforeSpectateTargetChange(class ASolarPlayerState* NewTarget, class ASolarSpectateInfo* SpectateInfo);
		void OnAppHasReactivated();
		void OnAppHasDeactiveated();
		void OnActionWheelClosed();
		void NotifyMonsterSpawn();
		void NotifyCrouchIsLocked();
		void NotifyAppReactivate();
		void NotifyAppHasDeactivate();
		void NofityCustomizeLevelLoaded();
		void MarkWorldInLevelLuaCall(const struct FWorldMarkData& InWorldMarkedData);
		void MarkWorldInLevel(const struct FWorldMarkData& InWorldMarkedData);
		void MarkPointInNavMapLuaCall(const struct FVector2D& InMarkedPoint);
		void MarkPointInNavMap(const struct FVector2D& InMarkedPoint, bool bFromWorldMark);
		void MarkOnWorldByMinimapPosition(int32_t PosInTeam, const struct FVector2D& MinimapPos);
		void MarkedAsAppHasReactivated();
		void MarkedAsAppHasDeactivated();
		void LuaShowUI(const class FString& WidgetPath, const class FString& UIName);
		void LuaClientUpdateAimbotSlidingWindowPolicyParm(int32_t AimbotSwitch, int32_t WindowSize, int32_t MaxMutation);
		void LuaCallInputTouch(uint32_t Handle, ETouchType Type, const struct FVector2D& TouchLocation);
		void LookUp(float Value);
		void LogMarkAndQuickVoice(int32_t Type, int32_t SubType);
		void KickMeOutAtDS(const class FString& InPlayerID);
		void STATIC_K2_ShowDamageText(float InDamage, const struct FHitResult& InHitResult, class AActor* InDamageSource, class AController* InAutonomousController, const struct FSolarPointDamageEvent& InPointDamageEvent);
		bool IsThirdPersonSpectateCameraMode();
		bool IsSpectatingOtherPlayer();
		bool IsMatching();
		bool IsHasSkydiveAndEnd();
		bool IsHasCharacterAndSkin(int32_t CharacterId, int32_t SkinId);
		void InputWorldMarkReleased();
		void InputWorldMarkPressed();
		void InputVerticalJetReleased();
		void InputVerticalJetPressed();
		void InputVehicleInteractionReleased();
		void InputVehicleInteractionPressed();
		void InputUseMedicineReleased();
		void InputUseMedicinePressed();
		void InputToggleTertiaryWeapon_Checkbox();
		void InputToggleSkydivingFollowRouletteTriggered();
		void InputToggleSecondaryWeaponReleased();
		void InputToggleSecondaryWeaponPressed();
		void InputToggleSecondaryWeapon_Checkbox();
		void InputTogglePrimaryWeaponReleased();
		void InputTogglePrimaryWeaponPressed();
		void InputTogglePrimaryWeapon_Checkbox();
		void InputTogglePickupReleased();
		void InputTogglePickupPressed();
		bool InputTestPriority3Pressed();
		bool InputTestPriority2Pressed();
		bool InputTestPriority1Released();
		bool InputTestPriority1Pressed();
		void InputSwitchToSeatTwoPressed();
		void InputSwitchToSeatThreePressed();
		void InputSwitchToSeatOnePressed();
		void InputSwitchToSeatFourPressed();
		void InputSwitchFireModeReleased();
		void InputSwitchFireModePressed();
		void InputStartRepairVehicleReleased();
		void InputSprintLockStart();
		void InputSprintFreeTerminate();
		void InputSprintFreeStart();
		void InputSprintFreeReleasedOnPC();
		void InputSprintFreePressedOnPC();
		void InputSkydivingFollowRouletteSelect4();
		void InputSkydivingFollowRouletteSelect3();
		void InputSkydivingFollowRouletteSelect2();
		void InputSkydivingFollowRouletteSelect1();
		void InputSkydivingFollowRouletteSelect(int32_t PosInTeam);
		void InputShieldUpgradeReleased();
		void InputShieldUpgradePressed();
		void InputShieldUpgradeCancelReleased();
		void InputShieldUpgradeCancelPressed();
		void InputRightMouseButtonReleased();
		void InputRightMouseButtonPressed();
		void InputReviveSelfReleased();
		void InputReloadReleased();
		void InputReloadPressed();
		void InputRechargeShieldReleased();
		void InputRechargeShieldPressed();
		void InputQuickAdsReleased();
		void InputQuickAdsPressed();
		void InputPSTouchpadButton(float InValueX);
		void InputPickupReleased();
		void InputPickupPressed();
		void InputMoveRight(float InValueY);
		void InputMovementYReceived(float InValueY);
		void InputMovementXReceived(float InValueX);
		void InputMoveForward(float InValueX);
		void InputMapPressed();
		void InputLeftFireReleased();
		void InputLeftFirePressed();
		void InputKeepSprintPressed();
		void InputJumpReleased();
		void InputJumpPressed();
		void InputItemActionWheelReleased();
		void InputItemActionWheelPressed();
		void InputInteractPressed();
		void InputInteractAndReloadReleased();
		void InputInteractAndReloadPressed();
		void InputHorizontalJetReleased();
		void InputHorizontalJetPressed();
		void InputGunsightReleased();
		void InputGunsightPressed();
		void InputGetOnVehicleReleased();
		void InputGetOffVehicleReleased();
		void InputFreeLookReleased();
		void InputFreeLookPressed();
		void InputFireReleased();
		void InputFirePressed();
		void InputEquip2Released();
		void InputEquip2Pressed();
		void InputEquip1Released();
		void InputEquip1Pressed();
		void InputEmoteActionWheelReleased();
		void InputEmoteActionWheelPressed();
		void InputEjectReleased();
		void InputEjectPressed();
		void InputDriveVehicleReleased();
		void InputCrouchReleased();
		void InputCrouchPressed();
		void InputCancelVehicleAbilityReleased();
		void InputCancelSkydivingFollowingTriggered();
		void InputBuilding();
		void InputBigRechargeShieldReleased();
		void InputBigRechargeShieldPressed();
		void InputBackpackReleased();
		void InputBackpackPressed();
		void InputAltFireReleased();
		void InputAltFirePressed();
		void InputActiveVehicleSecondAbilityReleased();
		void InputActiveVehicleSecondAbilityPressed();
		void InputActiveVehicleFirstAbilityReleased();
		void InputActiveVehicleFirstAbilityPressed();
		void InputActionWheelPreviousPage();
		void InputActionWheelNextPage();
		void InputActionWheelExec();
		void InputActionWheelCancel();
		void InputActionSecondaryReleased();
		void InputActionSecondaryPressed();
		void InputActionPrimaryReleased();
		void InputActionPrimaryPressed();
		bool IfSolarCharacterIsDriver();
		void HighlightDataRpcConnection(const class FString& HighlightDataStr);
		bool HasSkin(int32_t InSkinID);
		void HandleBeginSpectateRequest();
		void GyroscopeTilt(const struct FVector& Tilt);
		void GyroscopeRotationRate(const struct FVector& RotationRate);
		class ASolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull);
		struct FVector2D GetViewportCenter();
		class ASolarPlayerState* GetSpectateTargetPlayerState();
		class ASolarSpectateInfo* GetSpectateInfo();
		class ASolarCharacter* GetSpectatedCharacter();
		class ASolarPlayerState* GetSolarViewPlayerState();
		class ASolarPlayerState* GetSolarPlayerState();
		class ASolarCharacter* GetSolarCharacter();
		EPlayerNetStateInGame GetPlayNetStateInGame();
		struct FRotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput);
		struct FVector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput);
		class UPlayerStatisticsData* GetPlayerStatData();
		class FString GetPlayerID();
		class FString GetNoticeLocalText(int32_t InNoticeID, TMap<class FString, class FString> InNoticeParams);
		unsigned char GetMyTeamID();
		unsigned char GetMyPosInTeam();
		struct FVector2D GetMyMarkedPointInNavMap();
		int32_t GetMultiKillNum();
		int32_t GetKillNum();
		int32_t GetKillingSpreesNum();
		bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();
		class USolarInputModePolicyComponent* GetInputModePolicyComp();
		struct FSolarInputModeDataBase GetInputMode(const class FName& Name, ESolarInputMode* OutInputMode, bool* bFound);
		class USolarCameraComponent* GetCurrentCameraComponent();
		void GetControlledVehiclePropertyContainer(TArray<class UObject*>* OutObjects);
		struct FRotator GetCharacterViewRotation();
		struct FRotator GetCameraRotation();
		struct FVector GetCameraLocation();
		class ASolarCharacter* GetCameraFocusedCharacter();
		float GetCameraDefaultFOVAngle();
		float GetCameraCurrentFOVAngle();
		class USolarCameraComponent* GetActiveCamera();
		void ForceCompleteClientBlendToSpectateTarget();
		void ExcludeDifferentTeam(int32_t TeamID);
		void EndOBCurrentBattle();
		void DropPassengerNotification();
		void DestroyCharacterCorpse();
		void DebugUpdateTask();
		void DebugSetPlayerData();
		void DebugInitTask();
		void CustomModeShowNotice(int32_t InType, int32_t InNoticeID, class UClass* InClass, float InTime, const class FString& InText, class UObject* InIcon, int32_t InNoticeColor);
		void CustomAntiCheatDataExport(TArray<class FString> DataName, TArray<class FString> DataContent);
		void ClientSyncPlayerSelfReport(const struct FSolarPlayerReport& SelfReport, const struct FSolarGameModeInfo& GameInfo);
		void ClientStartReviveItemRecycleCountDown(int32_t CurrentTime, int32_t DurationTime);
		void ClientShowUI(const class FString& WidgetPath, const class FString& UIName);
		void ClientShowDiePage();
		void ClientScreenshotTask(const struct FScreenshotSetting& Setting);
		void ClientReviveWillBeDisabledHint(int32_t Duration);
		void ClientReviveBeDisabledHint();
		void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(class ASolarPlayerState* NewLeaderPlayerState, class ASolarPlayerState* OldLeaderPlayerState);
		void ClientReplacePlayerKillEffect(class AActor* InSource, class AActor* InTarget);
		void ClientReceviceDamageText(TArray<struct FSolarDamageText> InSolarDamageTextDatas);
		void ClientRaiseScreenshotJob(EShotMomentFlag ShotMoment);
		void ClientPlayerGoToSettlement(TArray<struct FSolarPlayerReport> Reports, const struct FSolarGameModeInfo& GameInfo, TArray<int32_t> InSettlementPageIndexs, bool IsCustomRoom);
		void ClientPlayerActivityHeatUpdate(const class FString& ActivityHeatFragmentStr);
		void ClientNotifyShowEmoji(int32_t EmojiID, class ASolarCharacter* UseEmojiCharacter);
		void ClientNotifyCheatedPlayer(const class FText& OutReason);
		void ClientNotifyAbnormalPlayer(const class FText& OutReason);
		void ClientEnableAiPalComponent(int32_t Rate);
		void ClientDoCharacterOperation(const struct FCharacterOperationEvent& ChOperationEvt);
		void ClientCloseUI(const class FString& UIName);
		void ClientClearAudioListenerOverride();
		void ClientCharacterIsDead();
		void ClientBeginOBCurrentBattleInternal();
		void ClearMarkedPointInNavMapLuaCall();
		void ClearMarkedPointInNavMap();
		void ChangeVehicleVectorPropertyInternal(const class FString& InPropertyName, float InX, float InY, float InZ);
		void ChangeVehicleRotatorPropertyInternal(const class FString& InPropertyName, float InPitch, float InYaw, float InRoll);
		void ChangeVehicleIntPropertyInternal(const class FString& InPropertyName, int32_t InFloat);
		void ChangeVehicleFloatPropertyInternal(const class FString& InPropertyName, float InFloat);
		void ChangeVehicleCurvePropertyInternal(const class FString& InPropertyName, unsigned char InChangeType, float InKey, float InValue);
		void ChangeVehicleBoolPropertyInternal(const class FString& InPropertyName, bool InBool);
		bool CanWorldMark();
		bool CanSolarCharacterLaunchJetPack();
		bool CanSolarCharacterInput();
		bool CanSolarCharacterCrouch();
		void CancelSkydivingFollow();
		void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification);
		void BuildSkydivingFollowOnEnteringTeam();
		void BpServerCheckAndUpdateAimbotSlidingWindowPolicyParm(int32_t AimbotSwitch, int32_t WindowSize, int32_t MaxMutation);
		void BindDelegatesDependGameState();
		void BeNotifiedMarkedItemWasPickedUp(int64_t InItemInstanceId);
		void BeginOBCurrentBattle();
		void BackToLobby();
		void AssembleCustomAntiCheatData(class ASolarWeapon* ActiveWeapon, class ASolarVehiclePawn* BoardedVehicle);
		void AntiCheatDataSchedulerUpload(TArray<class FString> DataName, TArray<class FString> DataContent, const struct FFixedAntiCheatData& FixedData);
		void AddTeammateCandidate(class ASolarCharacter* Candidate, int32_t TeamID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMPlayerController
	 * Size -> 0x0008 (FullSize[0x0EA8] - InheritedSize[0x0EA0])
	 */
	class ASCMPlayerController : public ASolarPlayerController
	{
	public:
		class USCMPlayerRPCComponent* RpcComponent;                                            // 0x0EA0(0x0008) BlueprintVisible, ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ServerHandlePlayerLevelLoaded(const class FString& LevelName);
		void RequestUpdataDataManager();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMPlayerRPCComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class USCMPlayerRPCComponent : public UActorComponent
	{
	public:
		void ReceivedLevelLoaded(const class FString& LevelName);
		void ReceivedCharacter();
		void ReceivedBeginLevelLoad(const class FString& LevelName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMPlayerStart
	 * Size -> 0x0060 (FullSize[0x02B8] - InheritedSize[0x0258])
	 */
	class ASCMPlayerStart : public APlayerStart
	{
	public:
		float                                                      Distance;                                                // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FWCT[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Side;                                                    // 0x0260(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Job;                                                     // 0x0270(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ElementID;                                               // 0x0280(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMMapElementType                                         Type;                                                    // 0x0290(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMMapElementStateType                                    State;                                                   // 0x0291(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMMapElementVisibilityType                               Visibility;                                              // 0x0292(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6MTM[0x1];                                   // 0x0293(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ElementName;                                             // 0x0294(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LCUG[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     PlayerLocations;                                         // 0x02A0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GGXA[0x8];                                   // 0x02B0(0x0008) MISSED OFFSET (PADDING)

	public:
		ESCMMapElementVisibilityType SetElementVisibility(ESCMMapElementVisibilityType NewType);
		ESCMMapElementStateType SetElementState(ESCMMapElementStateType NewState);
		void OnElementVisibilityChanged(ESCMMapElementVisibilityType CurrentVisibility);
		void OnElementStateChanged(ESCMMapElementStateType CurrentState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerState
	 * Size -> 0x0788 (FullSize[0x0AB8] - InheritedSize[0x0330])
	 */
	class ASolarPlayerState : public APlayerState
	{
	public:
		class FScriptMulticastDelegate                             OnTeammatePlayerStateRepDelegate;                        // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;  // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeammatePlayerStateRemovedInBattlePhaseDelegate;       // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerChangedGoldsDelegate;                            // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOBPlayerRepDelegate;                                   // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    Gold;                                                    // 0x0380(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y6C7[0x4];                                   // 0x0384(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            CostedGolds;                                             // 0x0388(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            ReceivedGolds;                                           // 0x0398(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CharacterId;                                             // 0x03A8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkinId;                                                  // 0x03AC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ClanId;                                                  // 0x03B0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ClanName;                                                // 0x03C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ClanShortName;                                           // 0x03D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BagId;                                                   // 0x03E0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CapsuleID;                                               // 0x03E4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SolarPlayerID;                                           // 0x03E8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              NickName;                                                // 0x03F8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   BattleVoiceId;                                           // 0x0408(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_APJE[0x4];                                   // 0x040C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    RTCType;                                                 // 0x0410(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint64_t                                                   UserId;                                                  // 0x0418(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PosInTeam;                                               // 0x0420(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M1ZW[0x7];                                   // 0x0421(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Side;                                                    // 0x0428(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Job;                                                     // 0x0438(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CharacterLevel;                                          // 0x0448(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AvatarID;                                                // 0x044C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AvatarFrameID;                                           // 0x0450(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Gender;                                                  // 0x0454(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AccountLevel;                                            // 0x0458(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FriendNum;                                               // 0x045C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RoleID;                                                  // 0x0460(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5PNB[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMedalInfo>                                  Medals;                                                  // 0x0468(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FBattleCharacterData>                        AllCharacterData;                                        // 0x0478(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FBattleCharacterData                                CurUsedCharacterData;                                    // 0x0488(0x0040) BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FExpRankMedalData>                           AllExpRankMedalData;                                     // 0x04C8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLastBattleInfo                                     LastBattleInfo;                                          // 0x04D8(0x001C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    RoleUltimateSkillCDState;                                // 0x04F4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSettlementParam_ExtraRewardInfo>            ExtraRewards;                                            // 0x04F8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSettlementReward>                           SettlementRewards;                                       // 0x0508(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSettlementCrateReward>                      CrateRewards;                                            // 0x0518(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   PlayerNumber;                                            // 0x0528(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F224[0x4];                                   // 0x052C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, int32_t>                                     VehicleSkinData;                                         // 0x0530(0x0050) NativeAccessSpecifierPublic
		float                                                      CurrentHealth;                                           // 0x0580(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxHealth;                                               // 0x0584(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FShieldInfo                                         CurShieldInfo;                                           // 0x0588(0x0008) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              ReviveItemNum;                                           // 0x0590(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ReviveCountByItem;                                       // 0x0591(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SCLC[0x2];                                   // 0x0592(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TalentID;                                                // 0x0594(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    LikeValue;                                               // 0x0598(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ReceivedGiftNum;                                         // 0x059C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SpectatorNum;                                            // 0x05A0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ETalentState                                               TalentState;                                             // 0x05A4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasBackendVerified;                                      // 0x05A5(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasGroupBackendVerified;                                 // 0x05A6(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4Y6M[0x1];                                   // 0x05A7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           MarkedPointInNavMap;                                     // 0x05A8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SelfLastVehicleLocation;                                 // 0x05B0(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TeamLastVehicleLocation;                                 // 0x05BC(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CurrentPlayerStateInGame;                                // 0x05C8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CurrentCharacterStateInGame;                             // 0x05C9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FI4X[0x56];                                  // 0x05CA(0x0056) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AccountFlag;                                             // 0x0620(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ClanFlag;                                                // 0x0624(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            EquippedEmotes;                                          // 0x0628(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              OS;                                                      // 0x0638(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              OsType;                                                  // 0x0648(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              DeviceModel;                                             // 0x0658(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECommonInputType                                           InputType;                                               // 0x0668(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsSameTeamWithLocalPlayer;                              // 0x0669(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasReconnection;                                         // 0x066A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VY2L[0x5];                                   // 0x066B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasHangUpBehavior;                                      // 0x0670(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GDOS[0x3];                                   // 0x0671(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HangUpTime;                                              // 0x0674(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OfflineBattleTime;                                       // 0x0678(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Elo;                                                     // 0x067C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RankLevel;                                               // 0x0680(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RankLevel2;                                              // 0x0684(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    LegendRank;                                              // 0x0688(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              VipType;                                                 // 0x068C(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RQ4F[0x3];                                   // 0x068D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    WarmupTag;                                               // 0x0690(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Frustration;                                             // 0x0694(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMonitor;                                                // 0x0698(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              LobbyTeamMemberNum;                                      // 0x0699(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XXLJ[0x16];                                  // 0x069A(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bTeamIDHasChanged;                                       // 0x06B0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CWIA[0x3];                                   // 0x06B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RepliableMessageID;                                      // 0x06B4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RepliableMessageStartTime;                               // 0x06B8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H17P[0xC];                                   // 0x06BC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsOBPlayer;                                             // 0x06C8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1KMX[0x3];                                   // 0x06C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    WarmId;                                                  // 0x06CC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    WarmType;                                                // 0x06D0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AllowOtherJoin;                                          // 0x06D4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZWW6[0x3];                                   // 0x06D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WaitTimeBeforeEnterSpectateMode;                         // 0x06D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7RSJ[0x4];                                   // 0x06DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSpectateInfoRep;                                       // 0x06E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ASolarPlayerState* KillerPlayerState;                                       // 0x06F0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarPlayerState* RevengePlayerState;                                      // 0x06F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FKillEnemySnapshot>                          KilledEnemysRecord;                                      // 0x0700(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarSpectateInfo* SpectateInfo;                                            // 0x0710(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPlayerNetStateInGame                                      NetStateInGame;                                          // 0x0718(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasLogin;                                               // 0x0719(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H0XA[0xE];                                   // 0x071A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasUpdateByServerData;                                  // 0x0728(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JPMI[0x7];                                   // 0x0729(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarReplayHighlightComponent* ReplayHightlightComp;                                    // 0x0730(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    KillNum;                                                 // 0x0738(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q1PL[0x1C];                                  // 0x073C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AssistNum;                                               // 0x0758(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WR4Z[0x1C];                                  // 0x075C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             DeathPos;                                                // 0x0778(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ReconnectNum;                                            // 0x0784(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L6CC[0x10];                                  // 0x0788(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MultiKillDurationTime;                                   // 0x0798(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3MIW[0x14];                                  // 0x079C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TotalReceivedDamage;                                     // 0x07B0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      HealSelf;                                                // 0x07B4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReceivedHeal;                                            // 0x07B8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LifeTime;                                                // 0x07BC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSettlementTempData                                 SettleSyncData;                                          // 0x07C0(0x00D8) NativeAccessSpecifierPublic
		int32_t                                                    PlayerRank;                                              // 0x0898(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsAce;                                                   // 0x089C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMVP;                                                    // 0x089D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SC3M[0x1];                                   // 0x089E(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsVictory;                                               // 0x089F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MvpScore;                                                // 0x08A0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      KDA;                                                     // 0x08A4(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ResurrectionTimes;                                       // 0x08A8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CharacterExp;                                            // 0x08AC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            CharacterExpReason;                                      // 0x08B0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GainCombatScore;                                         // 0x08C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AccountExp;                                              // 0x08C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, int32_t>                                     WeaponExps;                                              // 0x08C8(0x0050) NativeAccessSpecifierPublic
		int32_t                                                    Zomborg;                                                 // 0x0918(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ZomborgExtra;                                            // 0x091C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<ESCMPlayerPunishType>                               SettlePunishTypes;                                       // 0x0920(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            StrategyConditionIDs;                                    // 0x0930(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SettlementDisplayStrategyID;                             // 0x0940(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YF2D[0x3];                                   // 0x0944(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESCMPlayerOutPath                                          PlayerOutPath;                                           // 0x0947(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            UsedCharacterIDs;                                        // 0x0948(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPresettling;                                            // 0x0958(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasSettled;                                             // 0x0959(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPlayerBattleEnd;                                      // 0x095A(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EKQC[0x1];                                   // 0x095B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InteractValue;                                           // 0x095C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastInteractTime;                                        // 0x0960(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageFactor;                                            // 0x0964(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleProbability;                                      // 0x0968(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsTimeoutPlayer;                                        // 0x096C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowBattlePrompt : 1;                                   // 0x096D(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JJ0S[0x22];                                  // 0x096E(0x0022) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FExposeLocationMap                                  ExposeLocationMap;                                       // 0x0990(0x0058) Protected, NativeAccessSpecifierProtected
		TArray<class ASolarPlayerState*>                           ExposeLocationArray;                                     // 0x09E8(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             PlayerLocation;                                          // 0x09F8(0x000C) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ABKI[0x4];                                   // 0x0A04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarPlayerState* ExposeTo;                                                // 0x0A08(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RY4O[0x8];                                   // 0x0A10(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SkydivingLeaderPosInTeam;                                // 0x0A18(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              SkydivingFollowFormationPos;                             // 0x0A1C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_08TZ[0x7];                                   // 0x0A1D(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESkydivingState                                            SkydivingState;                                          // 0x0A24(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UXLC[0x3];                                   // 0x0A25(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarAchievementComponent* AchievementComponent;                                    // 0x0A28(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BWQY[0x8];                                   // 0x0A30(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            PreCompletedAchievementIDs;                              // 0x0A38(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    PlayerLevel;                                             // 0x0A48(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PlayerExperience;                                        // 0x0A4C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HistoryShieldUpgradeItemNum;                             // 0x0A50(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8K9T[0x1C];                                  // 0x0A54(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASpatializeInfoTrack* TrackInfo;                                               // 0x0A70(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TrackMaxRevealDistance;                                  // 0x0A78(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EAppLifetimeState                                          AppLifetimeState;                                        // 0x0A7C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZE8J[0x3];                                   // 0x0A7D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TailFlameId;                                             // 0x0A80(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WP35[0x4];                                   // 0x0A84(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarTeamInfo* Team;                                                    // 0x0A88(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3ADU[0x10];                                  // 0x0A90(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSolarBattleWeaponData>                      BattleWeaponDataArray;                                   // 0x0AA0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AHeroPickInfo* HeroPickInfo;                                            // 0x0AB0(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		bool WillFollowMovementOfSkydivingLeader();
		void UpgradePlayerLevel(int32_t LevelAdded);
		void UpdateCurUseCharacterData(int32_t InCharacterId);
		void UpdateCurUseCharacterAndSkinData(int32_t InCharacterId, int32_t InSkinID);
		void UpdateAICharacterDataList(const struct FBattleCharacterData& InCharacterData);
		void SyncMarkedWorldData(const struct FWorldMarkData& InMarkData);
		void SynchronizePlayerStateInGame(EPlayerStateInGame InEPlayerStateInGame, bool InIfOrNot);
		void SynchronizeCharacterStateInGame(ECharacterStateInGame InECharacterStateInGame, bool InIfOrNot);
		void StatVehicleDriveTypeLuaCall(int32_t DriveType);
		void StatVehicleDriveType(int32_t DriveType);
		void ShowTeammatesHUD(TArray<class ASolarPlayerState*> TeammateStates, class ASolarPlayerState* InSpectateTargetPlayerState);
		void SetRoleUltimateSkillCDState(int32_t NewState);
		void SetRoleID(int32_t InRoleID);
		void SetPlayerNetStateInGame(EPlayerNetStateInGame InPlayerNetStateInGame);
		void SetIsTimeoutPlayer(bool InValue);
		void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);
		void ServerUpdateInputType(ECommonInputType NowInputType);
		void ServerUnexposeLocationToOtherOnce(class ASolarPlayerState* OtherPS);
		void ServerUnexposeLocationToOther(class ASolarPlayerState* OtherPS);
		void ServerPlayerSelectSkin(int32_t InCharacterId, int32_t InSkinID);
		void ServerExposeLocationToOther(class ASolarPlayerState* OtherPS);
		void ServerChangeRoleID(int32_t InRoleID);
		void ReviseWeaponExp(int32_t weaponid, int32_t WeaponExp, int32_t CurLevel, int32_t CurExp);
		void RequestServerUpdateInputType(ECommonInputType NowInputType);
		void ReceiveTeamIdReplicated();
		void ReceiveTalentStateSet(ETalentState InState);
		void ReceiveTalentIDReplication(EPlayerStateRepType RepType, class APlayerState* ClientOwnerPS);
		void ReceiveSideReplicatedAfter();
		void ReceivePostInitializeComponents();
		bool ReceiveGold(int32_t InReceivedGold, bool NeedSyncToServer, bool NeedSyncToDS);
		void ReceiveClientInitialize(class AController* C);
		void PlayerSelectSkin(int32_t InCharacterId, int32_t InSkinID);
		void PlayerSelectHero(int32_t InCharacterId, int32_t InSkinID, bool bConfirm);
		bool PlayerIsResurrecting();
		bool PlayerHasLogin();
		bool PlayerCanRebirthByReviveItem(bool bCheckItemNum, bool bIncludingReviving);
		bool PlayerCanRebirthByBuyResurrection();
		bool PlayerCanRebirthByAllMeans();
		bool PlayerCanRebirthBlueprint();
		bool PlayerCanRebirth();
		bool PlayerCanBuyRescue();
		void OnUpdatedPlayerStateLoginData();
		void OnTeammatePlayerStateRepDelegate__DelegateSignature();
		void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(unsigned char InPosInTeam, bool InIsLastOne);
		void OnTeamInfoChanged__DelegateSignature(class ASolarTeamInfo* PreviousTeam, class ASolarTeamInfo* NowTeam);
		void OnStopReceiveExposedLocation(class ASolarPlayerState* OtherPS);
		void OnStartResurrectProgress(int32_t InTextId, float InDuration, float InRemaining, bool bShowCancel);
		void OnSpectateTargetChanged(class ASolarPlayerState* InOldTarget, class ASolarSpectateInfo* InSpectateInfo);
		void OnSpectateInfoRep__DelegateSignature(class ASolarSpectateInfo* SpectateInfo);
		void OnRequestStartResurrect(class ADeathTreasureBox* InDeatbox);
		void OnRequestCancelResurrect(class ADeathTreasureBox* InDeatbox);
		void OnReplayRecordingStarted();
		void OnRep_UserId();
		void OnRep_TotalReceivedDamage();
		void OnRep_TeammatesState();
		void OnRep_TeamLastVehicleLocation();
		void OnRep_TeamChanged(class ASolarTeamInfo* PreviousTeam);
		void OnRep_TalentID();
		void OnRep_TailFlameId();
		void OnRep_SpectateInfo();
		void OnRep_SkydivingState();
		void OnRep_SkydivingLeaderPosInTeam(int32_t OldValue);
		void OnRep_SkinId();
		void OnRep_Side(const class FString& OldSide);
		void OnRep_SelfLastVehicleLocation();
		void OnRep_RTCType();
		void OnRep_RoleID();
		void OnRep_ReviveItemNum();
		void OnRep_ReviveCountByItem();
		void OnRep_RepliableMsg();
		void OnRep_PosInTeam(unsigned char InLastPosInTeam);
		void OnRep_PlayerLocation();
		void OnRep_PlayerLevel();
		void OnRep_PlayerExp();
		void OnRep_NickName(const class FString& OldNickName);
		void OnRep_NetStateInGame();
		void OnRep_MaxHealth();
		void OnRep_MarkedPointInNavMap();
		void OnRep_KillNum();
		void OnRep_Job();
		void OnRep_IsOBPlayer();
		void OnRep_InputType();
		void OnRep_HeroPickInfo();
		void OnRep_HasSettled();
		void OnRep_Gold();
		void OnRep_ExposeLocationArray();
		void OnRep_CurShieldInfo(const struct FShieldInfo& InLastShieldInfo);
		void OnRep_CurrentPlayerStateInGame(unsigned char InLastPlayerStateInGame);
		void OnRep_CurrentHealth();
		void OnRep_CurrentCharacterStateInGame(unsigned char InLastCharacterStateInGame);
		void OnRep_ClanId();
		void OnRep_ClanFlag();
		void OnRep_CharacterId();
		void OnRep_BattleVoiceId();
		void OnRep_BagId();
		void OnRep_AssistNum();
		void OnRep_AccountFlag();
		void OnRefreshReviveInfo();
		void OnReceiveExposedLocation(class ASolarPlayerState* OtherPS, const struct FVector& Location);
		class FString OnPlayerUpgrade(int32_t NewLevel, bool bFromServer);
		void OnPlayerUpdateStatData(EStatisticsType InType);
		void OnPlayerGainExperience(int32_t GainedExp, int32_t CurrentExp, int32_t TotalExp, EExpBehaviorType BehaviorType);
		void OnPlayerChangedGolds(EPlayerChangedGoldType ChangedGoldType, int32_t CostGoldNum, EPlayerChangedGoldResult CostResult);
		void OnOtherPlayerStopSpectateMyTeam(class ASolarSpectateInfo* InSpectateInfo);
		void OnOtherPlayerStopSpectateMe(class ASolarPlayerState* InSpectatorPlayerState, class ASolarSpectateInfo* InSpectateInfo);
		void OnOtherPlayerBeginSpectateMe(class ASolarPlayerState* InSpectatorPlayerState, class ASolarSpectateInfo* InSpectateInfo);
		void OnOBPlayerRepDelegate__DelegateSignature(bool bIsOBPlayer);
		void OnInputTypeChanged(ECommonInputType NowInputType);
		void OnDamageChanged__DelegateSignature(float Damage);
		void OnClientSpectateTargetChanged(class ASolarPlayerState* InOldTarget, class ASolarSpectateInfo* InSpectateInfo);
		void OnCancelResurrectProgress(int32_t InTextId);
		void NotifyUpdateTeamMateLevelUI();
		void NotifyAddExperience(int32_t ExpAdded);
		void NewMarkedWorldDataInClient(int32_t InPosInTeam, const struct FWorldMarkData& InMarkData);
		bool NeedPerformSpectateInfoOnSimulate();
		int32_t LuaGetExpFromWeaponImplementation(EExpBehaviorType InBehaviorType, int32_t InParamOne, int32_t InParamTwo, float InDamage);
		void LeaveTeam();
		void JoinTeamByPolicies(TArray<ETeamType> JoinPolicies);
		void JoinTeamByName(const class FString& InTeamName);
		void JoinTeamByID(unsigned char InTeamId);
		void JoinTeam(class ASolarTeamInfo* InTeam);
		bool IsWaitingLogin();
		bool IsUsingClanForFlag();
		bool IsUnfollowShortcutEnabled();
		bool IsTimeOutPlayer();
		bool IsTeammateWithLocalOrSpecTargetPlayer();
		bool IsTeammateWith(class ASolarPlayerState* Other);
		bool IsSpectatingOtherPlayer();
		bool IsSkydivingLeader();
		bool IsSkydivingCompleted();
		bool IsSkydiving();
		bool IsSameTeamWithLocalPlayer();
		bool IsReconnecting();
		bool IsPreStartSkydiving();
		bool IsPlayerWaitingForTeammatesHelp();
		bool IsPlayerTeam();
		bool IsPlayerOnline();
		bool IsPlayerOffline();
		bool IsPlayer();
		bool IsOutBySelf();
		bool IsOfflinePlayer();
		bool IsOBPlayer();
		bool IsMySkydivingLeader(int32_t LeaderPosInTeam);
		bool IsMVP();
		bool IsMaxLevelInGame();
		bool IsLocalPlayerCameraFocusingMe();
		bool IsKickOutByServer();
		bool IsBuyingResurrection();
		bool IsBeingSpectated();
		bool IsAIPlayer();
		bool IsACheater();
		void InitInputType();
		void IncreaseReviveCount();
		void HideTeammatesHUD(TArray<class ASolarPlayerState*> TeammateStates);
		bool HasSkydivingLeader();
		bool HasSettled();
		bool HasCheatSelf();
		int32_t GetWeaponSettlmentExp(int32_t weaponid);
		int32_t GetVehicleSkinID(int32_t VehicleID);
		class FString GetUserID();
		TArray<int32_t> GetUsableTailFlameIds();
		void GetUsableSkinsForCharacter(int32_t InCharacterId, TArray<int32_t>* Result, bool* bCharacterUsable);
		TArray<int32_t> GetUsableJetpackIds();
		float GetTotalReceivedDamage();
		float GetTotalCausedDamage();
		unsigned char GetTeamRank();
		void GetTeammatePlayers(bool bIncludingSelf, TArray<class ASolarPlayerState*>* OutTeammates);
		class ASolarPlayerState* GetTeammatePlayerByPosInTeam(int32_t InPosInTeam);
		int32_t GetTeammateNum(bool bIncludeSelf);
		unsigned char GetTeamID();
		class USolarGameModeStatisticsComponent* GetStatComponent();
		class ASolarSpectateInfo* GetSpectateTargetSpectateInfo();
		class ASolarPlayerState* GetSpectateTargetPlayerState();
		class ASolarCharacter* GetSpectateTargetCharacter();
		class ASolarSpectateInfo* GetSpectateInfo();
		class ASolarReplayPlayerController* GetSolarReplayPlayerController();
		class ASolarPlayerController* GetSolarPlayerController();
		class ASolarCharacter* GetSolarCharacter();
		class ASolarBotAIController* GetSolarBotAIController();
		int32_t GetRankScore();
		int32_t GetRankLevelID();
		class ASolarCharacter* GetPossessedCharacter();
		class UPlayerStatisticsData* GetPlayerStatData();
		EPlayerNetStateInGame GetPlayerNetState();
		class FString GetPlayerNameWithoutUID();
		TArray<struct FMedalInfo> GetMedalInfo();
		int32_t GetMaxShieldMatCountToDeathbox();
		class ASolarPlayerState* GetLocalPlayerState();
		class ASolarPlayerState* GetLocalOrSpecTargetPlayerState();
		class ASolarCharacter* GetLocalOrSpecTargetCharacter();
		class ASolarCharacter* GetLocalCharacter();
		int32_t GetLegendRank();
		class ASolarPlayerState* GetKillerPlayerState();
		bool GetIsPlayerBattleEnd();
		float GetExpSettleModePunishRatio();
		int32_t GetExpItemCount(int32_t InLevelGap);
		int32_t GetExpByBehavior(EExpBehaviorType InBehaviorType, int32_t InParamOne, int32_t InParamTwo, float InDamage);
		int32_t GetDriveVehicleID();
		struct FVector GetDeathBoxLocation();
		float GetCurrentTalentCDDuration();
		float GetCurrentTalentActiveDuration();
		void GetCurrentSkinForCharacter(int32_t InCharacterId, bool* bCharacterUsable, int32_t* OutSkinId);
		struct FVector GetCharacterLocation();
		TArray<class FString> GetBuyResurrectionSavedTeammateIDArr();
		TArray<int32_t> GetBuyResurrectionSavedTeammateBonusArr();
		bool CostGold(int32_t InCostedGold, bool NeedSyncToServer);
		void ClientNotifyKillNumChanged(int32_t KillNumber, int32_t SpreesNum);
		void ClientImmediatelyTeammatesSkinID(TArray<class ASolarPlayerState*> InTeammates, TArray<int32_t> InSkinID);
		void ClearTeammatesMark();
		bool CheckIfTeamLastVehicleLocationValid();
		bool CheckIfTeamIdValid();
		bool CheckIfSelfLastVehicleLocationValid();
		bool CheckIfPosInTeamValid();
		bool CheckIfMarkedPointInNavMapValid();
		bool CheckIfInactive();
		bool CheckIfDataValid();
		bool CheckIfBeInSpecifiedPlayerState(EPlayerStateInGame InEPlayerStateInGame);
		bool CheckIfBeInSpecifiedCharacterState(ECharacterStateInGame InECharacterStateInGame);
		bool CheckIfBattleVoiceIdValid();
		bool CheckGoldIsEnough(int32_t InCostedGold);
		void ChangeTailFlameId(int32_t InTailFlameId);
		void ChangeBagById(int32_t InBagId);
		bool CanReviveItemPutInDeathBox();
		bool CanAcceptSkydivingLeaderTransferRequest(class ASolarPlayerState* RequesterPlayerState);
		bool CanAcceptSkydivingFollowRequest(class ASolarPlayerState* RequesterPlayerState);
		bool CanAcceptSkydivingFollowInvitation(class ASolarPlayerState* InviterPlayerState);
		int32_t CalculateZomborg();
		float CalculateCharacterExp();
		float CalculateAccountExp();
		void AssignPosInTeam();
		void AddMarkedWorldData(int32_t InPosInTeam, const struct FWorldMarkData& InMarkData);
		void AddExperience(int32_t InExp, EExpBehaviorType InType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMPlayerState
	 * Size -> 0x0070 (FullSize[0x0B28] - InheritedSize[0x0AB8])
	 */
	class ASCMPlayerState : public ASolarPlayerState
	{
	public:
		ESCMPlayerState                                            BattleState;                                             // 0x0AB8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMPlayerOutType                                          PlayerOutType;                                           // 0x0AB9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMPlayerType                                             PlayerType;                                              // 0x0ABA(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESCMPlayerGameRole                                         PlayerGameRole;                                          // 0x0ABB(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JNVZ[0x14];                                  // 0x0ABC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSideChange;                                            // 0x0AD0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSCMReplicateHostData>                       ReplicateData;                                           // 0x0AE0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X8DV[0x10];                                  // 0x0AF0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReviveStartTime;                                         // 0x0B00(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2H5S[0x4];                                   // 0x0B04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarPlayerState* RevivingTeammatePS;                                      // 0x0B08(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OESE[0x10];                                  // 0x0B10(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarTaskComponent* TaskSystem;                                              // 0x0B20(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateTaskInfo(const struct FTaskUpdateInfo& InTaskInfo);
		void UpDateDataManager(TArray<struct FSCMReplicateHostData> InReplicateData, bool bInit);
		void ServerBeginSpectate(class ASCMPlayerState* TargetPlayer);
		void RequestStartGame();
		void RequestSetWeaponTypeAvailableLuaCall(EWeaponUIType WeaponUIType, bool bIsAvailable);
		void RequestSetWeaponTypeAvailable(EWeaponUIType WeaponUIType, bool bIsAvailable);
		void RequestSetWeaponAvailableLuaCall(int32_t weaponid, bool bIsAvailable);
		void RequestSetWeaponAvailable(int32_t weaponid, bool bIsAvailable);
		void RequestSetVehicleTypeAvailableLuaCall(int32_t VehicleTypeID, bool bIsAvailable);
		void RequestSetVehicleTypeAvailable(int32_t VehicleTypeID, bool bIsAvailable);
		void RequestSetVehicleClassAvailableLuaCall(EVehicleClass VehicleClass, bool bIsAvailable);
		void RequestSetVehicleClassAvailable(EVehicleClass VehicleClass, bool bIsAvailable);
		void RequestSetUserSettingLuaCall(const class FString& Name, const class FString& Value);
		void RequestSetUserSetting(const class FString& Name, const class FString& Value);
		void RequestSetRoomPoolPrizeTypeLuaCall(int32_t TypeID);
		void RequestSetRoomPoolPrizeType(int32_t TypeID);
		void RequestSetRoomPasswdLuaCall(const class FString& Passwd);
		void RequestSetRoomPasswd(const class FString& Passwd);
		void RequestSetRoomNameLuaCall(const class FString& Name);
		void RequestSetRoomName(const class FString& Name);
		void RequestSetRoomLevelLimitLuaCall(int32_t Level);
		void RequestSetRoomLevelLimit(int32_t Level);
		void RequestSetInviteEnableLuaCall(bool bEnable);
		void RequestSetInviteEnable(bool bEnable);
		void RequestSetExchangeEnableLuaCall(bool bEnable);
		void RequestSetExchangeEnable(bool bEnable);
		void RequestKickPlayerOut(class ASCMPlayerState* Player);
		void RequestExchangeSidesAndPos(class ASCMPlayerState* PlayerA, class ASCMPlayerState* PlayerB);
		void RequestChangeSide(class ASCMPlayerState* Player, const class FString& NewSide, int32_t NewPosInTeam);
		void RequesJoinOB(class ASCMPlayerState* Player);
		void OnUpdateLifeTime();
		void OnRep_RevivingTeammatePS(class ASolarPlayerState* LastRevivingTeammatePS);
		void OnRep_BattleState();
		void OnPlayerKilled(class ASCMPlayerState* KillerPlayer, struct FSolarPointDamageEvent* InDamageEvent, class AActor* InDamageCauser);
		void OnPlayerKill(class ASCMPlayerState* KilledPlayer, struct FSolarPointDamageEvent* InDamageEvent, class AActor* InDamageCauser);
		void NotifyUpdateCGMData(const class FString& InDataName);
		void NotifyClientUpdateDataManager(bool bInit);
		bool NeedConsiderRepData();
		bool IsPreJoinPlayer();
		void InitTaskInfo(const struct FBattlePassInfo& InTaskInfo);
		TArray<struct FSCMReplicateHostData> GetReplicateDataArray();
		TArray<class ASCMPlayerState*> GetMySidePlayerList();
		TArray<class ASCMPlayerState*> GetMySideJobPlayerList();
		void CanPlayerBattle();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCMSettlementPlayerState
	 * Size -> 0x0000 (FullSize[0x0B28] - InheritedSize[0x0B28])
	 */
	class ASCMSettlementPlayerState : public ASCMPlayerState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ScopeFullScreenWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UScopeFullScreenWidget : public USolarUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ScoutEnemyConfig
	 * Size -> 0x00C0 (FullSize[0x00F0] - InheritedSize[0x0030])
	 */
	class UScoutEnemyConfig : public UDataAsset
	{
	public:
		bool                                                       bShowDebug;                                              // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AWUJ[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ScoutMaxNum;                                             // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TimeToScanEffect;                                        // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDetectionDistance;                                    // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           BondingBoxExtent;                                        // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSupportHipFire;                                         // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8WY4[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EWeaponScopeType, float>                              BoxScaleRatioByScope;                                    // 0x0050(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<EObjectTypeQuery>                                   TargetOccBlockTypes;                                     // 0x00A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               BlockWithMyTags;                                         // 0x00B0(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               BlockWithEnemyTags;                                      // 0x00D0(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ScoutEnemyObject
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UScoutEnemyObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_QXTU[0x48];                                  // 0x0028(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UScoutEnemyConfig* ScoutEnemyConfig;                                        // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VKJL[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCustomGameState
	 * Size -> 0x0118 (FullSize[0x0580] - InheritedSize[0x0468])
	 */
	class ASCustomGameState : public ASBattleGameState
	{
	public:
		unsigned char                                              UnknownData_6VBK[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESCMInGameState                                            InGameState;                                             // 0x0470(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XFD4[0x1F];                                  // 0x0471(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCustomRoomData                                     CustomRoomData;                                          // 0x0490(0x0078) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		bool                                                       bCustomRoomMode;                                         // 0x0508(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X89W[0x7];                                   // 0x0509(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AGameManagerBase*>                            GameManagers;                                            // 0x0510(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AGameDataManager* GameDataManager;                                         // 0x0520(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AGameJobManager* GameJobManager;                                          // 0x0528(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_55YG[0x10];                                  // 0x0530(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCGMManagerConfigComponent* ManagerConfigComponent;                                  // 0x0540(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ACGFormula* InsFormula;                                              // 0x0548(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASolarPlayerState*>                           PlayersWithTrackingAbility;                              // 0x0550(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASpatializeInfoTrack*>                        TrackInfos;                                              // 0x0560(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BFQ3[0x10];                                  // 0x0570(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetRoomPoolPrizeType(int32_t TypeID);
		void SetRoomPasssd(const class FString& Passwd);
		void SetRoomName(const class FString& Name);
		void SetRoomLevelLimit(int32_t Level);
		void SetRoomEnableSwapPos(bool bIsEnabled);
		void SetRoomEnableInvite(bool bIsEnabled);
		void OnTournamentBattleEnd();
		void OnSidePosInTeamChange(const class FString& SideName);
		void OnSideListPostChanged();
		void OnSideListChange(TArray<struct FSCMSideData> SideList);
		void OnServerCustomRoomDataReady();
		void OnRep_InGameState();
		void OnRep_GameManagerList();
		void OnRep_GameJobManager();
		void OnRep_GameDataManager();
		void OnRep_CustomRoomData();
		void OnPlayerBattleStateChange(class ASCMPlayerState* PlayerState);
		void OnOBPlayerListChange();
		void OnDataManagerPrepare();
		void OnCustomRoomDataChange(const struct FCustomRoomData& InCustomRoomData);
		void NotifyVipPlayerJoin(int32_t FlagID, unsigned char VipType, const class FString& NickName, bool bCustomRoom, bool bInTournament);
		void NotifyRoomDataChanged();
		void MultiClientAllManagersOnRepDelegate__DelegateSignature();
		bool IsNeedCalculateTournamentPoints();
		bool IsInTournament();
		bool IsCustomRoomMode();
		bool IsAtNonSettlementStage();
		void InitKnockoutPointParams(struct FKnockoutParams* InParams);
		struct FTournamentData GetTournamentData();
		class UCGMManagerConfigComponent* GetManagerConfigComponent();
		class ACGFormula* GetFormula();
		struct FCustomRoomData GetCustomRoomData();
		class UCGMGameplayConfig* GetCGMGameplayConfig();
		void ClearCustomRoomData();
		int32_t CalculateKnockoutPoints(int32_t InTeamRank, int32_t InKillNum, float InTotalDamage, float InTotalDamageTaken);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCSettlementGameState
	 * Size -> 0x0000 (FullSize[0x0580] - InheritedSize[0x0580])
	 */
	class ASCSettlementGameState : public ASCustomGameState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameModeWeaponAction
	 * Size -> 0x00D8 (FullSize[0x0108] - InheritedSize[0x0030])
	 */
	class USolarGameModeWeaponAction : public UBlueprintAsyncActionBase
	{
	public:
		class FScriptMulticastDelegate                             OnCompleted;                                             // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ICFH[0xC8];                                  // 0x0040(0x00C8) MISSED OFFSET (PADDING)

	public:
		class USolarGameModeWeaponAction* STATIC_SetCharacterWeaponBySeq(class UObject* WorldContextObject, class ASolarCharacter* TargetCharacter, bool bDestroyPrevWeapon, EWeaponSlotType Slot, int32_t ItemID);
		void OnWeaponCreated(EWeaponSlotType SlotIndex, class ASolarPlayerWeapon* WeaponPtr, class USolarBackpackComponent* SolarBackpackComponent);
		void CreateWeaponAsync(EWeaponSlotType SlotIndex, bool bDestroyPrevWeapon, const struct FSolarItemData& InItemData, class USolarBackpackComponent* InSolarBackpackComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCustomGameModeLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USCustomGameModeLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_ValidateAirline(class UObject* InWorldContext, class FString* OutMsg, const struct FVector& InHalfBufferExtent, float DrawDebugTime);
		bool STATIC_UnBindPlayerReconnectedGameEvent(class UObject* WorldContextObject, const class FScriptDelegate& Deletage);
		bool STATIC_UnbindDataChangeEventVector3(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& Delegate);
		bool STATIC_UnbindDataChangeEventString(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& Delegate);
		bool STATIC_UnbindDataChangeEventInt(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& Delegate);
		bool STATIC_UnbindDataChangeEventFloat(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& Delegate);
		bool STATIC_UnbindDataChangeEventByte(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& Delegate);
		bool STATIC_UnbindDataChangeEventBool(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& Delegate);
		void STATIC_TryActivateAbilityByTag(class USolarAbilitySystemComponent* SolarAbilitySystemComponent, const struct FGameplayTag& AbilityTag, bool bAllowRemoteActivation);
		bool STATIC_SwitchPlayerSideJob(class UObject* WorldContextObject, class ASCMPlayerState* PlayerA, class ASCMPlayerState* PlayerB);
		bool STATIC_SwitchPlayerPosInTeam(class UObject* WorldContextObject, class ASCMPlayerState* PlayerA, class ASCMPlayerState* PlayerB);
		bool STATIC_SwitchOBPlayerWithPlayer(class UObject* WorldContextObject, class ASCMPlayerState* OBPlayer, class ASCMPlayerState* Player);
		void STATIC_StopSpectateOtherPlayer(class ASCMPlayerState* Player);
		void STATIC_SpawnVehicleByIDAtTheSpecified(class UObject* WorldContextObject, int32_t ID, const struct FTransform& Transform);
		void STATIC_SideLogGameStateStatistics(class UObject* WorldContextObject, const class FString& LogName, const class FString& SideName, TMap<class FString, class FString> LogValues);
		void STATIC_SideEnterHeroPick(class UObject* WorldContextObject, const class FString& SideName);
		bool STATIC_ShowTargetSettlementPage(class UObject* WorldContextObject);
		class UUserWidget* STATIC_ShowSolarWidget(class UObject* WorldContextObject, class UClass* WidgetClass, EUIRoot UILayer, bool bInShowPersistent);
		bool STATIC_ShowNextSettlementPage(class UObject* WorldContextObject);
		void STATIC_ShowGameNoticeCustom(class UObject* WorldContextObject, const class FString& NoticeText, ECustomNoticeType NoticeType, class UClass* NoticeClass, float NoticeTime, ECustomNoticeColor NoticeColor, class UPaperSprite* NoticeIcon);
		void STATIC_ShowGameNoticeByID(class UObject* WorldContextObject, int32_t NoticeId);
		bool STATIC_SetWeaponParts(class UObject* WorldContextObject, class ASolarWeapon* TargetWeapon, const struct FWeaponPartsData& Parts);
		void STATIC_SetupBotDifficulty(TArray<class ASolarBotAIController*> BotPlayers, int32_t Difficulty);
		void STATIC_SetSpectateConditions(class ASolarPlayerState* Player, const struct FSpectateConditions& Conditions);
		bool STATIC_SetPlayerDataVector3(class ASCMPlayerState* PlayerState, const class FString& DataName, const struct FVector& InValue);
		bool STATIC_SetPlayerDataString(class ASCMPlayerState* PlayerState, const class FString& DataName, const class FString& InValue);
		bool STATIC_SetPlayerDataInt(class ASCMPlayerState* PlayerState, const class FString& DataName, int32_t InValue);
		bool STATIC_SetPlayerDataFloat(class ASCMPlayerState* PlayerState, const class FString& DataName, float InValue);
		bool STATIC_SetPlayerDataByte(class ASCMPlayerState* PlayerState, const class FString& DataName, unsigned char InValue);
		bool STATIC_SetPlayerDataBool(class ASCMPlayerState* PlayerState, const class FString& DataName, bool InValue);
		void STATIC_SetModifyColorGrading(bool InEnable, const struct FLinearColor& InGain, const struct FLinearColor& InSaturation, const struct FLinearColor& InContrast);
		bool STATIC_SetDataVector3(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const struct FVector& InValue);
		bool STATIC_SetDataString(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FString& InValue);
		bool STATIC_SetDataInt(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, int32_t InValue);
		bool STATIC_SetDataFloat(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, float InValue);
		bool STATIC_SetDataByte(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, unsigned char InValue);
		bool STATIC_SetDataBool(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, bool InValue);
		bool STATIC_SetBattleUISubItemVisibilityBySabotageGameMode(class UObject* WorldContextObject);
		void STATIC_ServerSetCustomSpawnBlacklist(class UObject* WorldContextObject, TArray<int32_t> InWeaponBlacklist, TArray<int32_t> InWeaponWhitelist, TArray<int32_t> InVehicleBlacklist, TArray<int32_t> InVehicleWhitelist);
		void STATIC_SaveGame(class UObject* WorldContextObject);
		bool STATIC_ResurrectCharacter(class UObject* WorldContextObject, class ASolarCharacter* Character, const struct FTransform& Transform, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons, EPlayerResurrectType PlayerResurrectType);
		void STATIC_RenumberAllPlayerPosInTeam(class UObject* WorldContextObject);
		void STATIC_RemoveSpecificRankChangeEvent(class UObject* WorldContextObject, const class FString& RankName, int32_t TargetRank, const class FScriptDelegate& SpecificRankChangeEvent);
		void STATIC_RemoveRankListChangeEvent(class UObject* WorldContextObject, const class FString& RankName, struct FSCMRankEventHandle* RankListEventHandle);
		void STATIC_RemovePlayerData(class ASCMPlayerState* PlayerState, const class FString& DataName);
		void STATIC_RemoveHostRankChangeEvent(class UObject* WorldContextObject, const class FString& RankName, const class FString& HostID, ESCMHostType HostType, const class FScriptDelegate& HostRankChangeEvent);
		void STATIC_RemoveGameplayCue(class UAbilitySystemComponent* AbilitySystemComponen, const struct FGameplayTag& GameplayCueTag);
		void STATIC_RemoveData(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName);
		class UActorMarkBase* STATIC_RegisterWorldMarkOnPos(class UObject* WorldContextObject, class UClass* InActorMarkClass, const struct FVector& Pos);
		bool STATIC_PreAssignPlayerSideJob(class UObject* WorldContextObject, class ASCMPlayerState* Player, const class FString& InSide, const class FString& InJob, int32_t PosInTeam);
		bool STATIC_PlusData(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, float InValue);
		void STATIC_PlayersSettlement(class UObject* WorldContextObject, TArray<class ASolarPlayerState*> TargetPlayers);
		void STATIC_PlayerReportServer(class UObject* WorldContextObject, class ASolarPlayerState* PS, EStatisticsType StatisticsType, int32_t InValue, bool IsIncrease);
		void STATIC_PlayerOutBySelf(class UObject* WorldContextObject, ESCMPlayerOutPath InPath);
		void STATIC_PlayerLogGameStateStatistics(class UObject* WorldContextObject, const class FString& LogName, class ASCMPlayerState* PlayerState, TMap<class FString, class FString> LogValues, bool IncludeStatisticsData);
		void STATIC_PlayerEnterHeroPick(class UObject* WorldContextObject, class ASCMPlayerState* Player);
		void STATIC_PlaceCharacter(class UObject* WorldContextObject, class ASolarCharacter* Character, const struct FTransform& Transform, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons);
		void STATIC_NotifyPlayerCheat(class UObject* InWorldContext, class ASCMPlayerState* InPlayer);
		void STATIC_NotifyPlayerAbnormal(class UObject* InWorldContext, class ASCMPlayerState* InPlayer);
		void STATIC_NotifyAIMgrSpawnFinished(class UObject* WorldContextObject);
		void STATIC_NotifyAIMgrBattleStarted(class UObject* WorldContextObject);
		void STATIC_LetPlayerOut(class UObject* WorldContextObject, TArray<class ASCMPlayerState*> TargetPlayers, ESCMPlayerOutType OutType, bool bReportSettleReward, bool bGoSpectator, bool bRemoveSide, const class FText& OutReason);
		void STATIC_LetBattleEnd(class UObject* WorldContextObject, EBattleEndType BattleEndType);
		void STATIC_LetAllPlayersOut(class UObject* WorldContextObject, EBattleEndType BattleEndType);
		bool STATIC_IsSideCanJoinAI(class UObject* WorldContextObject, const class FString& SideName);
		bool STATIC_IsPlayingReplay(class UObject* WorldContextObject);
		bool STATIC_IsMatching(class ASCMPlayerState* InPS);
		bool STATIC_IsInPreparation(class UObject* WorldContextObject);
		bool STATIC_IsEnablePlayerUpgrade(class UObject* WorldContextObject);
		bool STATIC_IsEnableAITeamManager(class UObject* WorldContextObject);
		bool STATIC_IsCustomRoomMode(class UObject* WorldContextObject);
		bool STATIC_InsertWidgetToMapUISlot(class UObject* WorldContextObject, class UPanelSlot** OutResultSlot, class UWidget* InChildWidget, const class FName& PanelName, bool bReplaceOldWidget);
		bool STATIC_InsertWidgetToBattleUISlot(class UObject* WorldContextObject, class UPanelSlot** OutResultSlot, class UWidget* InChildWidget, const class FName& PanelName, bool bReplaceOldWidget);
		bool STATIC_InsertWidgetToBackpackUISlot(class UObject* WorldContextObject, class UPanelSlot** OutResultSlot, class UWidget* InChildWidget, const class FName& PanelName, bool bReplaceOldWidget);
		void STATIC_InitializeSkydivingRelatedAbilities(class ASolarCharacter* SolarCharacter);
		void STATIC_InitBotCruiseAIComp(class UAirlineCruiseComponent* AirlineCruiseComponent, class USBattleRoyaleGameModeAIComp* SBattleRoyaleGameModeAIComp);
		void STATIC_InitAirLineAndCrusiseInfo(TArray<class ASolarCharacter*> CharacterArr, const struct FTransform& StartTransform, class UAirlineCruiseComponent* AirlineCruiseComponent, float Speed, const struct FVector2D& StartPoint, const struct FVector2D& EndPoint, const struct FVector2D& CanParachutePoint, const struct FVector2D& ForceParachutePoint, bool bCreateRootIfNull, class UClass* DefaultCapsuleActorClass);
		void STATIC_InformBotVictory(TArray<class ASolarPlayerState*> VictoryTeamBots);
		bool STATIC_HasBlockBetweenUs(class AActor* A, class AActor* B, bool bIsVehicle);
		bool STATIC_GetWeaponParts(class UObject* WorldContextObject, class ASolarWeapon* TargetWeapon, struct FWeaponPartsData* Parts);
		class ASolarWeapon* STATIC_GetWeaponBySlot(class UObject* WorldContextObject, class ASolarCharacter* TargetCharacter, int32_t Slot);
		void STATIC_GetStartBattleRequestInfo(class UObject* WorldContextObject, struct FStartBattleRequestInfo* OutResult);
		bool STATIC_GetSpecificRankData(class UObject* WorldContextObject, const class FString& RankName, int32_t TargetRank, struct FSCMRankData* outData);
		int32_t STATIC_GetSolarItemManagerAirDropRelatedInfo(class UObject* WorldContextObject, class ASolarSafeArea* SafeArea, int32_t ChestID, TArray<struct FTransform>* TransformsArr);
		class UUserWidget* STATIC_GetSolarDisplayWidget(class UObject* WorldContextObject, class UClass* WidgetClass);
		class USolarSaveGame* STATIC_GetSaveGame(class UObject* WorldContextObject);
		class ASolarSafeArea* STATIC_GetSafeArea(class UObject* WorldContextObject);
		bool STATIC_GetRankListData(class UObject* WorldContextObject, const class FString& RankName, int32_t BeginRank, int32_t EndRank, TArray<struct FSCMRankData>* OutResult);
		void STATIC_GetPlayerStatisticData(class UObject* WorldContextObject, class ASolarPlayerState* PS, EStatisticsType StatisticsType, int32_t* OutValue);
		class ASCMPlayerState* STATIC_GetPlayerStateByCharacterOrController(class ASolarCharacter* Player, class ASCMPlayerController* Controller);
		class APawn* STATIC_GetPlayerPawn(class ASCMPlayerState* Player, EPlayerPawnType* OutType);
		bool STATIC_GetPlayerDataVector3(class ASCMPlayerState* PlayerState, const class FString& DataName, struct FVector* OutValue);
		bool STATIC_GetPlayerDataString(class ASCMPlayerState* PlayerState, const class FString& DataName, class FString* OutValue);
		bool STATIC_GetPlayerDataInt(class ASCMPlayerState* PlayerState, const class FString& DataName, int32_t* OutValue);
		bool STATIC_GetPlayerDataFloat(class ASCMPlayerState* PlayerState, const class FString& DataName, float* OutValue);
		bool STATIC_GetPlayerDataByte(class ASCMPlayerState* PlayerState, const class FString& DataName, unsigned char* OutValue);
		bool STATIC_GetPlayerDataBool(class ASCMPlayerState* PlayerState, const class FString& DataName, bool* OutValue);
		void STATIC_GetPlayerBattleRequestInfo(class UObject* WorldContextObject, const class FString& InSolarPlayerID, struct FPlayerBattleRequestInfo* OutResult);
		TArray<class ASCMPlayerState*> STATIC_GetOBPlayers(class UObject* WorldContextObject);
		class FString STATIC_GetNoticeFormatText(class UObject* WorldContextObject, int32_t InLocalizationID, TMap<class FString, class FString> FormatContext);
		int32_t STATIC_GetMatchRuleID(class UObject* WorldContextObject);
		TArray<int32_t> STATIC_GetMatchingMapIds(class UObject* WorldContextObject);
		bool STATIC_GetMapDataVector3(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FString& InKey, struct FVector* OutValue);
		bool STATIC_GetMapDataString(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FString& InKey, class FString* OutValue);
		bool STATIC_GetMapDataInt(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FString& InKey, int32_t* OutValue);
		bool STATIC_GetMapDataFloat(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FString& InKey, float* OutValue);
		bool STATIC_GetMapDataByte(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FString& InKey, unsigned char* OutValue);
		bool STATIC_GetMapDataBool(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FString& InKey, bool* OutValue);
		class ASCMPlayerState* STATIC_GetLocalPlayer(class UObject* WorldContextObject);
		class AGameJobManager* STATIC_GetJobManager(class UObject* WorldContextObject);
		void STATIC_GetJobList(class UObject* WorldContextObject, const class FString& Side, TArray<class FString>* OutResult);
		ESCMInGameState STATIC_GetInGameState(class UObject* WorldContextObject);
		int32_t STATIC_GetHostRank(class UObject* WorldContextObject, const class FString& RankName, ESCMHostType HostType, const class FString& HostID);
		void STATIC_GetHostKeyArray(class UObject* WorldContextObject, ESCMHostType HostType, TArray<class FString>* OutResult);
		class FString STATIC_GetGameModeParam(class UObject* WorldContextObject, const class FString& InParamKey);
		int32_t STATIC_GetGameModeID(class UObject* WorldContextObject);
		int32_t STATIC_GetGameModeGroupId(class UObject* WorldContextObject);
		class AGameManagerBase* STATIC_GetGameManager(class UObject* WorldContextObject, class UClass* ManagerClass);
		class ADefenderManager* STATIC_GetDefenderManager(class UObject* WorldContextObject, class UClass* ManagerClass);
		bool STATIC_GetDataVector3(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, struct FVector* OutValue);
		bool STATIC_GetDataString(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, class FString* OutValue);
		bool STATIC_GetDataInt(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, int32_t* OutValue);
		bool STATIC_GetDataFloat(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, float* OutValue);
		bool STATIC_GetDataByte(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, unsigned char* OutValue);
		bool STATIC_GetDataBool(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, bool* OutValue);
		class ACustomRoomManager* STATIC_GetCustomRoomManager(class UObject* WorldContextObject);
		struct FCustomRoomData STATIC_GetCustomRoomData(class UObject* WorldContextObject);
		float STATIC_GetCurBattleTime(class UObject* WorldContextObject);
		class UCGMGameplayConfig* STATIC_GetCGMGameplayConfig(class UObject* WorldContextObject);
		void STATIC_GetAvatarSkillInfoWithID(class UObject* WorldContextObject, int32_t CharacterId, struct FClassInfo* OutSkillInfo);
		void STATIC_GetAvatarPortraitWithID(class UObject* WorldContextObject, int32_t SkinId, class UTexture2D** OutAvatar);
		void STATIC_GetAvatarIconWithID(class UObject* WorldContextObject, int32_t InAvatarID, class UTexture2D** OutAvatar);
		void STATIC_GetAvatarIcon(class ASolarPlayerState* InPS, class UTexture2D** OutAvatar);
		bool STATIC_GetAILevelConfigCurrentMatch(class UObject* WorldContextObject, TMap<int32_t, int32_t>* AILevelConfig);
		int32_t STATIC_GetAIAccompanyTimelineID(class UObject* WorldContextObject);
		void STATIC_FindPlayerSideJob(class UObject* WorldContextObject, const class FString& InSide, const class FString& InJob, int32_t* OutCountCurrent, int32_t* OutCountMax, int32_t* OutMatchCountCurrent, int32_t* OutMatchCountMax);
		TArray<class ASCMPlayerState*> STATIC_FindPlayers(class UObject* WorldContextObject, TArray<unsigned char> TeamIds, TArray<class FString> TeamNames, TArray<ESCMPlayerState> States);
		class ASCMPlayerState* STATIC_FindPlayerByPlayerID(class UObject* WorldContextObject, const class FString& PlayerId);
		class ASCMPlayerState* STATIC_FindOBPlayerByPlayerID(class UObject* WorldContextObject, const class FString& PlayerId);
		TArray<class ASCMPlayerState*> STATIC_FindBotAI(class UObject* WorldContextObject, TArray<unsigned char> TeamIds, TArray<class FString> TeamNames, TArray<ESCMPlayerState> States);
		void STATIC_ExecuteGameplayCue(class UAbilitySystemComponent* AbilitySystemComponen, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		void STATIC_EnableSpeedUpEffect(class ASolarCharacter* Player, bool bEnable);
		void STATIC_EnablePoisonEffect(class UObject* WorldContextObject, bool bEnable);
		class UTexture2D* STATIC_DrawDebugPointInMapImg(class UObject* WorldContextObject, class UTexture2D* Tex, const class FString& Path, TArray<struct FVector> PointArrA, const struct FColor& PointAColor, float PointASize, TArray<struct FVector> PointArrB, const struct FColor& PointBColor, float PointBSize);
		int32_t STATIC_DeleteAIFromBattleForPlayer(class UObject* WorldContextObject, TArray<class ASCMPlayerState*> AIPlayers);
		class UUserWidget* STATIC_CreateSolarWidget(class UObject* WorldContextObject, class UClass* WidgetClass, EUIRoot UILayer, bool bInShowPersistent);
		class UWidgetComponent* STATIC_CreateOverheadHUD(class ASolarCharacter* SolarCharacter, class UClass* Widget);
		class ASCMPlayerState* STATIC_CreateBotAISingle(class UObject* WorldContextObject, int32_t CharacterId, const struct FVector& SpawnLocation, class UClass* ControllerClass, int32_t Difficulty, bool bAllowMix, const class FString& Side, const class FString& Job);
		TArray<class ASCMPlayerState*> STATIC_CreateBotAI(class UObject* WorldContextObject, TMap<int32_t, int32_t> TempleteMap, int32_t SpawnNum, const struct FVector& SpawnLocation, class UClass* ControllerClass, int32_t Difficulty, bool bAllowMix, const class FString& Side, const class FString& Job);
		void STATIC_CreateAirdropByOutcomeIDWithCharacter(class UObject* WorldContextObject, const struct FTransform& SpawnTrans, class UClass* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, class ASolarCharacter* InCharacter, float InStartHeight);
		void STATIC_CreateAirdropByOutcomeIDWithAirship(class UObject* WorldContextObject, const struct FTransform& SpawnTrans, class UClass* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID);
		void STATIC_CreateAirdropByOutcomeID(class UObject* WorldContextObject, const struct FTransform& SpawnTrans, class UClass* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, float InStartHeight);
		void STATIC_CreateAirdropByItemID(class UObject* WorldContextObject, const struct FTransform& SpawnTrans, class UClass* SolarTreasureBoxSpawnerClass, TArray<struct FSolarItemData> ItemDataArr, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, class ASolarCharacter* InCharacter, float InStartHeight);
		void STATIC_CreateAirdropByCharacter(class UObject* WorldContextObject, const struct FTransform& SpawnTrans, class UClass* SolarTreasureBoxSpawnerClass, TArray<struct FSolarItemData> ItemDataArr, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, class ASolarCharacter* InCharacter, float InStartHeight);
		void STATIC_CloseSupplement(class UObject* WorldContextObject);
		void STATIC_CloseSolarWidget(class UObject* WorldContextObject, class UClass* WidgetClass);
		void STATIC_ClearPlayerDataChangeEvent(class ASCMPlayerState* PlayerState, const class FString& DataName);
		bool STATIC_ClearMapUISlot(class UObject* WorldContextObject, const class FName& PanelName);
		void STATIC_ClearDataChangeEvent(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName);
		void STATIC_ClearCharacterAllItems(class ASolarCharacter* Player, bool bEmptyWeaponsOnly);
		bool STATIC_ClearBattleUISlot(class UObject* WorldContextObject, const class FName& PanelName);
		bool STATIC_ClearBackpackUISlot(class UObject* WorldContextObject, const class FName& PanelName);
		bool STATIC_ClearBackpackItem(class ASolarCharacter* InCharacter, int32_t InItemID);
		bool STATIC_ChangePlayerSideJob(class UObject* WorldContextObject, class ASCMPlayerState* Player, const class FString& InSide, const class FString& InJob, int32_t PosInTeam);
		bool STATIC_ChangePlayerOB(class UObject* WorldContextObject, class ASCMPlayerState* Player);
		bool STATIC_ChangePlayerCharacter(class ASCMPlayerState* TargetPlayer, int32_t CharacterId, int32_t SkinId);
		void STATIC_CancelAbilityByTag(class USolarAbilitySystemComponent* SolarAbilitySystemComponent, const struct FGameplayTag& AbilityTag);
		bool STATIC_BindSpecificRankChangeEvent(class UObject* WorldContextObject, const class FString& RankName, int32_t TargetRank, const class FScriptDelegate& SpecificRankChangeEvent);
		bool STATIC_BindRankListChangeEvent(class UObject* WorldContextObject, const class FString& RankName, struct FSCMRankEventHandle* RankListEventHandle);
		bool STATIC_BindPlayerReconnectedGameEvent(class UObject* WorldContextObject, const class FScriptDelegate& Deletage);
		bool STATIC_BindPlayerDataChangeEventVector3(class ASCMPlayerState* PlayerState, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindPlayerDataChangeEventString(class ASCMPlayerState* PlayerState, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindPlayerDataChangeEventInt(class ASCMPlayerState* PlayerState, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindPlayerDataChangeEventFloat(class ASCMPlayerState* PlayerState, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindPlayerDataChangeEventByte(class ASCMPlayerState* PlayerState, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindPlayerDataChangeEventBool(class ASCMPlayerState* PlayerState, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindHostRankChangeEvent(class UObject* WorldContextObject, const class FString& RankName, const class FString& HostID, ESCMHostType HostType, const class FScriptDelegate& HostRankChangeEvent);
		bool STATIC_BindDataChangeEventVector3(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindDataChangeEventString(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindDataChangeEventInt(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindDataChangeEventFloat(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindDataChangeEventByte(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BindDataChangeEventBool(class UObject* WorldContextObject, ESCMHostType HostType, const class FString& HostID, const class FString& DataName, const class FScriptDelegate& InEvent);
		bool STATIC_BeginSpectateOtherPlayer(class UObject* WorldContextObject, class ASolarPlayerState* Player, class ASolarPlayerState* TargetPlayerState);
		void STATIC_BeginCruise(TArray<class ASolarCharacter*> CharacterArr, class UAirlineCruiseComponent* AirlineCruiseComponent, float* IntoParachuteZoneTime, float* ForceParachuteTime, float* CruiseEndTime);
		void STATIC_AddGameplayCue(class UAbilitySystemComponent* AbilitySystemComponen, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		EItemModifyResult STATIC_AddBackpackItem(class ASolarCharacter* InCharacter, int32_t InItemID, int32_t InItemNum, bool InDropItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCustomizedGameModeManager
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USCustomizedGameModeManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_9FL5[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameMode_ElementManager* ElementManager;                                          // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9PBL[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCustomizedModeManagerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USCustomizedModeManagerInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SCustomMode_ElementInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USCustomMode_ElementInterface : public UInterface
	{
	public:
		void ResetElement();
		void FollowTarget(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SelfHealingCueNotify_Static
	 * Size -> 0x0060 (FullSize[0x00B0] - InheritedSize[0x0050])
	 */
	class USelfHealingCueNotify_Static : public UGameplayCueNotify_Static
	{
	public:
		struct FVector                                             RepairUIOffset;                                          // 0x0050(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W0HM[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              RepairMaterial[0x28];                                    // 0x0060(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              RepairMesh[0x28];                                        // 0x0088(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SeparatedPackagesSettings
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class USeparatedPackagesSettings : public UDeveloperSettings
	{
	public:
		class FString                                              PackageSavedSubDirctory;                                 // 0x0038(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PackageServerSubURL;                                     // 0x0048(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSeparatedPackageInfo>                       SeparatedPackagesInfo;                                   // 0x0058(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		bool FindSeparatedPackageInfoByID(int32_t InPkgID, struct FSeparatedPackageInfo* OutInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SeparatedPkgDownloader
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class USeparatedPkgDownloader : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnDownloadInfoDetected;                                  // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSepPkgDownloading;                                     // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSepPkgReady;                                           // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSepPkgDownloadFailed;                                  // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHashCheckFailedPkgDownloader;                          // 0x0068(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		EDownloadState                                             DownloadState;                                           // 0x0078(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AX0R[0x27];                                  // 0x0079(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    StartTimestamp;                                          // 0x00A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D4SJ[0x50];                                  // 0x00A8(0x0050) MISSED OFFSET (PADDING)

	public:
		void StartGettingSeparatedPackage();
		bool ResumeDownloadSeparatedPaks();
		void ResumeDownloading();
		bool PauseDownloadSeparatedPaks();
		void OnPaksMountFailed();
		void OnPaksMountCompleted(int32_t InLastMountOrder);
		void OnPaksFailed(EFileDownloadError InErrorType, int32_t InErrorCode, TArray<class FString> Headers);
		void OnPackageListFailed(EFileDownloadError InErrorType, int32_t InErrorCode, TArray<class FString> Headers);
		void OnHashCheckFailed();
		void OnEacPakCompleted(const class FString& LocalFilePath, int64_t CDNServerTimeStamp);
		void OnEachPakDownloading(const class FString& Filename, int32_t DownloadSize, int32_t TotalSize, int32_t CachedSize);
		void OnAllPaksCompleted(TArray<class FString> LocalFilePaths, int64_t CDNServerTimeStamp);
		int64_t STATIC_GetLocalTime();
		void CollectPaksFromList(const class FString& LocalFilePath, int64_t CDNServerTimeStamp);
		void ClearEvents();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SeparatedPkgListDownloader
	 * Size -> 0x0100 (FullSize[0x0128] - InheritedSize[0x0028])
	 */
	class USeparatedPkgListDownloader : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnSepPkgListDownloading;                                 // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSepPkgListReady;                                       // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8HAC[0xE0];                                  // 0x0048(0x00E0) MISSED OFFSET (PADDING)

	public:
		void SepPkgListReady(int32_t PkgID);
		void SepPkgDownloading(int32_t PkgID, int32_t ChunkDownloadedSize, int32_t ChunkTotalSize);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SeparatedPkgManager
	 * Size -> 0x0128 (FullSize[0x0158] - InheritedSize[0x0030])
	 */
	class USeparatedPkgManager : public UGameInstanceSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnFileListDownloaded;                                    // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFileListFailed;                                        // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSepPkgDataInitFinish;                                  // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KE7K[0x90];                                  // 0x0060(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, class USeparatedPkgDownloader*>              ActiveDownloaders;                                       // 0x00F0(0x0050) Protected, NativeAccessSpecifierProtected
		class USolarlandFileDownloader* FileListDownloader;                                      // 0x0140(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NHZD[0x10];                                  // 0x0148(0x0010) MISSED OFFSET (PADDING)

	public:
		bool TryStartDownloadHighResResources(class USeparatedPkgListDownloader** OutDownloder);
		void StartDownloadFileList(const class FString& InCurrentCDNURL);
		bool RequireSeparatedPackageListDownload(TArray<int32_t> PkgIDList, class USeparatedPkgListDownloader** OutDownloader);
		bool RequireSeparatedPackageDownload(int32_t InPkgID, class USeparatedPkgDownloader** OutDownloader, bool bIncludeMain, bool bIncludeOptional);
		void OnPackageFileListFailed(EFileDownloadError InErrorType, int32_t InErrorCode, TArray<class FString> Headers);
		void OnPackageFileListDownload(const class FString& LocalFilePath, int64_t CDNServerTimeStamp);
		bool IsSepareatedPkgListDownloading(TArray<int32_t> PkgIDList);
		bool IsSepareatedPkgDownloading(int32_t PkgID);
		bool IsSeparatedPackageListAvailable(TArray<int32_t> PkgIDList);
		bool IsSeparatedPackageFileListExist();
		bool IsSeparatedPackageAvailable(int32_t InPkgID);
		void InitPakIDToFileNameMap();
		bool IfSeparatedPakDownloaded(int32_t PakID, bool bIsOptional);
		bool GetTotalSizeOfPak(int32_t InPackageID, int32_t* OutTotalSize);
		class USeparatedPkgManager* STATIC_GetSeparatedPackageManager(class UObject* WorldContextObject);
		int32_t GetDownloadedSizeOfPak(int32_t ChunkID);
		class USeparatedPkgDownloader* GetActiveDownloader(int32_t InPkgID);
		void ClearSepPkgDownloader(int32_t InPkgID);
		void ClearAllDownloaders();
		void AllOptionalPaksDownloaded(bool bAllDownloaded);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SequenceNode
	 * Size -> 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
	 */
	class USequenceNode : public UActionNode
	{
	public:
		TArray<class UActionNode*>                                 Nodes;                                                   // 0x0070(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UActionNode*>                                 ExecutingNodes;                                          // 0x0080(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		int32_t TotalCount();
		class UActionNode* GetCurrentExecutingNode();
		class USequenceNode* Append(class UActionNode* Node);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SettlementFormula
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASettlementFormula : public AActor
	{
	public:
		TArray<class FString> STATIC_MakeStringForLuaByAnyStruct(class UObject* AnyStruct);
		int32_t GetZomborg(const struct FSettlementParam_Zomborg& InParam);
		void GetWeeklyChallenge(const class FString& InSolarPlayerID, TArray<class FString>* OutChallengeName, TArray<int32_t>* OutChallengeValue);
		int32_t GetWeaponExp(const struct FSettlementParam_WeaponExp& InParam);
		void GetStrategyGuideConditions(class ASolarPlayerState* InPS, TArray<int32_t>* OutResult);
		TArray<int32_t> GetShowPageIndexs(const struct FSettlementParam_PageParam& InParam);
		TArray<class FString> GetSettlementItems(const struct FSettlementParam_CommonExp& InParam);
		TArray<class FString> GetPersonalResultPlayerExData(const class FString& SolarPlayerID, class FString* PBName);
		float GetKDA(const struct FSettlementParam_KDA& InParam);
		TArray<class FString> GetGroupResultPlayerExData(const class FString& SolarPlayerID, class FString* PBName);
		TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(const struct FSettlementParam_CommonExp& InParam);
		int32_t GetCharaterExp(const struct FSettlementParam_CommonExp& InParam, const struct FSolarGameModeInfo& InGameInfo);
		int32_t GetAccountExp(const struct FSettlementParam_CommonExp& InParam, const struct FSolarGameModeInfo& InGameInfo);
		float CalculateMVPScore(const struct FSolarGameModeInfo& GameInfo, const struct FSettlementParam_MVP& Param);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SettlementGameMode
	 * Size -> 0x0010 (FullSize[0x0568] - InheritedSize[0x0558])
	 */
	class ASettlementGameMode : public ASolarGameMode
	{
	public:
		unsigned char                                              UnknownData_BG6W[0x10];                                  // 0x0558(0x0010) MISSED OFFSET (PADDING)

	public:
		void PostLevelLoad();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SettlementPageConfig
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USettlementPageConfig : public UDataAsset
	{
	public:
		int32_t                                                    PageSkipIndex;                                           // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H5O5[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SettlementPage[0x10];                                    // 0x0038(0x0010) UNKNOWN PROPERTY: ArrayProperty
		class FString                                              EnterSettleSoundEvent;                                   // 0x0048(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ExitSettleSoundEvent;                                    // 0x0058(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            PageIndexs;                                              // 0x0068(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsCustomRoom;                                            // 0x0078(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FPLF[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SettlementStageManager
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USettlementStageManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_1C1B[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameInstanceBase* SolarGameInstance;                                       // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurStageIndex;                                           // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SettlementStageConfigID;                                 // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* SettlementConfig;                                        // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASettlementFormula* Formula;                                                 // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateModeConfig(int32_t InConfigID);
		void SkipToTarget();
		void ShowNextStage();
		void ShowDiePage();
		void Init();
		class UClass* GetSettlementUIClass();
		int32_t GetSettlementStageID();
		struct FSettlementConfig GetSettlementConfigRow();
		class ASettlementFormula* GetFormula();
		class FString GetClassRelativePathName(class UClass* InClass);
		void CloseDiePage();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ShieldUpgradeItemShopAnimInst
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class UShieldUpgradeItemShopAnimInst : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_KRG7[0x8];                                   // 0x0268(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SNonCombatGameMode
	 * Size -> 0x0000 (FullSize[0x0558] - InheritedSize[0x0558])
	 */
	class ASNonCombatGameMode : public ASolarGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SHomeGameMode
	 * Size -> 0x0008 (FullSize[0x0560] - InheritedSize[0x0558])
	 */
	class ASHomeGameMode : public ASNonCombatGameMode
	{
	public:
		unsigned char                                              UnknownData_T9R6[0x8];                                   // 0x0558(0x0008) MISSED OFFSET (PADDING)

	public:
		class APawn* SpawnHomePawnAtTransformAndPossess(class AController* NewPlayer, const struct FTransform& SpawnTransform);
		void OnSelfPawnSpawned();
		void OnReceiveRoomData();
		void InitFavoriteWeapons();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SNonCombatGameState
	 * Size -> 0x0000 (FullSize[0x0448] - InheritedSize[0x0448])
	 */
	class ASNonCombatGameState : public ASolarGameState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SHomeGameState
	 * Size -> 0x0000 (FullSize[0x0448] - InheritedSize[0x0448])
	 */
	class ASHomeGameState : public ASNonCombatGameState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ShootingTargetSettings
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UShootingTargetSettings : public UDeveloperSettings
	{
	public:
		float                                                      ShootingTargetCleanupTime;                               // 0x0038(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RingSegments;                                            // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RingSize;                                                // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitPointSize;                                            // 0x0044(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreDPIScale;                                         // 0x0048(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_42VJ[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HUDRingRadius;                                           // 0x004C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           HUDRingOffset;                                           // 0x0050(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           HUDTextOffsetOnRing;                                     // 0x0058(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ShootingTargetComponent
	 * Size -> 0x0068 (FullSize[0x0380] - InheritedSize[0x0318])
	 */
	class UShootingTargetComponent : public USceneComponent
	{
	public:
		TArray<struct FShootingTargetRing>                         Rings;                                                   // 0x0318(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAutoShowDebug;                                          // 0x0328(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAutoCleanup;                                            // 0x0329(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QV0G[0x56];                                  // 0x032A(0x0056) MISSED OFFSET (PADDING)

	public:
		void K2_OnScoreUpdated(float TotalScore, TArray<float> RingScores);
		void K2_OnCleanup();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SimpleEffectController
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USimpleEffectController : public UActorEffectController
	{
	public:
		float                                                      SmoothSpeed;                                             // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetValue;                                             // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFinishOnReached;                                        // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSmoothToValueOnStop;                                    // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NSO8[0x2];                                   // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetValueOnStop;                                       // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GD0F[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SingleWeaponConfig
	 * Size -> 0x0878 (FullSize[0x08A8] - InheritedSize[0x0030])
	 */
	class USingleWeaponConfig : public UDataAsset
	{
	public:
		struct FWeaponDebugFlag                                    DebugFlag;                                               // 0x0030(0x0004) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		ESolarWeaponBrand                                          WeaponBrand;                                             // 0x0034(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EWeaponType                                                WeaponType;                                              // 0x0035(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSupportSecondaryFire;                                   // 0x0036(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PZ4L[0x1];                                   // 0x0037(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, float>                                 CharacterStateWeightMap;                                 // 0x0038(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<struct FMoveSpeedReduceCurveConfig>                 MoveSpeedReduceCurveConfigs;                             // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveSpeedReduceBonusInHipFire;                           // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveSpeedReduceBonusInAdsHipFire;                        // 0x009C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarWeaponFireSocketData>                  FireSockets;                                             // 0x00A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        MultiMuzzleSocketNames;                                  // 0x00B0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        MultiBulletSocketNames;                                  // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        MultiCastShellSocketNames;                               // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        MultiCastShellOnScopeSocketNames;                        // 0x00E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsSingleWeapon;                                         // 0x00F0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanSuspendBolt;                                         // 0x00F1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsHeavyFireWeapon;                                      // 0x00F2(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsFlamethrowerWeapon;                                   // 0x00F3(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseSpecialFireInputRespondConfig;                       // 0x00F4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSolarWeaponFireInputRespondConfig                  FireInputRespondConfig;                                  // 0x00F5(0x000A) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bSupportSingleShootMode;                                 // 0x00FF(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSupportAutoShootMode;                                   // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSupportBurstShootMode;                                  // 0x0101(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YBXN[0x2];                                   // 0x0102(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AimOffsetReferenceAimDistance;                           // 0x0104(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSpread;                                               // 0x0108(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinSpread;                                               // 0x010C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HipFireBaseSpread;                                       // 0x0110(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoulderFireBaseSpread;                                  // 0x0114(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ADSBaseSpread;                                           // 0x0118(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VhADSBaseSpread;                                         // 0x011C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponShootConfig* WeaponShootConfig;                                       // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCalcSpreadByStandardDistance;                           // 0x0128(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZIL2[0x3];                                   // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpreadStandardDistance;                                  // 0x012C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpreadStandardOriginMaxRange;                            // 0x0130(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCalcSpreadByDistributionCurve;                          // 0x0134(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IJV2[0x3];                                   // 0x0135(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SpreadDistributionCurve;                                 // 0x0138(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TMap<class FString, float>                                 SpreadCOPMap;                                            // 0x01C0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      SpreadStatuSpeed;                                        // 0x0210(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3A7Q[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, float>                                 SpreadStatuIncreaseCoefficient;                          // 0x0218(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TMap<class FString, float>                                 SpreadStatuReduceCoefficient;                            // 0x0268(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<struct FVector2D>                                   CustomSpreadArray;                                       // 0x02B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* CtrlFireTaskClass;                                       // 0x02C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* FireTaskClass;                                           // 0x02D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAmmoConfig* PrimaryAmmo;                                             // 0x02D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PrimaryAmmoIndex;                                        // 0x02E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PrimaryAmmoCap;                                          // 0x02E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAmmoConfig* SecondaryAmmo;                                           // 0x02E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SecondaryAmmoIndex;                                      // 0x02F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SecondaryAmmoCap;                                        // 0x02F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAmmoConfig* UpgradedSecAmmo;                                         // 0x02F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        UpgradedSecAmmoColor;                                    // 0x0300(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedOverload;                                           // 0x0310(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FP6H[0x3];                                   // 0x0311(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverloadMaxValue;                                        // 0x0314(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NormalOverloadCoolingRate;                               // 0x0318(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L3P6[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* NormalOverloadCoolingCurve;                              // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverloadCoolingPeriod;                                   // 0x0328(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PIXM[0x4];                                   // 0x032C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* OverloadReduceRateCurve;                                 // 0x0330(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverloadWarningRate;                                     // 0x0338(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeaponSwitchTime;                                        // 0x033C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanAutoFire;                                            // 0x0340(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6I1N[0x3];                                   // 0x0341(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoFireDelayMs;                                         // 0x0344(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AutoFireEndDelayMs;                                      // 0x0348(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AutoFireCompensationRate;                                // 0x034C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanAimAssist;                                           // 0x0350(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W7BO[0x7];                                   // 0x0351(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAssistAimWeaponConfigAll                     AssistAimWeaponConfigAll;                                // 0x0358(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FWeaponAssistAimWeaponConfigAll                     AssistAimWeaponConfigAllGamepad;                         // 0x03B8(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSolarWeaponFPPData                                 DefaultFPPData;                                          // 0x0418(0x0068) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<struct FSolarWeaponFPPConfig>                       FPPConfigByAspectRatioArray;                             // 0x0480(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOneKeyScope;                                            // 0x0490(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EYSK[0x3];                                   // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScopeOpenTime;                                           // 0x0494(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScopeOpenFOVTimeScale;                                   // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JSFP[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EWeaponPartType>                                    SupportChangeTypeArray;                                  // 0x04A0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            DefaultPartsArray;                                       // 0x04B0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecoilFireTimeWithScope;                                 // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecoilRecoverTimeWithScope;                              // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecoilMagnitudeWithScope;                                // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N8IA[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* RecoilCurveWithScope;                                    // 0x04D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RecoilSkipSequenceSumWithScope;                          // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7EB0[0x4];                                   // 0x04DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector2D>                                   RecoilCurveSequenceWithScope;                            // 0x04E0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecoilFireTimeNoScope;                                   // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecoilRecoverTimeNoScope;                                // 0x04F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecoilMagnitudeNoScope;                                  // 0x04F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N8DP[0x4];                                   // 0x04FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* RecoilCurveNoScope;                                      // 0x0500(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RecoilSkipSequenceSumNoScope;                            // 0x0508(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3ZDT[0x4];                                   // 0x050C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector2D>                                   RecoilCurveSequenceNoScope;                              // 0x0510(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsGatling;                                              // 0x0520(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D1PA[0x3];                                   // 0x0521(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GatlingRotaryAcceleration;                               // 0x0524(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GatlingFireRotarySpeed;                                  // 0x0528(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GatlingMaxRotarySpeed;                                   // 0x052C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GatlingHoldTime;                                         // 0x0530(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GatlingRotaryAttenuation;                                // 0x0534(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GatlingScatteringMagnification;                          // 0x0538(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2MDO[0x4];                                   // 0x053C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* GatlingOverHeatSmokeEffect;                              // 0x0540(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      GasAbilities;                                            // 0x0548(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeadshotDamageFactor;                                    // 0x0558(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                Socket;                                                  // 0x055C(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LeftHandIKTargetSocket;                                  // 0x0564(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LeftHandIKTargetFemaleSocket;                            // 0x056C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LeftHandIkEffectLocation;                                // 0x0574(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LeftHandIkJointLocation;                                 // 0x0580(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LeftHandIkJointLocationForGunIdle;                       // 0x058C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LeftHandIkJointLocationForGunIdleWhenCrouch;             // 0x0598(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RightHandIkEffectLocation;                               // 0x05A4(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RightHandIkJointLocation;                                // 0x05B0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLeftHandGripConfig                                 LeftHandGripRotationConfig;                              // 0x05BC(0x0084) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FLeftHandGripConfig                                 LeftHandGripRotationConfigForGunIdle;                    // 0x0640(0x0084) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bShowCoolDownWidget;                                     // 0x06C4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0QES[0x3];                                   // 0x06C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* Crosshair;                                               // 0x06C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* FeedbackWidget;                                          // 0x06D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSolarWeaponCrosshairData                           CrosshairWidgetData;                                     // 0x06D8(0x0038) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     WeaponIcon;                                              // 0x0710(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateBrush                                         PrimaryFireBrush;                                        // 0x0728(0x0098) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		int32_t                                                    PrimaryFireTxt;                                          // 0x07C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K74J[0x4];                                   // 0x07C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         SecondaryFireBrush;                                      // 0x07C8(0x0098) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		int32_t                                                    SecondaryFireTxt;                                        // 0x0860(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WMW1[0x4];                                   // 0x0864(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              WeaponTextType;                                          // 0x0868(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ItemIcon;                                                // 0x0878(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     UpgradeParticleSystem;                                   // 0x0890(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void InitSupportChangeTypeArray(TArray<int32_t> Data);
		void InitStatuSpreadCoefficient(TArray<class FString> Increasekeys, TArray<float> Increasevalues, TArray<class FString> Reducekeys, TArray<float> Reducevalues);
		void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed);
		void InitSpreadCOPMap(TArray<class FString> Keys, TArray<float> Values);
		void InitScopeData(bool onekey, float scopetime);
		void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);
		void InitBase(int32_t WPType);
		bool GetIsSupportPart(EWeaponPartType Type);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SkeletalMeshComponentConfig
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class USkeletalMeshComponentConfig : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     AnimClass;                                               // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SkeletalMesh;                                            // 0x0048(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SkillBPAndExtraConfig
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class USkillBPAndExtraConfig : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     SkillBlueprint;                                          // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkillLevel;                                              // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkillItemQuality;                                        // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    InnerSkillDescription;                                   // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ShortSkillDescription;                                   // 0x0054(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkillCD;                                                 // 0x0058(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BuffUIPriority;                                          // 0x005C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DynamicBuffRemainTime;                                   // 0x0060(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X66L[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     SkillIcon;                                               // 0x0068(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     GrowIcon;                                                // 0x0080(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SkillConfig
	 * Size -> 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
	 */
	class USkillConfig : public UDataAsset
	{
	public:
		int32_t                                                    SkillName;                                               // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkillType;                                               // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SkillDescription;                                        // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5DMY[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     SkillIcon;                                               // 0x0040(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              KillIcon;                                                // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkillVoiceDelay;                                         // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CanCancelPhaseFlag;                                      // 0x006C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U9S5[0x3];                                   // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CanCancelContinuousBegin;                                // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CanCancelContinuousEnd;                                  // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              VoiceTriggerTiming;                                      // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HFQQ[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, class USkillBPAndExtraConfig*>               SkillExtraConfigByPlayerLevel;                           // 0x0080(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SkillScanWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USkillScanWidget : public USolarUserWidget
	{
	public:
		void OnCameraRight(float Value);
		void OnCameraForward(float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SkydiveConfig
	 * Size -> 0x0188 (FullSize[0x01B8] - InheritedSize[0x0030])
	 */
	class USkydiveConfig : public UDataAsset
	{
	public:
		float                                                      DefaultFallingSpeed;                                     // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinFallingSpeed;                                         // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallingBrakingDeceleration;                              // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LQDB[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  FlyingForwardPitchMappingCurve;                          // 0x0040(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  MaxFlyingForwardSpeedCurve;                              // 0x00C8(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      MaxFlyingSidewardSpeed;                                  // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxFlyingAcceleration;                                   // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinFlyingBrakingDeceleration;                            // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxFlyingBrakingDeceleration;                            // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FlyingRotationSmoothSpeedYaw;                            // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FlyingRotationSmoothSpeedPitch;                          // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FlyingRotationSmoothSpeedYawOnFollowing;                 // 0x0168(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FlyingRotationSmoothSpeedPitchOnFollowing;               // 0x016C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LandingHeight;                                           // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LandingFallingSpeed;                                     // 0x0174(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LandingFallingBrakingDeceleration;                       // 0x0178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LandingMaxFlyingSpeed;                                   // 0x017C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LandingFlyingAcceleration;                               // 0x0180(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UK0Z[0x4];                                   // 0x0184(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        LandingIgnoredActorTags;                                 // 0x0188(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     FollowFormation;                                         // 0x0198(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SmoothTimeToCatchUpWithLeaderOnBeginning;                // 0x01A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCharacterMovementNetworkOptions                    NetworkOptions;                                          // 0x01AC(0x000C) Edit, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SkydivingFollowWidget
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class USkydivingFollowWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_ZEHI[0x20];                                  // 0x0348(0x0020) MISSED OFFSET (PADDING)

	public:
		void UpdateRouletteOpenState(bool bIsOpen);
		void UpdateRouletteForbidStateForPosInTeam(int32_t PosInTeam, bool bForbid);
		void ToggleRoulette();
		void SwitchToUnfollow();
		void SwitchToTransfer(float CooldownStartTime, float CooldownEndTime);
		void SwitchToFollow();
		void SetRouletteVisibility(bool bVisible);
		void SetRelationButtonGroupVisibility(bool bVisible);
		void SetParachuteButtonVisibility(bool bVisible);
		void SetCruisePlayerNumVisibility(bool bVisible);
		void OnSkydivingRouletteSelect(int32_t PosInTeam);
		void OnCruiseCharacterCountUpdated(int32_t TotalCount, int32_t CruiseCount);
		void NotifyCannotFollowTeammateAt(int32_t PosInTeam, bool bSelfHasFollower);
		void InitRouletteMemberPosition(TArray<int32_t> PositionArray);
		void ExpandRoulette();
		void CollapseRoulette();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SummonItemBase
	 * Size -> 0x0158 (FullSize[0x03E0] - InheritedSize[0x0288])
	 */
	class ASummonItemBase : public APawn
	{
	public:
		unsigned char                                              UnknownData_2OH2[0x20];                                  // 0x0288(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* HPBar;                                                   // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSpawnedActorHandle                                 CachedActorHandle;                                       // 0x02B8(0x0004) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarCharacter>                      SourceSummoner;                                          // 0x02BC(0x0008) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESolarSummonDeathReason                                    DeathReason;                                             // 0x02C4(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9PLB[0x3];                                   // 0x02C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentHealth;                                           // 0x02C8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDead;                                                   // 0x02CC(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I9A9[0x3];                                   // 0x02CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FunctionalTimerMax;                                      // 0x02D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FunctionalTimerDelta;                                    // 0x02D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1UUH[0x14];                                  // 0x02D8(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CenterOffset;                                            // 0x02EC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayEffectSpecHandle                           GEToSelfHandle;                                          // 0x02F8(0x0010) BlueprintVisible, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		struct FGameplayEffectSpecHandle                           GEToTargetHandle;                                        // 0x0308(0x0010) BlueprintVisible, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		float                                                      MaxHealth;                                               // 0x0318(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReducedHealth;                                           // 0x031C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayDestroyTime;                                        // 0x0320(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTeammateDamage;                                         // 0x0324(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSuicideWithSummonerChange;                              // 0x0325(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G863[0x2];                                   // 0x0326(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeDuration;                                            // 0x0328(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnlyOne;                                                // 0x032C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableHPBar;                                            // 0x032D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHPDefaultVisible;                                       // 0x032E(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FIK6[0x1];                                   // 0x032F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                HPBarTagName;                                            // 0x0330(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                HPBarPercentName;                                        // 0x0338(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                HPBarColorName;                                          // 0x0340(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        HPBarColorTeammate;                                      // 0x0348(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        HPBarColorEnemy;                                         // 0x0358(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    HPBarMaterialIndex;                                      // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CenterLocationOffset;                                    // 0x036C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DestroyDeathWithinSeconds;                               // 0x0378(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSupportAssistAim;                                       // 0x037C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GAV0[0x3];                                   // 0x037D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAssistAimTargetConfig                        AssistAimTargetConfig;                                   // 0x0380(0x0048) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		bool                                                       bCanAffectedByEMP;                                       // 0x03C8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowDamageText;                                         // 0x03C9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DWOU[0x6];                                   // 0x03CA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarSpawnAdjustConfig* SpawnAdjustConfig;                                       // 0x03D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDebug;                                                  // 0x03D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZT2W[0x7];                                   // 0x03D9(0x0007) MISSED OFFSET (PADDING)

	public:
		void SwitchFunctionalTimer(bool InbEnable, float InMaxTime);
		void Suicide();
		bool RequestPlaySoundByTeam(TMap<ESolarSummonSoundType, struct FSolarSummonSoundData> InSoundData);
		bool RequestPlaySound(TArray<class FString> InSoundData);
		void ReceiveUpdateHealthEvent(float InCurrentHealthRate);
		void ReceiveUpdateFunctionalTimerEvent(float InTimerRate);
		void ReceiveDeathEvent(ESolarSummonDeathReason InDeathReason);
		void OnSourceCharacterChange();
		void OnRep_Dead();
		void OnRep_CurrentHealth();
		bool IsDead();
		TWeakObjectPtr<class ASolarCharacter> GetSourceSummoner();
		float GetMaxHealth();
		float GetCurrentHealth();
		class UClass* GetClassType();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SkywardDiveLauncher
	 * Size -> 0x00B8 (FullSize[0x0498] - InheritedSize[0x03E0])
	 */
	class ASkywardDiveLauncher : public ASummonItemBase
	{
	public:
		class USkeletalMeshComponent* GroundMesh;                                              // 0x03E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoxComponent* TriggerVolume;                                           // 0x03E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnTimeConfig;                                         // 0x03F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SSHS[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* AvailableDeviceParticle;                                 // 0x03F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* SpawnBeamParticle;                                       // 0x0400(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnSoundName;                                          // 0x0408(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* SpawnAnim;                                               // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FLaunchDeviceInfo>                           LauncherDeviceArray;                                     // 0x0420(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CharacterLaunchPadHeightOffset;                          // 0x0430(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LowHealthPercentage;                                     // 0x0434(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* LowHealthParticle;                                       // 0x0438(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* DeathExplodeParticle;                                    // 0x0440(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              DeathExplodeSoundName;                                   // 0x0448(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent* SpawnBeamEffect;                                         // 0x0458(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent* LowHealthEffect;                                         // 0x0460(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNewlySpawned;                                           // 0x0468(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MT2E[0x2F];                                  // 0x0469(0x002F) MISSED OFFSET (PADDING)

	public:
		void OnTriggerVolumeOverlapedEnd(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTriggerVolumeOverlapedBegin(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAbility
	 * Size -> 0x00E0 (FullSize[0x0308] - InheritedSize[0x0228])
	 */
	class ASolarAbility : public AActor
	{
	public:
		class UClass* MyAbilityClass;                                          // 0x0228(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AbilityEffectClasses;                                    // 0x0230(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASolarCharacter>                      AbilitySourceCharacter;                                  // 0x0240(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N3OB[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          SpawnTransform;                                          // 0x0250(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       InstancedAbility;                                        // 0x0280(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DoNotAutoApply;                                          // 0x0281(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ApplyToSource;                                           // 0x0282(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       RadialAbility;                                           // 0x0283(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RadialAbilityRadius;                                     // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRadialIgnoreCollision;                                  // 0x0288(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRadialIgnoreVehicle;                                    // 0x0289(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CheckSourceToTargetCollision;                            // 0x028A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableAbilityDebug;                                      // 0x028B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bActivated;                                              // 0x028C(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PG3Y[0x3];                                   // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ExtraInfo;                                               // 0x0290(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor* InitiatorActor;                                          // 0x02A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkComponent* AkAudioComponent;                                        // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x02B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, float>                                 EffectParams;                                            // 0x02B8(0x0050) Protected, NativeAccessSpecifierProtected

	public:
		void STATIC_WeaponApplyAbility(class UObject* WorldContextObject, class UClass* SolarAbilityClass, class AActor* SourceActor, class AActor* TargetActor, const struct FVector& HitLocation, const class FName& HitBoneName, float Scale, const struct FRotator& ProjRotator, const class FString& InExtarInfo, class UPrimitiveComponent* HitComponent);
		void StopSound();
		void STATIC_StaticRemoveSolarAbilityFrom(class UClass* AbilityClass, class AActor* AffectingActor);
		void STATIC_StaticApplySolarAbilityToWithHitResult(class UClass* AbilityClass, class AActor* AffectingActor, const struct FHitResult& HitResult, float Scale, const class FString& InExtarInfo, class AActor* SourceAcotr, class AActor* Initiator, bool ValidSourceLocation, const struct FVector& SourceLocation);
		void STATIC_StaticApplySolarAbilityTo(class UClass* AbilityClass, class AActor* AffectingActor, class AActor* SourceAcotr, class AActor* Initiator, bool ValidSourceLocation, const struct FVector& SourceLocation, const struct FVector& HitLocation, const class FName& HitBoneName, float Scale, const class FString& InExtraInfo, class UPrimitiveComponent* HitComponent);
		void ServerSetActivated();
		void RestoreSound();
		void RemoveSolarAbilityFrom(class AActor* ApplyToActor);
		void PlaySound();
		void PauseSound();
		bool IsLocalControl();
		bool InSameTeam();
		void InitSolarAkGameObject(class UActorComponent* Component, bool bReset);
		bool CheckActor(class AActor* SourceActor, class AActor* TargetActor);
		void ApplySolarAbilityTo(class AActor* ApplyToActor, class AActor* SourceActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAbilityComponent
	 * Size -> 0x00F0 (FullSize[0x01A0] - InheritedSize[0x00B0])
	 */
	class USolarAbilityComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KNS6[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UClass*, class USolarAbilityEffect*>            AppliedEffectMap;                                        // 0x00B8(0x0050) NativeAccessSpecifierPublic
		TMap<class UClass*, class USolarAbilityEffect*>            AppliedEffectsThisTick;                                  // 0x0108(0x0050) NativeAccessSpecifierPublic
		TArray<struct FReplicateEffectData>                        ReplicateEffectDatas;                                    // 0x0158(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WWQD[0x8];                                   // 0x0168(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CharacterWeaponDisable;                                  // 0x0170(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CharacterMarked;                                         // 0x0171(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BDQI[0x2];                                   // 0x0172(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MoveSpeedCoeffient;                                      // 0x0174(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface* OriginalMaterial;                                        // 0x0178(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShieldRechargeCostCoefficient;                           // 0x0180(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CRSK[0x1C];                                  // 0x0184(0x001C) MISSED OFFSET (PADDING)

	public:
		void OnRep_SpeedCoeffient();
		void OnRep_ReplicateEffectData();
		int32_t GetCharacterLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAbilityEffect
	 * Size -> 0x0170 (FullSize[0x0198] - InheritedSize[0x0028])
	 */
	class USolarAbilityEffect : public UObject
	{
	public:
		struct FSoftObjectPath                                     EffectIconPath;                                          // 0x0028(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarAttributeModifier>                     AttributeModifiers;                                      // 0x0040(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowMultiple;                                          // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0WU8[0xBF];                                  // 0x0051(0x00BF) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacterBase* AbilityEffectAffectingCharacter;                         // 0x0110(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarAbilityComponent* AbilityEffectAffectingAbilityComponent;                  // 0x0118(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarAbility* AffectingAbility;                                        // 0x0120(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ExtraInfo;                                               // 0x0128(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, float>                                 AttributeParamMap;                                       // 0x0138(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DDVK[0x10];                                  // 0x0188(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAbilitySystemComponent
	 * Size -> 0x00F8 (FullSize[0x13F0] - InheritedSize[0x12F8])
	 */
	class USolarAbilitySystemComponent : public UAbilitySystemComponent
	{
	public:
		unsigned char                                              UnknownData_7YSN[0x8];                                   // 0x12F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameplayAbilitySet* DefaultAbilitySet;                                       // 0x1300(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_44IZ[0xB0];                                  // 0x1308(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* OptionMeshForRepMontage;                                 // 0x13B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPendingMontageRepForMesh;                               // 0x13C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9166[0x7];                                   // 0x13C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGameplayAbilityLocalAnimMontageForMesh>     LocalAnimMontageInfoForMeshes;                           // 0x13C8(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FGameplayAbilityRepAnimMontageForMesh>       RepAnimMontageInfoForMeshes;                             // 0x13D8(0x0010) Net, ZeroConstructor, RepNotify, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V8S3[0x8];                                   // 0x13E8(0x0008) MISSED OFFSET (PADDING)

	public:
		struct FGameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(const struct FGameplayAbilitySpecHandle& AbilitySpecHandle, bool bForNextActivate, int32_t LevelUp);
		void UpgradeAbilityLevelByClass(class UClass* AbilityClass, bool bForNextActivate, int32_t LevelUp);
		void UpgradeAbilityLevel(const struct FGameplayTagContainer& AbilityTags, bool bForNextActivate, int32_t LevelUp);
		void ServerCurrentMontageSetPlayRateForMesh(class USkeletalMeshComponent* InMesh, class UAnimMontage* ClientAnimMontage, float InPlayRate);
		void ServerCurrentMontageSetNextSectionNameForMesh(class USkeletalMeshComponent* InMesh, class UAnimMontage* ClientAnimMontage, float ClientPosition, const class FName& SectionName, const class FName& NextSectionName);
		void ServerCurrentMontageJumpToSectionNameForMesh(class USkeletalMeshComponent* InMesh, class UAnimMontage* ClientAnimMontage, const class FName& SectionName);
		void PostDefaultAbilitiesGranted();
		void OnRep_ReplicatedAnimMontageForMesh();
		void OnNotifiedTagChanged(const struct FGameplayTag& Tag, bool bAdded);
		void OnInternalMetaAttributeUpdate(class USolarMetaAttributeSet* MetaAttributeSet, struct FGameplayModifierEvaluatedData* EvaluatedData, const struct FGameplayEffectSpec& EffectSpec, struct FMetaAttributeUpdateEvent* UpdateEvent);
		void NotifySourceMetaAttributeExecution(const struct FMetaAttributeUpdateEvent& UpdateEvent);
		void K2_RemoveGameplayCueLocalShared(class UObject* Instigator, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		void K2_RemoveGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		int32_t K2_RemoveActiveEffectsWithTag(const struct FGameplayTag& GameplayTag);
		struct FGameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(class UClass* AbilityClass, int32_t Level);
		struct FGameplayAbilitySpecHandle K2_GiveAbility(class UClass* AbilityClass, int32_t Level);
		void K2_GetEffectMaxTimeRemainingAndDuration(const struct FGameplayTag& EffectTag, float* TimeRemaining, float* Duration);
		class UAttributeSet* K2_FindOwnedAttributeSetByClass(class UClass* Class);
		void K2_ExecuteGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		void K2_ClearAbility(const struct FGameplayAbilitySpecHandle& Handle);
		void K2_CancelAbilityByTag(const struct FGameplayTag& AbilityTag);
		void K2_AddGameplayCueLocalShared(class UObject* Instigator, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		void K2_AddGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
		bool IsNotifiedTagAvailable(const struct FGameplayTag& Tag);
		struct FGameplayAbilitySpecHandle GiveDefaultAbility(class UClass* AbilityClass);
		struct FActiveGameplayEffectHandle ChangeActiveEffectRemainTime(const struct FActiveGameplayEffectHandle& InEffect, float InValue, EGameplayModOp InOption);
		struct FActiveGameplayEffectHandle ChangeActiveEffectDuration(const struct FActiveGameplayEffectHandle& InEffect, float InDuration, EActiveEffectDurationChangeProxy InChangeProxy);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAbilitySystemInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAbilitySystemInterface : public UAbilitySystemInterface
	{
	public:
		class USolarAbilitySystemComponent* GetSolarAbilitySystemComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAbilitySystemLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAbilitySystemLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_MMC_GetCapturedAttributeMagnitude(const struct FGameplayEffectAttributeCaptureDefinition& Def, const struct FGameplayEffectSpec& Spec, const struct FGameplayTagContainer& SourceTags, const struct FGameplayTagContainer& TargetTags, float* Magnitude);
		void STATIC_MarkStackCountHandledManually(struct FGameplayEffectCustomExecutionOutput* Output);
		void STATIC_MarkGameplayCuesHandledManually(struct FGameplayEffectCustomExecutionOutput* Output);
		void STATIC_MarkConditionalGameplayEffectsToTrigger(struct FGameplayEffectCustomExecutionOutput* Output);
		struct FGameplayModifierInfo STATIC_MakeSimpleGameplayModifierInfo(const struct FGameplayAttribute& InAttribute);
		struct FGameplayModifierEvaluatedData STATIC_MakeSimpleGameplayModifierEvaluatedData(const struct FGameplayAttribute& InAttribute, EGameplayModOp InModOp, float InMagnitude);
		struct FGameplayModifierEvaluatedData STATIC_MakeGameplayModifierEvaluatedData(const struct FGameplayAttribute& InAttribute, EGameplayModOp InModOp, float InMagnitude, const struct FActiveGameplayEffectHandle& InHandle);
		struct FAttributeSubSetting STATIC_MakeAttributeSubSetting(int32_t InAttributeSubID, float InValue);
		struct FGameplayEffectContextHandle STATIC_GetEffectContext(const struct FGameplayEffectSpec& Spec);
		float STATIC_GetCurrentValueFromAttribute(const struct FGameplayAttributeData& Attribute);
		struct FGameplayTagContainer STATIC_GetCapturedTargetTags(const struct FGameplayEffectSpec& Spec);
		struct FGameplayTagContainer STATIC_GetCapturedSourceTags(const struct FGameplayEffectSpec& Spec);
		float STATIC_GetBaseValueFromAttribute(const struct FGameplayAttributeData& Attribute);
		bool STATIC_FindAttribute(const class FString& CombinedName, struct FGameplayAttribute* OutAttribute);
		class UGameplayAbility* STATIC_EffectContextHandle_GetAbility(const struct FGameplayEffectContextHandle& Handle);
		class UAbilitySystemComponent* STATIC_CustomExecParams_GetTargetAbilitySystemComponent(const struct FGameplayEffectCustomExecutionParameters& Parameters);
		class UAbilitySystemComponent* STATIC_CustomExecParams_GetSourceAbilitySystemComponent(const struct FGameplayEffectCustomExecutionParameters& Parameters);
		struct FGameplayTagContainer STATIC_CustomExecParams_GetPassedInTags(const struct FGameplayEffectCustomExecutionParameters& Parameters);
		struct FGameplayEffectSpec STATIC_CustomExecParams_GetOwningSpec(const struct FGameplayEffectCustomExecutionParameters& Parameters);
		TArray<struct FActiveGameplayEffectHandle> STATIC_CustomExecParams_GetIgnoreHandles(const struct FGameplayEffectCustomExecutionParameters& Parameters);
		struct FAttributeSubSetting STATIC_CancelAttributeSubSetting(int32_t InAttributeSubID);
		void STATIC_BreakGameplayModifierInfo(const struct FGameplayModifierInfo& InModifier, struct FGameplayAttribute* OutAttribute, EGameplayModOp* OutModType, struct FGameplayTagRequirements* OutSourceTags, struct FGameplayTagRequirements* OutTargetTags);
		void STATIC_AddOutputModifier(struct FGameplayEffectCustomExecutionOutput* Output, const struct FGameplayModifierEvaluatedData& InOutputMod);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAbilityTask_WaitInputCommand
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class USolarAbilityTask_WaitInputCommand : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnCommand;                                               // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TMED[0x10];                                  // 0x0090(0x0010) MISSED OFFSET (PADDING)

	public:
		class USolarAbilityTask_WaitInputCommand* STATIC_CreateTask(class UGameplayAbility* OwningAbility, const class FName& ActionName, EInputEvent InputEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameManager
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarGameManager : public USolarAbstractManager
	{
	public:
		class USolarGameInstanceBase* OwnerGameInstance;                                       // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveManagerIntialized();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarABTestManager
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarABTestManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_PGSM[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAccessLuaDataUtils
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarAccessLuaDataUtils : public UObject
	{
	public:
		unsigned char                                              UnknownData_RMNI[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameInstanceBase* SolarGameInstance;                                       // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void GetMatchResult(struct FMatchResult* MatchResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.AchievementFormula
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class AAchievementFormula : public AActor
	{
	public:
		class USolarAchievementComponent* GetAchievementComponent();
		int32_t GetAchievedTargetValue(int32_t InAchievementID);
		TArray<int32_t> GetAchievedConditionValue(int32_t InAchievementID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAchievementComponent
	 * Size -> 0x0110 (FullSize[0x01C0] - InheritedSize[0x00B0])
	 */
	class USolarAchievementComponent : public UActorComponent
	{
	public:
		class UDataTable* AchievementHandleConfig;                                 // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* AchievementFormulaClass;                                 // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AAchievementFormula* AchievementFormula;                                      // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VYVV[0xA8];                                  // 0x00C8(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FAchievementResult>                   AllStatisticAchievement;                                 // 0x0170(0x0050) Protected, NativeAccessSpecifierProtected

	public:
		void UnlockAchievement(int32_t InAchievementID);
		void SetAchievementValue(int32_t InAchievementID, int32_t InUpdateValue);
		bool IsAchievementCompleted(int32_t InAchievementID);
		void IncreaseAchievementValue(int32_t InAchievementID, int32_t InUpdateValue);
		int32_t GetAchievementPorgressValue(int32_t InAchievementID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarActivityManager
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarActivityManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_IJ6X[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarActorCollisionIgnoreSystem
	 * Size -> 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
	 */
	class USolarActorCollisionIgnoreSystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_XDPZ[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class AActor*, unsigned char>                         TeamIgnoreCollisionActorMap;                             // 0x0040(0x0050) NativeAccessSpecifierPrivate
		TMap<class AActor*, ESolarIgnoreCollisionType>             TypeIgnoreCollisionActorMap;                             // 0x0090(0x0050) NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarActorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarActorInterface : public UInterface
	{
	public:
		struct FVector GetCenterLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarActorPoolManager
	 * Size -> 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
	 */
	class USolarActorPoolManager : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_DCAE[0xA0];                                  // 0x0030(0x00A0) MISSED OFFSET (PADDING)

	public:
		bool PushActor(class AActor* Actor);
		void OnActorDestroyed(class AActor* Actor);
		class USolarActorPoolManager* STATIC_Get(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAdapterSlotInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAdapterSlotInterface : public UInterface
	{
	public:
		void OnLoadAdapterSlotWidgetFinished();
		void OnChangeAdapterSlotWidgetParameters(TArray<struct FWidgetOverrideParam> Params);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAdapterWidget
	 * Size -> 0x0078 (FullSize[0x01C8] - InheritedSize[0x0150])
	 */
	class USolarAdapterWidget : public UContentWidget
	{
	public:
		EWidgetLoadType                                            WidgetLoadType;                                          // 0x0150(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7V8G[0x7];                                   // 0x0151(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftClassPath                                      MobileWidgetPath;                                        // 0x0158(0x0018) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftClassPath                                      DesktopWidgetPath;                                       // 0x0170(0x0018) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FWidgetOverrideParam>                        OverrideParamList;                                       // 0x0188(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftClassPath                                      CurWidgetPath;                                           // 0x0198(0x0018) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget* AdapteeWidget;                                           // 0x01B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2YBB[0x10];                                  // 0x01B8(0x0010) MISSED OFFSET (PADDING)

	public:
		void RefreshUIByOverrideParams(TArray<struct FWidgetOverrideParam> WidgetOverrideParams);
		void LoadUserWidgetResource();
		class UUserWidget* GetAdapteeWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAdvProgressBoard
	 * Size -> 0x0058 (FullSize[0x02B8] - InheritedSize[0x0260])
	 */
	class USolarAdvProgressBoard : public UUserWidget
	{
	public:
		class UImage* ProgressBoard;                                           // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance* ProgressShader;                                          // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        IncreaseColor;                                           // 0x0270(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        DecreaseColor;                                           // 0x0280(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OZ4A[0x28];                                  // 0x0290(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondition
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAICondition : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondition_BlueprintBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAICondition_BlueprintBase : public USolarAICondition
	{
	public:
		bool ReceiveExecute(class UObject* OwnerExecutor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondition_TagState
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAICondition_TagState : public USolarAICondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondition_TagStateTime
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarAICondition_TagStateTime : public USolarAICondition_TagState
	{
	public:
		ESolarAITagStateTimeType                                   TimeType;                                                // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VR9N[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarAIValueCompare                                CompareIns;                                              // 0x002C(0x000C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondition_ScoreBase
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class USolarAICondition_ScoreBase : public USolarAICondition_TagState
	{
	public:
		TArray<class USolarAIConditionScoreItem*>                  ScoreItems;                                              // 0x0028(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSolarAIValueCompare                                CompareIns;                                              // 0x0038(0x000C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZQ11[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAIConditionScoreItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarAIConditionScoreItem : public UObject
	{
	public:
		float                                                      ItemWeight;                                              // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SLY6[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondScoreItem_BoolBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarAICondScoreItem_BoolBase : public USolarAIConditionScoreItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondScoreItem_BoolBaseBP
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarAICondScoreItem_BoolBaseBP : public USolarAICondScoreItem_BoolBase
	{
	public:
		bool ReceiveProvideItemBaseBoolBot(class ASolarBotAIController* BotController, class ASolarCharacter* SolarChar);
		bool ReceiveProvideItemBaseBool(class UObject* OwnerExecutor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondScoreItem_FloatBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarAICondScoreItem_FloatBase : public USolarAIConditionScoreItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondScoreItem_FloatLinearClamp
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarAICondScoreItem_FloatLinearClamp : public USolarAICondScoreItem_FloatBase
	{
	public:
		float                                                      ClampFloatValueMin;                                      // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClampFloatValueMax;                                      // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondScoreItem_FloatBaseBP
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USolarAICondScoreItem_FloatBaseBP : public USolarAICondScoreItem_FloatLinearClamp
	{
	public:
		float ReceiveProvideItemBaseFloatBot(class ASolarBotAIController* BotController, class ASolarCharacter* SolarChar);
		float ReceiveProvideItemBaseFloat(class UObject* OwnerExecutor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondScoreItem_CharHP
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USolarAICondScoreItem_CharHP : public USolarAICondScoreItem_FloatLinearClamp
	{
	public:
		bool                                                       bPercent;                                                // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1M3L[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAICondScoreItem_BotTagStateTime
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USolarAICondScoreItem_BotTagStateTime : public USolarAICondScoreItem_FloatLinearClamp
	{
	public:
		ESolarAITagStateTimeType                                   TimeType;                                                // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P05Y[0x17];                                  // 0x0039(0x0017) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAIControllerBase
	 * Size -> 0x0028 (FullSize[0x0370] - InheritedSize[0x0348])
	 */
	class ASolarAIControllerBase : public AAIController
	{
	public:
		unsigned char                                              UnknownData_05I2[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBehaviorTree* BehaviorTree;                                            // 0x0350(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAISenseConfig_Sight* SightConfig;                                             // 0x0358(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAISenseConfig_Damage* DamageSenseConfig;                                       // 0x0360(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AICharacterID;                                           // 0x0368(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A4NU[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (PADDING)

	public:
		void DestroyCharacterCorpse();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAILibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAILibrary : public UObject
	{
	public:
		class ASolarBotAIController* STATIC_SpawnBotAtLocation(class UObject* WorldContextObject, const struct FVector& SpawnLocation, class UClass* ControllerClass, int32_t CharacterId, int32_t SkinId, int32_t TeamID);
		bool STATIC_IsLocationOnPlayerSight(class UObject* WorldContextObject, const struct FVector& TestLocation, float TraceStartOffsetZ, float MaxRange, bool bIgnoreSpectatePlayer);
		bool STATIC_HasPlayersInRange(class UObject* WorldContextObject, const struct FVector& TestLocation, int32_t* count, float RangeRadius, bool bIncludeBot, bool bOnlyDrivers);
		bool STATIC_GetValidCharacterID(class ASolarPlayerState* TargetPS, int32_t* OutCharacterID, int32_t* OutSkinId);
		struct FVector STATIC_GetPoisonCircleCenter(class UObject* WorldContextObject, bool bDoProject, bool bUseNavmesh, const struct FVector& Extent);
		void STATIC_ApplyDamageEventBetweenPreservedBot(class ASolarBotAIController* Target, float DamageValue, const struct FSolarPointDamageEvent& DamageEvent, class ASolarBotAIController* EventInstigator, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemSpawner
	 * Size -> 0x00F8 (FullSize[0x0390] - InheritedSize[0x0298])
	 */
	class ASolarItemSpawner : public ASolarMapElementBase
	{
	public:
		int32_t                                                    SpawnerID;                                               // 0x0298(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FBGE[0x2C];                                  // 0x029C(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESpawnStage                                                SpawnStage;                                              // 0x02C8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESpawnerType                                               SpawnerType;                                             // 0x02C9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESpawnerLevel                                              SpawnerLevel;                                            // 0x02CA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4310[0x1];                                   // 0x02CB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OutcomeID;                                               // 0x02CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             OriginPos;                                               // 0x02D0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BoxExtent;                                               // 0x02DC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FBox                                                SpawnerBox;                                              // 0x02E8(0x001C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      RotateAngleRange;                                        // 0x0304(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasSpawnedItem;                                          // 0x0308(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bActiveSpawner;                                          // 0x0309(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XNKD[0x6];                                   // 0x030A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SyncItemId;                                              // 0x0310(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       BOpenLog;                                                // 0x0320(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRefresh;                                                // 0x0321(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9FU6[0x2];                                   // 0x0322(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RefreshTime;                                             // 0x0324(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseSpawnerTransform;                                    // 0x0328(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bToTheGround;                                            // 0x0329(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HB0N[0x2];                                   // 0x032A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumberOfPoints;                                          // 0x032C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      fScalarParams;                                           // 0x0330(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EItemAppearanceType                                        AppearanceType;                                          // 0x0334(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUpdateOverlap;                                          // 0x0335(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_59EN[0x22];                                  // 0x0336(0x0022) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        ItemLoadHandle;                                          // 0x0358(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        ItemSpawnHandle;                                         // 0x0360(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        ItemRefreshHandle;                                       // 0x0368(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YJNP[0x20];                                  // 0x0370(0x0020) MISSED OFFSET (PADDING)

	public:
		void SpawnSingleItem();
		void SpawnInNextTick();
		void SaveSpawnerRange();
		void RandomRotatorForItem(EItemType ItemType, struct FQuat* TargetRotator);
		void RandomPosInBoundingBox(struct FVector* TargetPos);
		void PlaceItemToTheGround(struct FVector* InOutLocation);
		void OnItemSpawned(class AActor* Item);
		void OnAsyncLoadComplete(const struct FSoftClassPath& SClassPath, const struct FSolarItemData& ItemData);
		void NetStartSpawnItems(class ASolarItemRootActor* OwnerActor);
		void LoadSingleWeaponAsset(const struct FSolarItemData& ItemData);
		void LoadSingleItemAsset();
		void LoadInNextTick();
		void InitSpawnerBound();
		void GetSuitableDropPos(struct FVector* TargetPos);
		void GenerateDropPosition();
		void ClearUnpickedItems();
		void ClearLoopTimer();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAirDropSpawner
	 * Size -> 0x0040 (FullSize[0x03D0] - InheritedSize[0x0390])
	 */
	class ASolarAirDropSpawner : public ASolarItemSpawner
	{
	public:
		bool                                                       IsActive;                                                // 0x0390(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KRMY[0x3];                                   // 0x0391(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpawnDelay;                                              // 0x0394(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AudioActorHeightOffset;                                  // 0x0398(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AudioActorFallSpeed;                                     // 0x039C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      PillarMeshBPClassPathName;                               // 0x03A0(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DOJS[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ChestID;                                                 // 0x03C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ASD3[0xC];                                   // 0x03C4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehiclePawn
	 * Size -> 0x10F8 (FullSize[0x1380] - InheritedSize[0x0288])
	 */
	class ASolarVehiclePawn : public APawn
	{
	public:
		unsigned char                                              UnknownData_6KK1[0x30];                                  // 0x0288(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimitiveComponent* VehicleRoot;                                             // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponentBudgeted* VehicleMesh;                                             // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   VehicleID;                                               // 0x02C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVehicleMeshAggregationTick;                             // 0x02CC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HS4X[0x3];                                   // 0x02CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              VehicleStencilClass[0x28];                               // 0x02D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class USkeletalMeshComponentBudgeted* VehicleStencilNew;                                       // 0x02F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarNetMovementComponent* NetMovementComponent;                                    // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* AkComponent;                                             // 0x0308(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarVehicleAbilitySystemComponent* VehicleAbilitySystem;                                    // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarVehicleSpringArmComponent* SpringArmComponent;                                      // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarVehicleCameraComponent* CameraComponent;                                         // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarVehicleAttributeSet* VehicleAttributeSet;                                     // 0x0328(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FBasedMovement                                      BasedMovement;                                           // 0x0330(0x0028) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FVehicleSeatSlot>                            SeatSlots;                                               // 0x0358(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    HealthUIID;                                              // 0x0368(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_76LC[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              VehicleBrandIcon[0x28];                                  // 0x0370(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      OverlapWaterRadius;                                      // 0x0398(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             OutVehicleOffset;                                        // 0x039C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WaterDraftDepth;                                         // 0x03A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarpadProtectTime;                                       // 0x03AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarPadAccelerationMultiplier;                            // 0x03B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JR49[0x4];                                   // 0x03B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     DropPassengerLocations;                                  // 0x03B8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DropPassengerAtTop;                                      // 0x03C8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                BodySocketName;                                          // 0x03D4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DamageBoxLocation;                                       // 0x03DC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DamageBoxExtent;                                         // 0x03E8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KDVQ[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        PenetrationDamageBones;                                  // 0x03F8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VehicleMaxSpeedOnUI;                                     // 0x0408(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EVehicleControlUIType                                      VehicleControlUIType;                                    // 0x040C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EVehicleAnimationType                                      VehicleAnimationType;                                    // 0x040D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6AHA[0x2];                                   // 0x040E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                VehicleDirectionBoneForPassenger;                        // 0x0410(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0ZNF[0x8];                                   // 0x0418(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVehicleVFX                                         NosCameraVFX;                                            // 0x0420(0x0090) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      NOSCameraEffectAngle;                                    // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KGHV[0xC];                                   // 0x04B4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVehicleVFX                                         GCCameraVFX;                                             // 0x04C0(0x0090) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      GCCameraEffectAngle;                                     // 0x0550(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VT5I[0x4];                                   // 0x0554(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVehicleVFX>                                 NosVFXes;                                                // 0x0558(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              RaiseDustEffects[0x50];                                  // 0x0568(0x0050) UNKNOWN PROPERTY: MapProperty
		float                                                      SpeedThresholdForCollidingDamage;                        // 0x05B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedThresholdForStandingOn;                             // 0x05BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedThresholdForGetOnVehicle;                           // 0x05C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YOOJ[0x4];                                   // 0x05C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              EnterWaterVFX[0xA0];                                     // 0x05C8(0x00A0) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      SprayVelocity;                                           // 0x0668(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeavyInSpeed;                                            // 0x066C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CriticalAngle;                                           // 0x0670(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             OffsetBasedVechileLoction;                               // 0x0674(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CollisionSparkThreshold;                                 // 0x0680(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H8LH[0x4];                                   // 0x0684(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CollisionSparkParticle[0x28];                            // 0x0688(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FName                                                CollisionSparkParamNowel;                                // 0x06B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                CollisionSparkParamQuantity;                             // 0x06B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VehicleSpeedThresholdToPlayVFX;                          // 0x06C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9F76[0x4];                                   // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  CollisionSparkCurveFromImpulseToNowel;                   // 0x06C8(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  CollisionSparkCurveFromImpulseToQuantity;                // 0x0750(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M8EB[0x8];                                   // 0x07D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVehicleVFX                                         SpeedParticle;                                           // 0x07E0(0x0090) Edit, Protected, NativeAccessSpecifierProtected
		TArray<struct FVehicleVFXMesh>                             DriverOnVFXMeshes;                                       // 0x0870(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVehicleVFX>                                 DriverOnVFXs;                                            // 0x0880(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             SpawnOffset;                                             // 0x0890(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GQ3M[0x4];                                   // 0x089C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVehicleCameraDataAsset* CameraDataAsset;                                         // 0x08A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SpeedVibrationHeString;                                  // 0x08A8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  SpeedVibrationCurve;                                     // 0x08B8(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      MinSpeedDifferenceForCollisionVibration;                 // 0x0940(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N5U5[0x4];                                   // 0x0944(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CollisionVibrationHeString;                              // 0x0948(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              LandingVibrationHeString;                                // 0x0958(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  LandingVibrationCurve;                                   // 0x0968(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      MaxSpeedDecelerationRate;                                // 0x09F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_REMA[0x4];                                   // 0x09F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarVehicleMaterialData                           BackLampData;                                            // 0x09F8(0x0028) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSolarVehicleMaterialData>                   VehicleMaterialDataArray;                                // 0x0A20(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarVehicleSoundDataAsset* VehicleSoundDataAsset;                                   // 0x0A30(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* DefaultAttributes;                                       // 0x0A38(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* CanDriveEffect;                                          // 0x0A40(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* CanGetOnEffect;                                          // 0x0A48(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* UnderWaterEffect;                                        // 0x0A50(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* ExplosionAbilityClass;                                   // 0x0A58(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSolarDamageInfo                                    ExplosionDamageInfo;                                     // 0x0A60(0x0040) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVehicleVFX                                         ExplosionVFX;                                            // 0x0AA0(0x0090) Edit, Protected, NativeAccessSpecifierProtected
		struct FVehicleVFXMesh                                     VehicleBrokenMesh;                                       // 0x0B30(0x0080) Edit, Protected, NativeAccessSpecifierProtected
		struct FVehicleVFX                                         VehicleDamagedVFXs[0x5];                                 // 0x0BB0(0x02D0) Edit, Protected, NativeAccessSpecifierProtected
		class UClass* VehicleDamageStatusEffects[0x5];                         // 0x0E80(0x0028) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxLodLevelForUpdateVisual;                              // 0x0EA8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QPW5[0x4];                                   // 0x0EAC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVehicleWeakPointSpec>                       VehicleWeakPointContainer;                               // 0x0EB0(0x0010) Edit, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPrimitiveComponent* PlatformComponent;                                       // 0x0EC0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanStandOnPlatform;                                     // 0x0EC8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IXYK[0x3];                                   // 0x0EC9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DistanceThresholdForAttachPlatform;                      // 0x0ECC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DegreeThresholdForAttachPlatform;                        // 0x0ED0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedThresholdForAttachPlatform;                         // 0x0ED4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimerForPenetration;                                     // 0x0ED8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PenetrationThreshold;                                    // 0x0EDC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CollideDamage;                                           // 0x0EE0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrashDamageWeight;                                       // 0x0EE4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SelfCrashDamageRate;                                     // 0x0EE8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PassengerDamageRatio;                                    // 0x0EEC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinPlayerDamageVelocity;                                 // 0x0EF0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CollidedCharacterDmgRatio;                               // 0x0EF4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CollideUpBoundingRatio;                                  // 0x0EF8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G6AW[0x4];                                   // 0x0EFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* CollidePushSpeedCurve;                                   // 0x0F00(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CollidePushUpAngle;                                      // 0x0F08(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CharacterProtectTime;                                    // 0x0F0C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CollisionLinearVelocityDampingForSimulatedProxy;         // 0x0F10(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CollisionLinearVelocityDampingSetDelay;                  // 0x0F14(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CollisionCompensationImpulseForSimulatedProxy;           // 0x0F18(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ADEK[0x4];                                   // 0x0F1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            StealthHideMats;                                         // 0x0F20(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6FH1[0x8];                                   // 0x0F30(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bRemoveStencil;                                          // 0x0F38(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_16SF[0x17];                                  // 0x0F39(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsLaunch;                                                // 0x0F50(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UOVX[0x1F];                                  // 0x0F51(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FMulticastSparseDelegate                             OnPlayerGetOnVehicle;                                    // 0x0F70(0x0001) InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic
		class FMulticastSparseDelegate                             OnPlayerGetOffVehicle;                                   // 0x0F71(0x0001) InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0KPY[0x116];                                 // 0x0F72(0x0116) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            OccupiedSeats;                                           // 0x1088(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarInputActionContext* InputActionContext;                                      // 0x1098(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZOB4[0x4];                                   // 0x10A0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetQuantizeNormal                           ReplicatedPlayerInputVector;                             // 0x10A4(0x000C) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YMY9[0xC];                                   // 0x10B0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetQuantize                                 RepLocation;                                             // 0x10BC(0x000C) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XA9H[0x40];                                  // 0x10C8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ActorsOnPlatform;                                        // 0x1108(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8R3A[0x24];                                  // 0x1118(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSpawnedActorHandle                                 CachedActorHandle;                                       // 0x113C(0x0004) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              CurPlayerInputMask;                                      // 0x1140(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ReplicatedPlayerInputMask;                               // 0x1141(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2D0I[0x6E];                                  // 0x1142(0x006E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarNavModifierComponent* SolarNavModifierComp;                                    // 0x11B0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDynamicAffectNavigation;                                // 0x11B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WI9M[0x4F];                                  // 0x11B9(0x004F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SkinId;                                                  // 0x1208(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1N2Q[0x14];                                  // 0x120C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAbilityCooldownTimer>                       ActivedAbilityCooldownArray;                             // 0x1220(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TBME[0x1];                                   // 0x1230(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bVehicleBurningStart;                                    // 0x1231(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AY30[0xC6];                                  // 0x1232(0x00C6) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EnterWaterDuration;                                      // 0x12F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I2CK[0x4];                                   // 0x12FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WaterLineHeight;                                         // 0x1300(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_STVG[0x4];                                   // 0x1304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarWaterActorNew* WaterActor;                                              // 0x1308(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JJEA[0x20];                                  // 0x1310(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* SpeedCameraShakeCurve;                                   // 0x1330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* SpeedScreenEffectOpacityCurve;                           // 0x1338(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* SpeedScreenEffectPlayRateCurve;                          // 0x1340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinCameraShakeSpeed;                                     // 0x1348(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinScreenEffectSpeed;                                    // 0x134C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* VehicleSpeedCameraShake;                                 // 0x1350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                VehicleSpeedScreenEffectRowId;                           // 0x1358(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KIW2[0x20];                                  // 0x1360(0x0020) MISSED OFFSET (PADDING)

	public:
		void UpdateRequiredAbilityInfo(const struct FGameplayTag& Tag, int32_t NewCount);
		void UpdateBlockedAbilityInfo(const struct FGameplayTag& Tag, int32_t NewCount);
		void StatVehicleAutoMove(int32_t MoveTime);
		void SetWeakPointHealth(unsigned char WeakPointID, float InHealth);
		void SetTakeMoveInput(bool bInTakeDirection, bool bInTakeRotation);
		void SetPlayerInputVector(const struct FVector2D& InputVector, float CameraYaw);
		void SetCurrentHealth(float InHealth);
		void SetCrossCarpad(class ASolarCarPad* InCarpad);
		void ServerSetPlayerInput(const struct FVector_NetQuantizeNormal& InputVector, unsigned char InputMask);
		void ServerSetCrossCarpad(class ASolarCarPad* InCarpad);
		void ServerSendsTransformToEveryoneWithMovementBase(TArray<unsigned char> Value, class ASolarVehiclePawn* InMovementBase);
		void ServerSendsTransformToEveryone(TArray<unsigned char> Value);
		void ServerSendsTeleportStateToEveryone(const struct FVector_NetQuantize& InLocation, const struct FVector_NetQuantizeNormal& InNormalizeEuler, float InServerTimeStamp);
		void ServerSendCorrectionToClient(float ServerTimeStamp, const struct FVector_NetQuantize& WorldLocation, const struct FVector_NetQuantizeNormal& WorldRotationCompressed);
		void ServerHandleVehicleCollision(const struct FVehicleCollisionInfo& InVehicleCollisionInfo);
		void ServerDrawActorLocationAndRotationOnClient(const struct FVector& InLocation, const struct FRotator& InRotator);
		void ServerApplyVehicleSkin(int32_t InSkinID);
		void ServerApplyDamageToVehilceAndPassenger(class ASolarVehiclePawn* OtherVehicle, float DamageToSelf, float DamageToOther, const struct FVector_NetQuantize& HitLocation);
		void ServerApplyAbilityDamageToTargets(TArray<class APawn*> Targets, const struct FGameplayAbilitySpecHandle& AbilityHandle);
		void RemoveSeatSlot(unsigned char SeatIndex);
		void ReleaseDamagedStatusVFX(EVehicleDamageStatus InDamagedStatus);
		void PlayVehicleEjectSound(class ASolarCharacter* ejectedCharacter);
		void PlaySpeedboardSound();
		void PlayDamagedStatusVFX(EVehicleDamageStatus InDamagedStatus);
		void OverlapWater();
		void OnVehicleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnStencilLoaded();
		void OnSkinDataAssetLoadedNext(const struct FSoftClassPath& SkinVehiclePath);
		void OnRep_WeakPointHealthOrStateChanged(TArray<struct FVehicleWeakPointSpec> OldVehicleWeakPointDatas);
		void OnRep_VehicleBurning();
		void OnRep_SkinId();
		void OnRep_ReplicatedPlayerInputMask(unsigned char OldReplicatedPlayerInputMask);
		void OnRep_RemoveStencil();
		void OnRep_CachedActorHandle();
		bool IsVehicleFullHealth();
		bool IsVehicleDangerous();
		bool IsVehicleBroken();
		bool IsTeammateWith(class APawn* Pawn);
		bool IsManuallyCancelAbilityActive(unsigned char SeatIndex);
		bool IsExistEnemy(class ASolarCharacter* Character);
		bool IsAbilityActive(unsigned char SeatIndex, unsigned char AbilityIndex);
		bool InSameTeam();
		TArray<struct FVehicleWeakPointSpec> GetVehicleWeakPoints();
		int32_t GetVehicleTypeID();
		unsigned char GetVehicleTeamId();
		class UPhysicalMaterial* GetVehicleRootPhysMaterial();
		int32_t GetVehicleGroupID();
		float GetSpeedInKmh();
		float GetSpeed();
		struct FVector GetSpawnOffset();
		struct FVector2D GetPlayerInputVector();
		int32_t GetPassengerCount();
		int32_t GetNextVacantSeat(int32_t InCurrentSeatIndex);
		float GetMaxHealth();
		int32_t GetManuallyCancelAbilityIndex(unsigned char SeatIndex);
		int32_t GetHealthPercentInt();
		class ASolarCharacter* GetDriverCharacter();
		float GetDangerHealthPrecent();
		float GetCurrentHealth();
		bool DoesAbilityRequiredTagMissing(int32_t CurSeatIndex, unsigned char AbilityIndex);
		bool DoesAbilityActivationTagBlocked(int32_t CurSeatIndex, unsigned char AbilityIndex);
		void DeleteStencilMesh();
		void ClientVehicleExplosion();
		void ClientVehicleBroken();
		void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, TArray<unsigned char> Value, class ASolarVehiclePawn* InMovementBase);
		void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, TArray<unsigned char> Value, class ASolarVehiclePawn* InMovementBase);
		void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, TArray<unsigned char> Value);
		void ClientSendsTransformToServer(float DriverLocalTime, TArray<unsigned char> Value);
		bool CheckUpdateVisual();
		bool CheckOpenParticleOptimization(int32_t Bias);
		bool CanActivateAbility(unsigned char SeatIndex, unsigned char AbilityIndex);
		void ApplySkinFromCDO(class ASolarVehiclePawn* SkinVehiclePawnCDO);
		unsigned char AddSeatSlot(const struct FVehicleSeatSlot& SeatSlot);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHoverVehicle
	 * Size -> 0x0038 (FullSize[0x13B8] - InheritedSize[0x1380])
	 */
	class ASolarHoverVehicle : public ASolarVehiclePawn
	{
	public:
		class USolarHoverVehicleMovement* VehicleMovement;                                         // 0x1380(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVehicleBasedMovementInfo                           ReplicatedBasedMovement;                                 // 0x1388(0x0020) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZWG5[0x10];                                  // 0x13A8(0x0010) Fix size for supers

	public:
		void OnVehicleRootHitForAttachPlatform(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnRep_ReplicatedBasedMovement(const struct FVehicleBasedMovementInfo& PreviousBasedMovement);
		void OnPlatformActorEndplay(class AActor* Actor, EEndPlayReason EndPlayReason);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAirPlaneVehicle
	 * Size -> 0x0058 (FullSize[0x1410] - InheritedSize[0x13B8])
	 */
	class ASolarAirPlaneVehicle : public ASolarHoverVehicle
	{
	public:
		unsigned char                                              UnknownData_B56D[0x8];                                   // 0x13B8(0x0008) Fix Super Size
		class UClass* CruisingEffect;                                          // 0x13C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVehicleCameraDataAsset* RollBackCamera;                                          // 0x13C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAirPlaneAnimState                                         ReplicatedAnimState;                                     // 0x13D0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I6PN[0x3F];                                  // 0x13D1(0x003F) MISSED OFFSET (PADDING)

	public:
		void ServerSetReplicatedAnimState(EAirPlaneAnimState InState, const struct FPredictionKey& InPredictionKey);
		void OnRep_ReplicatedAnimState();
		void NetMulticastPlayRollRightAnim();
		void NetMulticastPlayRollLeftAnim();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleAnimInstance
	 * Size -> 0x00C4 (FullSize[0x032C] - InheritedSize[0x0268])
	 */
	class USolarVehicleAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_1FZ5[0x8];                                   // 0x0268(0x0008) Fix Super Size
		struct FRotator                                            VehicleRudderRotator;                                    // 0x0270(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      VehicleRotationValue;                                    // 0x027C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleRotationPercent;                                  // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleCameraYaw;                                        // 0x0284(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleCameraPitch;                                      // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWithDriver;                                             // 0x028C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAbilityActivated;                                       // 0x028D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5E6Q[0x2];                                   // 0x028E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Speed;                                                   // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VelocityDegree;                                          // 0x0294(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           PlayerInputVector;                                       // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bVehicleInAir;                                           // 0x02A0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEquipWeapon;                                            // 0x02A1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7DCP[0x6];                                   // 0x02A2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage* VehicleWeaponFireMontage;                                // 0x02A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* VehicleWeaponRechamberMontage;                           // 0x02B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            VehicleWeaponPitchRot;                                   // 0x02B8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            VehicleWeaponYawRot;                                     // 0x02C4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             LeftBoneIKOffset;                                        // 0x02D0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RightBoneIKOffset;                                       // 0x02DC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUpdateVisual;                                           // 0x02E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WVZJ[0x3];                                   // 0x02E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ExternalForceScale;                                      // 0x02EC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinAddForceDistance;                                     // 0x02F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                MoveReferenceBone;                                       // 0x02FC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             AnimExternalForce;                                       // 0x0304(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CJTQ[0x1C];                                  // 0x0310(0x001C) Fix size for supers

	public:
		void OnFireMontageStart(float InMontageLength);
		void OnFireMontageEnd(class UAnimMontage* InMontage, bool bInterrupted);
		class ASolarVehiclePawn* GetVehiclePawnOwner();
		float STATIC_GetPlayTimeAgainstFootLocationCurve(class UAnimSequence* InAnimSequence, const class FName& InCurveName, float InFootLocationValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHoverVehicleAnimInstance
	 * Size -> 0x0034 (FullSize[0x0360] - InheritedSize[0x032C])
	 */
	class USolarHoverVehicleAnimInstance : public USolarVehicleAnimInstance
	{
	public:
		float                                                      VehicleSpoilerRotateFactor;                              // 0x032C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FLThrusterBoneScale;                                     // 0x0330(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FRThrusterBoneScale;                                     // 0x033C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BLThrusterBoneScale;                                     // 0x0348(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BRThrusterBoneScale;                                     // 0x0354(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAirPlanVehicleAnimInstance
	 * Size -> 0x0490 (FullSize[0x07F0] - InheritedSize[0x0360])
	 */
	class USolarAirPlanVehicleAnimInstance : public USolarHoverVehicleAnimInstance
	{
	public:
		class UAnimSequence* RollBackAnim;                                            // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollBackDuration;                                        // 0x0368(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MTQB[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage* RollLeftAnim;                                            // 0x0370(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* RollRightAnim;                                           // 0x0378(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAirPlaneAnimState                                         AnimState;                                               // 0x0380(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TJP5[0x7];                                   // 0x0381(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatCurve                                         RootLocationXCurve;                                      // 0x0388(0x0098) Protected, NativeAccessSpecifierProtected
		struct FFloatCurve                                         RootLocationYCurve;                                      // 0x0420(0x0098) Protected, NativeAccessSpecifierProtected
		struct FFloatCurve                                         RootLocationZCurve;                                      // 0x04B8(0x0098) Protected, NativeAccessSpecifierProtected
		struct FFloatCurve                                         RootRotationXCurve;                                      // 0x0550(0x0098) Protected, NativeAccessSpecifierProtected
		struct FFloatCurve                                         RootRotationYCurve;                                      // 0x05E8(0x0098) Protected, NativeAccessSpecifierProtected
		struct FFloatCurve                                         RootRotationZCurve;                                      // 0x0680(0x0098) Protected, NativeAccessSpecifierProtected
		struct FFloatCurve                                         RootRotationWCurve;                                      // 0x0718(0x0098) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V83U[0x40];                                  // 0x07B0(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAirship
	 * Size -> 0x0308 (FullSize[0x0530] - InheritedSize[0x0228])
	 */
	class ASolarAirship : public AActor
	{
	public:
		bool                                                       bShowDebug;                                              // 0x0228(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3BS1[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponentBudgeted* SKMesh;                                                  // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAirdropParas                                       AirdropParas;                                            // 0x0240(0x0020) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      SpawnAirdropDelay;                                       // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DestroyDelay;                                            // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AppearNoticeID;                                          // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_42MH[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* AppearMatCurve;                                          // 0x0270(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat* DisappearMatCurve;                                       // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* FlyEffect;                                               // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KQ2H[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          FlyEffectTransform;                                      // 0x0290(0x0030) Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UParticleSystem* AirScreenEffectBeforeAirdrop;                            // 0x02C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* AirScreenEffectAfterAirdrop;                             // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTransform                                          AirScreenEffectTransform_2;                              // 0x02D0(0x0030) Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          AirScreenEffectTransform_3;                              // 0x0300(0x0030) Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FPlaygroundEffect>                           PlaygroundEffects;                                       // 0x0330(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                FogComponentTag;                                         // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                FogDensityParam;                                         // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              AppearVoice;                                             // 0x0350(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FlyLPSoundStartBeforeAirdrop;                            // 0x0360(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FlyLPSoundStopBeforeAirdrop;                             // 0x0370(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FlyLPSoundStartAfterAirdrop;                             // 0x0380(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FlyLPSoundStopAfterAirdrop;                              // 0x0390(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VoicePlayInterval;                                       // 0x03A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ISEK[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      VoiceListBeforeAirdrop;                                  // 0x03A8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      VoiceListAfterAirdrop;                                   // 0x03B8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              HatchOpenSound;                                          // 0x03C8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAirdropDelivered;                                       // 0x03D8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bDisappear;                                              // 0x03D9(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V69I[0x16];                                  // 0x03DA(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* FlyEffectHandle;                                         // 0x03F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent* AirScreenEffectBeforeAirdropHandle_2;                    // 0x03F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent* AirScreenEffectBeforeAirdropHandle_3;                    // 0x0400(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent* AirScreenEffectAfterAirdropHandle_2;                     // 0x0408(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent* AirScreenEffectAfterAirdropHandle_3;                     // 0x0410(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BWW6[0x10];                                  // 0x0418(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent* FogComponent;                                            // 0x0428(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<int32_t, struct FAirshipConfig>                       AirshipConfigMap;                                        // 0x0430(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            RotationOffset;                                          // 0x0480(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      HatchOffset;                                             // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AirdropStartZOffset;                                     // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PointInSegmentTolerance;                                 // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* HatchOpenAnim;                                           // 0x0498(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OLCC[0x8];                                   // 0x04A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRouteInfo                                          RouteInfo;                                               // 0x04A8(0x0034) Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_S04Y[0xC];                                   // 0x04DC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMiniMapAirlineData                                 AirlineData;                                             // 0x04E8(0x0030) NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XV88[0x18];                                  // 0x0518(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnRep_RouteInfo();
		void OnRep_Disappear();
		void OnRep_AirdropDelivered();
		struct FMiniMapAirlineData K2_GetAirlineData();
		void DestroySelf();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAISense_QueryTeammate
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class USolarAISense_QueryTeammate : public UAISense
	{
	public:
		TArray<struct FAIQueryTeammateEvent>                       RegisteredEvents;                                        // 0x0080(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAISenseConfig_QueryTeammate
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class USolarAISenseConfig_QueryTeammate : public UAISenseConfig
	{
	public:
		class UClass* Implementation;                                          // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAISense_Radar
	 * Size -> 0x0058 (FullSize[0x00D8] - InheritedSize[0x0080])
	 */
	class USolarAISense_Radar : public UAISense
	{
	public:
		unsigned char                                              UnknownData_PQJI[0x58];                                  // 0x0080(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAISenseConfig_Radar
	 * Size -> 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
	 */
	class USolarAISenseConfig_Radar : public UAISenseConfig
	{
	public:
		class UClass* Implementation;                                          // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FRadarDetectConfig>                          RadarConfigs;                                            // 0x0050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAITargetComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class USolarAITargetComponent : public UActorComponent
	{
	public:
		int32_t                                                    AIActorCapacity;                                         // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WVPA[0x2C];                                  // 0x00B4(0x002C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAkAudioSettings
	 * Size -> 0x00A0 (FullSize[0x00D8] - InheritedSize[0x0038])
	 */
	class USolarAkAudioSettings : public UDeveloperSettings
	{
	public:
		bool                                                       EnableBankLoadStrategy;                                  // 0x0038(0x0001) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableDebugMode;                                         // 0x0039(0x0001) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A98J[0x2];                                   // 0x003A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayReleaseBankTime;                                    // 0x003C(0x0004) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              SoundBankEventTable[0x28];                               // 0x0040(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<class FName>                                        InGameSceneName;                                         // 0x0068(0x0010) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        InLobbySceneName;                                        // 0x0078(0x0010) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        TutorialSceneName;                                       // 0x0088(0x0010) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        HomeSceneName;                                           // 0x0098(0x0010) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        WaitingLandSceneName;                                    // 0x00A8(0x0010) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarAudioDetail>                           BankDetailsArray;                                        // 0x00B8(0x0010) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZRPG[0x10];                                  // 0x00C8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAkGameObject
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class USolarAkGameObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_ES27[0xA0];                                  // 0x0028(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableTick;                                             // 0x00C8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GR1B[0x7];                                   // 0x00C9(0x0007) MISSED OFFSET (PADDING)

	public:
		void STATIC_Wakeup();
		void STATIC_UnloadBank(const class FString& InBankName);
		void STATIC_UnLoadAllBanks();
		void STATIC_Suspend(bool in_bRenderAnyway);
		int32_t StopSoundByEvent(const class FString& in_EventName);
		int32_t STATIC_StaticStopSoundByEvent(const class FString& in_EventName);
		void STATIC_StaticSetRTPCValue(const class FString& RTPC, float Value, int32_t InterpolationTimeMs);
		int32_t STATIC_StaticPostAkEventByNameAndWaitForEnd(class UObject* WorldContextObject, const class FString& in_EventName, const struct FLatentActionInfo& LatentInfo);
		int32_t STATIC_StaticPostAkEventByName(const class FString& in_EventName);
		int32_t STATIC_StaticPlaySoundByEvent(const class FString& in_EventName);
		int32_t STATIC_StaticPlaySoundAtLocationByName(const class FString& AkName, const struct FVector& Location, const struct FRotator& Orientation, class UObject* WorldContextObject);
		int32_t STATIC_StaticPlaySoundAtLocation(class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation, class UObject* WorldContextObject);
		int32_t STATIC_StaticComponentPostAkEventByName(class UAkComponent* AkComponent, const class FString& in_EventName);
		void SolarLoadAllBanks();
		void SetSwitch(const class FString& SwitchGroup, const class FString& SwitchState);
		void SetRTPCValue(const class FString& RTPC, float Value, int32_t InterpolationTimeMs);
		void STATIC_SetMasterRTPCValue(float Value, int32_t InterpolationTimeMs);
		void STATIC_SetMasterRTPCMute(bool Mute);
		void STATIC_SetGlobalRTPCValue(const class FString& RTPC, float Value, int32_t InterpolationTimeMs);
		void ReceiveTick(float DeltaTime);
		void ReceiveEndPlay(EEndPlayReason EndPlayReason);
		void ReceiveBeginPlay();
		int32_t PostAkEventByNameAndWaitForEnd(const class FString& in_EventName, const struct FLatentActionInfo& LatentInfo);
		int32_t PostAkEventByName(const class FString& InEventName1, const class FString& InEventName2);
		int32_t PlaySoundByEvent(const class FString& in_EventName);
		void STATIC_LoadBank(const class FString& InBankName);
		void STATIC_LoadAllBanks();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAkSoundManager
	 * Size -> 0x0270 (FullSize[0x02A0] - InheritedSize[0x0030])
	 */
	class USolarAkSoundManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_KAA9[0x270];                                 // 0x0030(0x0270) MISSED OFFSET (PADDING)

	public:
		void UnloadBankIgnoreStrategy(const class FName& BankName);
		void SetVoiceLanguage();
		void ReloadVoiceBanks();
		void OnBankLoadedForEventAtLocationCallbackFunc(EAkResult in_loadResult, uint32_t in_bankID);
		void OnAkBankUnloadedCallbackFunc(EAkResult in_loadResult, uint32_t in_bankID);
		void OnAkBankLoadedCallbackFunc(EAkResult in_loadResult, uint32_t in_bankID);
		void LoadBankIgnoreStrategy(const class FName& BankName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAngleViewWidget
	 * Size -> 0x0230 (FullSize[0x0368] - InheritedSize[0x0138])
	 */
	class USolarAngleViewWidget : public UWidget
	{
	public:
		struct FSlateBrush                                         JoyStickThumb;                                           // 0x0138(0x0098) Edit, NativeAccessSpecifierPrivate
		struct FSlateBrush                                         JoyStickThumbPress;                                      // 0x01D0(0x0098) Edit, NativeAccessSpecifierPrivate
		struct FSlateBrush                                         JoyStickBG;                                              // 0x0268(0x0098) Edit, NativeAccessSpecifierPrivate
		struct FVector2D                                           VisualSize;                                              // 0x0300(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector2D                                           ThumbSize;                                               // 0x0308(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector2D                                           InputScale;                                              // 0x0310(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ActiveOpacity;                                           // 0x0318(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      InactiveOpacity;                                         // 0x031C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TimeUntilDeactive;                                       // 0x0320(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPreventReCenter;                                        // 0x0324(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2XRP[0x13];                                  // 0x0325(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnJoystickPressed;                                       // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoystickRelease;                                       // 0x0348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInputYawAndPitch;                                      // 0x0358(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAnimInstance
	 * Size -> 0x0558 (FullSize[0x07C0] - InheritedSize[0x0268])
	 */
	class USolarAnimInstance : public UAnimInstance
	{
	public:
		class ASolarCharacter* SolarCharacterOwner;                                     // 0x0268(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ENetRole                                                   OwnerRole;                                               // 0x0270(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XGXA[0xB];                                   // 0x0271(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                LeftHandIKSocketName;                                    // 0x027C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                RightHandWeaponSocketName;                               // 0x0284(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2JY4[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          LeftHandIKSocket2BoneTrans;                              // 0x0290(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             LeftHandEffectorLocation;                                // 0x02C0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            LeftHandEffectorRotation;                                // 0x02CC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SEOW[0x24];                                  // 0x02D8(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CurrentLeftHandJointLocation;                            // 0x02FC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RightHandEffectorLocation;                               // 0x0308(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RightHandJointLocation;                                  // 0x0314(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LeftIKHandWeight;                                        // 0x0320(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentReloadTimeRate;                                   // 0x0324(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentSwitchWeaponTimeRate;                             // 0x0328(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentBoltTimeRate;                                     // 0x032C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsJog;                                                   // 0x0330(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInWater;                                                // 0x0331(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VA5G[0x2];                                   // 0x0332(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ViewPitch;                                               // 0x0334(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewYaw;                                                 // 0x0338(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SimulatedProxyViewSmoothSpeed;                           // 0x033C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YR36[0x8];                                   // 0x0340(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBlendSpace* FireTPPBlendSpace;                                       // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireTPPBlendSpaceX;                                      // 0x0350(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FIreTPPBlendSpaceY;                                      // 0x0354(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinSwimSpeed;                                            // 0x0358(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Direction;                                               // 0x035C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Speed;                                                   // 0x0360(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InputDirection;                                          // 0x0364(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EIdleTurnType                                              IdleTurnType;                                            // 0x0368(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TZY5[0x3];                                   // 0x0369(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurnExplicitTime;                                        // 0x036C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageDirection;                                         // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageReactionAlpha;                                     // 0x0374(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageNomalizeTime;                                      // 0x0378(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3KNN[0x108];                                 // 0x037C(0x0108) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLeftHandGripConfig                                 CurrentGripData;                                         // 0x0484(0x0084) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NONK[0x84];                                  // 0x0508(0x0084) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Fire2PlayRateStand;                                      // 0x058C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Fire2PlayRateCrouch;                                     // 0x0590(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHoldingShield;                                          // 0x0594(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShieldRechargeIK;                                        // 0x0595(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JMA0[0x4E];                                  // 0x0596(0x004E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FallingInputScale;                                       // 0x05E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             IKOffsetLeftFootVector;                                  // 0x05E8(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             IKOffsetRightFootVector;                                 // 0x05F4(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             JointTargetLeftFootVector;                               // 0x0600(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             JointTargetRightFootVector;                              // 0x060C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            LeftFootRotation;                                        // 0x0618(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            RightFootRotation;                                       // 0x0624(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             HipOffsetVector;                                         // 0x0630(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FootIKTraceDistanceRate;                                 // 0x063C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrouchFootIKTraceDistanceRate;                           // 0x0640(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FootIKInterpSpeed;                                       // 0x0644(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LeftFootSocket;                                          // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                RightFootSocket;                                         // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AnimParam_LeftOrRight;                                   // 0x0658(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K9CO[0x3];                                   // 0x0659(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LandingBlendWeight;                                      // 0x065C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DefaultLeftHandWeaponAttachingBlendTime;                 // 0x0660(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DefaultLeftHandWeaponDetachingBlendTime;                 // 0x0664(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentLeftHandWeaponAttachingBlendTime;                 // 0x0668(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentLeftHandWeaponDetachingBlendTime;                 // 0x066C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XHLU[0x28];                                  // 0x0670(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FootIKEnableDelayTime;                                   // 0x0698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bActiveFootIK;                                           // 0x069C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N15I[0x33];                                  // 0x069D(0x0033) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FlailRate;                                               // 0x06D0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ConfigPitchToZeroTime;                                   // 0x06D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FJetPackPoseSpeedRange                              JetPack2PoseSpeedRangeX;                                 // 0x06D8(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FJetPackPoseSpeedRange                              JetPack2PoseSpeedRangeY;                                 // 0x06E0(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FJetPackPoseSpeedRange                              JetPack2PoseSpeedRangeZ;                                 // 0x06E8(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      JetPack2PoseRestoreSmoothSpeed;                          // 0x06F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FJetPackPoseSpeedRange                              JetPack2UnderWaterPoseSpeedRangeX;                       // 0x06F4(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FJetPackPoseSpeedRange                              JetPack2UnderWaterPoseSpeedRangeY;                       // 0x06FC(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SNSL[0xE];                                   // 0x0704(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bNewJet;                                                 // 0x0712(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsJetFlying;                                            // 0x0713(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bEnableDamageReact : 1;                                  // 0x0714(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableWeaponAdditiveA : 1;                              // 0x0714(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableHandIK : 1;                                       // 0x0714(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableFootIK : 1;                                       // 0x0714(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableWeaponAdditiveB : 1;                              // 0x0714(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableWeaponJitter : 1;                                 // 0x0714(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaxLODDamageReact;                                       // 0x0715(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaxLODWeaponAdditiveA;                                   // 0x0716(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaxLODHandIK;                                            // 0x0717(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaxLODFootIK;                                            // 0x0718(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaxLODWeaponAdditiveB;                                   // 0x0719(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaxLODWeaponJitter;                                      // 0x071A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsDead : 1;                                             // 0x071B(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathAnimStartPosition;                                  // 0x071C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<ESpecAnimInstType, class UClass*>                     SpecAnimBPs;                                             // 0x0720(0x0050) Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       bIsWalking : 1;                                          // 0x0770(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsCrouching : 1;                                        // 0x0770(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsFalling : 1;                                          // 0x0770(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsFlying : 1;                                           // 0x0770(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSwimming : 1;                                         // 0x0770(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSprinting : 1;                                        // 0x0770(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsInhibitSprinting : 1;                                 // 0x0770(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSixDirRunForward : 1;                                 // 0x0770(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsVaulting : 1;                                         // 0x0771(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7UIZ[0x2];                                   // 0x0772(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EWalkMode                                                  CurrentWalkMode;                                         // 0x0774(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWalkMode                                                  LastWalkMode;                                            // 0x0775(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAirMoveMode                                               CurrentAirMoveMode;                                      // 0x0776(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAirMoveMode                                               LastAirMoveMode;                                         // 0x0777(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECruiseAnimState                                           CurrentCruiseState;                                      // 0x0778(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G66S[0x7];                                   // 0x0779(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence* CruiseStartSequence;                                     // 0x0780(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence* CruiseLoopSequence;                                      // 0x0788(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence* CruiseEndSequence;                                       // 0x0790(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinSpeedForSkydiveFlyingInputBonus;                      // 0x0798(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSpeedForSkydiveFlyingInputBonus;                      // 0x079C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InputYThresholdToCalcInputYByCamera;                     // 0x07A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDeltaYawFromCameraToGetMaxInputY;                     // 0x07A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESkydiveStage                                              CurrentSkydiveStage;                                     // 0x07A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UIPL[0x3];                                   // 0x07A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinWallRunSurfaceAngle;                                  // 0x07AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxWallRunSurfaceAngle;                                  // 0x07B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7J65[0x4];                                   // 0x07B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EWeaponStatus                                              WeaponStatus;                                            // 0x07B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsBolting : 1;                                          // 0x07B9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsReloading : 1;                                        // 0x07B9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsLeftHandDetaching : 1;                                // 0x07B9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UnknownData_R3SD : 1;                                    // 0x07B9(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsInVehicle : 1;                                        // 0x07B9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESkillAnimType                                             CurrentSkillAnimType;                                    // 0x07BA(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B2X7[0x5];                                   // 0x07BB(0x0005) MISSED OFFSET (PADDING)

	public:
		void OnMontagePlayEnded(class UAnimMontage* Montage, bool bInterrupted);
		bool NeedResolveWeaponJitter();
		bool JetPack2IsDashingCompletelyOver();
		bool IsHoldingWeapon();
		bool IsAiming();
		float GetWallRunSurfaceAngle();
		EWallRunState GetWallRunState();
		struct FVector2D GetSkydiveFlyingInput();
		int32_t GetOwnerGroupID();
		struct FVector GetJetPackDashAnimationBlend();
		struct FVector GetInputVector();
		struct FVector GetFallingInputVector();
		float GenJumpDirection(float InInputDirection);
		float GenBackwardDirection(float InInputDirection);
		bool CheckNewJetAndReset();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAnimNotify_Damage
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USolarAnimNotify_Damage : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAnoHelper
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarAnoHelper : public UObject
	{
	public:
		unsigned char                                              UnknownData_XISW[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bOpenAnoSDK;                                             // 0x0030(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R7CC[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		void SendAntiDataToSsmOnDs(const class FString& AntiDataLog, class ASolarPlayerController* PC);
		void SendAntiDataToSsmOnClientNative(const class FString& ExtraParam, EAnoAntiDataType AntiType);
		void SendAntiDataToSsmOnClient(const class FString& Param, EAnoAntiDataType AntiType);
		void InitializeBind();
		class FString GetAntiLogOnClient(EAnoAntiDataType Type);
		void AnoUnRegisterCallBack();
		void AnoSentDataToSvr(const struct FAnoSDKAntiData& Data);
		void AnoSentCoreTimeData(const struct FAnoSDKAntiData& AntiData);
		void AnoSDKSendData(const struct FAnoSDKAntiData& AntiData);
		void AnoSDKResume();
		void AnoSDKPause();
		void AnoChangeAntiDataFlow(const struct FAnoSDKAntiData& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarApplicationLifetimeManager
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class USolarApplicationLifetimeManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_MTGW[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    AppWillDeactivateTimestamp;                              // 0x0038(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int64_t                                                    AppHasReactivatedTimestamp;                              // 0x0040(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IL21[0x18];                                  // 0x0048(0x0018) MISSED OFFSET (PADDING)

	public:
		void ReceiveOnWindowMinimized(bool bIsMinimized);
		void ReceiveOnAppWillDeactivate(int64_t InTimestamp);
		void ReceiveOnAppHasReactivated(int64_t InTimestamp);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAssetManager
	 * Size -> 0x0140 (FullSize[0x0578] - InheritedSize[0x0438])
	 */
	class USolarAssetManager : public UAssetManager
	{
	public:
		unsigned char                                              UnknownData_IX46[0x18];                                  // 0x0438(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAssetManagerPreloadCompleted;                          // 0x0450(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USolarChunkAssignData* ChunkAssignDataCache;                                    // 0x0460(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, class UObject*>                        CachedObjMap;                                            // 0x0468(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S3MU[0xC0];                                  // 0x04B8(0x00C0) MISSED OFFSET (PADDING)

	public:
		void UnLoadPrimaryAssetByLabelPathForLua(const class FString& PrimaryAssetPath);
		void PreloadGameNormalAssets(class USolarGameInstanceBase* GameInstancePtr);
		void OnBindingActorDestory(class AActor* Actor);
		float GetPreloadAssetsProgress();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAssetManagerSettings
	 * Size -> 0x0228 (FullSize[0x0260] - InheritedSize[0x0038])
	 */
	class USolarAssetManagerSettings : public UDeveloperSettings
	{
	public:
		TArray<struct FPrimaryAssetTypeInfo>                       PrimaryAssetTypesToScan;                                 // 0x0038(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDirectoryPath>                              DirectoriesToExclude;                                    // 0x0048(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPrimaryAssetRulesOverride>                  PrimaryAssetRules;                                       // 0x0058(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPrimaryAssetRulesCustomOverride>            CustomPrimaryAssetRules;                                 // 0x0068(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              WorldPlayStageConfig[0x50];                              // 0x0078(0x0050) UNKNOWN PROPERTY: MapProperty
		TMap<class FString, ESolarPlayStage>                       FolderDefaultPlayStageConfig;                            // 0x00C8(0x0050) Edit, Config, NativeAccessSpecifierPublic
		bool                                                       bOnlyCookProductionAssets;                               // 0x0118(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldManagerDetermineTypeAndName;                      // 0x0119(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldGuessTypeAndNameInEditor;                         // 0x011A(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldAcquireMissingChunksOnLoad;                       // 0x011B(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0S91[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAssetManagerRedirect>                       PrimaryAssetIdRedirects;                                 // 0x0120(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FAssetManagerRedirect>                       PrimaryAssetTypeRedirects;                               // 0x0130(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FAssetManagerRedirect>                       AssetPathRedirects;                                      // 0x0140(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              MetaDataTagsForAssetRegistry[0x50];                      // 0x0150(0x0050) UNKNOWN PROPERTY: SetProperty
		struct FSoftObjectPath                                     ChunkAssignConfigPath;                                   // 0x01A0(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPreloadBundle>                              PreloadBundles;                                          // 0x01B8(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoftObjectPath>                             PreloadAssets;                                           // 0x01C8(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoftClassPath>                              PreloadClassAssets;                                      // 0x01D8(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ItemActorDataTable;                                      // 0x01E8(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     BackpackTrailAssemblingDataTable;                        // 0x0200(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ItemResourceDataTable;                                   // 0x0218(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     BuffEffectDataTable;                                     // 0x0230(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ScreenEffectDataTable;                                   // 0x0248(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAssistAimInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAssistAimInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAssistAimSimpleActor
	 * Size -> 0x0070 (FullSize[0x02A8] - InheritedSize[0x0238])
	 */
	class ASolarAssistAimSimpleActor : public AStaticMeshActor
	{
	public:
		unsigned char                                              UnknownData_8CT6[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSupportAssistAim;                                       // 0x0240(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A99L[0x3];                                   // 0x0241(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CenterOffset;                                            // 0x0244(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FWeaponAssistAimTargetConfig                        AssistAimTargetConfig;                                   // 0x0250(0x0048) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WCT7[0x10];                                  // 0x0298(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetCurrentVelocity(const struct FVector& Velocity);
		struct FVector GetCenterLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAttributeSubComponent
	 * Size -> 0x00B8 (FullSize[0x0168] - InheritedSize[0x00B0])
	 */
	class USolarAttributeSubComponent : public UActorComponent
	{
	public:
		TMap<int32_t, class USolarAttributeSubData*>               AttributeSubs;                                           // 0x00B0(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<struct FSolarAttributeSubReplicateData>             AttributeSubRepData;                                     // 0x0100(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, float>                                       ClientAttributeSubValues;                                // 0x0110(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AGVH[0x8];                                   // 0x0160(0x0008) MISSED OFFSET (PADDING)

	public:
		void RemoveModifier(int32_t AttributeSubID, const class FName& Name);
		void OnRep_AttributeSubRepDatas();
		void OnAttributeSubChanged();
		float GetValue(int32_t AttributeSubID);
		class USolarAttributeSubSystem* GetAttributeSubSystem();
		class USolarAttributeSubComponent* STATIC_GetAttributeSubComponentFromActor(class AActor* InActor);
		int32_t AddModifier(int32_t AttributeSubID, EGameplayModOp InOpType, float Magnitude, const class FName& Name);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAttributeSubData
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USolarAttributeSubData : public UObject
	{
	public:
		class USolarAttributeSubModifierGroup* LocalModifier;                                           // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarAttributeSubModifierGroup* GlobalModifier;                                          // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9LUL[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AttributeID;                                             // 0x0050(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentValue;                                            // 0x0054(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxValue;                                                // 0x0058(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinValue;                                                // 0x005C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseValue;                                               // 0x0060(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZSV0[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnModifierChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAttributeSubModifierGroup
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USolarAttributeSubModifierGroup : public UObject
	{
	public:
		unsigned char                                              UnknownData_ID6Y[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAttributeSubSystem
	 * Size -> 0x00A8 (FullSize[0x00D8] - InheritedSize[0x0030])
	 */
	class USolarAttributeSubSystem : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_3UCI[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FSolarAttributeConfig>                AttributeDefaultData;                                    // 0x0038(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate
		TMap<int32_t, class USolarAttributeSubModifierGroup*>      GlobalModifiers;                                         // 0x0088(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate

	public:
		float CharacterTakeDamage(class USolarAttributeSubComponent* AttributeSubComp, float Damage);
		float CalcWeaponFireDamage(class USolarAttributeSubComponent* AttributeSet, int32_t ModeIdx);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAutoFireInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarAutoFireInterface : public UInterface
	{
	public:
		bool CanTriggerWeaponAutoFire(class ASolarCharacter* InSourceCharacter, const struct FVector& InStartLocation, const struct FHitResult& InAutoFireHitResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAutoNavLinkVolume
	 * Size -> 0x0040 (FullSize[0x02A0] - InheritedSize[0x0260])
	 */
	class ASolarAutoNavLinkVolume : public AVolume
	{
	public:
		bool                                                       bOverrideGlobalSetting;                                  // 0x0260(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SQEO[0x3];                                   // 0x0261(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAutoNavLinkSetting                                 AutoNavLinkSetting;                                      // 0x0264(0x003C) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAutoSaveDataTable
	 * Size -> 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
	 */
	class USolarAutoSaveDataTable : public UDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBackpackActor
	 * Size -> 0x00E8 (FullSize[0x0310] - InheritedSize[0x0228])
	 */
	class ASolarBackpackActor : public AActor
	{
	public:
		class USceneComponent* BackpackRoot;                                            // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBackpackVertAnimMeshComponent* BackpackMesh;                                            // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* BackPackActorOwner;                                      // 0x0238(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASolarBackpackSFX*>                           BackpackSFX;                                             // 0x0240(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarBackpackSFX* BackpackOffgasSFX;                                       // 0x0250(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8JK2[0xC];                                   // 0x0258(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OriginScale;                                             // 0x0264(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M3YD[0x3];                                   // 0x0268(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableMeshEffect;                                       // 0x026B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KY99[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* TrailClass;                                              // 0x0270(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* OffgasClass;                                             // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ListenSet[0x50];                                         // 0x0280(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_O7QC[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AssemblingId;                                            // 0x02D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                KnapsackFlySoundName;                                    // 0x02E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartKnapsackLandingSoundName;                           // 0x02F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StopKnapsackLandingSoundName;                            // 0x02F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StartWallRunSoundName;                                   // 0x0300(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                StopWallRunSoundName;                                    // 0x0308(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetBackpackVisibilityByFlag(bool bNewVisibility, int32_t Flag);
		void RefreshActorEffect();
		void OnMeshEffectFactorChange();
		void OnChildPSCompPreActive(class UParticleSystemComponent* PSComponent);
		void OnChildPSCompFinish(class UParticleSystemComponent* PSComponent);
		bool IsFly();
		bool IsCharging();
		bool HasEnergy();
		float GetBackpackOrginScale();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBackpackAnimInstance
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class USolarBackpackAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_92WU[0x8];                                   // 0x0268(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBackpackCompInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarBackpackCompInterface : public UInterface
	{
	public:
		class USolarBackpackComponent* GetSolarBackpackComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBackpackComponent
	 * Size -> 0x0348 (FullSize[0x03F8] - InheritedSize[0x00B0])
	 */
	class USolarBackpackComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_PTLL[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeathBoxEnergyRate;                                      // 0x00B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RebirthEnergyRate;                                       // 0x00BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O42C[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnWeaponCreateCompleteDelegate;                          // 0x00C8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XGOB[0x78];                                  // 0x00D8(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InitialSolarCharge;                                      // 0x0150(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SolarChargeInterval;                                     // 0x0154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialEnergyLimit;                                      // 0x0158(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialExtraEnergyLimit;                                 // 0x015C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialExtraEnergyCharge;                                // 0x0160(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialChargeCD;                                         // 0x0164(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ES1Y[0x10];                                  // 0x0168(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RechargeFrequencyFromSky;                                // 0x0178(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RechargeFrequencyFromDeathBox;                           // 0x017C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RechargeFrequencyFromPile;                               // 0x0180(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RechargeQuantityFromSky;                                 // 0x0184(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RechargeQuantityFromDeathBox;                            // 0x0188(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RechargeQuantityFromPile;                                // 0x018C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DVPL[0x90];                                  // 0x0190(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      JetPackVerticalDashSpeedScale;                           // 0x0220(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JetPackHorizontalDashSpeedScale;                         // 0x0224(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, class UClass*>                               ItemAbilities;                                           // 0x0228(0x0050) Edit, BlueprintVisible, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TMap<int32_t, struct FGameplayAbilitySpecHandle>           GivenAbilityHandles;                                     // 0x0278(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FILW[0x54];                                  // 0x02C8(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bWeaponPartPickable;                                     // 0x031C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DVVL[0x3];                                   // 0x031D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, int32_t>                                     defaultDeathBoxEnergyConfig;                             // 0x0320(0x0050) NativeAccessSpecifierPublic
		TMap<int32_t, struct FDateTime>                            DroppedItemIDMap;                                        // 0x0370(0x0050) Protected, NativeAccessSpecifierProtected
		float                                                      DiscardItemDelayNoticeTime;                              // 0x03C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TU7Z[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              GradeRankProportion;                                     // 0x03C8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            InitialGridNum;                                          // 0x03D8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            CustomMode_Hunt_InitialGridNum;                          // 0x03E8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void WeaponCreateCompleteDelegate__DelegateSignature(EWeaponSlotType SlotType, class ASolarPlayerWeapon* WeaponPtr, class USolarBackpackComponent* SolarBackpackComponent);
		void UpdateCurrentExtraEnergy(float UpdateValue, EEnergyUsage Usage);
		void UpdateCurrentEnergy(float UpdateValue, EEnergyUsage Usage);
		void UpdateConsumeSlotUI();
		bool TryTriggerAbility(int32_t InItemID);
		void TrySendDropItemTips(int32_t InDroppedItemID);
		float TakeDeathBoxEnergy();
		void SmoothEnergy(float Amount);
		void SetMaxPileMap(int32_t ItemID, int32_t MaxNum);
		void SetBoxCharging(bool bSet);
		void SetBackPackGM(EGmType gmtypy, int32_t ID, int32_t Num, int32_t Slot);
		bool ServerUseItem(int32_t ItemID, int32_t Num);
		void ServerSetJetPackModule(int32_t NewJetPackModuleID, bool bForVertical);
		void ServerSetEnergyState(EEnergyState State);
		void ServerRPCUpgradeWeapon(class ASolarElectricShop* InTargetShop, class ASolarPlayerWeapon* InTargetWeapon);
		void ServerRPCUpgradeShield();
		void ServerRPCTakeWeaponPartToBag(int32_t Slot, int32_t WeaponPartType);
		void ServerRPCTakeBagPartToWeapon(int32_t Slot, int32_t WeaponPartType);
		void ServerRPCSwitchWeaponPart(int32_t Slot, int32_t WeaponPartType);
		void ServerRPCPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, class ASolarElectricShop* InTargetShop);
		void ServerRPCDisCardWeaponUICall(int32_t Slot);
		void ServerRPCDiscardWeaponPart(int32_t Slot, int32_t WeaponPartType);
		void ServerRPCDiscardWeapon(int32_t InSlot);
		void ServerRPCDisCardItemUICall(int32_t ID, int32_t Num);
		void ServerRPCDiscardItem(int32_t InItemID, int32_t InItemNum);
		bool ServerDiscardWeapon(int32_t Slot, int32_t InTriggerType);
		bool ServerDiscardFromBackpackByType(EItemType ItemType, bool InDropItem, int32_t InTriggerType);
		bool ServerDiscardFromBackpack(int32_t ItemID, int32_t Num, bool InDropItem, int32_t InTriggerType);
		void ServerConsumeExtraEnergy(float Amount, EEnergyUsage Usage);
		void ServerConsumeEnergy(float Amount, EEnergyUsage Usage);
		void ServerClearJetModule();
		void ServerClearEnergyState(EEnergyState State);
		void ServerClearAllItems();
		void ServerBackpackGM(EGmType InGmType, int32_t InItemID, int32_t InItemNum, int32_t InSlot);
		bool ServerAddWeaponToWeaponSysByDataCache(EWeaponSlotType SlotType, const struct FSolarItemData& WeaponData, bool bDestroyPrev, bool IsAutoPickup, int32_t InTriggerType, class ASolarPlayerWeapon* WeaponActorExists);
		int32_t ServerAddToItemMapByIdAndNumForced(int32_t ItemID, int32_t Num);
		int32_t ServerAddToItemMap(const struct FSolarItemData& ItemData);
		void ServerAddToEquipMap(const struct FSolarItemData& ItemData, bool Bydefault, bool InDropItem);
		int32_t ServerAddToBackpackByIdAndNum(int32_t ItemID, int32_t Num, bool Bydefault, float CurValue, bool NeedReset, int32_t UserId, int32_t TriggerType, int32_t SourceType);
		int32_t ServerAddToBackpack(const struct FSolarItemData& ItemData, bool Bydefault, int32_t TriggerType);
		void ReqUseEnergy(float Amount, EEnergyUsage Usage);
		void RequestUpgradeWeapon(class ASolarElectricShop* InTargetShop, class ASolarPlayerWeapon* InTargetWeapon);
		void RequestUpgradeShield();
		void ReqesutPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, class ASolarElectricShop* InTargetShop);
		void RefreshWeaponPartsInBackPackUI();
		void RefreshWeaponInBackPackUIInternal();
		void RefreshWeaponInBackPackUI();
		void RefreshItemInBackPackUI();
		void RefreshEquipInBackPackUI();
		void RefreshBackPackUIState();
		void PurchaseEShopItemsResponse_Implementation(int32_t InProductID, bool bSuccess, class ASolarElectricShop* InTargetShop);
		int32_t PredictEnergy(float Amount);
		void OnReceiveItemAbilityCoolDown(const struct FGameplayTag& Tags, bool bAdd);
		bool NetUseEnergy(float InCostEnergy, EEnergyUsage Usage);
		void NetTakeWeaponPartToBagLuaCall(int32_t Slot, int32_t WeaponPartType);
		void NetTakeBagPartToWeaponLuaCall(int32_t Slot, int32_t WeaponPartType);
		void NetSwitchWeaponPartLuaCall(int32_t Slot, int32_t WeaponPartType);
		void NetDiscardWeaponPartLuaCall(int32_t Slot, int32_t WeaponPartType);
		bool ModuleOverflow2(int32_t ModuleMax);
		bool ModuleOverflow(int32_t ModuleMax);
		void LogBackPackItem();
		bool IsReviveItemRecommend();
		bool IsReviveItemPickable();
		bool IsReviveItem(int32_t InItemID);
		bool IsExtraEnergyID(int32_t ID);
		bool IsEquippedWeapon(int32_t InThisID);
		bool IsEquippedOrHasBetterPart(int32_t PartType, int32_t Level);
		bool IsEnergyID(int32_t ID);
		int32_t IsBetterWeaponThanEquiped(const struct FSolarItemData& InItemData, int32_t InWeaponLevel, int32_t InWeaponExp);
		bool IsBetterWeaponForBag(const struct FSolarItemData& InItemData, int32_t InWeaponLevel, int32_t InWeaponExp);
		bool IsBetterScopeForBag(int32_t PartType, int32_t Level);
		bool IsBetterPartForBag(int32_t PartType, int32_t Level);
		void InitDefaultItem(int32_t ItemID, int32_t Num);
		void InitDeathBoxEnergyRate();
		bool HasEmptyWeaponSlot();
		bool GetWeaponSlotEmpty(int32_t Slot);
		bool GetWeaponPartInBagClient(int32_t TargetPartType, int32_t* OutPartLevel, int32_t* OutItemID);
		struct FSolarItemData GetWeaponItemDataBySlot(int32_t Slot);
		bool GetWeaponDataBySolt(int32_t Slot, struct FSolarItemData* ItemData);
		float GetTotalEnergy();
		float GetQuantityFrom(EEnergyUsage Usage);
		struct FSolarItemData GetNewItemData(int32_t ItemID, int32_t Num);
		float GetMaxExtraEnergy();
		float GetMaxEnergy();
		float GetMaxDeathBoxEnergyFromConfig();
		int32_t GetItemNumById(int32_t ItemID);
		int32_t GetItemMaxPile(int32_t ItemID);
		bool GetItemDataByType(EItemType ItemType, struct FSolarItemData* ItemData);
		bool GetItemDataById(int32_t ItemID, struct FSolarItemData* ItemData);
		float GetFrequencyFrom(EEnergyUsage Usage);
		struct FSolarItemData GetEquipItemDataByType(EItemType ItemType);
		int32_t GetEquipIdByType(EItemType ItemType);
		float GetCurrExtraEnergy();
		struct FSolarItemData GetCurrentWeaponItemData();
		bool GetCurrentWeaponIsOverloading();
		void GetCurrentEquipItems(TArray<int32_t>* OutArray);
		float GetCurrEnergy();
		class ASolarCharacter* GetCharacterOwner();
		EWeaponSlotType GetBestSuitSlotForCandidateWeapon(const struct FSolarItemData& WeaponData, bool IsAutoPickup);
		bool GetAnyScopeInBagClient(int32_t* OutPartType, int32_t* OutPartLevel, int32_t* OutItemID);
		float GetAbilityRemainingCD(int32_t InItemID);
		float GetAbilityDuration(int32_t InItemID);
		void GameStatistics_ItemUseCount(const struct FSolarItemData& InItemData);
		void ExecuteGM(const class FString& InStrGM);
		void EquipModuleByID(int32_t ModuleID);
		int32_t EquipModule(int32_t ID, float ModuleMax);
		void EquipBatteryByID(int32_t BatteryID);
		int32_t EquipBattery(int32_t ID, float BatteryMax, float Charge, float CD);
		void DiscardItemAndResetCharacterData(const struct FSolarItemData& DiscardItem, bool DiscardDataOnly);
		void DiscardItem(const struct FSolarItemData& DiscardItem);
		void DelayCheckClearAbility(int32_t InItemID);
		void CommitEnergy(int32_t ID);
		bool ClearBackpackItemByID(int32_t InItemID);
		void CheckToGiveAbility(int32_t InItemID);
		void CheckToClearAbility(int32_t InItemID);
		bool CheckIsRecWeaponParts(int32_t ItemID);
		bool CheckIsEquippedDifferentScope(int32_t PartID);
		bool CheckCanAutoPickupWeaponPart(int32_t ItemID);
		float ChargeMain(float Amount, EEnergyUsage Usage);
		float ChargeExtra(float Amount, EEnergyUsage Usage);
		void CancelEnergy(int32_t ID);
		bool BatteryOverflow(int32_t BatteryMax);
		EItemModifyResult AddBackpackItemByID(int32_t InItemID, int32_t InItemNum, bool InDropItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BackpackTrailAssemblingInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBackpackTrailAssemblingInterface : public UInterface
	{
	public:
		void OnBackpackTrailAssembling(const struct FBackpackTrailAssemblingParams& Params, EBackpackPropellingMode PropellingMode);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLeggedVehicle
	 * Size -> 0x0048 (FullSize[0x13C8] - InheritedSize[0x1380])
	 */
	class ASolarLeggedVehicle : public ASolarVehiclePawn
	{
	public:
		class USolarLeggedVehicleMovement* LeggedVehicleMovement;                                   // 0x1380(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCapsuleComponent* VehicleCapsule;                                          // 0x1388(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPrimitiveComponent* BlockForVehicleComp;                                     // 0x1390(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockForVehicleCollisionDelay;                           // 0x1398(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2JK2[0xC];                                   // 0x139C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EVehicleAnimationState                                     ReplicatedAnimState;                                     // 0x13A8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I436[0x7];                                   // 0x13A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector_NetQuantize>                         InitialFootIkLocations;                                  // 0x13B0(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StandOnVehicleRadiusMultiplier;                          // 0x13C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TH0M[0x4];                                   // 0x13C4(0x0004) Fix size for supers

	public:
		void OnStandOnVehicle(bool bOnVehicle);
		void OnRep_ReplicatedAnimState(EVehicleAnimationState PreviousState);
		void OnRep_InitialFootIkLocations();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBackpackerVehicle
	 * Size -> 0x0058 (FullSize[0x1420] - InheritedSize[0x13C8])
	 */
	class ASolarBackpackerVehicle : public ASolarLeggedVehicle
	{
	public:
		class UStaticMeshComponent* VehicleHitBox;                                           // 0x13C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              BackpackMesh[0x28];                                      // 0x13D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UStaticMesh* OriginalBackpackMesh;                                    // 0x13F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    BackpackerItemID;                                        // 0x1400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EY0R[0x4];                                   // 0x1404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* SheildRecoverEffect;                                     // 0x1408(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarCharacter* AttachedPlayer;                                          // 0x1410(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bShieldOpened;                                           // 0x1418(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bVehicleDroped;                                          // 0x1419(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O1CF[0x6];                                   // 0x141A(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnRep_VehicleDropped();
		void OnRep_ShieldChanged();
		void OnRep_AttachedToPlayer();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBackpackSFX
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ASolarBackpackSFX : public AActor
	{
	public:
		unsigned char                                              UnknownData_P0JA[0x58];                                  // 0x0228(0x0058) MISSED OFFSET (PADDING)

	public:
		void OnPropellingModeChanged(EBackpackPropellingMode PropellingMode);
		class UParticleSystemComponent* GetTrailEffectComponent();
		void BackpackSFXLaunch(bool GroundDetected, const struct FVector& GroundLocation, const struct FVector& GroundNormal);
		void BackpackSFXEnd();
		void BackpackSFXBegin(EFXJetType InJetType, bool GroundDetected);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBattleModel
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarBattleModel : public USolarAbstractModel
	{
	public:
		unsigned char                                              UnknownData_B325[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.BattleSpectatorItemData
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UBattleSpectatorItemData : public UObject
	{
	public:
		class USolarBattleSpectatorWidget* SpectatorWidget;                                         // 0x0028(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1QKP[0x50];                                  // 0x0030(0x0050) MISSED OFFSET (PADDING)

	public:
		void Init(TMap<class FString, class FString> BattleData);
		void GetBattleData(const class FString& InDataName, class FText* OutText);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBattleSpectatorWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USolarBattleSpectatorWidget : public USolarUserWidget
	{
	public:
		void UpdatePageInfo(int32_t CurrentPage, int32_t TotalPage);
		void SetPageSize(int32_t PageSize);
		void SetBattleDatas(TArray<class UBattleSpectatorItemData*> BattleDatas);
		void RequestStartPlayReplay(const class FString& BattleID);
		void RequestBattleData(int32_t PageIndex);
		void RefreshBattleList();
		void OnStartPlayReplayFailed(const class FString& BattleID);
		void AddBattleDatas(TArray<class UBattleSpectatorItemData*> BattleDatas);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_WorldPosToWidgetPosForWorldMark(class APlayerController* Controller, const struct FVector& Pos, struct FVector2D* ScreenPos, float* AngleForArrow);
		bool STATIC_WorldPosToWidgetPosForEmoji(class APlayerController* Controller, const struct FVector& Pos, struct FVector2D* ScreenPos);
		bool STATIC_WorldPosToWidgetPos(class APlayerController* Controller, const struct FVector& Pos, struct FVector2D* ScreenPos);
		void STATIC_UnlockCursor(class APlayerController* PlayerController);
		void STATIC_TryGetLocalText(int32_t LocalTextId, bool* bSuccess, class FString* LocalText);
		void STATIC_TryGetHUDColorForPlayerLevel(class UObject* WorldContext, int32_t PlayerLevel, bool* bFoundConfig, struct FLinearColor* BaseColor, struct FLinearColor* DecorateColor);
		void STATIC_Test_SolarBlueprintFunctionLibrary();
		void STATIC_SortObjectArrayByName(TArray<class UObject*>* inArray);
		class AActor* STATIC_SolarSpawnActor(class UObject* WorldContextObject, const struct FTransform& SpawnTransform, class AActor* Owner, class APawn* Instigator, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride);
		void STATIC_ReleaseFocus(class APlayerController* PlayerController);
		void STATIC_RebuildCursorWidgets(class APlayerController* PlayerController);
		void STATIC_LockCursor(class APlayerController* PlayerController, class UWidget* TargetWidget);
		class UPassiveSkillDataAsset* STATIC_LoadPassiveSkillDataAssetForCharacter(class UObject* WorldContext, int32_t CharacterId);
		float STATIC_K2_GetAsyncLoadPercentage(const class FName& PackageName);
		bool STATIC_IsUsedSteamSDKLogin();
		bool STATIC_IsRenderingMobilePlatform();
		bool STATIC_IsPlatformSupportLimChat();
		bool STATIC_IsPlatformSteam();
		bool STATIC_IsPlatformOffcialWin();
		bool STATIC_IsPlatformEpic();
		bool STATIC_IsPlatformDesktop();
		bool STATIC_IsMobilePlatform();
		bool STATIC_IsLowMemoryDeivce();
		bool STATIC_IsLowLevelGraphicsQuality(class UObject* InObject);
		bool STATIC_IsLowLevelDevice(class UObject* InObject);
		bool STATIC_IsLowerLevelDevice(class UObject* InObject, ESolarGraphicsQualityLevel InLowerThanThis);
		bool STATIC_HasPassiveSkillDataAssetConfig(class UObject* WorldContext, int32_t CharacterId);
		float STATIC_GetViewportScale();
		void STATIC_GetTipsPosition(class UObject* WorldContextObject, class UWidget* FocusWidget, float Offset, struct FVector2D* FixedPos, int32_t* Dimsion);
		class ASolarGameState* STATIC_GetSolarGameState(class UObject* WorldContextObject);
		class ASolarGameMode* STATIC_GetSolarGameMode(class UObject* WorldContextObject);
		struct FVector2D STATIC_GetScreenSize();
		struct FVector2D STATIC_GetScreenResolution();
		ESolarDeviceLevel STATIC_GetDeviceLevel(class UObject* InObject);
		ESolarGraphicsQualityLevel STATIC_GetCurQualityLevel(class UObject* InObject);
		TArray<class FString> STATIC_GetAssetDependencies(const class FName& Path);
		void STATIC_GetActorsWithTagInSubLevelByName(class UObject* WorldContextObject, const class FName& LevelName, const class FName& Tag, TArray<class AActor*>* OutActors);
		void STATIC_ExitGame(bool bForce);
		class FString STATIC_EnumToString(const class FString& Enum, int32_t EnumValue);
		void STATIC_EnableInputAndHideCursor(class ASolarPlayerController* Controller);
		void STATIC_EnableAnalogCursor(class APlayerController* PlayerController);
		void STATIC_DisableInputAndShowCursor(class ASolarPlayerController* Controller);
		void STATIC_DisableAnalogCursor(class APlayerController* PlayerController);
		void STATIC_ChangeSessionMode(bool IfChangeToPCSession);
		void STATIC_AbsoluteToViewport(class UObject* WorldContextObject, const struct FVector2D& AbsolutePosition, struct FVector2D* ViewPortPos);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBombActor
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ASolarBombActor : public AActor
	{
	public:
		bool                                                       bFireWater;                                              // 0x0228(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G1UI[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBombingZoneBomb                                    BombConfig;                                              // 0x022C(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bAutoDestroyAfterFire;                                   // 0x0248(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KVRI[0xB];                                   // 0x0249(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetLandingTime;                                       // 0x0254(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* WaterBombEffect;                                         // 0x0258(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* BombEffect;                                              // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic* GuideLine;                                               // 0x0268(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* AkAudioComponent;                                        // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void InitSolarAkGameObject(class UActorComponent* Component, bool bReset);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBombingZoneManager
	 * Size -> 0x0038 (FullSize[0x0260] - InheritedSize[0x0228])
	 */
	class ASolarBombingZoneManager : public AActor
	{
	public:
		class UClass* BPClass;                                                 // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FBombingZone>                                ZoneArray;                                               // 0x0230(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IX3J[0x4];                                   // 0x0240(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    WeightInCar;                                             // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeightInPoision;                                         // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeightInRoom;                                            // 0x024C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           LocationLimit;                                           // 0x0250(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NotifyTime;                                              // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6AZG[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnCreateBombingZone(int32_t ID, bool bSpecificLocation, const struct FVector& TargetLocation);
		struct FBombingZoneBomb GetBombData(int32_t ZoneId);
		bool CreateBombingZone(struct FBombingZone* Zone, bool bSpecificLocation, const struct FVector& TargetLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotAIConfig
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class USolarBotAIConfig : public UDataAsset
	{
	public:
		struct FGameplayTagContainer                               IdentifierTags;                                          // 0x0030(0x0020) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class USolarBotConfigSection_Battle* BattleSection;                                           // 0x0050(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarBotConfigSection_Loot* LootSection;                                             // 0x0058(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarBotConfigSection_Perception* PerceptionSection;                                       // 0x0060(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USolarBotConfigSection*>                      CustomSections;                                          // 0x0068(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotAIController
	 * Size -> 0x0480 (FullSize[0x07F0] - InheritedSize[0x0370])
	 */
	class ASolarBotAIController : public ASolarAIControllerBase
	{
	public:
		unsigned char                                              UnknownData_KNWQ[0x10];                                  // 0x0370(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarBotLootComponent* BotLootComponent;                                        // 0x0380(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarPerceptionComponent* BotPerceptionComponent;                                  // 0x0388(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarBotAIConfig* BotConfigPreset;                                         // 0x0390(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSolarBotBattleConfig                               DefaultBattleConfig;                                     // 0x0398(0x0158) Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FNavAgentProperties                                 VehicleAgentProperties;                                  // 0x04F0(0x0030) Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    UniqueSpawnerID;                                         // 0x0520(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        BattleSubTreeTag;                                        // 0x0524(0x0008) Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DefaultDifficultyLevel;                                  // 0x052C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrentDifficultyLevel;                                  // 0x0530(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CharacterLookAtInterpSpeed;                              // 0x0534(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinSpecVehicleDeltaPitch;                                // 0x0538(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInitDefaultWeapon;                                      // 0x053C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C140[0x3];                                   // 0x053D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BotDefaultWeaponId;                                      // 0x0540(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAimBoneWhenFire;                                        // 0x0544(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q7Z5[0x3];                                   // 0x0545(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                FireTargetBoneName;                                      // 0x0548(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSpawnDeathBox;                                          // 0x0550(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MPM0[0x3];                                   // 0x0551(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBotBonusDropConfig                                 BonusDropConfig;                                         // 0x0554(0x0018) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MinimumDistanceForRepeatedBoarding;                      // 0x056C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBotAIType                                                 BotAIType;                                               // 0x0570(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7UV5[0x3];                                   // 0x0571(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BotFeature;                                              // 0x0574(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           MovementVector;                                          // 0x0578(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* BPDefaultNavigationFilterClass;                          // 0x0580(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2HFM[0x30];                                  // 0x0588(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FGameplayTag, class UBehaviorTree*>            SubTreeMap;                                              // 0x05B8(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UJ5B[0x38];                                  // 0x0608(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               AITarget;                                                // 0x0640(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarBotShootSimulater* ShootSimulater;                                          // 0x0648(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_16XK[0x68];                                  // 0x0650(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBotAIDeath;                                            // 0x06B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SU1N[0xC];                                   // 0x06C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarCharacter>                      PossessedCharacer;                                       // 0x06D4(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7FOG[0x4];                                   // 0x06DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarFollowingComponent* PathFollowingComp;                                       // 0x06E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UR9T[0x8];                                   // 0x06E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNgaiAIControllerComponent* NgaiComponent;                                           // 0x06F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3UW2[0x10];                                  // 0x06F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ValidEmojiUseDistance;                                   // 0x0708(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6XVK[0xCC];                                  // 0x070C(0x00CC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WorldMarkMessageDelayTime;                               // 0x07D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZME7[0x14];                                  // 0x07DC(0x0014) MISSED OFFSET (PADDING)

	public:
		void UpdateDynamicSubtree();
		void UpdateCharacterRotate(float DeltaTime);
		void StopBehaviorTree();
		void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
		bool SetupBotAITargetSelectConfig();
		bool SetupBotAIDifficulty(int32_t DifficultyLevel, bool bAsDefault);
		bool SetupBotAICanUseCharacterData(int32_t CharacterId, int32_t SkinId);
		void SetDynamicSubtree(const struct FGameplayTag& InjectTag, class UBehaviorTree* BehaviorAsset);
		bool SetBotConfigPresetByID(int32_t BotConfigPresetID);
		void SetBotConfigPreset(class USolarBotAIConfig* InConfig);
		void OnReset();
		void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, class ASolarCharacter* GetOffPlayer);
		void OnEnterLanding();
		bool IsTeamLeader();
		bool IsInPlayerTeam();
		bool IsIndependent();
		bool IsAccompanyingPlayer();
		class ASolarCharacter* GetSolarCharacter();
		TArray<ESolarTablesEnum_CharacterType> GetPreferPickHeroTypes();
		unsigned char GetMyTeamID();
		bool CanActivateVehicleAbility(int32_t SeatIndex, int32_t AbilityIndex);
		float CalculateScoreForAITarget(class AActor* AITargetActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotAIControllerInGuide
	 * Size -> 0x0020 (FullSize[0x0810] - InheritedSize[0x07F0])
	 */
	class ASolarBotAIControllerInGuide : public ASolarBotAIController
	{
	public:
		TArray<struct FDeathBoxItemData>                           DeathBoxItems;                                           // 0x07F0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U1FE[0x10];                                  // 0x0800(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotAIControllerOnVehicle
	 * Size -> 0x0040 (FullSize[0x0830] - InheritedSize[0x07F0])
	 */
	class ASolarBotAIControllerOnVehicle : public ASolarBotAIController
	{
	public:
		unsigned char                                              UnknownData_YFDV[0x40];                                  // 0x07F0(0x0040) MISSED OFFSET (PADDING)

	public:
		void SetMoveStop(bool NeedStop);
		void SetFireStop(bool NeedStop);
		void OnVehicleDriverGetOff(int32_t GetOffSeatIndex, class ASolarCharacter* GetOffPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotAITeamManager
	 * Size -> 0x0220 (FullSize[0x0248] - InheritedSize[0x0028])
	 */
	class USolarBotAITeamManager : public UObject
	{
	public:
		float                                                      UpdateInterval;                                          // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultSeparateDistance;                                 // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultReturnDistance;                                   // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XF22[0x5C];                                  // 0x0034(0x005C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* DebugVisualizerClass;                                    // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarBotTeamVisualizer* DebugVisualizer;                                         // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* GlobalGameTeamConfigs;                                   // 0x00A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class ASolarCharacter*, class ASolarBotAIController*> AllocatedCharacters;                                     // 0x00A8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic
		TArray<class ASolarCharacter*>                             AbandonedCharacters;                                     // 0x00F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EBotInteractCondition, struct FBotEmojiSetting>       EmojiTaskSettings;                                       // 0x0108(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<int32_t, EBotInteractCondition>                       ResponseToVoiceType;                                     // 0x0158(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EWorldMarkType, EBotInteractCondition>                ResponseToMarkType;                                      // 0x01A8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EBotInteractCondition, struct FBotResponseSetting>    ResponseTaskSettings;                                    // 0x01F8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		void UpdateAllocatedList(class ASolarBotAIController* InController, TArray<class ASolarCharacter*> AliveCharacterArray);
		bool TryCancelCurrentRescueTarget(class ASolarBotAIController* InController, class ASolarCharacter* CancelledCharacter);
		bool ShouldTeamActivate(const struct FSolarBotTeamInfo& BotInfo);
		void SetTeamBlackboardValueAsVector(int32_t TeamID, const class FName& KeyName, const struct FVector& VectorValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsString(int32_t TeamID, const class FName& KeyName, const class FString& StringValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsRotator(int32_t TeamID, const class FName& KeyName, const struct FRotator& VectorValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsObject(int32_t TeamID, const class FName& KeyName, class UObject* ObjectValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsName(int32_t TeamID, const class FName& KeyName, const class FName& NameValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsInt(int32_t TeamID, const class FName& KeyName, int32_t IntValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsFloat(int32_t TeamID, const class FName& KeyName, float FloatValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsEnum(int32_t TeamID, const class FName& KeyName, unsigned char EnumValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsClass(int32_t TeamID, const class FName& KeyName, class UClass* ClassValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetTeamBlackboardValueAsBool(int32_t TeamID, const class FName& KeyName, bool BoolValue, ESolarBotMemberState InBotState, bool bSkipIndependent);
		void SetBotDropOut(class ASolarBotAIController* InController, bool bDropOut);
		void OnTeamDeactive(const struct FSolarBotTeamInfo& TeamInfo);
		void OnTeamActivate(const struct FSolarBotTeamInfo& TeamInfo);
		void OnBotUnRegister(const struct FSolarBotMemberInfo& BotInfo);
		void OnBotStateChanged(const struct FSolarBotMemberInfo& BotInfo, ESolarBotMemberState OldState);
		void OnBotRegister(const struct FSolarBotMemberInfo& BotInfo);
		bool IsValidTeamID(int32_t InTeamId);
		bool IsTeamLeader(class ASolarBotAIController* InController);
		bool IsIndependent(class ASolarBotAIController* InController);
		bool GetTeamPlayerInfo(class ASolarBotAIController* InController, TArray<class ASolarCharacter*>* PlayerArray);
		bool GetRescueInfo(class ASolarBotAIController* InController, TArray<class ASolarCharacter*>* DyingPlayerArray, TArray<class ASolarCharacter*>* DeadPlayerArray, TArray<class ASolarCharacter*>* DyingBotArray, TArray<class ASolarCharacter*>* DeadBotArray);
		bool GetBotTeamInfo(class ASolarBotAIController* InController, struct FSolarBotTeamInfo* OutTeamInfo);
		bool GetBotMemberInfo(class ASolarBotAIController* InController, struct FSolarBotMemberInfo* OutMemberInfo);
		class USolarBotAITeamManager* STATIC_Get(class UObject* Context);
		bool CheckBotTeamState(class ASolarBotAIController* InController, ESolarBotMemberState MemberState);
		struct FVector CalculateTeamPosition(const struct FSolarBotTeamInfo& TeamInfo);
		bool AllocatedRescueTarget(class ASolarBotAIController* InController, class ASolarCharacter* RescuedCharacter);
		void AbandonedCurrentRescueTarget(class ASolarBotAIController* InController, class ASolarCharacter* AbandonedCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotAIWarmServiceSystem
	 * Size -> 0x0138 (FullSize[0x0160] - InheritedSize[0x0028])
	 */
	class USolarBotAIWarmServiceSystem : public UObject
	{
	public:
		TMap<class ASolarPlayerState*, struct FWarmTargetState>    WarmTargets;                                             // 0x0028(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TArray<struct FTimeItemsSetting>                           ItemsByTime;                                             // 0x0078(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D0RS[0x4];                                   // 0x0088(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerWarmServiceValue;                                 // 0x008C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxGroupDistance;                                        // 0x0090(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaxServiceBot;                                           // 0x0094(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FV84[0x3];                                   // 0x0095(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TraceRecordLength;                                       // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LZ52[0xC];                                   // 0x009C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TraceRecordInterval;                                     // 0x00A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2FFE[0xC];                                   // 0x00AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UpdateInterval;                                          // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z1FI[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnvQuery* TeleportLocEQS;                                          // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEnvQueryRunMode                                           TeleportLocEQSRunMode;                                   // 0x00C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ON16[0x3];                                   // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PopAllTriggerPlayerNum;                                  // 0x00CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PopAllTriggerTime;                                       // 0x00D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5V34[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnvQuery* PopAllBotEQS;                                            // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEnvQueryRunMode                                           PopAllBotEQSRunMode;                                     // 0x00E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TAJM[0x3];                                   // 0x00E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RewardScore;                                             // 0x00E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MaxNumFishingBot;                                        // 0x00E8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              NumPlayerKillThreshold;                                  // 0x00E9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              NumRealPlayerKillThreshold;                              // 0x00EA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZAD5[0x5];                                   // 0x00EB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEnvQuery* FishingTeleportEQS;                                      // 0x00F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEnvQueryRunMode                                           FishingTeleportEQSRunMode;                               // 0x00F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q4BT[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* FishingInvisibleEffectClass;                             // 0x0100(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FishingBotCharacterID;                                   // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FishingBotSkinID;                                        // 0x010C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            FilterDamageWeaponIDs;                                   // 0x0110(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            FilterDamageVehicleIDs;                                  // 0x0120(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckAccidentHit;                                       // 0x0130(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZTWD[0x3];                                   // 0x0131(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LimitAccidentAngle;                                      // 0x0134(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ExReportMinAimbotThreshold;                              // 0x0138(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ExReportMinBiteThreshold;                                // 0x0139(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H53T[0x6];                                   // 0x013A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPlayerState*>                           SuspiciousPlayers;                                       // 0x0140(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASolarPlayerState*>                           FishingBots;                                             // 0x0150(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void STATIC_UpdateWarmTargetStateByEvent(class ASolarPlayerState* InPS, EUpdateWarmServiceEventType InEventType);
		void STATIC_StartPlayerWarmService(class ASolarPlayerState* InPS);
		void STATIC_RecordWarmTargetKDAState(class ASolarPlayerState* InPS, class ASolarPlayerState* KilledPC);
		void OnRequestWarmServiceSuccess(TArray<class ASolarPlayerState*> PlayerArray);
		void OnRequestWarmServiceFail(TArray<class ASolarPlayerState*> PlayerArray);
		void OnPopBotForFishing(class USolarPreservedBotPopTask* InTask, class ASolarPlayerState* BotPS, const struct FVector& TeleportLoc);
		float GetWarmScoreByEvent(class ASolarPlayerState* InPS, EUpdateWarmServiceEventType InEventType);
		float GetTimeOutBattle(class ASolarPlayerState* InPS);
		float GetTimeBeforeOutPoisonCirecle(class ASolarPlayerState* InPS);
		float GetTargetTickValue(class ASolarPlayerState* InPS, const struct FWarmTargetState& InState);
		float GetLastBattleMVPScore(class ASolarPlayerState* InPS);
		unsigned char GetKilledPlayerNum(class ASolarPlayerState* InPS);
		unsigned char GetKilledBotNum(class ASolarPlayerState* InPS);
		float GetFrustrationValue(class ASolarPlayerState* InPS);
		unsigned char GetEnemyNumInRange(class ASolarPlayerState* InPS, float RangeRadius);
		int32_t GetActivePlayerNumBP(int32_t PlayerNum, int32_t PlayerTeamNum);
		class USolarBotAIWarmServiceSystem* STATIC_Get(class UObject* Context);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotConfigSection
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarBotConfigSection : public UObject
	{
	public:
		struct FGameplayTag                                        SectionTag;                                              // 0x0028(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotConfigSection_Battle
	 * Size -> 0x0190 (FullSize[0x01C0] - InheritedSize[0x0030])
	 */
	class USolarBotConfigSection_Battle : public USolarBotConfigSection
	{
	public:
		struct FSolarBotBattleConfig                               BattleConfig;                                            // 0x0030(0x0158) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSolarBotUseSniperPosConfig                         SniperPosConfig;                                         // 0x0188(0x001C) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J4WM[0x4];                                   // 0x01A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ESolarTablesEnum_CharacterType>                     PreferPickHeroTypes;                                     // 0x01A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBehaviorTree* BattleSubTree;                                           // 0x01B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotConfigSection_Loot
	 * Size -> 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
	 */
	class USolarBotConfigSection_Loot : public USolarBotConfigSection
	{
	public:
		struct FSolarBotLootValuationConfig                        ValuationConfig;                                         // 0x0030(0x0044) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FSolarBotLootSearchConfig                           SearchConfig;                                            // 0x0074(0x0044) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FSolarBotLootWeaponFeedConfig                       WeaponFeedConfig;                                        // 0x00B8(0x0020) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UBehaviorTree* LootSubTree;                                             // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotConfigSection_Perception
	 * Size -> 0x00C0 (FullSize[0x00F0] - InheritedSize[0x0030])
	 */
	class USolarBotConfigSection_Perception : public USolarBotConfigSection
	{
	public:
		struct FSolarBotThreatConfig                               ThreatConfig;                                            // 0x0030(0x006C) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G8T6[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EWeaponType, struct FSolarBotThreatConfig>            WPSpecificThreatConfig;                                  // 0x00A0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotConfigSection_SafeArea
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarBotConfigSection_SafeArea : public USolarBotConfigSection
	{
	public:
		struct FSolarBotSafeAreaConfig                             SafeAreaConfig;                                          // 0x0030(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotConfigSection_SkyDiving
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USolarBotConfigSection_SkyDiving : public USolarBotConfigSection
	{
	public:
		struct FSolarBotSkyDivingConfig                            SkyDivingConfig;                                         // 0x0030(0x0024) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6762[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        PreferLootZoneTags;                                      // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotLootComponent
	 * Size -> 0x00B8 (FullSize[0x0168] - InheritedSize[0x00B0])
	 */
	class USolarBotLootComponent : public UActorComponent
	{
	public:
		struct FGameplayTag                                        LootSubTreeTag;                                          // 0x00B0(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSolarBotLootValuationConfig                        DefaultValuationConfig;                                  // 0x00B8(0x0044) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KR24[0x6C];                                  // 0x00FC(0x006C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotOnVehicleActionTrigger
	 * Size -> 0x0030 (FullSize[0x0260] - InheritedSize[0x0230])
	 */
	class ASolarBotOnVehicleActionTrigger : public ATriggerBox
	{
	public:
		int32_t                                                    VehicleStopAreaId;                                       // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBotOnVehicleStopType                                      StopType;                                                // 0x0234(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_20YI[0x3];                                   // 0x0235(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MoveStopDelayTime;                                       // 0x0238(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBotOnVehicleFireType                                      FireType;                                                // 0x023C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GDGL[0x3];                                   // 0x023D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FireOffDelayTime;                                        // 0x0240(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ActivateVehicleAbilitySeatIndex;                         // 0x0244(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z32L[0x18];                                  // 0x0248(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnUpdatedComponentOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnUpdatedComponentOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotOnVehicleOnLineCtrl
	 * Size -> 0x0000 (FullSize[0x0830] - InheritedSize[0x0830])
	 */
	class ASolarBotOnVehicleOnLineCtrl : public ASolarBotAIControllerOnVehicle
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotShootSimulater
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class USolarBotShootSimulater : public UObject
	{
	public:
		class ASolarBotAIController* OwnerController;                                         // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor* LockedTargetActor;                                       // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SEU7[0x70];                                  // 0x0038(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotSniperPosition
	 * Size -> 0x0020 (FullSize[0x0248] - InheritedSize[0x0228])
	 */
	class ASolarBotSniperPosition : public AActor
	{
	public:
		float                                                      ReachRadius;                                             // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReachOffsetZ;                                            // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AbandonRadius;                                           // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UsingCoolDown;                                           // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FPMP[0x10];                                  // 0x0238(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotTeamConfig
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class USolarBotTeamConfig : public UDataAsset
	{
	public:
		bool                                                       bUseSpecificMemberPreset;                                // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JBB5[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USolarBotAIConfig*>                           SpecificMemberPresets;                                   // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarBotTeamBuildRule>                      BuildRules;                                              // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               ForbiddenTags;                                           // 0x0058(0x0020) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSolarBotTeamHeroPickFormation>              HeroPickFormations;                                      // 0x0078(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotTeamVisualizer
	 * Size -> 0x0028 (FullSize[0x0250] - InheritedSize[0x0228])
	 */
	class ASolarBotTeamVisualizer : public AInfo
	{
	public:
		TArray<struct FColor>                                      DrawDebugColors;                                         // 0x0228(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFont* TextFont;                                                // 0x0238(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FBotTeamDebugInfo>                           BotTeamDebugInfos;                                       // 0x0240(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBotTimelineSystem
	 * Size -> 0x0158 (FullSize[0x0180] - InheritedSize[0x0028])
	 */
	class USolarBotTimelineSystem : public UObject
	{
	public:
		class UDataTable* GlobalTimelineSettings;                                  // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpdateInterval;                                          // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsePlayerLandTime;                                      // 0x0034(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableFinalDownsize;                                    // 0x0035(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0ITV[0x2];                                   // 0x0036(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FinalDownsizeDuration;                                   // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D26E[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* CurrentActionTimelineTable;                              // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* CurrentUpdateItemTimelineTable;                          // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* CurrentDownsizeTimelineTable;                            // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DS88[0x110];                                 // 0x0058(0x0110) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPlayerState*>                           DirtyBots;                                               // 0x0168(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QRVA[0x8];                                   // 0x0178(0x0008) MISSED OFFSET (PADDING)

	public:
		void InitTimeline();
		class USolarBotTimelineSystem* STATIC_Get(class UObject* Context);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBT_RandomSelecter
	 * Size -> 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
	 */
	class USolarBT_RandomSelecter : public UBTCompositeNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTD_CheckSelectKeyType
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class USolarBTD_CheckSelectKeyType : public UBTDecorator_BlackboardBase
	{
	public:
		ESolarCharacterType                                        CheckType;                                               // 0x0090(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L5LB[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotActionState
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class USolarBTS_BotActionState : public UBTService_BlackboardBase
	{
	public:
		EBotActionState                                            ActionState;                                             // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N58K[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotChangeQueryFilter
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class USolarBTS_BotChangeQueryFilter : public UBTService_BlackboardBase
	{
	public:
		class UClass* TargetFilter;                                            // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotFocusTo
	 * Size -> 0x0030 (FullSize[0x00C8] - InheritedSize[0x0098])
	 */
	class USolarBTS_BotFocusTo : public UBTService_BlackboardBase
	{
	public:
		float                                                      LookAtSpeed;                                             // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseFocusDirection;                                      // 0x009C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLocalDirection;                                         // 0x009D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LW68[0x2];                                   // 0x009E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FocusDirection;                                          // 0x00A0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            DeltaRotation;                                           // 0x00AC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bRandomFocusDirection;                                   // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SGPZ[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RandomPitchDeviation;                                    // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RandomYawDeviation;                                      // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRestorePreviousFocusOnCeaseRelevant;                    // 0x00C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T7DH[0x3];                                   // 0x00C5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_TagStateUpdate
	 * Size -> 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
	 */
	class USolarBTS_TagStateUpdate : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              StateTagNameKey;                                         // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		TArray<struct FSolarAITagStateTransition>                  Transitions;                                             // 0x0098(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        EnterStateTag;                                           // 0x00A8(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotInBattle
	 * Size -> 0x00C8 (FullSize[0x0178] - InheritedSize[0x00B0])
	 */
	class USolarBTS_BotInBattle : public USolarBTS_TagStateUpdate
	{
	public:
		struct FBlackboardKeySelector                              EnemyActorKey;                                           // 0x00B0(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              CanSeeEnemyKey;                                          // 0x00D8(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              TacticalLocation;                                        // 0x0100(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		TMap<EWeaponType, struct FVector2D>                        WeaponSuitableRangeConfig;                               // 0x0128(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotInputMove
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class USolarBTS_BotInputMove : public UBTService
	{
	public:
		struct FVector2D                                           InputDir;                                                // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeviationAngle;                                          // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRandomInput;                                            // 0x007C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6M43[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotInteractionTrigger
	 * Size -> 0x0068 (FullSize[0x00D8] - InheritedSize[0x0070])
	 */
	class USolarBTS_BotInteractionTrigger : public UBTService
	{
	public:
		EBotInteractCondition                                      ConditionToTrigger;                                      // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLoop;                                                   // 0x0071(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FY4Q[0x2];                                   // 0x0072(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LoopInterval;                                            // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LoopRandomDeviation;                                     // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BIWV[0xC];                                   // 0x007C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              AllowedConditions[0x50];                                 // 0x0088(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotPrepareMode
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USolarBTS_BotPrepareMode : public UBTService
	{
	public:
		float                                                      RatioWantWeapon;                                         // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RatioWantInteract;                                       // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotSearchSupplies
	 * Size -> 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
	 */
	class USolarBTS_BotSearchSupplies : public UBTService
	{
	public:
		bool                                                       bOverrideBotConfig;                                      // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LNOJ[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarBotLootSearchConfig                           OverrideSearchConfig;                                    // 0x0074(0x0044) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bOverrideWeaponFeedConfig;                               // 0x00B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4IAK[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarBotLootWeaponFeedConfig                       OverrideWeaponFeedConfig;                                // 0x00C0(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      MaxDistanceToShieldUpgradeItemShop;                      // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ICZC[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotUpdateBunker
	 * Size -> 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
	 */
	class USolarBTS_BotUpdateBunker : public UBTService
	{
	public:
		struct FBlackboardKeySelector                              BlackboardKeyEnemy;                                      // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      FullBunkerHeight;                                        // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HalfBunkerHeight;                                        // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistanceToBunker;                                     // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistanceToTarget;                                     // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDistanceToTarget;                                     // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0DXJ[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotUpdateOnVehicle
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class USolarBTS_BotUpdateOnVehicle : public UBTService_BlackboardBase
	{
	public:
		bool                                                       bUsePathfindingDistance;                                 // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AEEP[0x3];                                   // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDistanceTakePassenger;                                // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxWaitTimeSeconds;                                      // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MXDP[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotUpdateSafeArea
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class USolarBTS_BotUpdateSafeArea : public UBTService
	{
	public:
		bool                                                       bOverrideBotConfig;                                      // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E0U3[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarBotSafeAreaConfig                             DefaultConfig;                                           // 0x0074(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             SafeAreaSnapExtent;                                      // 0x007C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAllowUseSpaceDistance;                                  // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SAAJ[0x1F];                                  // 0x0089(0x001F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_BotUseSniperPos
	 * Size -> 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
	 */
	class USolarBTS_BotUseSniperPos : public UBTService
	{
	public:
		bool                                                       bOverrideBotConfig;                                      // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UU8K[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarBotUseSniperPosConfig                         DefaultConfig;                                           // 0x0074(0x001C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_CheckCanAttack
	 * Size -> 0x0050 (FullSize[0x00E8] - InheritedSize[0x0098])
	 */
	class USolarBTS_CheckCanAttack : public UBTService_BlackboardBase
	{
	public:
		struct FBlackboardKeySelector                              BlackboardKeyInLineSight;                                // 0x0098(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              BlackboardKeyInLineSightEx;                              // 0x00C0(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_CheckNeedFindVehicle
	 * Size -> 0x0060 (FullSize[0x00F8] - InheritedSize[0x0098])
	 */
	class USolarBTS_CheckNeedFindVehicle : public UBTService_BlackboardBase
	{
	public:
		bool                                                       bMarkOccupiedAfterVehicleSelected;                       // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCleanTargetOnCeaseRelevant;                             // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8P2H[0x6];                                   // 0x009A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      SolarWheeledVehicleClass;                                // 0x00A0(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreVehicleInPoision;                                 // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreVehicleOffNavmesh;                                // 0x00B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MBMK[0x2];                                   // 0x00B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CheckOnNavmeshExtent;                                    // 0x00B4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* FilterClass;                                             // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            ExceptVehicleId;                                         // 0x00C8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AcceptableRadius;                                        // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveToDistanceFindVehicle;                               // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RangeFindVehicle;                                        // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HealthTakingVehicle;                                     // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDistanceFindTeamVehicle;                              // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCheckSameTarget;                                        // 0x00EC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6T60[0x3];                                   // 0x00ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SameTargetDistThreshold;                                 // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HK25[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_CheckNeedRunEQS
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USolarBTS_CheckNeedRunEQS : public UBTService_BlackboardBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_NgaiNearbySupplies
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USolarBTS_NgaiNearbySupplies : public UBTService
	{
	public:
		unsigned char                                              UnknownData_ND8W[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTS_TeamTaskAllocation
	 * Size -> 0x00D0 (FullSize[0x0168] - InheritedSize[0x0098])
	 */
	class USolarBTS_TeamTaskAllocation : public UBTService_BlueprintBase
	{
	public:
		float                                                      RescueAllocateThresholdScore;                            // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RescueAbandonThresholdScore;                             // 0x009C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RescuePunishScore;                                       // 0x00A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RescueRewardScore;                                       // 0x00A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedToRebornBotInBotTeam;                               // 0x00A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedToRebornBotInPlayerTeam;                            // 0x00A9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDebugTaskScore;                                         // 0x00AA(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDebugEachTaskScore;                                     // 0x00AB(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             PoisonSnapExtent;                                        // 0x00AC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSolarTaskScoringItem                               CustomTaskScoringItemList;                               // 0x00B8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CYY7[0x50];                                  // 0x0108(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarBotAIController* SelfController;                                          // 0x0158(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* SelfCharacter;                                           // 0x0160(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PostGetCurrentTaskScore(struct FSolarScoringItemStruct* InScoringItemStruct);
		float MoveToSafeAreaCostSec(class ASolarBotAIController* InController);
		float MoveToRescueTargetCostSec(class ASolarBotAIController* InController, class AActor* TeammateInDanger);
		float MoveToPointCostSec(class ASolarBotAIController* InController, const struct FVector& CenterPoint, float InRadius);
		void DebugEachTaskScoreItem(const struct FSolarScoringItemStruct& TaskScore, ESolarTaskScoringItemType ItemType, float Score, float Value);
		void DebugAllTaskScore(TArray<struct FSolarScoringItemStruct> TaskScoresList);
		bool CheckIfCharacterInSafeArea(class AActor* InActor);
		bool CheckIfCharacterInPoisonCircle(class AActor* InActor);
		bool CheakIsLeader(class ASolarBotAIController* InController);
		bool CanRescueCurrentTarget(class ASolarCharacter* RescueTarget);
		bool CanAllocateCurrentTarget(class ASolarBotAIController* InController);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotCharging
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotCharging : public UBTTask_BlackboardBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotFire
	 * Size -> 0x0070 (FullSize[0x0108] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotFire : public UBTTask_BlackboardBase
	{
	public:
		bool                                                       bEnableOffset;                                           // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H8OS[0x3];                                   // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OffsetRadiusMax;                                         // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OffsetRadiusMin;                                         // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFireDuration;                                         // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableShootSimulator;                                   // 0x00A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bForceReset;                                             // 0x00A9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideDefaultShootConfig;                             // 0x00AA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IAE8[0x1];                                   // 0x00AB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarBotShootConfig                                ShootConfig;                                             // 0x00AC(0x0058) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LDMV[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotContinueFire
	 * Size -> 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
	 */
	class USolarBTT_BotContinueFire : public USolarBTT_BotFire
	{
	public:
		float                                                      FireDurationTime;                                        // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UWDT[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotCruise
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotCruise : public UBTTaskNode
	{
	public:
		float                                                      SecDelayFollowJump;                                      // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SecDelayRandomDeviation;                                 // 0x0074(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotCruiseBehindTarget
	 * Size -> 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotCruiseBehindTarget : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetToFollow;                                          // 0x0070(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      SecDelayFollowJump;                                      // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C2WF[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotCruiseWhenNearest
	 * Size -> 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotCruiseWhenNearest : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              TargetToCheck;                                           // 0x0070(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      SecDelayRandomDeviation;                                 // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9QZV[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotInputMove
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotInputMove : public UBTTaskNode
	{
	public:
		struct FVector2D                                           InputDir;                                                // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeviationAngle;                                          // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRandomInput;                                            // 0x007C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OKLC[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotInteractWithShieldUpgradeItemShop
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotInteractWithShieldUpgradeItemShop : public UBTTask_BlackboardBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotJet
	 * Size -> 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotJet : public UBTTask_BlackboardBase
	{
	public:
		EJetPackMode                                               JetPackMode;                                             // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EJetTaskFinishMode                                         FinishMode;                                              // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTestBlock;                                              // 0x009A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MJTC[0x1];                                   // 0x009B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DisplacementExpected;                                    // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDisplacementExpected;                                 // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseLocalInput;                                          // 0x00A4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KZJ8[0x3];                                   // 0x00A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           LocalInput;                                              // 0x00A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSelectorAsTarget;                                       // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BBA3[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotJump
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotJump : public UBTTaskNode
	{
	public:
		EJumpTaskFinishMode                                        FinishMode;                                              // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q69K[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotLookAt
	 * Size -> 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotLookAt : public UBTTask_BlackboardBase
	{
	public:
		struct FRotator                                            DeltaRotator;                                            // 0x0098(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bRandomRot;                                              // 0x00A4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5MDD[0x3];                                   // 0x00A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LookAtSpeed;                                             // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFinishTaskAfterReachTarget;                             // 0x00AC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_03M7[0x3];                                   // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReachAngleTolerance;                                     // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReachTimeOut;                                            // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotModifyShootParam
	 * Size -> 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotModifyShootParam : public UBTTaskNode
	{
	public:
		EBotShootTargetType                                        ShootTargetType;                                         // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G9RP[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShootDisperse;                                           // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HitRate;                                                 // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageRate;                                              // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageFactor;                                            // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bModifyShootDisperse;                                    // 0x0084(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bModifyHitRate;                                          // 0x0085(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bModifyDamageRate;                                       // 0x0086(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bModifyDamageFactor;                                     // 0x0087(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotMoveTo
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class USolarBTT_BotMoveTo : public UBTTask_MoveTo
	{
	public:
		struct FBlackboardKeySelector                              BBK_AcceptanceRadius;                                    // 0x00B0(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       bMoveToGoalOnLastSegment;                                // 0x00D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JXQS[0x7];                                   // 0x00D9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotOnceFire
	 * Size -> 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
	 */
	class USolarBTT_BotOnceFire : public USolarBTT_BotFire
	{
	public:
		int32_t                                                    OnceFireTimes;                                           // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OnceFireIntervalTime;                                    // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotPickupItem
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotPickupItem : public UBTTask_BlackboardBase
	{
	public:
		float                                                      MaxPickUpDistSq;                                         // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3M6L[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotRechargeShield
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotRechargeShield : public UBTTask_BlackboardBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotRescueTeammate
	 * Size -> 0x0050 (FullSize[0x00C0] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotRescueTeammate : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              CharacterToRescue;                                       // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              TargetBox;                                               // 0x0098(0x0028) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotRoleSkill
	 * Size -> 0x00A8 (FullSize[0x0140] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotRoleSkill : public UBTTask_BlackboardBase
	{
	public:
		struct FGameplayTag                                        RoleAbilityTag;                                          // 0x0098(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              LocationExpected;                                        // 0x00A0(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      TimeOutSec;                                              // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoldSec;                                                 // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProjectileAngleAllowableError;                           // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_24UL[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              SummonItemLocation;                                      // 0x00D8(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              SummonItemRadius;                                        // 0x0100(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FVector                                             OffsetVec;                                               // 0x0128(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SummonTestRadius;                                        // 0x0134(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VGQP[0x8];                                   // 0x0138(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotSkyDiving
	 * Size -> 0x0058 (FullSize[0x00C8] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotSkyDiving : public UBTTaskNode
	{
	public:
		struct FBlackboardKeySelector                              ActorFocused;                                            // 0x0070(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       bOverrideBotConfig;                                      // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L2V7[0x3];                                   // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarBotSkyDivingConfig                            DefaultConfig;                                           // 0x009C(0x0024) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      DelaySecPreserved;                                       // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_33DU[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotSprint
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotSprint : public UBTTaskNode
	{
	public:
		bool                                                       bEnterSprint;                                            // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KOHL[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotSwitchWeapon
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotSwitchWeapon : public UBTTaskNode
	{
	public:
		EWeaponType                                                WeaponType;                                              // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O58X[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotTeleport
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotTeleport : public UBTTask_BlackboardBase
	{
	public:
		bool                                                       bNoCheck;                                                // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTeleportVehicle;                                        // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZQL3[0x6];                                   // 0x009A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotTreatment
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotTreatment : public UBTTask_BlackboardBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotUpgradeShield
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotUpgradeShield : public UBTTask_BlackboardBase
	{
	public:
		struct FGameplayTag                                        ShieldUpdateAbilityTag;                                  // 0x0098(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotVehicleFire
	 * Size -> 0x0010 (FullSize[0x0118] - InheritedSize[0x0108])
	 */
	class USolarBTT_BotVehicleFire : public USolarBTT_BotFire
	{
	public:
		float                                                      DurationTime;                                            // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargePercentMin;                                        // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargePercentMax;                                        // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SecFireAfterAimLocked;                                   // 0x0114(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotVehicleSkill
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotVehicleSkill : public UBTTask_BlackboardBase
	{
	public:
		int32_t                                                    SeatIndex;                                               // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AbilityIndex;                                            // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCancel;                                                 // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G56N[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotWaitCruiseEnd
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USolarBTT_BotWaitCruiseEnd : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_BotWeaponFire
	 * Size -> 0x0060 (FullSize[0x00F8] - InheritedSize[0x0098])
	 */
	class USolarBTT_BotWeaponFire : public UBTTask_BlackboardBase
	{
	public:
		float                                                      MaxFireDuration;                                         // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideDefaultShootConfig;                             // 0x009C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bForceReset;                                             // 0x009D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5LID[0x2];                                   // 0x009E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarBotShootConfig                                ShootConfig;                                             // 0x00A0(0x0058) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_FindRandomLocation
	 * Size -> 0x0030 (FullSize[0x00C8] - InheritedSize[0x0098])
	 */
	class USolarBTT_FindRandomLocation : public UBTTask_BlackboardBase
	{
	public:
		struct FBlackboardKeySelector                              CenterBlackboardSelector;                                // 0x0098(0x0028) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		float                                                      SearchRadius;                                            // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L62I[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_GetOnOrOffVehicle
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class USolarBTT_GetOnOrOffVehicle : public UBTTask_BlackboardBase
	{
	public:
		bool                                                       bGetOnVehicle;                                           // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMarkBlockAfterOffVehicle;                               // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bProhibitionOfGettingOnOtherCar;                         // 0x009A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AV2K[0x5];                                   // 0x009B(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_RunBehaviorDynamic
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USolarBTT_RunBehaviorDynamic : public UBTTask_RunBehaviorDynamic
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_SetBotAIEnemyTarget
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USolarBTT_SetBotAIEnemyTarget : public UBTTask_BlackboardBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_SpawnVehicle
	 * Size -> 0x0070 (FullSize[0x0108] - InheritedSize[0x0098])
	 */
	class USolarBTT_SpawnVehicle : public UBTTask_BlackboardBase
	{
	public:
		TArray<int32_t>                                            SpawnIds;                                                // 0x0098(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsingSelectedSpawnId;                                   // 0x00A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HIDK[0x7];                                   // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              SelectedSpawnId;                                         // 0x00B0(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		struct FBlackboardKeySelector                              SpawnedVehicle;                                          // 0x00D8(0x0028) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      SpawnHeightOffset;                                       // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpawnFailedSec;                                          // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBullet
	 * Size -> 0x0150 (FullSize[0x0378] - InheritedSize[0x0228])
	 */
	class ASolarBullet : public AActor
	{
	public:
		float                                                      TotalEffectTime;                                         // 0x0228(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAttached;                                               // 0x022C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowHitCharacter;                                       // 0x022D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowHitToTeammate;                                      // 0x022E(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowHitWater;                                           // 0x022F(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* BulletEffect;                                            // 0x0230(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* TrajectoryEffect;                                        // 0x0238(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* TrajectoryEffectOther;                                   // 0x0240(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SimpleCanisterShotEffectPath;                            // 0x0248(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* TrajectoryBeamEffect;                                    // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* TrajectoryBeamEffectOther;                               // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* HitEffect;                                               // 0x0270(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* MuzzleEffect;                                            // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bKeepOneActivate;                                        // 0x0280(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K3VQ[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* MuzzleEffectScope;                                       // 0x0288(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* MuzzleEffectOther;                                       // 0x0290(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* FlameArresterMuzzleEffect;                               // 0x0298(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* FlameArresterMuzzleEffectScope;                          // 0x02A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* FlameArresterMuzzleEffectOther;                          // 0x02A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* SpecialEffect;                                           // 0x02B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* DecalEffect;                                             // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* DecalEffect2;                                            // 0x02C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ShieldEffect;                                            // 0x02C8(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EPhysicalSurface, struct FSoftObjectPath>             PhysicsHitEffects;                                       // 0x02E0(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		float                                                      DecalLifeSpan;                                           // 0x0330(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZDH1[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* ShellCaseEffect;                                         // 0x0338(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* ShellCaseEffectOnScope;                                  // 0x0340(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanExplodeWhenOutRange;                                  // 0x0348(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RG5A[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              HoldingPreViewSound_1P;                                  // 0x0350(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              HoldingPreViewSound_3P;                                  // 0x0360(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              BulletCollisionType;                                     // 0x0370(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7Y8H[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnPlayImpactEffect(class UParticleSystemComponent* PSC);
		struct FSoftObjectPath GetHitPhysicEffectPath(EPhysicalSurface HitSurface);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBulletDecal
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASolarBulletDecal : public AActor
	{
	public:
		class UParticleSystemComponent* DecalParticle;                                           // 0x0228(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L1ZD[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBurstItemActor
	 * Size -> 0x0100 (FullSize[0x04E0] - InheritedSize[0x03E0])
	 */
	class ASolarBurstItemActor : public ASolarItemActor
	{
	public:
		struct FVector_NetQuantize                                 StartLoc;                                                // 0x03E0(0x000C) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector_NetQuantize                                 MediumLoc;                                               // 0x03EC(0x000C) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector_NetQuantize                                 EndLoc;                                                  // 0x03F8(0x000C) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLandedOnServer;                                         // 0x0404(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8CJZ[0x2B];                                  // 0x0405(0x002B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarTreasureBoxActor* OwnerBox;                                                // 0x0430(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_33DC[0x48];                                  // 0x0438(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BurstLocalHeight;                                        // 0x0480(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurstTimeTotal;                                          // 0x0484(0x0004) Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XQ6B[0x58];                                  // 0x0488(0x0058) MISSED OFFSET (PADDING)

	public:
		void OnRep_StartLoc();
		void OnRep_OwnerBox();
		void OnRep_MediumLoc();
		void OnRep_EndLoc();
		void OnRep_BurstLocalHeight();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBurstRocketBullet
	 * Size -> 0x0160 (FullSize[0x0388] - InheritedSize[0x0228])
	 */
	class ASolarBurstRocketBullet : public AActor
	{
	public:
		int32_t                                                    BurstSum;                                                // 0x0228(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurstInterval;                                           // 0x022C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageRadius;                                            // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamagePerBullet;                                         // 0x0234(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<EObjectTypeQuery>                                   CanDamageObjectTypes;                                    // 0x0238(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnerAnimTime;                                         // 0x0248(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SpawnerMeshMaterialParamName;                            // 0x024C(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SC0Q[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAmmoConfig* Ammo;                                                    // 0x0258(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RocketSpawnerMeshOffset;                                 // 0x0260(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SLJG[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        MuzzleSocketNames;                                       // 0x0270(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnerMoveInterpSpeed;                                  // 0x0280(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnerMoveInterpMinSpeed;                               // 0x0284(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh* SpawnerTemplateMesh;                                     // 0x0288(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseForwardAxisY;                                        // 0x0290(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RVVB[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* SpawnerMesh;                                             // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationAsset* SpawnerIdleAnim;                                         // 0x02A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationAsset* SpawnerFireAnim;                                         // 0x02A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnerStartSoundName1P;                                 // 0x02B0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnerStartSoundName3P;                                 // 0x02C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnerEndSoundName1P;                                   // 0x02D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SpawnerEndSoundName3P;                                   // 0x02E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FireSoundName1P;                                         // 0x02F0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FireSoundName3P;                                         // 0x0300(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FireImpactSoundName;                                     // 0x0310(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTeammateDamage;                                         // 0x0320(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrawDebugAimLine;                                       // 0x0321(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrawDebugExplodeSphere;                                 // 0x0322(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrawDebugHitActor;                                      // 0x0323(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LCEB[0x4];                                   // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacter* OwnerCharacter;                                          // 0x0328(0x0008) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponGA_Rocket* OwnerRocketGA;                                           // 0x0330(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* HitAkObj;                                                // 0x0338(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            PlayerRotation;                                          // 0x0340(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8XZ2[0x14];                                  // 0x034C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarProjBullet*>                            FiredBullets;                                            // 0x0360(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LZ9G[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USplineComponent*>                            RocketPathArray;                                         // 0x0378(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ServerUpdateCharacterRotation(const struct FRotator& InRotation);
		void OnSingleRocketFire(class ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer);
		void OnServerSpawnFireRocket(const struct FSpawnProjParam& InParam);
		void OnRocketStop(const struct FHitResult& InHitResult);
		void OnBurstRocketDeactive(class ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer);
		void OnBurstRocketActive(class ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer);
		void OnBulletStopMove(const struct FHitResult& HitResult, bool bBlocking);
		class USplineComponent* GetRocketPath(int32_t InIndex);
		void ExplodeAndDamageDirectly(const struct FHitResult& HitResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBusinessCardCharacter
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASolarBusinessCardCharacter : public AActor
	{
	public:
		void SetSkin(class USkeletalMesh* LoadedSkinRes, class UMaterialInterface* LoadedCharaSkinRes);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarButton
	 * Size -> 0x0388 (FullSize[0x04D8] - InheritedSize[0x0150])
	 */
	class USolarButton : public UContentWidget
	{
	public:
		class USlateWidgetStyleAsset* Style;                                                   // 0x0150(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FButtonStyle                                        WidgetStyle;                                             // 0x0158(0x02B8) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		ESolarImageFillType                                        ImageFillType;                                           // 0x0410(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CS4S[0x3];                                   // 0x0411(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ImageFillRatioHorizontal;                                // 0x0414(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ImageFillRatioVertical;                                  // 0x0418(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ImageFillPixelLeft;                                      // 0x041C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ImageFillPixelTop;                                       // 0x0420(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ImageFillPixelRight;                                     // 0x0424(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ImageFillPixelBottom;                                    // 0x0428(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        ColorAndOpacity;                                         // 0x042C(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        BackgroundColor;                                         // 0x043C(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReleaseUnfocus;                                         // 0x044C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableClickSound;                                       // 0x044D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KLI1[0x2];                                   // 0x044E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ClickSoundEventName;                                     // 0x0450(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EButtonClickMethod                                         ClickMethod;                                             // 0x0460(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EButtonTouchMethod                                         TouchMethod;                                             // 0x0461(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EButtonPressMethod                                         PressMethod;                                             // 0x0462(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsFocusable;                                             // 0x0463(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RBX4[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClicked;                                               // 0x0468(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPressed;                                               // 0x0478(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReleased;                                              // 0x0488(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHovered;                                               // 0x0498(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnhovered;                                             // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFocusLosted;                                           // 0x04B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P3US[0x10];                                  // 0x04C8(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetTouchMethod(EButtonTouchMethod InTouchMethod);
		void SetStyle(const struct FButtonStyle& InStyle);
		void SetPressMethod(EButtonPressMethod InPressMethod);
		void SetImageFillType(ESolarImageFillType InImageFillType);
		void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
		void SetClickMethod(EButtonClickMethod InClickMethod);
		void SetBackgroundColor(const struct FLinearColor& InBackgroundColor);
		bool IsPressed();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarButtonSlot
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USolarButtonSlot : public UPanelSlot
	{
	public:
		struct FMargin                                             Padding;                                                 // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EHorizontalAlignment                                       HorizontalAlignment;                                     // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVerticalAlignment                                         VerticalAlignment;                                       // 0x0049(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V8NZ[0x16];                                  // 0x004A(0x0016) MISSED OFFSET (PADDING)

	public:
		void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);
		void SetPadding(const struct FMargin& InPadding);
		void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCameraActor
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ASolarCameraActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_S9JR[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarPlayerController* MasterPlayerController;                                  // 0x0230(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KBMW[0x48];                                  // 0x0238(0x0048) MISSED OFFSET (PADDING)

	public:
		void SetViewTarget(class AActor* InTarget);
		class AActor* GetViewTarget();
		class USolarNoSpringCameraComponent* GetCameraComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCameraComponent
	 * Size -> 0x0088 (FullSize[0x09B8] - InheritedSize[0x0930])
	 */
	class USolarCameraComponent : public UCameraComponent
	{
	public:
		unsigned char                                              UnknownData_SFKM[0x50];                                  // 0x0930(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ConfigDistanceToTarget;                                  // 0x0980(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ConfigCameraOffset;                                      // 0x0984(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ConfigTargetOffset;                                      // 0x0990(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ConfigFOV;                                               // 0x099C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchMax;                                            // 0x09A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchMin;                                            // 0x09A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewYawMax;                                              // 0x09A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewYawMin;                                              // 0x09AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraOccupiedRoom;                                      // 0x09B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableDistanceSmooth;                                    // 0x09B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       EnableFOVSmooth;                                         // 0x09B5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VTAR[0x2];                                   // 0x09B6(0x0002) Fix size for supers

	public:
		class USolarCameraComponent* STATIC_GetCameraComponentFromActor(class AActor* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCameraCompsInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarCameraCompsInterface : public UInterface
	{
	public:
		class USolarSpringArmComponent* GetSolarSpringArmComponent();
		class USolarCameraComponent* GetSolarCameraComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCapsuleActor
	 * Size -> 0x0128 (FullSize[0x0350] - InheritedSize[0x0228])
	 */
	class ASolarCapsuleActor : public AActor
	{
	public:
		struct FSoftObjectPath                                     StartCruisingPath;                                       // 0x0228(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     StopCruisingPath;                                        // 0x0240(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                CruiseCharacterBindingName;                              // 0x0258(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                CruiseCapsuleBindingName;                                // 0x0260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                CruiseCameraBindingName;                                 // 0x0268(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SequenceCameraBlendDuration;                             // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E6GU[0x4];                                   // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimationAsset* CapsuleCruisingLoopAnim;                                 // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence* CharacterCruiseLoopAnim;                                 // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     CapsuleCruisingStopAnimPath;                             // 0x0288(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence* CharacterCruiseEndAnim;                                  // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* CapsuleSkeletalMesh;                                     // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        AirflowMeshEffects;                                      // 0x02B0(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    AirflowParticleEffects;                                  // 0x02C0(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ALevelSequenceActor* SequenceActor;                                           // 0x02D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ACineCameraActor* SequenceCamera;                                          // 0x02D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULevelSequence* StartCruisingSequence;                                   // 0x02E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ULevelSequence* StopCruisingSequence;                                    // 0x02E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* CapsuleCruisingEndAnim;                                  // 0x02F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* BoardedCharacterPrivate;                                 // 0x02F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* CloudParticleComponent;                                  // 0x0300(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     CloudParticlePath;                                       // 0x0308(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M41P[0x20];                                  // 0x0320(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* CloudParticleAsset;                                      // 0x0340(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_20NK[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopCruiseSequenceFinished();
		void StartCruiseSequenceFinished();
		void PlayStopCruiseSequence();
		void PlayStopCruiseAnimation();
		void PlayStartCruiseSequence();
		void PlayCruiseLoopAnimation();
		void HideCapsuleAirflowVFX();
		class ASolarCapsuleActor* STATIC_CreateCapsuleActorForBoarder(class ASolarCharacter* InBoarder, class UClass* CapsuleActorClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCapsuleRoot
	 * Size -> 0x01D8 (FullSize[0x0400] - InheritedSize[0x0228])
	 */
	class ASolarCapsuleRoot : public AActor
	{
	public:
		unsigned char                                              UnknownData_YRQG[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent* RootComp;                                                // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetComponent* LocationSign;                                            // 0x0238(0x0008) Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B604[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CatchupDuration;                                         // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CatchupBaseLerp;                                         // 0x0254(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E0SA[0x24];                                  // 0x0258(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMiniMapAirlineData                                 MiniMapData;                                             // 0x027C(0x0030) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FUsingAirlineData                                   CurrentAirline;                                          // 0x02AC(0x0044) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      CruiseStartTime;                                         // 0x02F0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CruiseStartLoc;                                          // 0x02F4(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            CruiseStartRot;                                          // 0x0300(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    ForceParachuteWarningTime;                               // 0x030C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAllowedSmoothDistance;                                // 0x0310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClientSpeedScale;                                        // 0x0314(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClientRotationSmoothSpeed;                               // 0x0318(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EL5L[0x1C];                                  // 0x031C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCapsuleFormationData* CapsuleFormationData;                                    // 0x0338(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<struct FVector, struct FTeamFormationUnit>            CruiseFormation;                                         // 0x0340(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TArray<struct FBoarderInfo>                                BoardingPlayerList;                                      // 0x0390(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7571[0x60];                                  // 0x03A0(0x0060) MISSED OFFSET (PADDING)

	public:
		void ServerUnBoardCharacter(class ASolarCharacter* Character);
		void OnRep_MiniMapAirline();
		void OnRep_CurrentAirline();
		struct FMiniMapAirlineData K2_GetAirlineData();
		class ASolarCapsuleRoot* STATIC_GetSolarCapsuleRoot(class UObject* WorldContextObject);
		float GetCruiseProgress();
		int32_t BoardingCharacter(const struct FBoarderInfo& BoarderInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInteractableActor
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASolarInteractableActor : public AActor
	{
	public:
		EInteractableType                                          InteractType;                                            // 0x0228(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I016[0xB];                                   // 0x0229(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bUseSceneActorOptimization;                              // 0x0234(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XKYM[0x3];                                   // 0x0235(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetUserActor(class AActor* InUser);
		void InteractWithActor(class AActor* InActor);
		class AActor* GetUserActor();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCarPad
	 * Size -> 0x0010 (FullSize[0x0248] - InheritedSize[0x0238])
	 */
	class ASolarCarPad : public ASolarInteractableActor
	{
	public:
		float                                                      Duration;                                                // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpeedMultiplier;                                         // 0x023C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceThresholdForValidation;                          // 0x0240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7503[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterAIController
	 * Size -> 0x0008 (FullSize[0x0378] - InheritedSize[0x0370])
	 */
	class ASolarCharacterAIController : public ASolarAIControllerBase
	{
	public:
		unsigned char                                              UnknownData_8254[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (PADDING)

	public:
		class ASolarCharacter* GetSolarCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterCameraComponent
	 * Size -> 0x0118 (FullSize[0x0AD0] - InheritedSize[0x09B8])
	 */
	class USolarCharacterCameraComponent : public USolarCameraComponent
	{
	public:
		class ASolarCharacter* Character;                                               // 0x09B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1GAK[0x8];                                   // 0x09C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarCharacterCameraDataAsset* CharacterCameraConfig;                                   // 0x09C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ML05[0x100];                                 // 0x09D0(0x0100) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterCameraDataAsset
	 * Size -> 0x0328 (FullSize[0x0358] - InheritedSize[0x0030])
	 */
	class USolarCharacterCameraDataAsset : public UDataAsset
	{
	public:
		float                                                      ThirdPersonVerticalOffset;                               // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThirdPersonVerticalOffsetWhenCrouched;                   // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThirdPersonVerticalOffsetWhenCrouchMoving;               // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThirdPersonHorizontalOffset;                             // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* FollowForwardOffsetCurve;                                // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FollowForwardOffsetMultiplier;                           // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrouchCameraLagTime;                                     // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnCrouchCameraLagTime;                                   // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoulderShotVerticalOffset;                              // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoulderShotVerticalOffsetWhenCrouched;                  // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoulderShotHorizontalOffset;                            // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoulderShotDistanceToTarget;                            // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U5NH[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* ShoulderShotFollowDistanceCurve;                         // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoulderShotCameraFOV;                                   // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShoulderShotCameraZoomInOutTime;                         // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScopeShotVerticalOffsetWithStanding;                     // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScopeShotVerticalOffsetWhenCrouch;                       // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceToScopePivot;                                    // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ArmDistanceToCamera;                                     // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScopeHorizontalOffset;                                   // 0x0088(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SwimDistanceToTarget;                                    // 0x008C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SwimDistSwitchSpeed;                                     // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TakeOffCamPitchMin;                                      // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TakeOffCamPitchMax;                                      // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LandingSpeedThreshold;                                   // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCamEffectSettings                                  ParkourCamSettings;                                      // 0x00A0(0x0038) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             CruiseCameraOffset;                                      // 0x00D8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CruiseTargetOffset;                                      // 0x00E4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CruiseDistanceToTarget;                                  // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SkydiveCameraOffset;                                     // 0x00F4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SkydiveTargetOffset;                                     // 0x0100(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkydiveDistanceToTarget;                                 // 0x010C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkydiveDistanceToTargetOnBoosting;                       // 0x0110(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkydiveViewPitchMax;                                     // 0x0114(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkydiveViewPitchMin;                                     // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCameraSettings                                     JetFlySettingsVertical;                                  // 0x011C(0x0020) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FCameraSettings                                     JetFlySettingsFront;                                     // 0x013C(0x0020) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FCameraSettings                                     JetFlySettingsBack;                                      // 0x015C(0x0020) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FCameraSettings                                     JetFlySettingsLeft;                                      // 0x017C(0x0020) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FCameraSettings                                     JetFlySettingsRight;                                     // 0x019C(0x0020) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X7PX[0x4];                                   // 0x01BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  JetFlyFadeInCurve;                                       // 0x01C0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  JetFlyFadeOutCurve;                                      // 0x0248(0x0088) Edit, NativeAccessSpecifierPublic
		class UClass* CameraShakeSkydiveFlying;                                // 0x02D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraShakeSkydiveFlyingSpeedMin;                        // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraShakeSkydiveFlyingSpeedMax;                        // 0x02DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* CameraShakeJetPackLaunch;                                // 0x02E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* CameraShakeLand;                                         // 0x02E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* CameraShakeVehicleEjectLaunch;                           // 0x02F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraShakeLandDistanceMin;                              // 0x02F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraShakeLandDistanceMax;                              // 0x02FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<ECamShakeType, class UClass*>                         CamShakeConfig;                                          // 0x0300(0x0050) Edit, UObjectWrapper, NativeAccessSpecifierPublic
		float                                                      TargetOffsetLerpSpeed;                                   // 0x0350(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9FQO[0x4];                                   // 0x0354(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterController
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarCharacterController : public UInterface
	{
	public:
		void OnEnterLanding();
		class FString GetPlayerID();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarControllerCommon
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarControllerCommon : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDefaultCharacterController
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarDefaultCharacterController : public USolarCharacterController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterGameplayAbility_Blueprint
	 * Size -> 0x0000 (FullSize[0x0460] - InheritedSize[0x0460])
	 */
	class USolarCharacterGameplayAbility_Blueprint : public USolarCharacterGameplayAbility
	{
	public:
		bool K2_OnActivateCharacterAbilityFromEvent(class ASolarCharacter* Character, const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilityActivationInfo& ActivationInfo, const struct FGameplayEventData& EventData);
		bool K2_OnActivateCharacterAbility(class ASolarCharacter* Character, const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilityActivationInfo& ActivationInfo);
		bool K2_CanActivateCharacterAbility(class ASolarCharacter* Character, const struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayTagContainer* RelevantTags);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterGASComponent
	 * Size -> 0x0068 (FullSize[0x1458] - InheritedSize[0x13F0])
	 */
	class USolarCharacterGASComponent : public USolarAbilitySystemComponent
	{
	public:
		unsigned char                                              UnknownData_JR3C[0x68];                                  // 0x13F0(0x0068) MISSED OFFSET (PADDING)

	public:
		void NotifyTalentState(EPlayerStateRepType InRepType, class APlayerState* InPlayerState);
		void GrantTalentWithPlayerState(class APlayerState* InPlayerState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SingleCharacterModelBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USingleCharacterModelBase : public UObject
	{
	public:
		unsigned char                                              UnknownData_QJ0L[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharactersModelBase
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USolarCharactersModelBase : public UObject
	{
	public:
		TMap<class FString, class USingleCharacterModelBase*>      PlayersModel;                                            // 0x0028(0x0050) Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterSettings
	 * Size -> 0x0140 (FullSize[0x0178] - InheritedSize[0x0038])
	 */
	class USolarCharacterSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              CharacterGlobalConfig[0x28];                             // 0x0038(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CharacterGameplayTagsConfig[0x28];                       // 0x0060(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MaterialChangePriorityTags[0x28];                        // 0x0088(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              VisibilityFlagTags[0x28];                                // 0x00B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CharacterMontageTags[0x28];                              // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CharacterMontageMappingTable[0x28];                      // 0x0100(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EmotionMontageMappingTable[0x28];                        // 0x0128(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CharacterBodyScaleConfig[0x28];                          // 0x0150(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterSettingsRuntime
	 * Size -> 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
	 */
	class USolarCharacterSettingsRuntime : public UWorldSubsystem
	{
	public:
		class UCharacterGlobalConfig* CharacterGlobalConfigInstance;                           // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCharacterGameplayTagsConfig* CharacterGameplayTagsConfigInstance;                     // 0x0038(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialChangePriorityTags* MaterialChangePriorityTagsInstance;                      // 0x0040(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UVisibilityFlagTags* VisibilityFlagTagsInstance;                              // 0x0048(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCharacterMontageTags* CharacterMontageTagsInstance;                            // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable* CharacterMontageMappingDataTable;                        // 0x0058(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_910E[0x50];                                  // 0x0060(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* EmotionMontageMappingDataTable;                          // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5CV7[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCharacterBodyScaleConfigDataAsset* CharacterBodyScaleConfigInstance;                        // 0x0108(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSpringArmComponent
	 * Size -> 0x0058 (FullSize[0x03F8] - InheritedSize[0x03A0])
	 */
	class USolarSpringArmComponent : public USpringArmComponent
	{
	public:
		unsigned char                                              UnknownData_5QLA[0x10];                                  // 0x03A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CameraLocationLagTime;                                   // 0x03B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HandleTargetOffsetAsRelativeValue;                       // 0x03B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MTZ6[0x43];                                  // 0x03B5(0x0043) Fix size for supers

	public:
		class USolarSpringArmComponent* STATIC_GetSpringArmComponentFromActor(class AActor* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterSpringArmComponent
	 * Size -> 0x0028 (FullSize[0x0420] - InheritedSize[0x03F8])
	 */
	class USolarCharacterSpringArmComponent : public USolarSpringArmComponent
	{
	public:
		class USolarCharacterCameraComponent* Camera;                                                  // 0x03F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* OwnerCharacter;                                          // 0x0400(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5ABS[0x18];                                  // 0x0408(0x0018) MISSED OFFSET (PADDING)

	public:
		void UnregisterOverlappingObstacle(class AActor* InObstacle);
		void RegisterOverlappingObstacle(class AActor* InObstacle);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCharacterUpgradeComponent
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class USolarCharacterUpgradeComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ZIRV[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacter* Owner;                                                   // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Experience;                                              // 0x00C0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Level;                                                   // 0x00C4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CharacterId;                                             // 0x00C8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H0LF[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void ServerExecuteGMLua(const class FString& GMType, const class FString& Param1, const class FString& Param2);
		void ServerExecuteGM(const class FString& GMType, const class FString& Param1, const class FString& Param2);
		void PrepareConfigData();
		void NotifyLevelUp(int32_t OldLevel, int32_t NewLevel);
		void ClientOnLevelUpRpc(int32_t OldLevel, int32_t NewLevel);
		void ClientOnLevelUpLua(int32_t OldLevel, int32_t NewLevel);
		void ClientOnAddNewExpLua(int32_t BehaviorType, int32_t AddExp);
		void ClientOnAddNewExp_LuaCall(int32_t OldLevel, int32_t NewLevel);
		void ClientOnAddNewExp(int32_t BehaviorType, int32_t AddExp);
		void CalculateCharacterExp(int32_t EventType, float InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPile
	 * Size -> 0x02B4 (FullSize[0x054C] - InheritedSize[0x0298])
	 */
	class ASolarPile : public ASolarMapElementBase
	{
	public:
		unsigned char                                              UnknownData_IO3W[0x18];                                  // 0x0298(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* NormalMesh;                                              // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent* CollisionComp;                                           // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UActorComponent*>                             ExtraChargingVFXComps;                                   // 0x02C0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSpawnedActorHandle                                 CachedActorHandle;                                       // 0x02D0(0x0004) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_405X[0x18];                                  // 0x02D4(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EChargingChannel                                           Channel;                                                 // 0x02EC(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarPileType                                             PileType;                                                // 0x02ED(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P7Z0[0x2];                                   // 0x02EE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Zone;                                                    // 0x02F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxEnergy;                                               // 0x02F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PowerRecoveryCD;                                         // 0x02F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PowerRecoveryFrequency;                                  // 0x02FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PowerRecoveryQuantity;                                   // 0x0300(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnable;                                                 // 0x0304(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBroken;                                                 // 0x0305(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanRecover;                                             // 0x0306(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsActivated;                                            // 0x0307(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Level;                                                   // 0x0308(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsLosingEnergy;                                         // 0x030C(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FVWD[0x3];                                   // 0x030D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OwnerTeam;                                               // 0x0310(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASolarCharacter>                      OwnerCharacter;                                          // 0x0314(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5Q7N[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FChargingInfo                                       defaultChargingInfo;                                     // 0x0320(0x0030) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<struct FChargingInfo>                               ChargingInfoList;                                        // 0x0350(0x0010) Net, ZeroConstructor, RepNotify, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentEnergy;                                           // 0x0360(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QZYI[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SphereRadius;                                            // 0x0368(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8EFG[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        RecoveryHandle;                                          // 0x0370(0x0008) BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BPCA[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        ServerChargingTimerHandle;                               // 0x0380(0x0008) BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        ClientChargingTimerHandle;                               // 0x0388(0x0008) BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    ChargeParticleEffects;                                   // 0x0390(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* AkAudioComponent;                                        // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x03A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H3DW[0x2];                                   // 0x03B0(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableHealth;                                           // 0x03B2(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XR13[0x1];                                   // 0x03B3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxHealth;                                               // 0x03B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReducedHealth;                                           // 0x03B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentHealth;                                           // 0x03BC(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TweenTimeSpeed;                                          // 0x03C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RestTweenTime;                                           // 0x03C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetOpacity;                                           // 0x03C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentOpacity;                                          // 0x03CC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OpacityTweenTime;                                        // 0x03D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FY7D[0x4];                                   // 0x03D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic* DynamicMatChargingCircle;                                // 0x03D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FChargingPilePreset                                 ChargingPilePreset;                                      // 0x03E0(0x0150) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class UStaticMeshComponent* RangeRingMeshComp;                                       // 0x0530(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent* ChargeCircleMeshComp;                                    // 0x0538(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCharging;                                               // 0x0540(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ANEW[0xB];                                   // 0x0541(0x000B) Fix size for supers

	public:
		void ToggleExtraChargingVFX(bool Toggle);
		void SetIsActivated(bool bActivated);
		void RemoveChargeParticle(class ASolarCharacter* InCharacter);
		void RemoveAllEffects();
		void ReceivePileExpired();
		void ReceiveEnergyChanged();
		void ReceiveChargingPileInitialize();
		void ReceiveCharacterShowEffect(class AActor* Other);
		void ReceiveCharacterHideEffect(class AActor* Other);
		void PlaySkillStartSound();
		void PlaySkillEndSound();
		void PlayRecoveryAnim(bool bStart);
		void PlayChargingAnimation(bool Reverse);
		void OnUntrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnRep_IsLosingEnergyChanged();
		void OnRep_Energy();
		void OnRep_Enable();
		void OnRep_CurrentHealth();
		void OnRep_ChargingInfoListChanged();
		void OnRep_CanRecover();
		void OnRep_Broken();
		void OnRefreshRangeRing();
		void OnRefreshChargeCircle(bool InCharging);
		void OnCharacterBatteryIdChanged(class ASolarCharacter* InCharacter, float Frequency, float Quantity);
		bool IsCharacterInRange(class ASolarCharacter* InCharacter);
		bool IsAnyCharacterInRange();
		struct FChargingInfo GetChargingInfoByCharacter(class ASolarCharacter* Character);
		void GameStatisticsChargingPile(struct FChargingInfo* ChargingInfo, int32_t pileLevel, const struct FVector& Location, float energyUse);
		void CreateChargeParticle(class ASolarCharacter* InCharacter);
		void ChangeColor();
		bool CanWork();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarChargingPile
	 * Size -> 0x0004 (FullSize[0x0550] - InheritedSize[0x054C])
	 */
	class ASolarChargingPile : public ASolarPile
	{
	public:
		unsigned char                                              UnknownData_X1PB[0x4];                                   // 0x054C(0x0004) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PSOGatherVolume
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class APSOGatherVolume : public AActor
	{
	public:
		class UBoxComponent* BoxComponent;                                            // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCheatManager
	 * Size -> 0x0428 (FullSize[0x04A0] - InheritedSize[0x0078])
	 */
	class USolarCheatManager : public UCheatManager
	{
	public:
		unsigned char                                              UnknownData_M1I6[0x360];                                 // 0x0078(0x0360) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     VehicleSpawnerMarkWidgetPath;                            // 0x03D8(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMapMarkBase*>                                VehicleSpawnerMarks;                                     // 0x03F0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     PSOGatherCubeBPAssetPath;                                // 0x0400(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PSOGatherCubeDistanceToCamera;                           // 0x0418(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KSGD[0x4];                                   // 0x041C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PSOGatherBPHuntAssetPath;                                // 0x0420(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              PSOGatherBPTutorialAssetPath;                            // 0x0430(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YQWE[0x48];                                  // 0x0440(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     AirShipBPAssetPath;                                      // 0x0488(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void StopEffectScreen(int32_t InHandle);
		void StopEffectActor(int32_t InHandle);
		void StartPSOGatheringiOSTutorial();
		void StartPSOGatheringiOSHunt();
		void StartPSOGathering();
		void StartEffectScreen(const class FString& RowName);
		void StartEffectActor(const class FString& RowName);
		void SpawnVehicleWithVehicleID(int32_t VehicleID);
		void SpawnVehicle(int32_t SpawnID);
		void SpawnTreasureBox(int32_t TreasureBoxID);
		void SpawnSolarRadar(const class FString& BpPath);
		void SpawnPSOGatherCube();
		void SpawnOutcomeContent(int32_t OutcomeID);
		void SpawnChargingPile(const class FString& BpPath);
		void SpawnAirdrop(int32_t AirdropID);
		void SolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);
		void SolarWeaponReload(int32_t PrimaryAmmoCap, int32_t SecondaryAmmoCap);
		void SolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);
		void SolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);
		void SolarTestReportAbnormalPlayerWeapon(const class FString& InPlayerID, const class FString& InVariableName, const class FString& InVariableValue, const class FString& InAttackLocation, const class FString& InHitLocation, const class FString& InHitBoneScale, const class FString& InWeaponBlueprintName);
		void SolarTestReportAbnormalPlayerVehicle(const class FString& InPlayerID, const class FString& InVariableName, const class FString& InVariableValue, const class FString& InVehiclePreviousLocation, const class FString& InVehiclePresentLocation, const class FString& InVehicleBlueprintName);
		void SolarTestReportAbnormalPlayer(const class FString& InPlayerID, const class FString& InVariableName, const class FString& InVariableValue);
		void SolarTeleport(float DestLocationX, float DestLocationY, float DestLocationZ);
		void SolarServerCmd(const class FString& Cmd);
		void SolarGMSetPlayerValueInternal(const class FString& InType, const class FString& InValue);
		void SolarGM_WeaponShowCurrentInfo();
		void SolarGM_ValidateAirline(float InBufferX, float InBufferY, float InBufferZ);
		void SolarGM_UnforbidCharacterUniqueSkillCD();
		void SolarGM_TestEnsureMsgWithBP();
		void SolarGM_TestEnsureMsg();
		void SolarGM_TestCrashWithBP();
		void SolarGM_TestCrash();
		void SolarGM_TeleportToBotAI(uint32_t CtrlIndex);
		void SolarGM_StopBotAIBehaviorTree(bool bStop);
		void SolarGM_SpawnBotAIAtCrosshairByNum(int32_t Num);
		void SolarGM_ShowEmojiBubble(int32_t EmojiID);
		void SolarGM_ShowAspectRatio(float InDuration);
		void SolarGM_SetWeaponAdditionalBaseDamage(float AdditionalBaseDamage, bool bSelfOnly);
		void SolarGM_SetPlayerValue(const class FString& InType, const class FString& InValue);
		void SolarGM_SetPlayerLevel(int32_t InLv);
		void SolarGM_SetEMPForceFieldTestRange(float InRadius, float InHeight);
		void SolarGM_SetEMPForceFieldCoreSize(float InX, float InY, float InZ);
		void SolarGM_SetCharacterRoleAbilitySkillCDDuration(float InCD);
		void SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed(float MaxHorizontalSpeed, float MaxVerticalSpeed);
		void SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent(const class FString& BodyType, const class FString& status, float ExtentX, float ExtentY);
		void SolarGM_SetAssistAimTargetConfig_LockAimingExtent(const class FString& BodyType, const class FString& status, float ExtentX, float ExtentY);
		void SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent(const class FString& BodyType, const class FString& status, float ExtentX, float ExtentY);
		void SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent(const class FString& BodyType, const class FString& status, const class FString& CharacterTagStr, float ExtentX, float ExtentY);
		void SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent(const class FString& BodyType, const class FString& status, const class FString& CharacterTagStr, float ExtentX, float ExtentY);
		void SolarGM_SetAssistAimCurveScales(float TargetVelocityFollowHorizontalRatioCurveScale, float TargetVelocityFollowVerticalRatioCurveScale, float GlobalSensitivityScaleCurveScale);
		void SolarGM_SetAssistAimBaseFollowSpeed(const class FString& StatusTagStr, float HorizontalSpeed, float VerticalSpeed);
		void SolarGM_RestoreRecommend();
		void SolarGM_ResetCharacterUniqueSkillCD();
		void SolarGM_PlayerUpgrade(int32_t InLv);
		void SolarGM_MarkVehicleSpawnLocationInMap(int32_t Index);
		void SolarGM_KillAllAI(bool KillBot);
		void SolarGM_GainExperience(int32_t InExp);
		void SolarGM_ClearCharacterUniqueSkillCD();
		void SolarGM_CleanUpShootingTarget();
		void SolarGM_CharacterUpgradeBattleUpgradeEffectLevel(int32_t UpgradeTo);
		void SolarGM_CharacterSuicide();
		void SolarGM_CharacterSelectBattleUpgradeEffect(int32_t Level, int32_t SelectedIndex);
		void SolarGM_CharacterEnableDebugAutoMove(bool bEnabled, float SwitchInterval);
		void SolarGM_CharacterDamageSelf(int32_t InDamage);
		void SolarGM_CharacterChangeTailFlameId(int32_t InTailFlameId);
		void SolarGM_CharacterChangeBagId(int32_t InBagId);
		void SolarGM_CallAirdropByAirShipHere();
		void SolarGM_CallAirdropByAirShip(float Loc_X, float Loc_Y);
		void SolarGM_ApplyVehicleSkin(int32_t SkinId);
		void SolarAsyncLoad(const class FString& ResPath);
		void SolarAmmoSpreadPerBullet(int32_t AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);
		void SolarAmmoRangeSpeedDamage(int32_t AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);
		void SolarAmmoFiring(int32_t AmmoIndex, int32_t FireCostType, int32_t FireCostPerAttack, int32_t FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);
		void SolarAmmoBoltAndMag(int32_t AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);
		void SolarAmmoBasicMovement(int32_t AmmoIndex, int32_t TimedExplode, int32_t BounceTimes, float LifeTime, float BaseReloadTime, int32_t TrajectoryType, float CustomValue);
		void SetGameplayVibrateIntensity(const class FString& Category, const class FString& Intensity);
		void ExecuteGMCommandsInCustomMode(const class FString& CommandParameters, const class FString& ArgsStr);
		void BookmarkEnd(const class FString& Message);
		void BookmarkBegin(const class FString& Message);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCheckBox
	 * Size -> 0x0028 (FullSize[0x0858] - InheritedSize[0x0830])
	 */
	class USolarCheckBox : public UCheckBox
	{
	public:
		unsigned char                                              UnknownData_IUUJ[0x10];                                  // 0x0830(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidget* OnGroup;                                                 // 0x0840(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget* OffGroup;                                                // 0x0848(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESlateVisibility                                           CheckedGroupVisibility;                                  // 0x0850(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESlateVisibility                                           UncheckedGroupVisibility;                                // 0x0851(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9OS9[0x6];                                   // 0x0852(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnStateChanged(bool bIsChecked);
		void ManualSetIsChecked(bool InIsChecked);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCheckButton
	 * Size -> 0x0030 (FullSize[0x04C8] - InheritedSize[0x0498])
	 */
	class USolarCheckButton : public UButton
	{
	public:
		unsigned char                                              UnknownData_43VV[0x8];                                   // 0x0498(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClickedEvent;                                          // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N8SJ[0x8];                                   // 0x04B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidget* OnGroup;                                                 // 0x04B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidget* OffGroup;                                                // 0x04C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetButtonIndex(int32_t InButtonIndex);
		void OnStateChanged(bool bIsChecked);
		class FScriptMulticastDelegate GetOnClickedEvent();
		int32_t GetButtonIndex();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCheckButtonGroup
	 * Size -> 0x0030 (FullSize[0x0190] - InheritedSize[0x0160])
	 */
	class USolarCheckButtonGroup : public UNamedSlot
	{
	public:
		class FScriptMulticastDelegate                             OnStateChangedEvent;                                     // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       IsChildrenAutoSetState;                                  // 0x0170(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDelayStateChanged;                                      // 0x0171(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YKYA[0x6];                                   // 0x0172(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPanelWidget* GroupRoot;                                               // 0x0178(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CD65[0x10];                                  // 0x0180(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetSelectIndex(int32_t Index);
		void SetChildrenAutoSetState(bool InEnable);
		void RevertLastCheck();
		void OnStateChanged(int32_t ButtonIndex);
		void OnCheckButtonGroupStateChangedEvent__DelegateSignature(int32_t InLastButtonIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCheckButtonInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarCheckButtonInterface : public UInterface
	{
	public:
		void OnStateChange(int32_t InIndex);
		void ManualChangeState(bool bIsChecked);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCheckButtonWidget
	 * Size -> 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
	 */
	class USolarCheckButtonWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_HFMI[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClickedEvent;                                          // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JMXH[0x8];                                   // 0x0360(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetButtonIndex(int32_t InButtonIndex);
		void PostClickedEvent();
		void OnStateChanged(bool bIsChecked);
		void OnSelected(bool bSelected);
		class FScriptMulticastDelegate GetOnClickedEvent();
		int32_t GetButtonIndex();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarChunkAssignData
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class USolarChunkAssignData : public UDataAsset
	{
	public:
		TArray<struct FDirectoryPath>                              DirectoriesToNeverClean;                                 // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, struct FChunkAssignRule>               Rules;                                                   // 0x0040(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSafeArea
	 * Size -> 0x01E8 (FullSize[0x0468] - InheritedSize[0x0280])
	 */
	class ASolarSafeArea : public ASCMMapElementBase
	{
	public:
		unsigned char                                              UnknownData_GACP[0x4];                                   // 0x0280(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrentIndex;                                            // 0x0284(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetTime;                                              // 0x0288(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BeginShrinkTime;                                         // 0x028C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageValue;                                             // 0x0290(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BeginLocation;                                           // 0x0294(0x000C) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BeginScale;                                              // 0x02A0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESafeAreaStatus                                            AreaStatus;                                              // 0x02A4(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KOTF[0x10];                                  // 0x02A5(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EActorInSafeAreaStatus                                     LocalPlayerCameraInSafeAreaState;                        // 0x02B5(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EActorInSafeAreaStatus                                     LocalViewFocusedCharacterInSafeAreaState;                // 0x02B6(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QYFT[0x51];                                  // 0x02B7(0x0051) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCanCausingDamage;                                       // 0x0308(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JQCS[0x3];                                   // 0x0309(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FirstDamageDelay;                                        // 0x030C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageInterval;                                          // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OCO2[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LeaveSafeAreaSoundName;                                  // 0x0318(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EnterSafeAreaSoundName;                                  // 0x0328(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              InPoisonPerSecSoundName;                                 // 0x0338(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InPoisonSoundSecond;                                     // 0x0348(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WarningNotificationIndex;                                // 0x034C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, int32_t>                                     NoticeDataMap;                                           // 0x0350(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, class FString>                               SoundEventNameDataMap;                                   // 0x03A0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, int32_t>                                     QuickVoiceDataMap;                                       // 0x03F0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    ShrinkEndNotificationIndex;                              // 0x0440(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ShrinkEndNoticeId;                                       // 0x0444(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ShrinkEndSoundEventName;                                 // 0x0448(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarPlayerController* LocalController;                                         // 0x0458(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ACEJ[0x8];                                   // 0x0460(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartShrink();
		void ShowPoisonPerSecond();
		void ShowPoisonEffect(bool bShow);
		void ShowEffectInside(bool bInside);
		void Resume();
		void ReceiveShrinkEnd();
		void ReceiveActorLeaveSafeAreaCircle(class AActor* Actor);
		void ReceiveActorLeavePoisonCircle(class AActor* Actor);
		void ReceiveActorEnterSafeAreaCircle(class AActor* Actor);
		void ReceiveActorEnterPoisonCircle(class AActor* Actor);
		void Pause();
		void OnRep_CurrentIndexChange();
		void LocalPlayerCameraLeavePoisonCircle();
		void LocalPlayerCameraEnterPoisonCircle();
		bool IsPause();
		bool IsLocationInSafeArea(const struct FVector& Pos);
		bool IsLocationInPoisonCircle(const struct FVector& InLocation);
		bool IsInSafeArea(class AActor* Actor);
		void GMStartShrinkArea();
		ESafeAreaStatus GetSafeAreaStatus();
		struct FVector GetNextAreaLocation();
		float GetCurrentDamage();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCircleSafeArea
	 * Size -> 0x0060 (FullSize[0x04C8] - InheritedSize[0x0468])
	 */
	class ASolarCircleSafeArea : public ASolarSafeArea
	{
	public:
		TMap<float, class UCurveFloat*>                            MiniMapScaleMap;                                         // 0x0468(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FCircleSafeAreaInfo>                         SafeAreaConfigArr;                                       // 0x04B8(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetNextSafeArea(const struct FCircleSafeAreaInfo& AreaInfo);
		void Init(const struct FVector& InSafeAreaCenterPos, float InPoisonCircleRadius);
		float GetNextSafeAreaRadius();
		class UCurveFloat* GetMiniMapFOVCurveByRadius(float InRadius);
		float GetCurrentSafeAreaRadius();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCityName
	 * Size -> 0x00D8 (FullSize[0x0300] - InheritedSize[0x0228])
	 */
	class ASolarCityName : public AActor
	{
	public:
		class USolarStrongholdNamesConfig* NameConfigCN;                                            // 0x0228(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarStrongholdNamesConfig* NameConfigEN;                                            // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture* NameTextureCN;                                           // 0x0238(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture* NameTextureEN;                                           // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* NameMaterial;                                            // 0x0248(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              PointName;                                               // 0x0250(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* TextMaterial;                                            // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     FontPath;                                                // 0x0268(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseScale;                                               // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HightLimit;                                              // 0x0284(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumDistance;                                         // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LocTextID;                                               // 0x028C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCapitalsLock;                                           // 0x0290(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P58F[0x3];                                   // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GradientFadeTime;                                        // 0x0294(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESolarSupportLanguages                                     PreviewLang;                                             // 0x0298(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RAXS[0x7];                                   // 0x0299(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     PreviewFontPath;                                         // 0x02A0(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9V5Z[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic* MaterialDynamic;                                         // 0x02C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic* TextMaterialDynamic;                                     // 0x02C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YYK8[0x30];                                  // 0x02D0(0x0030) MISSED OFFSET (PADDING)

	public:
		void SetSolarCityNameTickAndShow(EReplayCameraMode OldMode, EReplayCameraMode CurMode);
		void SetSolarCityNameTick(bool bNeedTick);
		void OnCharacterOnRep();
		TArray<class FString> GetLocalizationCityNamesWithAllLanguages();
		class FString GetLocalizationCityName(bool bGetNameWithLang);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCombatRegenerationInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarCombatRegenerationInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCommonTextBlock
	 * Size -> 0x0048 (FullSize[0x0368] - InheritedSize[0x0320])
	 */
	class USolarCommonTextBlock : public UCommonTextBlock
	{
	public:
		bool                                                       bEnableLocText;                                          // 0x0320(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PKIV[0x3];                                   // 0x0321(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LocTextID;                                               // 0x0324(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarSupportLanguages                                     PreviewLang;                                             // 0x0328(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q03G[0x7];                                   // 0x0329(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateFontSizeForLang                               SpecialLangFont;                                         // 0x0330(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_28TK[0x20];                                  // 0x0348(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetLocTextID(int32_t InLocTextID);
		void SetLocLangTextData(const class FText& InText, bool InEnableLocText, int32_t InLocTextID, ESolarSupportLanguages InPreviewLang, const struct FSlateFontSizeForLang& InSlateFontSizeForLang);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarComponentKeyWidget
	 * Size -> 0x0040 (FullSize[0x02A0] - InheritedSize[0x0260])
	 */
	class USolarComponentKeyWidget : public UUserWidget
	{
	public:
		class FString                                              ActionName;                                              // 0x0260(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              KeyBoardText;                                            // 0x0270(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      KeyBoardTextArray;                                       // 0x0280(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             UpdateKeyboardMappingDelegate;                           // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void UpdateKeyboardMappingInternal(const class FString& ModifyActionName);
		void OnUpdateKeyboardMapping();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ControllerRelevancyInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UControllerRelevancyInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarControllerRelevancySubsystem
	 * Size -> 0x0160 (FullSize[0x0190] - InheritedSize[0x0030])
	 */
	class USolarControllerRelevancySubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_EW2Q[0x160];                                 // 0x0030(0x0160) MISSED OFFSET (PADDING)

	public:
		void OnActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCrosshairSubsystem
	 * Size -> 0x00F8 (FullSize[0x0128] - InheritedSize[0x0030])
	 */
	class USolarCrosshairSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_XTO1[0x7C];                                  // 0x0030(0x007C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarPlayerWeapon>                   ActivedPlayerWeapon;                                     // 0x00AC(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RNBO[0x34];                                  // 0x00B4(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UVehicleWeaponScopeWidget*>                   CachedVehicleWeaponScopes;                               // 0x00E8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MV33[0x30];                                  // 0x00F8(0x0030) MISSED OFFSET (PADDING)

	public:
		void VehicleWeaponForbid(bool InbEntry);
		void ClearVehicleScopeUI();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCrosshairWidgetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarCrosshairWidgetInterface : public UInterface
	{
	public:
		void OnUpdateReload(float InReloadProgress, int32_t InReloadAmmo, int32_t InMaxAmmo);
		void OnUpdateOverload(float InOverloadProgress, float InOverloadWarningRate, bool InbOverloadState);
		void OnUpdateCoolDown(float InReloadProgress);
		void OnUpdateCharge(bool InbCharging, int32_t InChargeMode, float InChargeProgress);
		void OnUpdateAmmo(int32_t InReservedAmmo, int32_t InMaxAmmo, float InAmmoProgress, bool InbFirst);
		void OnReloadFinish(bool InbReloadSuccess, int32_t InReloadAmmo, int32_t InReservedAmmo, int32_t InMaxAmmo, float InAmmoProgress);
		void OnInsufficientAmmo();
		void OnChangeReloadState(bool InbQuitState, bool bReloadSpeedup);
		void OnChangeOverloadState(bool InbQuitState);
		void OnActiveCrosshair(class UUserWidget* InActiveCrosshair);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarCustomModeBoxSafeArea
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class ASolarCustomModeBoxSafeArea : public ASolarSafeArea
	{
	public:
		bool STATIC_PointInBox(const struct FVector& Pos, class UBoxComponent* Box);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDamageTextInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarDamageTextInterface : public UInterface
	{
	public:
		void RequestPlayDamageTextByDatas(TArray<struct FSolarDamageText> InSolarDamageTextDatas);
		void RequestPlayDamageText(const struct FSolarDamageText& InSolarDamageText);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDamageTextSlotWidget
	 * Size -> 0x00D0 (FullSize[0x0418] - InheritedSize[0x0348])
	 */
	class USolarDamageTextSlotWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_TE30[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESolarDamageTextType, struct FSolarDamageTextData>    TextDatas;                                               // 0x0358(0x0050) BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<ESolarDamageTextType, struct FSolarDamageTextIconData> IconDatas;                                               // 0x03A8(0x0050) BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UImage* Img_Crit;                                                // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Crit_Anim;                                               // 0x0400(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   UniqueId;                                                // 0x0408(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DamageForSpecialAnimation;                               // 0x040C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Text_Special_Anim;                                       // 0x0410(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnCharacterDeath(class ASolarCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDamageTextWidget
	 * Size -> 0x02E0 (FullSize[0x0628] - InheritedSize[0x0348])
	 */
	class USolarDamageTextWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_LACO[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESolarDamageTextType, struct FSolarDamageTextStyle>   FloatDamageTextConfig;                                   // 0x0350(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TMap<ESolarDamageTextType, struct FSolarDamageTextStyle>   StackDamageTextConfig;                                   // 0x03A0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           HitCharacterPositionOffset;                              // 0x03F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           CommonHitPositionOffset;                                 // 0x03F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           FloatDamageTextOffset;                                   // 0x0400(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           DamageTextDisplayAreaRatio;                              // 0x0408(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FloatDamageTextMaxinum;                                  // 0x0410(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FloatDamageTextScaleMaximum;                             // 0x0414(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FloatDamageTextScaleMinimum;                             // 0x0418(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StackDamageTextScaleMaximum;                             // 0x041C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StackDamageTextScaleMinimum;                             // 0x0420(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StackDamageTextHitScaleRatio;                            // 0x0424(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeadShotDamageTextScaleRatio;                            // 0x0428(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WPMY[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USolarDamageTextSlotWidget*>                  AllDamageTextSlotWidget;                                 // 0x0430(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UVerticalBox*>                                DamageTextGroups;                                        // 0x0440(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<uint32_t, struct FSolarDamageTextGroupData>           DamageTextGroupDatas;                                    // 0x0450(0x0050) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<uint32_t, struct FSolarDamageTextGroupData>           PendingSlotWidgetDatas;                                  // 0x04A0(0x0050) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  OBSlotScaleCurve;                                        // 0x04F0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		TMap<ESlateDetailMode, int32_t>                            FloatDamageTextMaxinumBasedOnDetailMode;                 // 0x0578(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TMap<ESlateDetailMode, int32_t>                            FloatDamageTextWidgetPoolBasedOnDetailMode;              // 0x05C8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UClass* FloatDamageTextWidget;                                   // 0x0618(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MG07[0x8];                                   // 0x0620(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdatePendingSlotWidgetDatas(uint32_t UniqueId);
		void RequestDisplayDamageText(const struct FSolarDamageText& InDamageTextData);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDeathViewSkillWidget
	 * Size -> 0x0070 (FullSize[0x03B8] - InheritedSize[0x0348])
	 */
	class USolarDeathViewSkillWidget : public USolarUserWidget
	{
	public:
		class UOverlay* WeaponSkill;                                             // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Bg;                                                  // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Light;                                               // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ProgressCD;                                              // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* icon_WeaponSkill;                                        // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        CurrentProgressState;                                    // 0x0370(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ProgressParameterName;                                   // 0x0380(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        OnCDColor;                                               // 0x0388(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        UnCDColor;                                               // 0x0398(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarPlayerWeapon>                   CurrentPlayerWeapon;                                     // 0x03A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCoolDown;                                               // 0x03B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UW2G[0x7];                                   // 0x03B1(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateSkillVisibility();
		void UpdateSkillIcon();
		void UpdateCurrentPlayerWeapon();
		void UpdateCDProgress(bool bForceUpdate);
		void SwitchSkillState(bool InbCD);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDeathViewWeaponPanelWidget
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class USolarDeathViewWeaponPanelWidget : public USolarUserWidget
	{
	public:
		class USolarDeathViewWeaponWidget* Weapon_2;                                                // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarDeathViewWeaponWidget* Weapon_3;                                                // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarDeathViewWeaponWidget* Weapon_4;                                                // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A4XA[0x18];                                  // 0x0360(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USolarDeathViewWeaponWidget*>                 WeaponWidgetArray;                                       // 0x0378(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnUpdateAmmo(int32_t InWeaponSlotID);
		void OnEquipWeapon(int32_t InWeaponSlotID, class ASolarPlayerWeapon* InPlayerWeapon);
		void OnActiveWeapon(int32_t InWeaponSlotID, class AActor* InActivedWeapon);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDeathViewWeaponWidget
	 * Size -> 0x0098 (FullSize[0x03E0] - InheritedSize[0x0348])
	 */
	class USolarDeathViewWeaponWidget : public USolarUserWidget
	{
	public:
		class UCanvasPanel* Panel_Empty;                                             // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Weapon;                                            // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Hold;                                              // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Mask;                                                // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Weapon;                                              // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_WeaponBg_2;                                          // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_WeaponBg;                                            // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_WeaponBg_3;                                          // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Bullets;                                             // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Bullets_1;                                           // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* SizeBox_1;                                               // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarPlayerWeapon>                   OwnerPlayerWeapon;                                       // 0x03A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        LoadWeaponDataTimerHandle;                               // 0x03A8(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4W4H[0x10];                                  // 0x03B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        ExtraAmmoColor;                                          // 0x03C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        AmmoDefaultColor;                                        // 0x03D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnWeaponUpgrade(int32_t InLevel, uint32_t InWeaponUniqueID);
		void OnWeaponUpdateAmmoCount(int32_t InFireModeType, class ASolarWeapon* InWeapon);
		void OnCharacterLevelChanged(int32_t InNewLevel);
		void AsyncLoadWeaponData();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDebugDrawer
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarDebugDrawer : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDebugDrawerManager
	 * Size -> 0x0078 (FullSize[0x02A0] - InheritedSize[0x0228])
	 */
	class ASolarDebugDrawerManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_LPT8[0x78];                                  // 0x0228(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDecorationActor
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASolarDecorationActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDecorationComponent
	 * Size -> 0x0058 (FullSize[0x0370] - InheritedSize[0x0318])
	 */
	class USolarDecorationComponent : public USceneComponent
	{
	public:
		struct FSoftObjectPath                                     ChildActorPath;                                          // 0x0318(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHideAllDecorationComponents;                            // 0x0330(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UEL4[0x7];                                   // 0x0331(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* ChildActorClass;                                         // 0x0338(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UChildActorComponent* ChildActorComponent;                                     // 0x0340(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XOH1[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftClassPath                                      ChildActorClassPath;                                     // 0x0350(0x0018) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0DJ9[0x8];                                   // 0x0368(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDemoNetDriver
	 * Size -> 0x0140 (FullSize[0x1608] - InheritedSize[0x14C8])
	 */
	class USolarDemoNetDriver : public UDemoNetDriver
	{
	public:
		unsigned char                                              AlwaysRecordClasses[0x50];                               // 0x14C8(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              RelevantActors[0x50];                                    // 0x1518(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              ReplicatedActors[0x50];                                  // 0x1568(0x0050) UNKNOWN PROPERTY: SetProperty
		TMap<class UNetConnection*, class FString>                 CacheConnectionToPlayerID;                               // 0x15B8(0x0050) NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDestructibleActor
	 * Size -> 0x0020 (FullSize[0x0258] - InheritedSize[0x0238])
	 */
	class ASolarDestructibleActor : public AStaticMeshActor
	{
	public:
		TArray<ECollisionChannel>                                  OnHitIgnoreChannels;                                     // 0x0238(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AddForceCoefficient;                                     // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BrokenDestroyTime;                                       // 0x024C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bChildDetachOnBroken;                                    // 0x0250(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HEKJ[0x7];                                   // 0x0251(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnDestructibleActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FHitResult& Hit, float SpeedDifference);
		void OnClientBrokenEffect();
		void OnBroken(class ASolarVehiclePawn* VehiclePawn, float SpeedDifference, const struct FVector& Impulse, const struct FVector& ImpactPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDownloadManager
	 * Size -> 0x0130 (FullSize[0x0160] - InheritedSize[0x0030])
	 */
	class USolarDownloadManager : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_RS2J[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCDNURLSelectionChanged;                                // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WC72[0x18];                                  // 0x0048(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CDNResBaseURL;                                           // 0x0060(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, class USolarlandFileDownloader*>         ActivedFileDownloaders;                                  // 0x0070(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<class FName, class USolarlandContentStringDownloader*> ActivedContentStringDownloaders;                         // 0x00C0(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<class FName, class USolarlandPakMounter*>             ActiveMounters;                                          // 0x0110(0x0050) Protected, NativeAccessSpecifierProtected

	public:
		void SetNextCDNURL();
		void SetCurrentCDNURL(const class FString& CDNURL);
		void SetCDNURLList(TArray<class FString> InCDNURLList);
		class USolarlandPakMounter* RequirePaksMount(TArray<struct FLocalFileInfo> InPakInfos, const class FName& InMountTag, int32_t InMountOrder, bool bInIncreasedOrder);
		class USolarlandFileDownloader* RequireFilesDownload(TArray<struct FDownloadFileInfo> InFileInfos, const class FString& InLocalDir, const class FName& InDownloadTag, bool bInUseChunk, bool bInForceRedownload);
		class USolarlandContentStringDownloader* RequireContentStringDownload(const class FString& InUrl, const class FName& InDownloadTag, bool bInUseChunk, bool bInForceRedownload);
		void OnCDNURLSelectionChanged__DelegateSignature(const class FString& CurrentCDNURL);
		bool STATIC_IsLocalBuild();
		bool IsCurrentCDNURLAvailable();
		class USolarlandPakMounter* GetMounterByTag(const class FName& InMountTag);
		class USolarlandFileDownloader* GetFileDownloaderByTag(const class FName& InDownloadTag);
		class USolarDownloadManager* STATIC_GetDownloadManager(class UObject* WorldContextObject);
		class FString GetCurrentCDNURL();
		class USolarlandContentStringDownloader* GetContentStringDownloaderByTag(const class FName& InDownloadTag);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDragDropOperation
	 * Size -> 0x0048 (FullSize[0x00D0] - InheritedSize[0x0088])
	 */
	class USolarDragDropOperation : public UDragDropOperation
	{
	public:
		int32_t                                                    dropId;                                                  // 0x0088(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropNum;                                                 // 0x008C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropWeaponSlot;                                          // 0x0090(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropItemType;                                            // 0x0094(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              DropName;                                                // 0x0098(0x0010) Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropFromGridType;                                        // 0x00A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropFromIndex;                                           // 0x00AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor* DropActor;                                               // 0x00B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropGrade;                                               // 0x00B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropFromPickupType;                                      // 0x00BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropFromThisID;                                          // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropWeaponPartType;                                      // 0x00C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DropLevel;                                               // 0x00C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OLAH[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDriveControlBase
	 * Size -> 0x0238 (FullSize[0x0580] - InheritedSize[0x0348])
	 */
	class USolarDriveControlBase : public USolarUserWidget
	{
	public:
		class ASolarPlayerController* SolarPC;                                                 // 0x0348(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarVehiclePawn* VehiclePawn;                                             // 0x0350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_135Q[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        TxtSpeedOriginColor;                                     // 0x0360(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TxtSpeedFinalColor;                                      // 0x0370(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* ProgressBar_Speed;                                       // 0x0380(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Speed_1;                                             // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Speed;                                               // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_BrandName;                                           // 0x0398(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCommonLazyImage* LazyImg_Brand;                                           // 0x03A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Speed;                                             // 0x03A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_SwitchSeat;                                        // 0x03B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBoxGroup* SeatFlag;                                                // 0x03B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZL03[0x18];                                  // 0x03C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarVehicleHealthWidget* UI_Vehicle_Health;                                       // 0x03D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QD7U[0x40];                                  // 0x03E0(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_Warning_Danger;                                    // 0x0420(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Danger_Mask;                                         // 0x0428(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* ProgressBar_Danger;                                      // 0x0430(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_ProgressBar_Danger;                                // 0x0438(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_57F7[0x48];                                  // 0x0440(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_ScopeUI;                                           // 0x0488(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Prep;                                              // 0x0490(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_PrepEmpty;                                         // 0x0498(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* ProgressBar_Prep;                                        // 0x04A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Bullet_1;                                            // 0x04A8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Bullet;                                              // 0x04B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_PrepEmpty;                                          // 0x04B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        EmptyBulletColor;                                        // 0x04C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        NomalBulletColor;                                        // 0x04D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MB5U[0x18];                                  // 0x04E0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_DMG;                                               // 0x04F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_DMG_BG_Light;                                        // 0x0500(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_DMG_BG_Left;                                         // 0x0508(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_DMG_BG;                                              // 0x0510(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_DMG;                                                 // 0x0518(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    VehicleDamageTextLocalizationID;                         // 0x0520(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NATO[0x4];                                   // 0x0524(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FVehicleDamageLevelColor>             VehicleDamageLevelColors;                                // 0x0528(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JY9O[0x8];                                   // 0x0578(0x0008) MISSED OFFSET (PADDING)

	public:
		void TriggerNoAmmoAlert();
		void ShowDriveControl(EDriveState InDriveState, const struct FVehicleControlUserSettings& InDriverSettings);
		void SetOnVehicleUI(EDriveState InDriveState);
		void ScopeUIStateChanged(bool BOpened);
		void RefreshVehicleWeakPoints();
		void RefreshVehicleBrokenDangerUI(float DangerRate, float TweenSpeed, float InDeltaTime);
		void RefreshRequiredAbilityUI(int32_t InAbilityIndex, bool bTagActive);
		void RefreshOccupiedSeats(bool bSwtichVehicleSeatPlayer);
		void RefreshHealthPercentUI();
		void RefreshBlockedAbilityUI();
		void RefreshAbilityActivation(bool bInActivated, bool bCanCancel, unsigned char InAbilityIndex, float InDurationTime);
		void OnVehicleWeaponChanged();
		void OnVehicleTypeChange();
		void OnVehicleSkinUpdate(class ASolarVehiclePawn* VehicleComp);
		void OnSelfHealingChanged(bool bActived);
		void OnLocalWeaponSystemVehicleInitialized();
		void OnCharacterLevelUp(int32_t InNewLevel, int32_t InOldLevel);
		void HiddenDriveControl();
		void ClearVehicleHandle();
		void BP_ApplyVehicleUI(EDriveState InDriveState);
		void ApplyVehicleUI(EDriveState InDriveState);
		void AddScopeToPanel(class UUserWidget* InChildWidget, bool bInSpectate);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDriveControlWidgetPC
	 * Size -> 0x0008 (FullSize[0x0588] - InheritedSize[0x0580])
	 */
	class USolarDriveControlWidgetPC : public USolarDriveControlBase
	{
	public:
		class UWidgetSwitcher* WidgetSwitcher_GetOff;                                   // 0x0580(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarDriveControWidgetMobile
	 * Size -> 0x01D0 (FullSize[0x0750] - InheritedSize[0x0580])
	 */
	class USolarDriveControWidgetMobile : public USolarDriveControlBase
	{
	public:
		unsigned char                                              UnknownData_H1KF[0x20];                                  // 0x0580(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVehicleMoveWidget* Joy_Mode1_D;                                             // 0x05A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVehicleMoveWidget* Joy_Mode2_D;                                             // 0x05A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Sprint;                                                  // 0x05B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0G8N[0x8];                                   // 0x05B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage* Img_SprintActive;                                        // 0x05C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Sprint;                                              // 0x05C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* SprintActiveOncePanel;                                   // 0x05D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_SprintLock;                                          // 0x05D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* FX_CircleLoop;                                           // 0x05E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QQQN[0x8];                                   // 0x05E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCheckBoxGroup* SeatFlag_Expand;                                         // 0x05F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* BT_Switch_Normal;                                        // 0x05F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* BT_Switch_Expand;                                        // 0x0600(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarButton* BT_ChangeSeat;                                           // 0x0608(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Btn_SeatClose;                                           // 0x0610(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_44SP[0x10];                                  // 0x0618(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_VehicleFire;                                       // 0x0628(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Reload;                                            // 0x0630(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Gunsight;                                          // 0x0638(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputButton* BT_Drive_Shot;                                           // 0x0640(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_QuickADS;                                          // 0x0648(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* QuickAds_Progress_CD;                                    // 0x0650(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* QuickAds_Txt_Progress;                                   // 0x0658(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Fire;                                                // 0x0660(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WGS_Vehicle_PrimaryFire;                                 // 0x0668(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CQHX[0x10];                                  // 0x0670(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarInputButton* BT_Weapon_Exit;                                          // 0x0680(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_Drive_Out;                                            // 0x0688(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_Jet_Out;                                              // 0x0690(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Drive_Out_Enter;                                    // 0x0698(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Drive_Out;                                         // 0x06A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_vx_Circle;                                           // 0x06A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WYRL[0x8];                                   // 0x06B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_DriveCarup;                                        // 0x06B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VT1T[0x8];                                   // 0x06C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel_DriveCardown;                                      // 0x06C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_89Q0[0x8];                                   // 0x06D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Container_Driver;                                        // 0x06D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputButton* BT_Trumpet_Shot;                                         // 0x06E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputButton* BT_Drive_Drift;                                          // 0x06E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Car_Control_UI_Vehicle;                                  // 0x06F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Drive_Mode_2;                                            // 0x06F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Drive_Mode_3;                                            // 0x0700(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputButton* BT_Drive_R;                                              // 0x0708(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputButton* BT_Drive_Return;                                         // 0x0710(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWalkWidgetNew* SteeringJoyStick;                                        // 0x0718(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Steering;                                            // 0x0720(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBox* CheckBox_Steeting_Right;                                 // 0x0728(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBox* CheckBox_Steeting_Left;                                  // 0x0730(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EjectionBtnScaleMagnification;                           // 0x0738(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           EjectionBtnMaxScale;                                     // 0x073C(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XHOC[0xC];                                   // 0x0744(0x000C) MISSED OFFSET (PADDING)

	public:
		void StopAutoMove(bool bResetJoy);
		void SetVehicleWeaponAbilityActivated(bool bInActive);
		void ResetDriverControlInput(bool bIgnoreSprint);
		void OnSwitchRotateInAir(bool bOpen);
		void OnSteeringInput(float Offset);
		void OnSprintLockIconActiveFunc(const struct FVector2D& SprintPosition);
		void OnSprintIconHideFunc();
		void OnSprintIconActiveFunc(const struct FVector2D& SprintPosition);
		void OnJetEnterAnimFinished();
		void OnExpandSeatFlagChanged(TArray<class UCheckBox*> ChildChangedArray, int32_t CheckedChildIndex);
		void OnDriverVehicleHit(float SpeedDifferenceInKM);
		void OnDriverSettingSaved();
		void OnDriveDownPressed();
		void OnCloseExpandSwitchClicked();
		void OnChangeSeatReleased();
		void OnChangeSeatPressed();
		void OnChangeSeatHolding();
		void InputSprintLockStart();
		bool CanSwitchVehicleSeatByTags();
		void BeginAutoMove();
		void ApplyCustomizeLayoutEx(int32_t LayoutType, EVehicleControlUIType VehicleControlUIType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEasyAntiCheatComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class USolarEasyAntiCheatComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_A28W[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarEasyAntiCheatManager* AntiCheatManager;                                        // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor* Owner;                                                   // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ServerOnUnRegisterClient();
		void ServerOnRegisterClient(const class FString& ProductID);
		void ServerOnReceiveClientNotifyMessage(uint32_t DataLenBytes, const class FString& Data);
		void ClientOnReceiveServerNotifyMessage(uint32_t DataLenBytes, const class FString& Data);
		void ClientOnActionRequired(int32_t ClientAction, int32_t ActionReason, const class FString& Details);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEasyAntiCheatManager
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class USolarEasyAntiCheatManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_2R85[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       EnableAntiCheat;                                         // 0x0030(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAntiCheatLauncherCheck;                           // 0x0031(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FZV2[0xA6];                                  // 0x0032(0x00A6) MISSED OFFSET (PADDING)

	public:
		void TestSendDSAction(int32_t ActionReason, const class FString& ActionDetials);
		void SwitchAntiCheatState();
		void SetEOSOpenIDToken(const class FString& OpenIDToken);
		void SendSteamAntiCheatRequest(int32_t ErrorCode);
		void ReportAntiCheatBI(int32_t ErrorCode);
		bool IsLaunchbyEOSBootstrapper();
		bool IsEOSSettingChanged();
		void EasyAntiCheatLogin(const class FString& AppToken);
		void AntiCheatLauncherCheck();
		bool AntiCheatEosSettingCheck();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEffectExecution
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class USolarEffectExecution : public UGameplayEffectExecutionCalculation
	{
	public:
		class UClass* CDOProxyClass;                                           // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarEffectExecutionProxy* CDOProxy;                                                // 0x0048(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_41FG[0x18];                                  // 0x0050(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEffectExecutionProxy
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarEffectExecutionProxy : public UObject
	{
	public:
		TWeakObjectPtr<class USolarEffectExecution>                CDOOwner;                                                // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Execute(const struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayEffectCustomExecutionOutput* OutExecutionOutput);
		class USolarEffectExecutionProxy* STATIC_CreateProxy(class USolarEffectExecution* InCDOOwner, class UClass* ProxyClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEffectInitiatorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarEffectInitiatorInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEffectRecipientInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarEffectRecipientInterface : public UInterface
	{
	public:
		void ResponseAbilityEffectHitResult(class AActor* InEffectInitiator, const struct FHitResult& InHitResult, float InDamage);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarElectricShop
	 * Size -> 0x0218 (FullSize[0x0450] - InheritedSize[0x0238])
	 */
	class ASolarElectricShop : public ASolarInteractableActor
	{
	public:
		int32_t                                                    MaxWeaponLevel;                                          // 0x0238(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxShieldLevel;                                          // 0x023C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<float>                                              UpgradeEnergyCosts;                                      // 0x0240(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* ShopMesh;                                                // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent* CollisionComp;                                           // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SpawnID;                                                 // 0x0260(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSpecificShopID;                                         // 0x0264(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SMM1[0x3];                                   // 0x0265(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ShopMeshPathTable[0x28];                                 // 0x0268(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       bIfShowInMap;                                            // 0x0290(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T64J[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              MapIcon[0x28];                                           // 0x0298(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		int32_t                                                    MapIconID;                                               // 0x02C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxTirggerAngle;                                         // 0x02C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ShopID;                                                  // 0x02C8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsBroken;                                               // 0x02CC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3UWE[0x3];                                   // 0x02CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TirggerDistance;                                         // 0x02D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EShopModelAnimType                                         CurrentModeAnimType;                                     // 0x02D4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EShopModelAnimType                                         WantedModeAnimType;                                      // 0x02D5(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RLZ3[0x2];                                   // 0x02D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class ASolarCharacter>>              InstigateCharacters;                                     // 0x02D8(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* ShopMeshDataTable;                                       // 0x02E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FElectricShopSection>                        ItemSections;                                            // 0x02F0(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FElectricShopCDRecord>                       ItemCDRecords;                                           // 0x0300(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<float>                                              PoolRefreshTimeList;                                     // 0x0310(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPoolRefreshInfo>                            PoolRefreshInfoList;                                     // 0x0320(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurPoolGroupID;                                          // 0x0330(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JKRO[0x14];                                  // 0x0334(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMapMarkBase*>                                MapMarkArray;                                            // 0x0348(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FTimerHandle>                                CachedHandles;                                           // 0x0358(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DemoRotationSpeed;                                       // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DemoSwtichTime;                                          // 0x036C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DemoOffsetFromZ;                                         // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EH9I[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ItemDemoBPTable[0x28];                                   // 0x0378(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UDataTable* ItemDemoBPDataTable;                                     // 0x03A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<struct FSoftObjectPath, class AElectricShopItemDemo*> DemoActorMap;                                            // 0x03A8(0x0050) NativeAccessSpecifierPublic
		class AElectricShopItemDemo* CurDemo;                                                 // 0x03F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTimerHandle                                        DemoLoopPlaybackHandle;                                  // 0x0400(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AElectricShopItemDemo*>                       SpawnedDemoActorList;                                    // 0x0408(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QNVS[0x28];                                  // 0x0418(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     CachedDemoItemsClass;                                    // 0x0440(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpgradeWeaponResponse(class ASolarPlayerWeapon* InWeapon, class ASolarCharacter* InCharacter);
		void UpgradeShieldResponse(class ASolarCharacter* InCharacter);
		bool ServerUpgradeWeapon(class ASolarPlayerWeapon* InWeapon, class ASolarCharacter* InCharacter);
		bool ServerUpgradeShield(class ASolarCharacter* InCharacter);
		void ServerStatisticElectricShop(class ASolarCharacter* ActivateCharacter, EShopStatisticType StatisticType, int32_t InValueA, int32_t InValueB);
		bool ServerPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, class ASolarCharacter* InCharacter);
		bool RemoveInstigator(class ASolarCharacter* InCharacter);
		bool RefreshSellingItem(int32_t InProductID);
		void RefreshItemCDRecords(const struct FElectricShopItem& InItem, const class FString& InPlayerID);
		void PurchaseEShopItemsResponse(int32_t InProductID, bool bSuccess, class ASolarCharacter* InCharacter);
		void OnShopIDReplicatedBP();
		void OnRep_ShopID();
		void OnRep_ItemSections();
		void OnRep_ItemCDRecords();
		void OnRep_CurPoolGroupID(int32_t PrePoolGroupID);
		void OnPlayWeaponUpgradeAnim();
		void OnPlayPurchaseAnim();
		void OnPlayIdleAnim();
		void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnCurrentAnimFinish();
		void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		bool IsProductRecommendEquipType(EItemType ProductType);
		bool IsInteractable(class ASolarCharacter* InCharacter);
		void InitWeaponUpgradeEnergyCost();
		void InitializeElectricShop();
		float GetServerWorldTime();
		float GetRemainingCD(int32_t ProductID);
		float GetDiscountedPrice(class ASolarCharacter* BuyerCharacter, float Price);
		void GetDiscountedItem(class ASolarCharacter* BuyerCharacter, struct FElectricShopItem* OutItem);
		bool GetCurrentItem(int32_t InProductID, struct FElectricShopItem* OutItem);
		class FString GetBuyerID(int32_t ProductID);
		struct FElectricShopItem GenerateNewItem(int32_t InProductID);
		void ClientUpgradeWeaponSuccess();
		void ClientUpgradeShieldSuccess();
		void ClientUpdateModelAnim();
		void ClientPurchaseSuccess();
		void ClientHUDUpgradeWeaponSuccess(class ASolarPlayerWeapon* InWeapon, class ASolarCharacter* InCharacter);
		void ClientHUDUpgradeShieldSuccess(class ASolarCharacter* InCharacter);
		void ClientHUDPurchaseSuccess(int32_t InProductID, class ASolarCharacter* InCharacter);
		void ClientHUDPoolRefresh(class ASolarCharacter* InCharacter);
		void ClientHUDItemRefresh(class ASolarCharacter* InCharacter);
		void ClientHUDCDRefresh(class ASolarCharacter* InCharacter);
		void AddInstigator(class ASolarCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ElectricShopItemDemo
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class AElectricShopItemDemo : public AActor
	{
	public:
		unsigned char                                              UnknownData_MMVM[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEnergyShield
	 * Size -> 0x02E0 (FullSize[0x06C0] - InheritedSize[0x03E0])
	 */
	class ASolarEnergyShield : public ASummonItemBase
	{
	public:
		unsigned char                                              UnknownData_X3NW[0x8];                                   // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* HitEffect;                                               // 0x03E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* ExplodeEffect;                                           // 0x03F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              VehicleWholeShieldBrokenEffect[0x28];                    // 0x03F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector                                             HitEffectScale;                                          // 0x0420(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              OwnerTeam;                                               // 0x042C(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3QD9[0x3];                                   // 0x042D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESolarSummonSoundType, class FString>                 StartSoundMap;                                           // 0x0430(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TMap<ESolarSummonSoundType, class FString>                 LoopSoundMap;                                            // 0x0480(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TMap<ESolarSummonSoundType, class FString>                 HitSoundMap;                                             // 0x04D0(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TMap<ESolarSummonSoundType, class FString>                 EndSoundMap;                                             // 0x0520(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TMap<ESolarSummonSoundType, class FString>                 BrokenSoundMap;                                          // 0x0570(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class FString                                              CollisionMeshName;                                       // 0x05C0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ShieldMeshName;                                          // 0x05D0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              DecalMeshName;                                           // 0x05E0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FMatUpdateParams>                            BeginMatUpdateParams;                                    // 0x05F0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FMatUpdateParams>                            DeathMatUpdateParams;                                    // 0x0600(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FMatUpdateParams>                            HealthMatUpdateParams;                                   // 0x0610(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInterface*>                          EnemyShieldMaterials;                                    // 0x0620(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInterface*>                          EnemyDecalMaterials;                                     // 0x0630(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* EnemyHitEffect;                                          // 0x0640(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* EnemyExplodeEffect;                                      // 0x0648(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<TWeakObjectPtr<class AActor>, float>                  OverlapActorsTimeMap;                                    // 0x0650(0x0050) NativeAccessSpecifierPrivate
		float                                                      OverlapActorIntervalTime;                                // 0x06A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      BounceForceToUniqueSkill;                                // 0x06A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* CollisionMesh;                                           // 0x06A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* ShieldMesh;                                              // 0x06B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* DecalMesh;                                               // 0x06B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PlayHitEffectOnVehicleWholeShield(int32_t IndexToPlayHitEffect, const struct FVector& HitLocation);
		void PlayHitEffect(const struct FHitResult& HitResult);
		void OnRep_OwnerTeam();
		void ChangeColor(bool IsChanged);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEnergyBubble
	 * Size -> 0x00A0 (FullSize[0x0760] - InheritedSize[0x06C0])
	 */
	class ASolarEnergyBubble : public ASolarEnergyShield
	{
	public:
		class UStaticMeshComponent* HandMesh;                                                // 0x06C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* HandMeshStartEffect;                                     // 0x06C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* HandMeshStartEffectEnemy;                                // 0x06D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HandMeshStartEffectDelay;                                // 0x06D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TraceUpOffset;                                           // 0x06DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeshHeight;                                              // 0x06E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotateSpeed;                                             // 0x06E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProjectileMovementComponent* ProjectileMovementComponent;                             // 0x06E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ReleaseEnergyBubbleNotify;                               // 0x06F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                VFXTagName;                                              // 0x06F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             InitVelocity;                                            // 0x0700(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5MJA[0x4];                                   // 0x070C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          HandMeshRelativeTransform;                               // 0x0710(0x0030) Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1AWB[0x8];                                   // 0x0740(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent* VFXComponent;                                            // 0x0748(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HMJK[0x10];                                  // 0x0750(0x0010) MISSED OFFSET (PADDING)

	public:
		void PlayHandMeshStartEffect();
		void OnProjectileStop(const struct FHitResult& InImpactResult);
		void OnProjectileBounce(const struct FHitResult& InImpactResult, const struct FVector& InImpactVelocity);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEngine
	 * Size -> 0x0000 (FullSize[0x0E60] - InheritedSize[0x0E60])
	 */
	class USolarEngine : public UGameEngine
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQC_GetAITarget
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarEQC_GetAITarget : public UEnvQueryContext
	{
	public:
		void ProvideSingleActor(class UObject* QuerierObject, class AActor* QuerierActor, class AActor** ResultingActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQC_OwnerBackRotation
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarEQC_OwnerBackRotation : public UEnvQueryContext
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQC_WarmTarget
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarEQC_WarmTarget : public UEnvQueryContext
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQC_WarmTargetTrailCenter
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarEQC_WarmTargetTrailCenter : public UEnvQueryContext
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQC_WarmTargetNearbyPlayers
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarEQC_WarmTargetNearbyPlayers : public UEnvQueryContext
	{
	public:
		float                                                      DistanceThreshold;                                       // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IVP4[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQC_WarmPopLocation
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarEQC_WarmPopLocation : public UEnvQueryContext
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQC_NearbyPOILocation
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarEQC_NearbyPOILocation : public UEnvQueryContext
	{
	public:
		float                                                      MaxDetectRadius;                                         // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDetectRadius;                                         // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQT_AgentPathFinding
	 * Size -> 0x0048 (FullSize[0x02C8] - InheritedSize[0x0280])
	 */
	class USolarEQT_AgentPathFinding : public UEnvQueryTest_Pathfinding
	{
	public:
		bool                                                       bOverrideOwnerAgentProperty;                             // 0x0280(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PD86[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FNavAgentProperties                                 NavAgentProperties;                                      // 0x0288(0x0030) Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseCustomRecastQueryExtent;                             // 0x02B8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XH52[0x3];                                   // 0x02B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CustomRecastQueryExtent;                                 // 0x02BC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQT_CheckInEffectArea
	 * Size -> 0x0068 (FullSize[0x0260] - InheritedSize[0x01F8])
	 */
	class USolarEQT_CheckInEffectArea : public UEnvQueryTest
	{
	public:
		bool                                                       bOverridePerceptionConfig;                               // 0x01F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T7J0[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPerceivableEAInfluenceConfig                       InfluenceConfig;                                         // 0x0200(0x0060) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQT_CheckInSafeArea
	 * Size -> 0x0000 (FullSize[0x01F8] - InheritedSize[0x01F8])
	 */
	class USolarEQT_CheckInSafeArea : public UEnvQueryTest
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQT_MoveProbe
	 * Size -> 0x0018 (FullSize[0x0210] - InheritedSize[0x01F8])
	 */
	class USolarEQT_MoveProbe : public UEnvQueryTest
	{
	public:
		int32_t                                                    NumDivideRound;                                          // 0x01F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReferTraceDist;                                          // 0x01FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDistAsNoObstacle;                                     // 0x0200(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxNumDirNoObstacle;                                     // 0x0204(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MinNumDirNoObstacle;                                     // 0x0208(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TraceOffsetZ;                                            // 0x020C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQT_TraceLimit
	 * Size -> 0x0040 (FullSize[0x0318] - InheritedSize[0x02D8])
	 */
	class USolarEQT_TraceLimit : public UEnvQueryTest_Trace
	{
	public:
		bool                                                       bWantsHit;                                               // 0x02D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y4NF[0x7];                                   // 0x02D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAIDataProviderBoolValue                            StartPenetratingValid;                                   // 0x02E0(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEQTHavePlayerInRange
	 * Size -> 0x0020 (FullSize[0x0218] - InheritedSize[0x01F8])
	 */
	class USolarEQTHavePlayerInRange : public UEnvQueryTest
	{
	public:
		float                                                      TraceRange;                                              // 0x01F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreSpectatePlayer;                                   // 0x01FC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4SSN[0x3];                                   // 0x01FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TraceStartOffsetZ;                                       // 0x0200(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6VI7[0x14];                                  // 0x0204(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarEventSubsystem
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USolarEventSubsystem : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_SDX0[0x50];                                  // 0x0030(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarExternalToolsWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USolarExternalToolsWidget : public USolarUserWidget
	{
	public:
		class UWidget* STATIC_GetTopWidget(class UWidget* InWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarFireCircle
	 * Size -> 0x0010 (FullSize[0x0248] - InheritedSize[0x0238])
	 */
	class ASolarFireCircle : public ASolarInteractableActor
	{
	public:
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkComponent* AkAudioComponent;                                        // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void InitializeSolarAkGameObject(class UActorComponent* Component, bool bReset);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTrailEffect
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASolarTrailEffect : public AActor
	{
	public:
		void OnFinished();
		struct FTransform GetTrackingTransform(class ASolarCharacter* Character);
		void AttachToCharacter(class ASolarCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTrailProxyComponent
	 * Size -> 0x0028 (FullSize[0x0340] - InheritedSize[0x0318])
	 */
	class USolarTrailProxyComponent : public USceneComponent
	{
	public:
		TWeakObjectPtr<class ASolarCharacter>                      PlayerBeingTracked;                                      // 0x0318(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S844[0x20];                                  // 0x0320(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SkydiveTrailEffect
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASkydiveTrailEffect : public AActor
	{
	public:
		class ASolarFlyTrail* FlyTrailManager;                                         // 0x0228(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateTrailEffect(float CurrentTime);
		void OnTrailFinish();
		void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer);
		void InitAppearanceByPlayerState(class ASolarPlayerState* PlayerState);
		void AddTrailPoint(float Timestamp, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Velocity);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarFlyTrail
	 * Size -> 0x0348 (FullSize[0x0570] - InheritedSize[0x0228])
	 */
	class ASolarFlyTrail : public AActor
	{
	public:
		TArray<class USolarTrailProxyComponent*>                   CachedProxyComponents;                                   // 0x0228(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     TrailEffectClass;                                        // 0x0238(0x0018) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              FallbackTrailEffectClass[0x28];                          // 0x0250(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UClass* CachedTrailEffectClass;                                  // 0x0278(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DQMP[0x50];                                  // 0x0280(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCharacterSkydiveTrailStaticInfoContainer           SkydiveTrailStaticInfo;                                  // 0x02D0(0x0120) Net, Protected, NativeAccessSpecifierProtected
		struct FPackedSkydiveTrailFrameInfoContainer               SkydiveTrailFrameInfo;                                   // 0x03F0(0x0120) Net, Protected, NativeAccessSpecifierProtected
		class UClass* SkydiveTrailEffectClass;                                 // 0x0510(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class ASolarPlayerState*, struct FCharacterSkydiveTrailData> SkydiveTrailData;                                        // 0x0518(0x0050) Protected, NativeAccessSpecifierProtected
		class ASolarPlayerState* LocalPlayerSkydiveTrailProxy;                            // 0x0568(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_TrailEffectClass();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarFlyTrailSettings
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USolarFlyTrailSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              DefaultFlyTrailClass[0x28];                              // 0x0038(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarFollowingComponent
	 * Size -> 0x0120 (FullSize[0x03C0] - InheritedSize[0x02A0])
	 */
	class USolarFollowingComponent : public UCrowdFollowingComponent
	{
	public:
		bool                                                       bEnableOffmeshDetect;                                    // 0x02A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2PB8[0x3];                                   // 0x02A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDetectInterval;                                       // 0x02A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   MaxDetectIteration;                                      // 0x02A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             InitialOffmeshSolveExtent;                               // 0x02AC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinZDiffDetectUndergroud;                                // 0x02B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AgentSwimingHalfHeightPct;                               // 0x02BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AgentNormalHalfHeightPct;                                // 0x02C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReachTestCheckAngleWV;                                   // 0x02C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinSpeedLastSegmentWV;                                   // 0x02C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurningSpeedWV;                                          // 0x02CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurningSteeringThresholdWV;                              // 0x02D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockDetectionDistanceCharacter;                         // 0x02D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockDetectionDistanceVehicle;                           // 0x02D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JXHD[0x10];                                  // 0x02DC(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableSolveBlock;                                       // 0x02EC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3JL5[0x3B];                                  // 0x02ED(0x003B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarVehiclePawn* VehicleActor;                                            // 0x0328(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ETR0[0xC];                                   // 0x0330(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SensorTraceDistance;                                     // 0x033C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableDebug;                                            // 0x0340(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A16N[0x3];                                   // 0x0341(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RightSensorAlpha;                                        // 0x0344(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CentralSensorAlpha;                                      // 0x0348(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeftSensorAlpha;                                         // 0x034C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SteeringAngle;                                           // 0x0350(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VehicleSteeringSensitivity;                              // 0x0354(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BrakingForce;                                            // 0x0358(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecelerationDistance;                                    // 0x035C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VehicleDecelerationSpeed;                                // 0x0360(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VehicleTurningSpeed;                                     // 0x0364(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CheckReverseDistance;                                    // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverCheckBlockSpeed;                                    // 0x036C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WheeledCheckBlockSpeed;                                  // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeggedVehicleCheckBlockSpeed;                            // 0x0374(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DJBE[0x4];                                   // 0x0378(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CheckBlockTime;                                          // 0x037C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PWG8[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TryReverseTimes;                                         // 0x0388(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TryReverseDurationTime;                                  // 0x038C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G27L[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SolveBlockGoFrontTime;                                   // 0x0398(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XDNB[0x4];                                   // 0x039C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPathFinish;                                             // 0x03A0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D8CB[0x1F];                                  // 0x03A1(0x001F) MISSED OFFSET (PADDING)

	public:
		void SetVehicle(class AActor* VehicleActorIn);
		void OnUpdatedCharacterMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
		void OnUpdatedCharacterLanded(const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarFontManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarFontManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_ERYC[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFont* ChineseFont;                                             // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SaveChineseFontSetting(bool bHasLoad);
		bool MergeCompositeFont(const class FString& NewFontAssetPath);
		class UFont* LoadNewFont(const class FString& NewFontAssetPath);
		bool IsNeedMergeChineseFont(bool bAutoLoad);
		void Init();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameConfigManager
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class USolarGameConfigManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_H0YI[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* WeaponDTInstance;                                        // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* WeaponAppearanceDTInstance;                              // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* ItemActorDTInstance;                                     // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* BackpackTrailAssembingDTInstance;                        // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* CharacterDTInstance;                                     // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* ItemResourceDTInstance;                                  // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* BuffEffectDTInstance;                                    // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable* ScreenEffectDTInstance;                                  // 0x0068(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGlobalWeaponConfig* WeaponsConfigAsset;                                      // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UGlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;                          // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarRoleSkillDataConfig* RoleConfigAsset;                                         // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      HeadHitValue;                                            // 0x0088(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ShieldReducePhy;                                         // 0x008C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ShieldReduceEn;                                          // 0x0090(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ArmorReducePhy;                                          // 0x0094(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ArmorReduceEn;                                           // 0x0098(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    BackpackEnergyID;                                        // 0x009C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    BackpackExtraEnergyID;                                   // 0x00A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    MedicineItemId;                                          // 0x00A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    RadarItemId;                                             // 0x00A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    ShieldRechargerItemId;                                   // 0x00AC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    ShieldBigRechargerItemId;                                // 0x00B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      UnPickupItemTime;                                        // 0x00B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      UnAutoPickupItemTime;                                    // 0x00B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AutoPickupTime;                                          // 0x00BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AutoMarkCDTime;                                          // 0x00C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3ELD[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            AutoMarkItemTypeList;                                    // 0x00C8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AutoMarkTeammateDistance;                                // 0x00D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PickupCapsuleRadius;                                     // 0x00DC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PickupCapsuleHalfHeight;                                 // 0x00E0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LFP7[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnInitialized();
		class USolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig();
		struct FLinearColor GetLowQualityColorByQuality(int32_t Quality);
		struct FLinearColor GetHUDDecorateColorByQuality(int32_t Quality);
		struct FLinearColor GetHUDColorByQuality(int32_t Quality);
		struct FLinearColor GetHUDBGColorByQuality(int32_t Quality);
		struct FLinearColor GetHighQualityColorByQuality(int32_t Quality);
		class UGlobalWeaponConfig* GetGlobalWeaponConfig();
		class UGlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();
		class FString GetFGByQuality(int32_t Quality);
		struct FLinearColor GetColorByQuality(int32_t Quality);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameInstanceBase
	 * Size -> 0x0670 (FullSize[0x09B8] - InheritedSize[0x0348])
	 */
	class USolarGameInstanceBase : public USolarArchitecture
	{
	public:
		unsigned char                                              UnknownData_378W[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     LoginMap;                                                // 0x0350(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     LobbyMap;                                                // 0x0368(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     EntryMap;                                                // 0x0380(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     GameMap;                                                 // 0x0398(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SettlementMap;                                           // 0x03B0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ConfigServerMap;                                         // 0x03C8(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ConfigBattleAddr;                                        // 0x03E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ConfigBattlePort;                                        // 0x03F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4JEI[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ConfigBackendAddr;                                       // 0x03F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ConfigBackendPort;                                       // 0x0408(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BuildNumber;                                             // 0x040C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              SaveGameClass[0x28];                                     // 0x0410(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FSoftClassPath                                      DefaultOperationLayout;                                  // 0x0438(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      DefaultLockSettings;                                     // 0x0450(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      ReplayManagerClass;                                      // 0x0468(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      DefaultGameModeLockSettings;                             // 0x0480(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedRebootButNot;                                       // 0x0498(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2UD2[0x3];                                   // 0x0499(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LastChoosedVoiceLangID;                                  // 0x049C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              CachedNetworkErrorString;                                // 0x04A0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarOperationUIElement* CachedDefaultOperationLayout;                            // 0x04B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bBaseManagersInit;                                       // 0x04B8(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bGameManagersInit;                                       // 0x04B9(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLuaManagersInit;                                        // 0x04BA(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OOTM[0x5];                                   // 0x04BB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBaseManagersInit;                                      // 0x04C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameManagersInit;                                      // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLuaManagersInit;                                       // 0x04E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ULXT[0x178];                                 // 0x04F0(0x0178) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGameArgs* GameArgsManager;                                         // 0x0668(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIManager* UIManager;                                               // 0x0670(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUINavigationManager* UINavigationManager;                                     // 0x0678(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputMappingManager* SolarInputMappingManager;                                // 0x0680(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTimerManager* SolarTimerManager;                                       // 0x0688(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMainPlayerModel* MainPlayerModel;                                         // 0x0690(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarGameConfigManager* GameConfigManager;                                       // 0x0698(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBattlePassConfigInfo* BattlePassConfigInfo;                                    // 0x06A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarLuaHelper* SolarLuaHelper;                                          // 0x06A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAnoHelper* SolarAnoHelper;                                          // 0x06B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTableManager* SolarTableManager;                                       // 0x06B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTcpNetworkManager* SolarTcpNetworkManager;                                  // 0x06C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarUDPManager* SolarUDPManager;                                         // 0x06C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAssetManager* SolarAssetManager;                                       // 0x06D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarItemManager* SolarItemManager;                                        // 0x06D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInteractableManager* SolarInteractableManager;                                // 0x06E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarPlatformHelper* SolarPlatformHelper;                                     // 0x06E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMapManager* SolarMapManager;                                         // 0x06F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponGrowthManager* WeaponGrowthManager;                                     // 0x06F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x0700(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UIMChatObject* SolarIMChatObject;                                       // 0x0708(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarLuaManager* SolarLuaManager;                                         // 0x0710(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarGameStatistics* SolarGameStatistics;                                     // 0x0718(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponMergeMeshManager* WeaponMergeMeshManager;                                  // 0x0720(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCrashReportManager* CrashReportManager;                                      // 0x0728(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarPopPanelManager* SolarPopPanelManager;                                    // 0x0730(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarApplicationLifetimeManager* SolarApplicationLifetimeManager;                         // 0x0738(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarHomeActorManager* SolarHomeActorManager;                                   // 0x0740(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarGameplayLogger* SolarGameplayLoggger;                                    // 0x0748(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAttributeSubSystem* SolarAttributeSubSystem;                                 // 0x0750(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USCustomizedGameModeManager* CustomizedGameManager;                                   // 0x0758(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarRedHintManager* SolarRedHintMgr;                                         // 0x0760(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarGameModeSelectionManager* SolarGameModeSelectionMgr;                               // 0x0768(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarPingFpsManager* SolarPingFpsMgr;                                         // 0x0770(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarGameUserSettingsMgr* SolarGameUserSettingsMgr;                                // 0x0778(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarLoginManager* SolarLoginManager;                                       // 0x0780(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarLockSettingsMgr* SolarLockSettingsMgr;                                    // 0x0788(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarGameProgressManager* SolarGameProgressMgr;                                    // 0x0790(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarABTestManager* SolarABTestManager;                                      // 0x0798(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarHttpManager* SolarHttpManager;                                        // 0x07A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarActivityManager* SolarActivityManager;                                    // 0x07A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTutorialManager* SolarTutorialManager;                                    // 0x07B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarReplayManager* SolarReplayManager;                                      // 0x07B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarSaveGame* SolarSaveGame;                                           // 0x07C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              SettlementManagerClass[0x28];                            // 0x07C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class USettlementStageManager* SettlementManager;                                       // 0x07F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCGMCrossLevelDataMgr* CrossLevelDataMgr;                                       // 0x07F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I6K0[0x18];                                  // 0x0800(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SolarGraphicSettingsClass[0x28];                         // 0x0818(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class USolarAccessLuaDataUtils* LuaDataAccessUtils;                                      // 0x0840(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAkSoundManager* SolarAkSoundManager;                                     // 0x0848(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsDedicatedServerStressTest;                            // 0x0850(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N6M6[0x7];                                   // 0x0851(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UKeyMappingManager* KeyMappingManager;                                       // 0x0858(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarEasyAntiCheatManager* SolarEasyAntiCheatManager;                               // 0x0860(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarSpecialEffectsMgr* SolarSpecialEffectsManager;                              // 0x0868(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPakHashManager* SolarPakHashManager;                                     // 0x0870(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarFontManager* SolarFontManager;                                        // 0x0878(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarGraphicSettings* SolarGraphicSettings;                                    // 0x0880(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAndroidInputManager* AndroidInputManager;                                     // 0x0888(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G04K[0x10];                                  // 0x0890(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPatchComplete;                                         // 0x08A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTouchInputDelegate;                                    // 0x08B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FRegistedActorContainer                             CachedRegistedActors;                                    // 0x08C0(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C7AC[0x18];                                  // 0x0910(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsHotPatched;                                            // 0x0928(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G816[0x3];                                   // 0x0929(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCheatedInGame;                                          // 0x092C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z78R[0x3];                                   // 0x092D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                KickOutReason;                                           // 0x0930(0x0018) Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnSsmDSGetConfigSuccess;                                 // 0x0948(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FAntiCheatSetting>                           AntiCheatSettings;                                       // 0x0958(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FScreenshotConfig                                   ScreenshotConfig;                                        // 0x0968(0x0050) NativeAccessSpecifierPublic

	public:
		void UpdateScreenshotSetting();
		void UpdateAntiCheatSetting();
		void TestEnsureMsgInternal();
		void TestCrashInternal();
		void SolarGm_UploadLogFile();
		void SolarGM_Tut(const class FString& Cmd, TArray<class FString> Args);
		void SolarGM_TriggerSteamAntiCheat(int32_t ActionReason, const class FString& ActionDetials);
		void SolarGM_TransmitGMLua(const class FString& playerName, TArray<class FString> GmArray);
		void SolarGM_TransmitGM(const class FString& playerName, TArray<class FString> transmitGm);
		void SolarGM_TestEnsureMsgWithBP();
		void SolarGM_TestEnsureMsg();
		void SolarGM_TestCrashWithBP();
		void SolarGM_TestCrash();
		void SolarGm_SwitchFastFont(bool bIsEnable);
		void SolarGM_StopRecordingReplay();
		void SolarGM_StopPlayingReplay();
		void SolarGM_StartRecordingLocalReplay(const class FString& Filename);
		void SolarGM_StartRecordHighlight(const class FString& SessionNameOverride);
		void SolarGM_SetQuality(int32_t InQuality);
		void SolarGM_RequestWatchingLiveOfPlayer(const class FString& PlayerId);
		void SolarGM_RequestReplayList(int32_t PageIndex, int32_t PageSize);
		void SolarGM_RequestPlayReplayByIdx(uint32_t Index);
		void SolarGM_RequestPlayReplayByBattleID(const class FString& BattleID, bool IsLive);
		void SolarGM_RequestPlayReplay(const class FString& BattleID, const class FString& DownloadUrl);
		void SolarGM_PlayLocalReplay(const class FString& Filename);
		void SolarGM_PlayHighlight(const class FString& Filename);
		void SolarGM_LobbyLua(const class FString& CmdName, TArray<class FString> Params);
		void SolarGM_Lobby(const class FString& CmdName, TArray<class FString> Params);
		void SolarGM_KickMeOut();
		void SolarGM_GoHome();
		void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);
		void SolarGM_AddWeaponExpLua(int32_t weaponid, int32_t count);
		void SolarGM_AddWeaponExp(int32_t weaponid, int32_t count);
		void SolarGM_AddItemLua(int32_t ItemID, int32_t count);
		void SolarGM_AddItem(int32_t ItemID, int32_t count);
		void ShutDownPCSDK();
		void ShutDownLimSdk();
		void ShutdownAnoSDK();
		void SetIsFirstLaunch(bool bIsFirst);
		void SetCleanUpfile(bool bCleanCache);
		bool ServerTravel(const class FString& Map, int32_t ListenPort, bool bSpectator, bool bSkipGameNotify, const class FString& options);
		void SaveGame();
		void RequestShutDown(const class FString& reason);
		void ReportLoadingInfoToBI(TArray<class FString>* LoadingInfo, float LoadingTime, bool bIsFinished);
		void RegisterNetworkManager();
		void OnStartBattle(const class FString& BattleID);
		void OnSsmDSGetConfigSuccess__DelegateSignature();
		void OnManagersInitialized__DelegateSignature();
		void OnHotPatchComplete();
		void OnDisconnect();
		void LuaStartGameFrameWork();
		void LuaInitGameFrameWork();
		bool IsStandalone();
		bool STATIC_IsSolarServer(class UObject* WorldContextObject);
		bool IsSkipLogin();
		bool IsServerOrStandalone();
		bool IsListenServer();
		bool IsGIsEditor();
		bool IsFirstLaunchAfterVersionUpdate();
		bool IsEditor();
		bool IsDedicatedServerStressTest();
		bool IsDedicatedServer();
		bool IsClientOrStandalone();
		bool IsClient();
		void InitLuaClasses();
		void InitGameManagers();
		bool HasCommandlineParam(const class FString& Param);
		void GoHomeLuaCall();
		class USolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();
		class UWeaponGrowthManager* GetWeaponGrowthManager();
		class UUINavigationManager* GetUINavigationManager();
		class USolarVibrateManager* GetSolarVibrateManager();
		class USolarTutorialManager* GetSolarTutorialManager();
		class USolarTimerManager* GetSolarTimerManager();
		class USolarTcpNetworkManager* GetSolarTcpNetworkManager();
		class USolarTableManager* GetSolarTableManager();
		class USolarSaveGame* GetSolarSaveGame();
		class USolarReplayManager* GetSolarReplayManager();
		class USolarRedHintManager* GetSolarRedHintManager();
		class USolarPopPanelManager* GetSolarPopPanelManager();
		class USolarPlatformHelper* GetSolarPlatformHelper();
		class USolarPingFpsManager* GetSolarPingFpsManager();
		class USolarMapManager* GetSolarMapManager();
		class USolarMainPlayerModel* GetSolarMainPlayerModel();
		class USolarLuaManager* GetSolarLuaManager();
		class USolarLuaHelper* GetSolarLuaHelper();
		class USolarLoginManager* GetSolarLoginManager();
		class USolarLockSettingsMgr* GetSolarLockSettingsManager();
		class USolarItemManager* GetSolarItemManager();
		class USolarInteractableManager* GetSolarInteractableManager();
		class USolarInputMappingManager* GetSolarInputMappingManager();
		class UIMChatObject* GetSolarIMChatObject();
		class USolarHttpManager* GetSolarHttpManager();
		class USolarHomeActorManager* GetSolarHomeActorManager();
		class USolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();
		class USolarGameplayLogger* GetSolarGameplayLogger();
		class USolarGameModeSelectionManager* GetSolarGameModeSelectionManager();
		class USolarGameInstanceBase* STATIC_GetSolarGameInstanceBase(class UObject* WorldContextObject);
		class USolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager();
		class USolarAnoHelper* STATIC_GetSolarAnoHelperStatic(class UObject* WorldContextObject);
		class USolarAnoHelper* GetSolarAnoHelper();
		class USolarAkSoundManager* GetSolarAkSoundManager();
		class USolarAkGameObject* GetSolarAkGameObject();
		class USolarActivityManager* GetSolarActivityManager();
		class USolarABTestManager* GetSolarABTestManager();
		class USettlementStageManager* GetSettlementStageManager();
		ESolarPlayStage GetPlayStage();
		class ASolarCharacter* GetPlayerCharacter();
		class FString GetPIEServerURL();
		int32_t GetPIEInstance();
		class FString GetNetModeString();
		ESolarNetMode GetNetMode();
		class UKeyMappingManager* GetKeyMappingManager();
		bool GetIsMutiPlayer();
		class USolarGameStatistics* GetGameStatistics();
		class USolarGameConfigManager* GetGameConfigManager();
		class USolarOperationUIElement* GetDefaultOperationLayout();
		class USCustomizedGameModeManager* GetCustomizedGameManager();
		class UCGMCrossLevelDataMgr* GetCrossLevelDataMgr();
		class UCrashReportManager* GetCrashReportManager();
		class FString GetCommandlineParam(const class FString& Param);
		int32_t GetClientNumber();
		void STATIC_GetCategorizedActorsOfType(class UObject* WorldContextObject, EActorRegisterType InActorType, TArray<class AActor*>* OutActors);
		void STATIC_GetCategorizedActorsByBits(class UObject* WorldContextObject, unsigned char InActorBit, TArray<class AActor*>* OutActors);
		class UBattlePassConfigInfo* GetBattlePassConfigInfo();
		class USolarAssetManager* GetAssetManager();
		int64_t GetAppActiveTimestampInterval();
		void ExecuteCommandArray(TArray<class FString> cmdArray);
		void ExecuteCommand(const class FString& Cmd);
		void ExecuteChangeAudioModeLuaCall(bool bTurnOn);
		void ExecuteBackKeyLuaCall();
		void ExecGameArgs(const class FString& Args, class FString* FailReason, EBoolean* Branches);
		void ClientTravel(const class FString& URL, ETravelType TravelType, bool bSeamless, int32_t FGuid_A, int32_t FGuid_B, int32_t FGuid_C, int32_t FGuid_D);
		void ClearGameManagers();
		void CheckSavedDirFiles(TArray<class FString>* Files);
		void Browse(const class FString& URL, ETravelType TravelType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameMode_HandleElementRPC
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class USolarGameMode_HandleElementRPC : public UActorComponent
	{
	public:
		class FName                                                ComponentTagName;                                        // 0x00B0(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnRep_ComponentName();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SGameMode_ModeConfig
	 * Size -> 0x01A8 (FullSize[0x01D8] - InheritedSize[0x0030])
	 */
	class USGameMode_ModeConfig : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     BP_Mode;                                                 // 0x0030(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     BP_Reward;                                               // 0x0048(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     RewardMap;                                               // 0x0060(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     JobStructure;                                            // 0x0078(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DataStructure;                                           // 0x0090(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     AttributeModifier;                                       // 0x00A8(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     WellEffectJobRelationTable;                              // 0x00C0(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     BadEffectJobRelationTable;                               // 0x00D8(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              UIConfig;                                                // 0x00F0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSCustomMode_GameModeSetting                        GameModeSetting;                                         // 0x0100(0x0068) Edit, NativeAccessSpecifierPublic
		TArray<struct FSGameMode_LevelConfig>                      Levels;                                                  // 0x0168(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, class FString>                         Arguments;                                               // 0x0178(0x0050) Edit, NativeAccessSpecifierPublic
		bool                                                       bDestroyItemOnDiscard;                                   // 0x01C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDestroyWeaponOnDiscard;                                 // 0x01C9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CFXM[0x2];                                   // 0x01CA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AllowJoinBattleLifeTime;                                 // 0x01CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowJoinAITeammate;                                    // 0x01D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bConsiderPotentialPlayerWhenSpawnAI;                     // 0x01D1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FUDJ[0x6];                                   // 0x01D2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SGameMode_EditorSaveData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USGameMode_EditorSaveData : public USaveGame
	{
	public:
		class FString                                              ConfigPath;                                              // 0x0028(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameModeData
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class USolarGameModeData : public UObject
	{
	public:
		unsigned char                                              UnknownData_SXI4[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    GameModeId;                                              // 0x0030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_56JH[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USGameMode_ModeConfig* CurrentModeData;                                         // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ModeConfigPath;                                          // 0x0040(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ModeParamsStr;                                           // 0x0050(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* JobDataTable;                                            // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* BoardDataTable;                                          // 0x0068(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* AttributeDataTable;                                      // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HKNY[0x30];                                  // 0x0078(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class FString>                         ModeParams;                                              // 0x00A8(0x0050) NativeAccessSpecifierPublic

	public:
		void ReadConfigData();
		void InitModeParams(const class FString& ParamStr);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SidesOperationAuthorityConfig
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USidesOperationAuthorityConfig : public UDataAsset
	{
	public:
		TMap<class FString, bool>                                  OperationAuthority;                                      // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		bool GetOperationAuthority(const class FString& SelfSide, const class FString& OtherSide);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameMode_ElementManager
	 * Size -> 0x00E0 (FullSize[0x0108] - InheritedSize[0x0028])
	 */
	class USolarGameMode_ElementManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_FJ4A[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarMapElementBase*>                        ElementsList;                                            // 0x0030(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarPlayerStart*>                           PlayerStartList;                                         // 0x0040(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FName, class UClass*>                           HandleActorRPCBPs;                                       // 0x0050(0x0050) UObjectWrapper, NativeAccessSpecifierPublic
		TMap<class FString, class ASolarMapElementBase*>           ElementMap;                                              // 0x00A0(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IEW1[0x18];                                  // 0x00F0(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameModeLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarGameModeLibrary : public UObject
	{
	public:
		void STATIC_UnBindEventOnItemUsed(class UObject* WorldContextObject, const class FScriptDelegate& Deletage);
		void STATIC_SwitchWeapon(class ASolarCharacter* TargetPlayer, EWeaponSlotType InWeaponSlot);
		void STATIC_StopLoadingScreen(class UObject* WorldContextObject);
		void STATIC_StaticCastAbility(class AActor* SourceActor, class ASolarCharacter* TargetActor, class UClass* Ability, bool ValidSourceLocation, const struct FVector& SourceLocation, const struct FVector& HitLocation, const class FName& HitBoneName, float Scale, const class FString& InExtraInfo);
		class ULoadingWidgetBase* STATIC_StartLoadingScreen(class UObject* WorldContextObject, class UClass* LoadingScreenClass);
		void STATIC_SpawnItemAtTransform(class UObject* WorldContextObject, int32_t ItemID, int32_t ItemNum, const struct FTransform& trans);
		void STATIC_SolarButtonCallReleased(class USolarButton* Button);
		void STATIC_SolarButtonCallPressed(class USolarButton* Button);
		void STATIC_SolarButtonCallClick(class USolarButton* Button);
		void STATIC_ShowWidget(class UObject* WorldContextObject, class UClass* WidgetClass, class USolarUserWidget** OutWidget, EUIRoot UILayer);
		void STATIC_ShowWeapon(class ASolarCharacter* TargetPlayer);
		void STATIC_ShowNoticeOnLocalWithoutLocalization(class UObject* WorldContextObject, class UClass* InNoticeClass, float InTime, const class FString& InText, class UObject* InIcon, int32_t InNoticeColor);
		void STATIC_ShowNoticeOnLocalWithLocalization(class UObject* WorldContextObject, int32_t NoticeId);
		void STATIC_SetMiniMapFOV(class UObject* WorldContextObject, float TargetFOV, float PlayTime, bool WithIconScale);
		void STATIC_SetCharacterMeleeAttackState(class UObject* WorldContextObject, class ASolarCharacter* TargetCharacter, bool CanAttack);
		void STATIC_SetActorOwnerToLocalController(class UObject* TargetObject);
		void STATIC_RemoveMarkFromRotationBar(class UObject* WorldContextObject, class URotationBarMarkWidget* InRotationMark);
		void STATIC_RemoveMarkFromMap(class UObject* WorldContextObject, class UMapMarkBase* InMapMark);
		bool STATIC_RemoveMapElement(class UObject* WorldContextObject, class ASolarMapElementBase* Target);
		void STATIC_RemoveDotLineToMapFrame(class UObject* WorldContextObject, int32_t DotLineID);
		void STATIC_RemoveActorWorldMark(class UObject* WorldContextObject, class UActorMarkBase* InActorMark);
		class URotationBarMarkWidget* STATIC_RegisterMarkToRotationBar(class UObject* WorldContextObject, class UClass* InRotationBarMarkClass, const struct FVector& InMarkPos, int32_t InZOrder);
		class UMapMarkBase* STATIC_RegisterMarkToMapFrame(class UObject* WorldContextObject, class UClass* InMapMarkClass, const struct FVector2D& Pivot, int32_t ZOrder);
		TArray<class UMapMarkBase*> STATIC_RegisterMarkToMap(class UObject* WorldContextObject, class UClass* InMapMarkClass, const struct FVector& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32_t ZOrder);
		int32_t STATIC_RegisterDotLineToMapFrame(class UObject* WorldContextObject, class AActor* StartPointActor, class AActor* EndPointActor, const struct FLinearColor& DotLineColor);
		class UActorMarkBase* STATIC_RegisterActorMarkOnActor(class UObject* WorldContextObject, class UClass* InActorMarkClass, class AActor* FollowActor);
		void STATIC_PlayerOutBySelf(class UObject* WorldContextObject);
		void STATIC_PlayAudioInGame(const class FString& InAudioName);
		void STATIC_MarkVictory(class ASolarPlayerState* InPlayerState, int32_t Result);
		void STATIC_KillCharacter(class UObject* Killer, class ASolarCharacter* TargetCharacter, class UClass* AbilityClass);
		bool STATIC_IsSecondCustomGameMode(class UObject* WorldContextObject);
		void STATIC_HideRotationBar(class UObject* WorldContextObject);
		void STATIC_HidePowerBar(class UObject* WorldContextObject);
		void STATIC_HideBattle(class UObject* WorldContextObject);
		void STATIC_HideAllPlayerNav(class UObject* WorldContextObject);
		void STATIC_HiddenWeapon(class ASolarCharacter* TargetPlayer);
		void STATIC_GotoLobby(class UObject* WorldContextObject);
		void STATIC_GlobalLogGameStateStatistics(class UObject* WorldContextObject, const class FString& InLogName, TMap<class FString, class FString> LogValues);
		int32_t STATIC_GetWramGameType(class UObject* WorldContextObject);
		class USkeletalMesh* STATIC_GetWeaponMesh(class UObject* WorldContextObject, int32_t WeaponItemID, float* SpawnOffset);
		class FString STATIC_GetNoticeFormatText(class UObject* WorldContextObject, int32_t InLocalizationID, TMap<class FString, class FString> FormatContext);
		class APawn* STATIC_GetLocalCharacter(class UObject* WorldContextObject);
		class USolarItemManager* STATIC_GetItemManager(class UObject* WorldContextObject);
		class USolarGameMode_ElementManager* STATIC_GetElementManager(class UObject* WorldContextObject);
		class USolarGameMode_HandleElementRPC* STATIC_GetElementHandleRPCComponent(class UObject* WorldContextObject);
		bool STATIC_GetElementByID(class UObject* WorldContextObject, const class FString& ElementID, class ASolarMapElementBase** TargetElement);
		void STATIC_GetDropItemDataByOutComeData(class UObject* WorldContextObject, TArray<struct FSolarGameMode_DropItemData> OutcomeData, TArray<struct FSolarGameMode_DropItemData>* TargetData);
		void STATIC_GetCharacterID(class ASolarCharacter* Character, int32_t* CharacterId, int32_t* SkinId, int32_t* ColorID);
		class UUserWidget* STATIC_GetBattleControlWidget(class UObject* WorldContextObject);
		class UUserWidget* STATIC_GetBattleBackpackWidget(class UObject* WorldContextObject);
		bool STATIC_GetBackpackWeaponBySlot(class ASolarCharacter* Character, int32_t Slot, struct FSolarItemData* ItemData);
		bool STATIC_GetBackpackItemDataByType(class ASolarCharacter* Character, int32_t ItemType, struct FSolarItemData* ItemData);
		bool STATIC_GetBackpackItemDataByID(class ASolarCharacter* Character, int32_t ItemID, struct FSolarItemData* ItemData);
		int32_t STATIC_GetAILevelCurrentMatch(class UObject* WorldContextObject);
		class ASolarMapElementBase* STATIC_GenerateMapElement(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, class APawn* Instigator, const class FString& ElementID, const class FString& Side, const class FString& Job, TArray<class FName> Tags, ESGameMode_ElementType ElementType, EElementStateType State, EElementVisibilityType Visibility, bool IsPersistent);
		TArray<class ASolarPlayerStart*> STATIC_FindPlayerStart(class UObject* WorldContextObject, TArray<class FString> Sides, TArray<class FString> Jobs, TArray<class FString> Tags);
		TArray<class ASolarMapElementBase*> STATIC_FindElementsByClass(class UObject* WorldContextObject, TArray<class UClass*> ElementClasses, TArray<class FString> Sides, TArray<class FString> Jobs, TArray<class FString> Tags);
		TArray<class ASolarMapElementBase*> STATIC_FindElements(class UObject* WorldContextObject, TArray<class FString> ElementTypes, TArray<class FString> Sides, TArray<class FString> Jobs, TArray<class FString> Tags);
		class ASolarMapElementBase* STATIC_FindElementByID(class UObject* WorldContextObject, const class FString& InElementID);
		bool STATIC_DestoryDeadCharacter(class ASolarCharacter* TargetCharacter);
		void STATIC_CharacterEnterDeath(class ASolarCharacter* TargetCharacter, const struct FSolarPointDamageEvent& DamageEvent, bool bEnterDying, bool bSpawnDeathBox, EHealthChangeType ChangeType, class AController* EventInstigator, float DamageValue);
		void STATIC_ChangeMiniMapToTargetID(class UObject* WorldContextObject, int32_t InMapID);
		void STATIC_ButtonCallReleased(class UButton* Button);
		void STATIC_ButtonCallPressed(class UButton* Button);
		void STATIC_ButtonCallClick(class UButton* Button);
		void STATIC_BindWidgetVisibilityChanged(class UObject* WorldContextObject, const class FScriptDelegate& Event);
		void STATIC_BindEventOnItemUsed(class UObject* WorldContextObject, const class FScriptDelegate& Deletage);
		void STATIC_ApplyAbility(class UObject* SourceObject, TArray<class ASolarCharacter*> TargetCharacters, TArray<class UClass*> Abilities);
		void STATIC_AddItem(class ASolarCharacter* SolarCharacter, int32_t ItemID, int32_t ItemNum);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameModeLockSettings
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class USolarGameModeLockSettings : public USaveGame
	{
	public:
		TMap<int32_t, bool>                                        GameModeLockStatus;                                      // 0x0028(0x0050) Edit, NativeAccessSpecifierPublic
		TArray<int32_t>                                            LobbyGameModeRecIDs;                                     // 0x0078(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            GameModeGuideIDs;                                        // 0x0088(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void CopyFrom(class USolarGameModeLockSettings* InLockSettings);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameModeSelectionManager
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class USolarGameModeSelectionManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_ST5N[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameModeLockSettings* CurGameModeLockSettings;                                 // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0TBL[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameModeLockSettings* DefaultGameModeLockSettings;                             // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SaveGameModeLockSettings();
		void LoadGameModeLockSettings();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.PlayerStatisticsData
	 * Size -> 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
	 */
	class UPlayerStatisticsData : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnPlayerStatDataUpdate;                                  // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIncreaseWeaponKillNum;                                 // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7VST[0x70];                                  // 0x0048(0x0070) MISSED OFFSET (PADDING)

	public:
		struct FVector GetValue_Vector(EStatisticsType InType);
		void GetValue_MapKeyWithValueInt(EStatisticsType InType, TArray<int32_t>* OutValue);
		void GetValue_MapKeyWithValueFloat(EStatisticsType InType, TArray<int32_t>* OutValue);
		int32_t GetValue_IntFromMap(EStatisticsType InType, int32_t IntKey);
		void GetValue_IntArray(EStatisticsType InType, TArray<int32_t>* OutResult);
		int32_t GetValue_Int(EStatisticsType InType);
		float GetValue_FloatFromMap(EStatisticsType InType, int32_t IntKey, bool Floor);
		void GetValue_FloatArray(EStatisticsType InType, TArray<float>* OutResult);
		float GetValue_Float(EStatisticsType InType, bool Floor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SideStatisticsData
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USideStatisticsData : public UObject
	{
	public:
		unsigned char                                              UnknownData_VG0T[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameModeStatisticsComponent
	 * Size -> 0x0080 (FullSize[0x0150] - InheritedSize[0x00D0])
	 */
	class USolarGameModeStatisticsComponent : public UGameModeCompBase
	{
	public:
		unsigned char                                              UnknownData_ECKS[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class UPlayerStatisticsData*>          AllPlayerStatData;                                       // 0x00E0(0x0050) NativeAccessSpecifierPrivate
		TArray<EStatisticsType>                                    SpecialFuncTag;                                          // 0x0130(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZG0X[0x10];                                  // 0x0140(0x0010) MISSED OFFSET (PADDING)

	public:
		TArray<int32_t> GetValue_IntArray(const class FString& InPlayerID, EStatisticsType InType);
		int32_t GetValue_Int(const class FString& InPlayerID, EStatisticsType InType);
		class UPlayerStatisticsData* GetPlayerStatData(const class FString& InPlayerID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameplayAbilitySet
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USolarGameplayAbilitySet : public UDataAsset
	{
	public:
		TArray<class UClass*>                                      Abilities;                                               // 0x0030(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameplayCueManager
	 * Size -> 0x0000 (FullSize[0x0310] - InheritedSize[0x0310])
	 */
	class USolarGameplayCueManager : public UGameplayCueManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameplayLogger
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarGameplayLogger : public UObject
	{
	public:
		TArray<ELogChannel>                                        DefaultChannels;                                         // 0x0028(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void STATIC_SolarDebugLog(ELogChannel Channel, const class FString& Message);
		void STATIC_EnableDebugLogChannel(ELogChannel Channel);
		void STATIC_DisableDebugLogChannel(ELogChannel Channel);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameplaySmokeComponent
	 * Size -> 0x0050 (FullSize[0x0100] - InheritedSize[0x00B0])
	 */
	class USolarGameplaySmokeComponent : public UActorComponent
	{
	public:
		float                                                      SmokeRadius;                                             // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LocalPlayerCheckRadiusWithCamera;                        // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DetectDistance;                                          // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              DetectTargetFlag;                                        // 0x00BC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JIH5[0x3];                                   // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayCueTag                                     TeamPerspectiveCueTag;                                   // 0x00C0(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FGameplayCueTag                                     HawkeyePerspectiveCueTag;                                // 0x00C8(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bEnableSmokeDamage;                                      // 0x00D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VGVA[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamageDistance;                                          // 0x00D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamagePerTime;                                           // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageFreq;                                              // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TDGA[0x20];                                  // 0x00E0(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetIsValid(bool bInIsValid);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameplayTagLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarGameplayTagLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_K2_RequestGameplayTag(const class FName& TagName, struct FGameplayTag* OutTagFound);
		struct FGameplayTagContainer STATIC_DiffTags(const struct FGameplayTagContainer& TagsA, const struct FGameplayTagContainer& TagsB);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameplayTagSystem
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USolarGameplayTagSystem : public UEngineSubsystem
	{
	public:
		TMap<class FName, class UDataAsset*>                       LoadedTagReflectors;                                     // 0x0030(0x0050) NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameProgressManager
	 * Size -> 0x00F8 (FullSize[0x0128] - InheritedSize[0x0030])
	 */
	class USolarGameProgressManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_TOTC[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGameStart;                                             // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EW4N[0xE0];                                  // 0x0048(0x00E0) MISSED OFFSET (PADDING)

	public:
		void OnWorldConditionsCompleted();
		void OnStreamingLevelComplete();
		void OnShadersCompileComplete();
		void OnGameStart__DelegateSignature();
		void STATIC_K2_ReceiveGlobalConditionCompleted(class UObject* WorldContextObject, const struct FGameplayTag& CompletedCondition);
		void STATIC_K2_ReceiveConditionCompleted(class UObject* WorldContextObject, const struct FGameplayTag& CompletedCondition);
		void K2_OnGlobalConditionCompleted(const struct FGameplayTag& CompletedCondition);
		void K2_OnConditionCompleted(class UWorld* CurrentWorld, const struct FGameplayTag& CompletedCondition);
		bool STATIC_IsGameStartNeedCondition(class UObject* WorldContextObject, const struct FGameplayTag& InCondition);
		bool IsConditionInList(const struct FGameplayTag& InCondition, class UWorld* WorldCheck);
		bool IsAllStartGameConditionCompleted(class UWorld* WorldCheck);
		bool InitGameStartCondition(class UWorld* CurrentWorld, const struct FGameplayTagContainer& ConditionList);
		bool STATIC_HasGameStarted(class UObject* WorldContextObject);
		class USolarGameProgressManager* STATIC_Get(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameSession
	 * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
	 */
	class ASolarGameSession : public AGameSession
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameSettingsRange
	 * Size -> 0x0148 (FullSize[0x0170] - InheritedSize[0x0028])
	 */
	class USolarGameSettingsRange : public UObject
	{
	public:
		struct FSoundSettingsRange                                 SoundSettings;                                           // 0x0028(0x0020) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FSensitivitySettingsRange                           SensitivitySettings;                                     // 0x0048(0x0120) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FGraphicsSettingsRange                              GraphicsSettings;                                        // 0x0168(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameSettingsRangePC
	 * Size -> 0x0018 (FullSize[0x0188] - InheritedSize[0x0170])
	 */
	class USolarGameSettingsRangePC : public USolarGameSettingsRange
	{
	public:
		struct FMouseAndKeyboardSettingsRange                      KeyboardControlSettings;                                 // 0x0170(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FGamepadSettingsRange                               GamepadSettings;                                         // 0x0178(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameStateBase
	 * Size -> 0x0068 (FullSize[0x02E0] - InheritedSize[0x0278])
	 */
	class ASolarGameStateBase : public AGameStateBase
	{
	public:
		unsigned char                                              UnknownData_QYHU[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameStartConditionList                             GameStartConditions;                                     // 0x0280(0x0058) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class USolarGameplayConfigComponent* GameplayConfigComponent;                                 // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameStatistics
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USolarGameStatistics : public UObject
	{
	public:
		unsigned char                                              UnknownData_UCLG[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PlayerIdName;                                            // 0x0030(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LogTypeName;                                             // 0x0040(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ND4G[0x8];                                   // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameInstanceBase* Owner;                                                   // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSolarGameStatisticsLogHeadInfo                     LogHeadInfo;                                             // 0x0060(0x0028) NativeAccessSpecifierPrivate

	public:
		struct FSolarGameStatisticsLogHeadInfo STATIC_StaticGetLogHeadInfo();
		void SetSwapLogFileSize(int32_t InSize);
		void SetSwapLogFileInterval(int32_t InInterval);
		void SetLogValueSeparater(const class FString& InValueSeparater);
		void SetLogTerminator(const class FString& InTerminator);
		void SetLogFileNameSuffix(const class FString& InLogFileNameSuffix);
		void SetLogFileNamePrefix(const class FString& InLogFileNamePrefix);
		void SetLogFileExtension(const class FString& InLogFileExtension);
		void SetLogFileDir(const class FString& InLogFileDir);
		void SetLogElementSeparater(const class FString& InElementSeparater);
		void SetLogCheckIntervalMS(int32_t InLogCheckIntervalMS);
		void ReceiveShutdown();
		void ReceiveInit();
		void NotifyBattleStart(const class FString& InBattleID);
		void NotifyBattleEnd();
		void STATIC_LogInternal(const class FString& InLog);
		void STATIC_LogGameStats_KeyValues(const class FString& InKey, TArray<class FString> InValues);
		void STATIC_LogGameStats_KeyValue(const class FString& InKey, const class FString& InValue);
		void STATIC_LogGameStats_Key(const class FString& InKey);
		bool IsUseEmptyHeadData(const class FString& InPlayerID);
		int32_t GetSwapLogFileSize();
		int32_t GetSwapLogFileInterval();
		class FString GetSCMLogDataString(bool bIncludeStatistics, class ASolarPlayerState* InPS);
		class FString STATIC_GetProperLogElement(const class FString& InElement);
		class FString GetLogValueSeparater();
		class FString GetLogTerminator();
		struct FSolarGameStatisticsLogHeadInfo GetLogHeadInfo();
		class FString GetLogFileNameSuffix();
		class FString GetLogFileNamePrefix();
		class FString GetLogFileExtension();
		class FString GetLogFileDir();
		class FString GetLogElementSeparater();
		class FString GetLogDataString(bool bIncludeStatistics, const class FString& InPlayerID);
		int32_t GetLogCheckIntervalMS();
		class FString GetHeadDataString(const class FString& InPlayerID);
		class FString GetEmptyHeadDataString();
		bool CanReportBIWrapper(const class FString& InLogType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameUserSettings
	 * Size -> 0x01A8 (FullSize[0x01E0] - InheritedSize[0x0038])
	 */
	class USolarGameUserSettings : public UDeveloperSettings
	{
	public:
		struct FPickupUserSettings                                 PickupSettings;                                          // 0x0038(0x0018) Edit, Config, NativeAccessSpecifierPublic
		struct FGraphicsUserSettings                               GraphicsSettings;                                        // 0x0050(0x0040) Edit, Config, NativeAccessSpecifierPublic
		struct FWeaponUserSettings                                 WeaponSettings;                                          // 0x0090(0x0020) Edit, Config, NoDestructor, NativeAccessSpecifierPublic
		struct FLanguageUserSettings                               LanguageSettings;                                        // 0x00B0(0x0003) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FCharacterVoiceUserSettings                         CharacterVoiceSettings;                                  // 0x00B3(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_639K[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoundUserSettings                                  SoundSettings;                                           // 0x00B8(0x0060) Edit, Config, NativeAccessSpecifierPublic
		struct FBasicUserSettings                                  BasicSettings;                                           // 0x0118(0x000B) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2GAP[0x1];                                   // 0x0123(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSensitivityUserSettings                            SensitivitySettings;                                     // 0x0124(0x0094) Edit, Config, NoDestructor, NativeAccessSpecifierPublic
		struct FShakeUserSettings                                  ShakeSettings;                                           // 0x01B8(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVehicleControlUserSettings                         DriverSettings;                                          // 0x01B9(0x0005) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FChatOperatorUserSettings                           ChatOperatorSettings;                                    // 0x01BE(0x0002) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      DefaultSettingsRangePath;                                // 0x01C0(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsSynchronized;                                         // 0x01D8(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EConfigVersion                                             ConfigVersion;                                           // 0x01D9(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFirstTimeLanunchGame;                                   // 0x01DA(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9QRS[0x5];                                   // 0x01DB(0x0005) MISSED OFFSET (PADDING)

	public:
		class FString ToJsonObjectString();
		struct FWeaponUserSettings GetWeaponSettings();
		struct FSoundUserSettings GetSoundSettings();
		struct FShakeUserSettings GetShakeSettings();
		struct FSensitivityUserSettings GetSensitivitySettings();
		struct FPickupUserSettings GetPickupSettings();
		struct FLanguageUserSettings GetLanguageSettings();
		struct FGraphicsUserSettings GetGraphicsSettings();
		bool GetEnableOpponentPerspectiveByDefault();
		struct FVehicleControlUserSettings GetDriverSettings();
		struct FChatOperatorUserSettings GetChatOperatorSettings();
		struct FCharacterVoiceUserSettings GetCharacterVoiceSettings();
		struct FBasicUserSettings GetBasicSettings();
		void FromJsonObjectString(const class FString& JsonStr);
		bool CheckJsonObjectString(const class FString& JsonStr);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameUserSettingsMgr
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USolarGameUserSettingsMgr : public UObject
	{
	public:
		class USolarGameUserSettings* CurGameUserSettings;                                     // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarGameSettingsRange* DefaultGameSettingsRange;                                // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsDefalutSettings;                                      // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LHQL[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarGameInstanceBase* SolarGameInstance;                                       // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EMV7[0x20];                                  // 0x0048(0x0020) MISSED OFFSET (PADDING)

	public:
		void SynchronizeInputSettings();
		void SaveGameSettings();
		void ResetToDefault(ESolarGameUserSettingPart SettingPart);
		void RefreshValid(class USolarGameInstanceBase* GameInstance, bool SaveIfDirty);
		void RefreshDynamicShadow();
		void RefreshAnalogCursorSpeed();
		void OnSettingConfigSaved();
		void OnPickupSettingChanged();
		bool IsLowLevelDevice();
		bool IsHighlightMomentOpen();
		bool IsDefaultEnableDynamicShadow();
		void InitializeSettings(class USolarGameInstanceBase* GameInstance);
		void Init(class USolarGameInstanceBase* GameInstance);
		int32_t GetCurNativeRefreshRate();
		bool FixConfigVersion();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGameUserSettingsPC
	 * Size -> 0x0238 (FullSize[0x0418] - InheritedSize[0x01E0])
	 */
	class USolarGameUserSettingsPC : public USolarGameUserSettings
	{
	public:
		struct FSensitivityUserSettings                            SensitivitySettingsKeyboard;                             // 0x01E0(0x0094) Edit, Config, NoDestructor, NativeAccessSpecifierPublic
		struct FSensitivityUserSettings                            SensitivitySettingsGamepad;                              // 0x0274(0x0094) Edit, Config, NoDestructor, NativeAccessSpecifierPublic
		struct FMouseAndKeyboardSettings                           KeyboardControlSettings;                                 // 0x0308(0x0008) Edit, Config, NoDestructor, NativeAccessSpecifierPublic
		struct FGamepadSettings                                    GamepadSettings;                                         // 0x0310(0x00C8) Edit, Config, NativeAccessSpecifierPublic
		struct FGamepadAdvancedSettings                            GamepadAdvancedSettings;                                 // 0x03D8(0x003C) Edit, Config, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bEnableCursorNoticePanel;                                // 0x0414(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E3JC[0x3];                                   // 0x0415(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLeggedVehicleAnimInstance
	 * Size -> 0x00C0 (FullSize[0x03EC] - InheritedSize[0x032C])
	 */
	class USolarLeggedVehicleAnimInstance : public USolarVehicleAnimInstance
	{
	public:
		unsigned char                                              UnknownData_KD9D[0x4];                                   // 0x032C(0x0004) Fix Super Size
		EVehicleAnimationState                                     VehicleAnimState;                                        // 0x0330(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RNU0[0x3];                                   // 0x0331(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      YawDifference;                                           // 0x0334(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVehicleRotateAnimationType                                VehicleRotateType;                                       // 0x0338(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C5VW[0x3];                                   // 0x0339(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             RotationBlend;                                           // 0x033C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProceduralWalkingAlpha;                                  // 0x0348(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BodyRelativeLocation;                                    // 0x034C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            BodyRelativeRotator;                                     // 0x0358(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             FLFootIKEffectorLocation;                                // 0x0364(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FRFootIKEffectorLocation;                                // 0x0370(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MLFootIKEffectorLocation;                                // 0x037C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MRFootIKEffectorLocation;                                // 0x0388(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BLFootIKEffectorLocation;                                // 0x0394(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BRFootIKEffectorLocation;                                // 0x03A0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FLFootIKAlpha;                                           // 0x03AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FRFootIKAlpha;                                           // 0x03B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MLFootIKAlpha;                                           // 0x03B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MRFootIKAlpha;                                           // 0x03B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BLFootIKAlpha;                                           // 0x03BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BRFootIKAlpha;                                           // 0x03C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JIFB[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              FootRotatorOffsets;                                      // 0x03C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LeftFootLocationX;                                       // 0x03D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RightFootLocationX;                                      // 0x03DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LeaningDegree;                                           // 0x03E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NCVE[0x8];                                   // 0x03E4(0x0008) Fix size for supers

	public:
		void AnimNotify_EnableInput();
		void AnimNotify_EnableIK();
		void AnimNotify_DisableInput();
		void AnimNotify_DisableIK();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGatlingVehicleAnimInstance
	 * Size -> 0x0024 (FullSize[0x0410] - InheritedSize[0x03EC])
	 */
	class USolarGatlingVehicleAnimInstance : public USolarLeggedVehicleAnimInstance
	{
	public:
		struct FRotator                                            DashingWeaponYawRot;                                     // 0x03EC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            DashingWeaponPicthRot;                                   // 0x03F8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                PitchRotParentBone;                                      // 0x0404(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DashingWeaponRotAlpha;                                   // 0x040C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletController
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarGauntletController : public UGauntletTestController
	{
	public:
		unsigned char                                              UnknownData_EZP7[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletBPAutoTestController
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USolarGauntletBPAutoTestController : public USolarGauntletController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletBPBase
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASolarGauntletBPBase : public AActor
	{
	public:
		unsigned char                                              UnknownData_0OTM[0x10];                                  // 0x0228(0x0010) MISSED OFFSET (PADDING)

	public:
		void StopTesting(float Delay);
		void SendLocalCharactorMoveTo(const struct FVector& Vector);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletClientController
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USolarGauntletClientController : public USolarGauntletController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletClientSmokeController
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USolarGauntletClientSmokeController : public USolarGauntletController
	{
	public:
		unsigned char                                              UnknownData_Y7DY[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarGauntletBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_EndTest(int32_t ExitCode);
		void STATIC_BookmarkEnd(const class FString& Message);
		void STATIC_BookmarkBegin(const class FString& Message);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletPSOGatherBP
	 * Size -> 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
	 */
	class ASolarGauntletPSOGatherBP : public ASolarGauntletBPBase
	{
	public:
		void StartPSOGathering();
		void SendTravelToNextLevel(float InFirstDelay);
		void SendStartLevelScriptEvent(const class FString& FunctionName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletPSOGatherController
	 * Size -> 0x0060 (FullSize[0x0098] - InheritedSize[0x0038])
	 */
	class USolarGauntletPSOGatherController : public USolarGauntletController
	{
	public:
		unsigned char                                              UnknownData_GZWQ[0x60];                                  // 0x0038(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletPureAIDSReportController
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USolarGauntletPureAIDSReportController : public USolarGauntletController
	{
	public:
		unsigned char                                              UnknownData_JU0L[0x10];                                  // 0x0038(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletReplayController
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USolarGauntletReplayController : public USolarGauntletController
	{
	public:
		unsigned char                                              UnknownData_SIE0[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPostEndPlay();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletServerController
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USolarGauntletServerController : public USolarGauntletController
	{
	public:
		unsigned char                                              UnknownData_OPB5[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGauntletServerSmokeController
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USolarGauntletServerSmokeController : public USolarGauntletController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGlobalEventBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarGlobalEventBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGlobalEventSystem
	 * Size -> 0x00F0 (FullSize[0x0120] - InheritedSize[0x0030])
	 */
	class USolarGlobalEventSystem : public UGameInstanceSubsystem
	{
	public:
		TMap<class UClass*, class FScriptMulticastDelegate>        ListenerEventsByClass;                                   // 0x0030(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		TMap<class FName, class FScriptMulticastDelegate>          ListenerEventsByName;                                    // 0x0080(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		TMap<struct FGameplayTag, class FScriptMulticastDelegate>  ListenerEventsByGameplayTag;                             // 0x00D0(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		void UnbindGlobalEventByName(const class FName& EventName, const class FScriptDelegate& Event);
		void UnbindGlobalEventByGameplayTag(const struct FGameplayTag& EventGameplayTag, const class FScriptDelegate& Event);
		void UnbindGlobalEventByClass(class UClass* EventClass, const class FScriptDelegate& Event);
		void UnbindAllGlobalEventsByName(class UObject* Unsubscriber, const class FName& EventName);
		void UnbindAllGlobalEventsByGameplayTag(class UObject* Unsubscriber, const struct FGameplayTag& EventGameplayTag);
		void UnbindAllGlobalEventsByClass(class UObject* Unsubscriber, class UClass* EventClass);
		void GetAllBoundObjectsToEventByName(const class FName& EventName, TArray<class UObject*>* Objects);
		void GetAllBoundObjectsToEventByGameplayTag(const struct FGameplayTag& EventGameplayTag, TArray<class UObject*>* Objects);
		void GetAllBoundObjectsToEventByClass(class UClass* EventClass, TArray<class UObject*>* Objects);
		void GetAllActiveGlobalEventsClass(TArray<class UClass*>* Events);
		void GetAllActiveGlobalEventNames(TArray<class FName>* Events);
		void GetAllActiveGlobalEventGameplayTag(TArray<struct FGameplayTag>* Events);
		void ClearGlobalEventByName(const class FName& EventName, bool bForceClear);
		void ClearGlobalEventByGameplayTag(const struct FGameplayTag& EventGameplayTag, bool bForceClear);
		void ClearGlobalEventByClass(class UClass* EventClass, bool bForceClear);
		void ClearAllGlobalEventsClass(bool bForceClear);
		void ClearAllGlobalEventNames(bool bForceClear);
		void ClearAllGlobalEventGameplayTags(bool bForceClear);
		void CallGlobalEventByName(class UObject* Publisher, const class FName& EventName, class UObject* Payload, TArray<class FString> MetaData);
		void CallGlobalEventByGameplayTag(class UObject* Publisher, const struct FGameplayTag& EventGameplayTag, class UObject* Payload, TArray<class FString> MetaData);
		void CallGlobalEventByClass(class UObject* Publisher, class UClass* EventClass, class UObject* Payload, TArray<class FString> MetaData);
		void BindGlobalEventByName(const class FName& EventName, const class FScriptDelegate& Event);
		void BindGlobalEventByGameplayTag(const struct FGameplayTag& EventGameplayTag, const class FScriptDelegate& Event);
		void BindGlobalEventByClass(class UClass* EventClass, const class FScriptDelegate& Event);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGlobalRepInfo
	 * Size -> 0x0138 (FullSize[0x0360] - InheritedSize[0x0228])
	 */
	class ASolarGlobalRepInfo : public AInfo
	{
	public:
		struct FSolarShieldItemShopDataArray                       ShieldItemShopInteractInfo;                              // 0x0228(0x0130) Net, Transient, RepNotify, NativeAccessSpecifierPublic
		int32_t                                                    ShieldUpgradeItemShopGroupID;                            // 0x0358(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y411[0x4];                                   // 0x035C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_ShieldUpgradeItemShopGroupID();
		void OnRep_ShieldItemShopInteractInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPostProcessSettingItem
	 * Size -> 0x16C8 (FullSize[0x16F0] - InheritedSize[0x0028])
	 */
	class USolarPostProcessSettingItem : public UObject
	{
	public:
		unsigned char                                              UnknownData_IHKM[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColorGradingItem                                   ColorGradingItem[0x4];                                   // 0x0030(0x16C0) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGraphicSettings
	 * Size -> 0x02C0 (FullSize[0x02E8] - InheritedSize[0x0028])
	 */
	class USolarGraphicSettings : public UObject
	{
	public:
		uint32_t                                                   CurrentActiveColorThemeIndex;                            // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFrameRateLevelItem                                 FrameRateLevelItem[0x5];                                 // 0x002C(0x0050) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2UV9[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESolarGraphicsQualityLevel, ESolarFrameRateLevel>     DefaultQualityToDefaultFrameRateLevel;                   // 0x0080(0x0050) Edit, NativeAccessSpecifierPublic
		TMap<ESolarGraphicsQualityLevel, struct FMaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;                 // 0x00D0(0x0050) Edit, NativeAccessSpecifierPublic
		int32_t                                                    MobileMaxFrameRate;                                      // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HighRefreshRateThreshold;                                // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DefaultMSAALevel;                                        // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WXK0[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FContentScaleFactorLevelItem                        ContentScaleFactorLevelItems[0x4];                       // 0x0130(0x0160) Edit, NativeAccessSpecifierPublic
		TMap<ESolarDeviceLevel, ESolarContentScaleFactorLevel>     DefaultContentScaleFactorLevel;                          // 0x0290(0x0050) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8NHV[0x8];                                   // 0x02E0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarGroundPreviewActor
	 * Size -> 0x0208 (FullSize[0x0430] - InheritedSize[0x0228])
	 */
	class ASolarGroundPreviewActor : public ASolarDormantActor
	{
	public:
		unsigned char                                              UnknownData_OF3O[0x40];                                  // 0x0228(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarItemData                                      ItemData;                                                // 0x0268(0x00B8) Net, RepNotify, NativeAccessSpecifierPublic
		float                                                      SpawnOffset;                                             // 0x0320(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4BB7[0x4];                                   // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent* SphereComponent;                                         // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoftObjectPath>                             DiscardMatPath;                                          // 0x0330(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     OutlineMatPath;                                          // 0x0340(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TNZV[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<unsigned char>                                      MarkedTeamIdList;                                        // 0x0360(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeaponLevel;                                             // 0x0370(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWeaponType                                                WeaponType;                                              // 0x0374(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EXCG[0x3];                                   // 0x0375(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FireModeNameLocalizationID;                              // 0x0378(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5DWT[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         TriggerIcon;                                             // 0x0380(0x0098) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    weaponid;                                                // 0x0418(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsItemWeapon;                                           // 0x041C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSummonVehicleWeapon;                                  // 0x041D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAntiVehicleWeapon;                                    // 0x041E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4XMS[0x1];                                   // 0x041F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* SkeletalMeshComp;                                        // 0x0420(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YM53[0x8];                                   // 0x0428(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnMarkThisItem(unsigned char TeamID);
		void SetItemData(const struct FSolarItemData& _ItemData);
		void OnServerPawned();
		void OnRep_ItemDataChange();
		void NotifyThisItemWasPickedUp();
		void MarkThisItem(unsigned char TeamID);
		int32_t GetQuality();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHealAndArmorPile
	 * Size -> 0x0124 (FullSize[0x0670] - InheritedSize[0x054C])
	 */
	class ASolarHealAndArmorPile : public ASolarPile
	{
	public:
		float                                                      HealFrequency;                                           // 0x054C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstanceDynamic* DynamicMatHealPile;                                      // 0x0550(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaterialDynamicOffSetYBegin;                             // 0x0558(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaterialDynamicOffSetYEnd;                               // 0x055C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaterialDynamicOffSetYCur;                               // 0x0560(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J221[0x4];                                   // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* FullEffectWidgetClass;                                   // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              RangeParticleStartPath[0x28];                            // 0x0570(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              RangeParticleLoopPath[0x28];                             // 0x0598(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              RangeParticleEndPath[0x28];                              // 0x05C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyRangeParticleStartPath[0x28];                       // 0x05E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyRangeParticleLoopPath[0x28];                        // 0x0610(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyRangeParticleEndPath[0x28];                         // 0x0638(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UParticleSystemComponent* RangeLoopEffect;                                         // 0x0660(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6ADN[0x8];                                   // 0x0668(0x0008) MISSED OFFSET (PADDING)

	public:
		void ClientHealPileSound(class ASolarCharacter* ChargingCharacter, EPileHealingType HealingType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHealthPointModule
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarHealthPointModule : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_InflictDamageWithHitResult(class UObject* WorldContextObject, const struct FSolarDamageInfo& DamageInfo, const struct FHitResult& HitResult);
		void STATIC_InflictDamageWithDamageEvent(class AActor* TargetActor, float DamageTaken, const struct FSolarPointDamageEvent& DamageEvent, class AController* InstigatorController);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeConnectedGraph
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class USolarHomeConnectedGraph : public UObject
	{
	public:
		unsigned char                                              ConnectedFloors[0x50];                                   // 0x0028(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              BaseWalls[0x50];                                         // 0x0078(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_D3RL[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeActor
	 * Size -> 0x0198 (FullSize[0x03C0] - InheritedSize[0x0228])
	 */
	class ASolarHomeActor : public AActor
	{
	public:
		class UStaticMeshComponent* StaticMeshComp;                                          // 0x0228(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FHomeActorStaticData                                HomeActorStaticData;                                     // 0x0230(0x0038) Protected, NativeAccessSpecifierProtected
		struct FHomeActorServerData                                HomeActorServerData;                                     // 0x0268(0x0068) Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FHomeOriginalShader>              OriginalShaders;                                         // 0x02D0(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AGRT[0x10];                                  // 0x0320(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarHomeActorManager* HomeActorMgr;                                            // 0x0330(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UBoxComponent*>                               BoxComps;                                                // 0x0338(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class ASolarHomeActor*, int32_t>                      HitHomeActors;                                           // 0x0348(0x0050) NativeAccessSpecifierPrivate
		class USolarHomeConnectedGraph* CurrentConnectedGraph;                                   // 0x0398(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarHomeActor*>                             NeighborFloors;                                          // 0x03A0(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarHomeActor*>                             NeighborWalls;                                           // 0x03B0(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateHomeActor(const struct FHomeActorServerData& NewServerData);
		void UpdateHitHomeActors(class ASolarHomeActor* NewActor, bool isAdd);
		void SetStaticData(const struct FHomeActorStaticData& NewData);
		void SetServerData(const struct FHomeActorServerData& NewData);
		void SetMaterial(const struct FHomeActorServerData& InServerData, bool bPlaceable);
		void OnOverlayEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnOverlayBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnOverLap(class AActor* OtherActor, bool isHitBegin);
		void OnCreatedByServer(const struct FHomeActorStaticData& NewStaticData, const struct FHomeActorServerData& NewServerData);
		void OnCanSaveChanged(bool bNewCanSave);
		class UDataTable* GetTextureDataTable();
		class UStaticMeshComponent* GetStaticMeshComp();
		struct FHomeActorStaticData GetStaticData();
		class USolarHomeShaderConfig* GetShaderConfig();
		struct FHomeActorServerData GetServerData();
		bool GetNextLegalRotator(float RotAngle, struct FRotator* OutNextRot);
		EHomeActorSurfaceDir GetHitSurface(const struct FVector& HitNormal);
		bool GetCanSave();
		bool CanSelected();
		bool CanRemove();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeActorManager
	 * Size -> 0x0628 (FullSize[0x0650] - InheritedSize[0x0028])
	 */
	class USolarHomeActorManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_ZSRH[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class ASolarHomeActor*>                SpawnedHomeActors;                                       // 0x0040(0x0050) NativeAccessSpecifierPrivate
		TMap<struct FIntVector, class ASolarHomeActor*>            SpawnedConstructsLocKey;                                 // 0x0090(0x0050) NativeAccessSpecifierPrivate
		TMap<struct FIntVector, class ASolarHomeActor*>            PreviewConstructsLocKey;                                 // 0x00E0(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              ConnectedGraphSet[0x50];                                 // 0x0130(0x0050) UNKNOWN PROPERTY: SetProperty
		TMap<class FString, class ASolarHomeActor*>                ClippingHomeActors;                                      // 0x0180(0x0050) NativeAccessSpecifierPrivate
		TMap<class FString, class ASolarHomeActor*>                InValidHomeActors;                                       // 0x01D0(0x0050) NativeAccessSpecifierPrivate
		TMap<class FString, class USubPoolOfHomeActor*>            HomeActorPools;                                          // 0x0220(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, struct FHomeActorStaticData>                 StaticDataMap;                                           // 0x0270(0x0050) NativeAccessSpecifierPrivate
		TMap<class FString, class UClass*>                         HomeActorClassPool;                                      // 0x02C0(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZIWO[0x68];                                  // 0x0310(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FIntVector, class ASolarHomeBaseSpace*>        SpawnedSpacesLocKey;                                     // 0x0378(0x0050) NativeAccessSpecifierPrivate
		TMap<struct FIntVector, class ASolarHomeBaseSpace*>        ShowsSpacesLocKey;                                       // 0x03C8(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4S93[0x58];                                  // 0x0418(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* HomeObjectTable;                                         // 0x0470(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarHomeShaderConfig* ShaderConfig;                                            // 0x0478(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable* TextureDataTable;                                        // 0x0480(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable* IconDataTable;                                           // 0x0488(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable* PicDataTable;                                            // 0x0490(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    BuildCountPerFrame;                                      // 0x0498(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9DQB[0x14];                                  // 0x049C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarHomeSpaceSpawner* HomeSpaceSpawner;                                        // 0x04B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarHomePlayerController* HomePlayerCtrl;                                          // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_93GT[0x20];                                  // 0x04C0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarWaterActorNew* WaterActor;                                              // 0x04E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<struct FHomeShaderData, class UMaterialInstanceDynamic*> HomeObjShadersPool;                                      // 0x04E8(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FAXC[0x41];                                  // 0x0538(0x0041) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsConstruct;                                            // 0x0579(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsLoadingOpen;                                           // 0x057A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YTUR[0x2D];                                  // 0x057B(0x002D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CacheDragUIs[0x50];                                      // 0x05A8(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UsedDragUIs[0x50];                                       // 0x05F8(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_HF8X[0x8];                                   // 0x0648(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateCanSendSaveMsg();
		void UpdateCameraLayer(int32_t NewLayer);
		bool TrySelectHomeActor(const class FString& SelectedThisID, bool bSelect);
		bool TrySaveAllHomeActors();
		void TryResetAllHomeActors();
		void TryRemoveHomeActors(TArray<class FString> RemoveThisID);
		void TryRemoveHomeActor(const class FString& RemoveThisID);
		void TryRemoveAllInvalidHomeActors();
		void TryRemoveAllHomeActors();
		void TryDyeHomeActor(const class FString& DyeThisID, const class FString& SlotName, const class FString& TexturesID);
		void TryCreateHomeActorsNoLimit(TArray<struct FHomeBuildReqData> ReqDataArr);
		void TryCreateHomeActors(TArray<struct FHomeBuildReqData> ReqData);
		void TryCreateHomeActor(const struct FHomeBuildReqData& ReqData);
		void TryConfirmHomeActor(const class FString& SelectedThisID, bool bCancel);
		void TryCancelHomeActor(const class FString& SelectedThisID);
		void SetLastSelectingThisID(const class FString& InThisID);
		void SetLastCreateThisID(const class FString& InThisID);
		void SetIsConstruct(bool bNewConstruct);
		void SetHomeActorValid(class ASolarHomeActor* TargetActor, bool bNewValid);
		void SetHoldingType(EHomeActor_SecondType NewType);
		void SetDragUILoc(class ASolarHomeDragUI* TargetUI, const struct FVector& NewLoc);
		void SetCurSelectingThisID(const class FString& InThisID, bool bSelected);
		void SetCurBuildingID(int32_t NewItemID);
		void SelectHomeActor_Request(const class FString& SelectedThisID, bool bSelect);
		void SelectHomeActor_Other(const class FString& ThisID);
		void SaveBuilding_Request(bool bSave);
		void RotateHomeActor(class ASolarHomeActor* TargetHomeActor, int32_t DeltaAngle);
		void RemoveHomeActors_Request(TArray<class FString> WillRemoveThisIDs);
		void RemoveHomeActor_Request(const class FString& WillRemoveThisID);
		void RemoveAllHomeActors_Request();
		void OnSelectingThisIDChanged(bool bSelect, const class FString& NewThisID);
		void OnSelectingActorCanSaveChanged(bool bNewCanSave);
		bool OnIsDragChanged(bool bIsDrag);
		void OnInvalidActorsCountChanged(int32_t NewCount);
		void OnHoldingTypeChanged(EHomeActor_SecondType OldType, EHomeActor_SecondType NewType);
		void NotifyWhenWallDevicePutOnOtherPlace();
		void NotifyWhenFloorDevicePutOnOtherPlace();
		void NotifyWhenClickActorOnOtherFloor();
		void NotifyWhenCeilingDevicePutOnOtherPlace();
		void NotifyLoadingUIChanged(bool bShow);
		void MoveDevice(class ASolarHomeActor* TargetHomeActor, class ASolarHomeActor* ParHomeActor, EHomeActorSurfaceDir HitDir, const struct FVector& NewLoc);
		void MoveConstruct(class ASolarHomeActor* TargetHomeActor, class ASolarHomeBaseSpace* NewSpace);
		bool HasFoundation();
		class UDataTable* GetTextureDataTable();
		struct FHomeActorStaticData GetStaticDataByItemID(int32_t ItemID);
		class USolarHomeShaderConfig* GetShaderConfig();
		void GetMeshDefaultMat(int64_t InItemID, TArray<struct FBuildMeshSlotData>* outData);
		class FString GetLastCreateThisID();
		int32_t GetInvalidActorsCount();
		class ASolarHomeSpaceSpawner* GetHomeSpaceSpawner();
		class ASolarHomePlayerController* GetHomePlayerCtrl();
		bool GetHomePicConfig(const class FString& Name, struct FHomePic* OutConfig);
		bool GetHomeObjectConfig(int32_t InItemID, struct FHomeObject* OutConfig);
		bool GetHomeIconConfig(const class FString& Name, struct FHomeIcon* OutConfig);
		EHomeActor_SecondType GetHomeActorSecondType(int32_t ItemID);
		EHomeActor_FirstType GetHomeActorFirstType(int32_t ItemID);
		class ASolarHomeActor* GetHomeActorByThisID(const class FString& InThisID);
		class ASolarHomeActor* GetHomeActorByLoc(const struct FVector& InLoc);
		class FString GetCurSelectingThisID();
		EHomeActor_SecondType GetCurHoldingItemType();
		int32_t GetCurBuildingID();
		bool GetActorCanSave(class ASolarHomeActor* InActor);
		void ExportHomeActorDataToPath(const class FString& FilePath);
		void DyeingHomeActor_Request(const class FString& WillDyeingThisID, const class FString& SlotName, const class FString& TexturesID);
		void DeSelectAllHomeActors_Request();
		void CreateHomeActors_Request(TArray<struct FHomeBuildReqData> WillCreateDatas);
		void CreateHomeActor_Request(const struct FHomeBuildReqData& WillCreateData);
		void ClientUpdateHomeActor_UseQueue(const struct FHomeActorServerData& UpdateData);
		void ClientUpdateHomeActor(const struct FHomeActorServerData& UpdateData);
		void ClientRemoveHomeActor_UseQueue(const struct FHomeActorServerData& RemoveData);
		void ClientRemoveHomeActor(const struct FHomeActorServerData& RemoveData);
		void ClientCreateHomeActor_UseQueue(const struct FHomeActorServerData& WillCreateData, EHomeLoadingChangeType InLoadingType);
		bool ClientCreateHomeActor(const struct FHomeActorServerData& WillCreateData, bool InIsConstruct);
		void Clear();
		void ChangeCameraLayer(int32_t DeltaLayer);
		bool CanPreviewWithBuilding(int32_t TypeID);
		bool CanDevicePlace(EHomeActor_SecondType DeviceType, class ASolarHomeActor* HitConstruct, EHomeActorSurfaceDir HitDir);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeBaseSpace
	 * Size -> 0x0028 (FullSize[0x0250] - InheritedSize[0x0228])
	 */
	class ASolarHomeBaseSpace : public AActor
	{
	public:
		class USolarHomeActorManager* HomeActorMgr;                                            // 0x0228(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UBoxComponent*>                               BoxComps;                                                // 0x0230(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FBaseSpaceData                                      BaseSpaceData;                                           // 0x0240(0x000C) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MPDN[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdateHomeSpaceByData(const struct FBaseSpaceData& NewData);
		void ShowBaseSpace();
		void OnBaseSpaceUnOccupied();
		void OnBaseSpaceOccupied();
		void OnBaseSpaceCreated(int32_t Layer, EHomeActor_SecondType BaseSpaceType);
		void HideBaseSpace();
		struct FBaseSpaceData GetData();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeBuildComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class USolarHomeBuildComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_NFTX[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarHomeActorManager* HomeActorMgr;                                            // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinCheckDistance;                                        // 0x00C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxCheckDistance;                                        // 0x00CC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsBuilding;                                              // 0x00D0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_476M[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    HoldingItemID;                                           // 0x00D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarHomeBaseSpace* HittingActor;                                            // 0x00D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void StopBuild();
		void StartBuild();
		void SetBuildingId(int32_t NewItemID);
		void SelecteHomeActor(class ASolarHomeActor* WillSelectedActor);
		void InitHomeBuildComponent();
		class ASolarCharacter* GetSolarOwner();
		void GetHitResult(class ASolarHomeActor** HitHomeActor, class ASolarHomeBaseSpace** HitBaseSapce, struct FVector* OutHitNormal, struct FVector* OutHitLocation);
		void EndBuild();
		void EmitBuilding();
		void CreateHomeActor(const struct FHomeBuildReqData& ReqData);
		bool CanAttachSpace(int32_t ActorId, class ASolarHomeBaseSpace* WillAttachHomeSpace);
		void BeginBuild();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeCameraManager
	 * Size -> 0x01A0 (FullSize[0x0250] - InheritedSize[0x00B0])
	 */
	class USolarHomeCameraManager : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_1LDR[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCameraMovementParameters                           CameraMovementSetting;                                   // 0x00B8(0x0068) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GCNR[0x14];                                  // 0x0120(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LookAtLocation;                                          // 0x0134(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarHomeActorManager* HomeActorMgr;                                            // 0x0140(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MASZ[0x8];                                   // 0x0148(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarHomeSpaceSpawner* CacheHomeSpaceSpawner;                                   // 0x0150(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ACameraActor* BuildCamera;                                             // 0x0158(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor* BattleCamera;                                            // 0x0160(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCameraComponent* BuildCameraComp;                                         // 0x0168(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2NAM[0xE0];                                  // 0x0170(0x00E0) MISSED OFFSET (PADDING)

	public:
		void UpdateSliderScaleUI(float InScale);
		void UpdateCameraDistanceUI(float InPercent, float InScale);
		void SetNormalCameraTarget();
		void SetConstructionCameraTarget();
		void RotateCameraSpin(float Value);
		void RotateCameraPitch(float Value);
		void MoveCameraRight(float Value);
		void MoveCameraForward(float Value);
		void MoveCamera(int32_t Index, const struct FVector& Location, TMap<int32_t, struct FVector> FingerLocations);
		bool ChangeCameraMode(EHomeCameraMode InMode);
		void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);
		void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeCharacter
	 * Size -> 0x0010 (FullSize[0x20A0] - InheritedSize[0x2090])
	 */
	class ASolarHomeCharacter : public ASolarCharacter
	{
	public:
		class USolarHomeBuildComponent* SolarHomeBuildComponent;                                 // 0x2090(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BUX4[0x8];                                   // 0x2098(0x0008) MISSED OFFSET (PADDING)

	public:
		void MoveToBuildWait(const struct FVector& WaitLoc);
		void CharacterResetOfflinePos(const struct FVector& Loc, uint32_t Roll, uint32_t yawPitch);
		void Building();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeDragUI
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASolarHomeDragUI : public AActor
	{
	public:
		unsigned char                                              UnknownData_7M8C[0x18];                                  // 0x0228(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeFloorActor
	 * Size -> 0x0000 (FullSize[0x03C0] - InheritedSize[0x03C0])
	 */
	class ASolarHomeFloorActor : public ASolarHomeActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeMeshConfig
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USolarHomeMeshConfig : public UDataAsset
	{
	public:
		TMap<int64_t, struct FBuildMeshData>                       MeshData;                                                // 0x0030(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomePlayerController
	 * Size -> 0x0290 (FullSize[0x1130] - InheritedSize[0x0EA0])
	 */
	class ASolarHomePlayerController : public ASolarPlayerController
	{
	public:
		class UInputComponent* ConstructionInputComponent;                              // 0x0EA0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarHomeActorManager* HomeActorMgr;                                            // 0x0EA8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarHomeActor* DragActor;                                               // 0x0EB0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MinCheckDistance;                                        // 0x0EB8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxCheckDistance;                                        // 0x0EBC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarHomeSpaceSpawner* CacheHomeSpaceSpawner;                                   // 0x0EC0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsViewMode;                                             // 0x0EC8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsConstruction;                                         // 0x0EC9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HS6J[0x6];                                   // 0x0ECA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x0ED0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MoveCheckDis;                                            // 0x0ED8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DQZG[0x194];                                 // 0x0EDC(0x0194) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CheckDis;                                                // 0x1070(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FGEJ[0x8C];                                  // 0x1074(0x008C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarHomeCameraManager* CameraManager;                                           // 0x1100(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LookAtLocation;                                          // 0x1108(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             OriginalLookAtLocation;                                  // 0x1114(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor* CurrentViewTarget;                                       // 0x1120(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor* OriginalViewTarget;                                      // 0x1128(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void StopBuilding();
		void StartFadeOutEffect();
		void StartBuilding();
		void SolarGM_Home_ResetLayer(int32_t InLayer);
		void SolarGM_FillUpHome();
		void SolarGM_ExportHomeActorToPath(const class FString& FilePath);
		void ShowBuildMainUI(bool bShow);
		void SetNormalCameraTarget();
		void SetConstructionCameraTarget();
		void SendMoveToBackend(const struct FServerMoveData& MoveData);
		void ResetConstructionCamera();
		void ResetCameraRotation();
		void OnTouchMove(int32_t Index, const struct FVector& Location);
		void OnTouchEnd(int32_t Index, const struct FVector& Location);
		void OnTouchBegin(int32_t Index, const struct FVector& Location);
		void OnDragBegin(const struct FVector& Location);
		void OnCameraRight(float Value);
		void OnCameraForward(float Value);
		bool GetIsConstruction();
		int32_t GetCameraCurrentLayer();
		void BindConstructionInput();
		void BindBattleInput();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomePlayerWait
	 * Size -> 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
	 */
	class ASolarHomePlayerWait : public ASolarMapElementBase
	{
	public:
		int32_t                                                    TeamIndex;                                               // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_71WE[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeShaderConfig
	 * Size -> 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
	 */
	class USolarHomeShaderConfig : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     EmissiveMatPath;                                         // 0x0030(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     MaskedMatPath;                                           // 0x0048(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     TranslucentMatPath;                                      // 0x0060(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DeleteEmissiveMatPath;                                   // 0x0078(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DeleteMaskedMatPath;                                     // 0x0090(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DeleteTranslucentMatPath;                                // 0x00A8(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        PrdinaryColor;                                           // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        PlaceableColor;                                          // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        UnPlaceableColor;                                        // 0x00E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        PlaceableColorOther;                                     // 0x00F0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BreathLightTimeScale;                                    // 0x0100(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlaceableEmissveA;                                       // 0x0104(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnPlaceableEmissveA;                                     // 0x0108(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3DIE[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeSpaceSpawner
	 * Size -> 0x0128 (FullSize[0x03C0] - InheritedSize[0x0298])
	 */
	class ASolarHomeSpaceSpawner : public ASolarMapElementBase
	{
	public:
		class USolarHomeActorManager* HomeActorMgr;                                            // 0x0298(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<EHomeActor_SecondType, class UClass*>                 TypeClassMap;                                            // 0x02A0(0x0050) Transient, NativeAccessSpecifierPrivate
		TMap<float, int32_t>                                       LayerMap;                                                // 0x02F0(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EB4U[0x20];                                  // 0x0340(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FloorUnit;                                               // 0x0360(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WallUnit;                                                // 0x0364(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      BaseUnit;                                                // 0x0368(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RoundOnBase;                                             // 0x036C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RoundOnFloor;                                            // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ArrowOnBase;                                             // 0x0374(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ArrowOnFloor;                                            // 0x0378(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ArrowToWall;                                             // 0x037C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MO6K[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTransform>                                  BasisFloorsTransArr;                                     // 0x0388(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YM9I[0x20];                                  // 0x0398(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsAirWallOpen;                                           // 0x03B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BAN5[0x7];                                   // 0x03B9(0x0007) MISSED OFFSET (PADDING)

	public:
		void OpenAirWall();
		void Init(int32_t InBuildWidth, int32_t InBuildHeight);
		bool GetIsAirWallOpen();
		void CloseAirWall();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeSummonWallActor
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASolarHomeSummonWallActor : public AActor
	{
	public:
		float                                                      UsingEffectSecondTime;                                   // 0x0228(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9LVV[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* SummonStaticMeshComp;                                    // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetEffectPlayAllTime(float SecondTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHomeTrigger
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASolarHomeTrigger : public AActor
	{
	public:
		void OnActorExitLua(int32_t ID);
		void OnActorExit(int32_t ID);
		void OnActorEnterLua(int32_t ID);
		void OnActorEnter(int32_t ID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHoverCraftVehicle
	 * Size -> 0x0098 (FullSize[0x1450] - InheritedSize[0x13B8])
	 */
	class ASolarHoverCraftVehicle : public ASolarHoverVehicle
	{
	public:
		unsigned char                                              UnknownData_6S8N[0x4];                                   // 0x13B8(0x0004) Fix Super Size
		float                                                      MeshOffsetLerpSpeed;                                     // 0x13BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<EHoverCraftHitType, float>                            HoverCraftHitImpulseMul;                                 // 0x13C0(0x0050) Edit, Transient, NativeAccessSpecifierPrivate
		float                                                      HoverCraftHitImpulseLimit;                               // 0x1410(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BBOA[0x4];                                   // 0x1414(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent* BodyBoxComp;                                             // 0x1418(0x0008) Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            BodyTraceExceptVehicleTypeIDs;                           // 0x1420(0x0010) Edit, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K3NH[0x20];                                  // 0x1430(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnHoverCraftVehicleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void CheckBody();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHoverCraftVehicleAnimInstance
	 * Size -> 0x0050 (FullSize[0x03B0] - InheritedSize[0x0360])
	 */
	class USolarHoverCraftVehicleAnimInstance : public USolarHoverVehicleAnimInstance
	{
	public:
		class ASolarHoverVehicle* MyHoverCraftVehicle;                                     // 0x0360(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarHoverVehicleMovement* MyHoverCraftVehicleMoveComp;                             // 0x0368(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bStartUp;                                                // 0x0370(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5Z0N[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxStartUpSpeed;                                         // 0x0378(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrop;                                                   // 0x037C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInAir;                                                  // 0x037D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CNR5[0x2];                                   // 0x037E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CompressMinValue[0x4];                                   // 0x0380(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CompressFullRateValue[0x4];                              // 0x0390(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CompressXValue;                                          // 0x03A0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CompressYValue;                                          // 0x03A4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCompress;                                               // 0x03A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L7BE[0x7];                                   // 0x03A9(0x0007) MISSED OFFSET (PADDING)

	public:
		void AnimNotify_StartUpLeft();
		void AnimNotify_IdleEnter();
		void AnimNotify_DropLeft();
		void AnimNotify_CompressLeft();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHoverMotorAnimInstance
	 * Size -> 0x0020 (FullSize[0x0380] - InheritedSize[0x0360])
	 */
	class USolarHoverMotorAnimInstance : public USolarHoverVehicleAnimInstance
	{
	public:
		struct FVector                                             VehicleWeaponLeftOffset;                                 // 0x0360(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             VehicleWeaponRightOffset;                                // 0x036C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7478[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHoverVehicleMovement
	 * Size -> 0x0808 (FullSize[0x0940] - InheritedSize[0x0138])
	 */
	class USolarHoverVehicleMovement : public UPawnMovementComponent
	{
	public:
		unsigned char                                              UnknownData_7RVS[0xF8];                                  // 0x0138(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* VehicleMesh;                                             // 0x0230(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinLocationDiffForThrusterTrace;                         // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRotationDiffForThrusterTrace;                         // 0x023C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DriverJustOnTimer;                                       // 0x0240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MassOffset;                                              // 0x0244(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverForce;                                              // 0x0250(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverSpringCoefficient;                                  // 0x0254(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverDampingCoefficient;                                 // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverHeight;                                             // 0x025C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinHoverHeight;                                          // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BouncinessForMinHoverHeight;                             // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FThrusterData>                               ThrusterDataArray;                                       // 0x0268(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat* DustEffectScaleCurve;                                    // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrusterTargetAnimationBlendSpeed;                       // 0x0280(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      YawDegreeDifference;                                     // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpoilerRotateSpeed;                                      // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRudderRoll;                                           // 0x028C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRudderRoll;                                           // 0x0290(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRudderYaw;                                            // 0x0294(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinRudderYaw;                                            // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F85I[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  AccelerationCurve;                                       // 0x02A0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      MaxSideMovingSpeed;                                      // 0x0328(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxBackwardMovingSpeed;                                  // 0x032C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecelerationDegree;                                      // 0x0330(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecelerationOnInput;                                     // 0x0334(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecelerationOnMovingDirection;                           // 0x0338(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDecelerationOnMovingDirection;                        // 0x033C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               IgnoreDecelerationOnMovingDirectionTags;                 // 0x0340(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  DecelerationOnSide;                                      // 0x0360(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  AccelerationMultiplierForSideVelocity;                   // 0x03E8(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      MaxControllableDegree;                                   // 0x0470(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VF23[0x4];                                   // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               InAirControllableTags;                                   // 0x0478(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      AdditionalDegreeForStabilize;                            // 0x0498(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PZEA[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  StabilizeDampingCurve;                                   // 0x04A0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  StabilizeSpeedCurve;                                     // 0x0528(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      TimerForAntiStuck;                                       // 0x05B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StuckAcceleration;                                       // 0x05B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StuckAccelerationLerpSpeed;                              // 0x05B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GravityAcceleration;                                     // 0x05BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GravityWithoutDriver;                                    // 0x05C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LandingDuration;                                         // 0x05C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaximumVelocityOnZWithoutDriver;                         // 0x05C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecelerationRateWithoutDriver;                           // 0x05CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AngularDampingWithoutDriver;                             // 0x05D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WaterLineForFloatingForce;                               // 0x05D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpwardAccelerationFloatingOnWater;                       // 0x05D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WaterAlignSpeed;                                         // 0x05DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WaterHeightWithoutDriver;                                // 0x05E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FPIDController                                      UpwardForcePIDController;                                // 0x05E4(0x001C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      RotateAccelaration;                                      // 0x0600(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotateDecelaration;                                      // 0x0604(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAngularSpeed;                                         // 0x0608(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoverHeightMultiplierAfterBroken;                        // 0x060C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ParticleMultiplierAfterBroken;                           // 0x0610(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QI7O[0x4];                                   // 0x0614(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVehicleVFX>                                 ThrusterParticles;                                       // 0x0618(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3NDH[0x8];                                   // 0x0628(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVehicleVFX                                         MovementParticles[0x4];                                  // 0x0630(0x0240) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y0WK[0x78];                                  // 0x0870(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FThrusterState>                              ThrusterStateArray;                                      // 0x08E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarVehiclePawn* VehiclePawn;                                             // 0x08F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarNetMovementComponent* VehicleNetMovement;                                      // 0x0900(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* AkComponent;                                             // 0x0908(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9CJM[0x30];                                  // 0x0910(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnVehicleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnDriverGetOnVehicle(int32_t GetOnSeatIndex, class ASolarCharacter* GetOnPlayer);
		void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, class ASolarCharacter* GetOffPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHoverVehicleStencilAnimInstance
	 * Size -> 0x0038 (FullSize[0x02A0] - InheritedSize[0x0268])
	 */
	class USolarHoverVehicleStencilAnimInstance : public UAnimInstance
	{
	public:
		struct FVector                                             FLThrusterBoneScale;                                     // 0x0268(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             FRThrusterBoneScale;                                     // 0x0274(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BLThrusterBoneScale;                                     // 0x0280(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BRThrusterBoneScale;                                     // 0x028C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class USolarHoverVehicleAnimInstance>       VehicleAnim;                                             // 0x0298(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHPProgressBoard
	 * Size -> 0x00A0 (FullSize[0x0300] - InheritedSize[0x0260])
	 */
	class USolarHPProgressBoard : public UUserWidget
	{
	public:
		class UImage* ProgressBoard;                                           // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance* ProgressShader;                                          // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Speed;                                                   // 0x0270(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RechargeSpeed;                                           // 0x0274(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RechargeTime;                                            // 0x0278(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RechargeIndex;                                           // 0x027C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDebugMode;                                              // 0x0280(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H2H1[0x3];                                   // 0x0281(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Percent1;                                                // 0x0284(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Percent2;                                                // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Percent3;                                                // 0x028C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Percent4;                                                // 0x0290(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedAlternateColor;                                     // 0x0294(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ATO9[0x3];                                   // 0x0295(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        IncreaseColor;                                           // 0x0298(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        DecreaseColor;                                           // 0x02A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7W8S[0x48];                                  // 0x02B8(0x0048) MISSED OFFSET (PADDING)

	public:
		void UpdateMaxValue(float Max);
		void UpdateCurrentValue(float Current);
		void SetSpacing(float InValue);
		void SetProgressColorByID(const struct FLinearColor& InColor, int32_t InID);
		void SetPreAddColor();
		void SetPercentageByIndex(float Percent, int32_t Index);
		void SetFragment(float Num);
		void SetCurrentValueInstantly(float Current);
		void SetAlternateColor(const struct FLinearColor& InColor, bool IsChangeBoth, bool IsForIncrease);
		void PreAddValue(float InCurrentValue, float InChangeValue, EShieldRechargeState RechargeState, bool bInFixPreAdd, bool bInAdaptiveRecharge);
		void InitProgressBoard(float Current, float Max, float Fragment);
		void InitProgress();
		struct FLinearColor GetAlternateColor(bool bIncrease);
		void DoMinusValue(float InCurrentValue, float InChangeValue);
		void DoAddValue(float InCurrentValue, float InChangeValue);
		void CancelAddValue(float InCurrentValue, float InChangeValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHttpManager
	 * Size -> 0x0118 (FullSize[0x0148] - InheritedSize[0x0030])
	 */
	class USolarHttpManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_W4Z0[0x18];                                  // 0x0030(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, int32_t>                               ReportStr2ReprotTimes;                                   // 0x0048(0x0050) NativeAccessSpecifierPublic
		int32_t                                                    ReportRetryTimes;                                        // 0x0098(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_36EW[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnImgUploaded;                                           // 0x00A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HDA0[0x1C];                                  // 0x00B0(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Jank;                                                    // 0x00CC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    BigJank;                                                 // 0x00D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FPS25;                                                   // 0x00D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QIDS[0x28];                                  // 0x00D8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PeakPlayerNum;                                           // 0x0100(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    PeakAINum;                                               // 0x0104(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    PeakVehicleNum;                                          // 0x0108(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OFSZ[0x3C];                                  // 0x010C(0x003C) MISSED OFFSET (PADDING)

	public:
		void UploadToHTTP(const class FString& URL, const class FString& str);
		void UploadImg(int32_t AppId, int32_t AppUid, const class FString& AppToken, int32_t GameID, int32_t Uid, const class FString& SourceImgPath);
		class FString StringToBase64(const class FString& str);
		void StopRecordJank();
		void StartRecordJank();
		void ResetPerfData(bool bKeepCurrentData);
		void ReportAbnormalPlayerWeaponToBackend(const class FString& InPlayerID, const class FString& InVariableName, const class FString& InVariableValue, const class FString& InAttackLocation, const class FString& InHitLocation, const class FString& InHitBoneScale, const class FString& InWeaponBlueprintName);
		void ReportAbnormalPlayerVehicleToBackend(const class FString& InPlayerID, const class FString& InVariableName, const class FString& InVariableValue, const class FString& InVehiclePreviousLocation, const class FString& InVehiclePresentLocation, const class FString& InVehicleBlueprintName);
		void ReportAbnormalPlayerToBackend(const class FString& InPlayerID, const class FString& InVariableName, const class FString& InVariableValue);
		void ReportAbnormalPlayerBaittingToBackend(const class FString& InPlayerID, const class FString& InVariableName, const class FString& InVariableValue, const class FString& InDamageType, const class FString& InBotLocation, const class FString& InPlayerLocation);
		void ReCordOnlineError(const class FString& InStr);
		void OnImgUploaded__DelegateSignature(int32_t RespCode, const class FString& RespMsg, const class FString& ImgUrl);
		void InitializeDelegates();
		class FString GetHttpReportUrl();
		float GetAvgNum(int32_t PerfType);
		void ClearDelegates();
		void CleanPerfDirtyData();
		class FString Base64ToMD5(const class FString& str);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHUDEventSubsystem
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USolarHUDEventSubsystem : public UWorldSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnSettingConfigSaved;                                    // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupSettingChanged;                                  // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SimpleTriggerDelegate__DelegateSignature();
		void ClearDelegates();
		void BroadcastOnSettingConfigSaved();
		void BroadcastOnPickupSettingChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHUDInGame
	 * Size -> 0x01C0 (FullSize[0x04D8] - InheritedSize[0x0318])
	 */
	class ASolarHUDInGame : public ASolarHUD
	{
	public:
		class FScriptMulticastDelegate                             OnVJetForbiddenChanged;                                  // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetForbiddenChanged;                                  // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetTotalTimesSet;                                     // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetTotalTimesSet;                                     // 0x0348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetRestTimesSet;                                      // 0x0358(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetRestTimesSet;                                      // 0x0368(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetChargeStateChanged;                                // 0x0378(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetCDStateChanged;                                    // 0x0388(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetChargeStateChanged;                                // 0x0398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetCDStateChanged;                                    // 0x03A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetTimesCharging;                                     // 0x03B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetTimesCharging;                                     // 0x03C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetCoolingDown;                                       // 0x03D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetCoolingDown;                                       // 0x03E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVJetModuleLevelChanged;                                // 0x03F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHJetModuleLevelChanged;                                // 0x0408(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6EKJ[0x10];                                  // 0x0418(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSkydiveFlyStateChanged;                                // 0x0428(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkydiveAltitudeUpdate;                                 // 0x0438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkydiveSpeedUpdate;                                    // 0x0448(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BQQT[0x40];                                  // 0x0458(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTeammateStateChanged;                                  // 0x0498(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterRescueStateChanged;                           // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EO2D[0x20];                                  // 0x04B8(0x0020) MISSED OFFSET (PADDING)

	public:
		void ShowDiePage();
		void OpenSetting();
		void OpenMap();
		void OnTimeToEndMessage(int32_t TimeToEnd);
		void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh);
		void OnSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarSpectateInfo* SpectateInfo);
		void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed);
		void OnSkydiveFlyStateChanged__DelegateSignature(bool bInFly);
		void OnSkydiveDataUpdate__DelegateSignature(float NewData);
		void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue);
		void OnReceiveBeginPlay();
		void OnPlayerNumberChange();
		void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter);
		void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered);
		void OnMarkButtonDragSelectEnded__DelegateSignature();
		void OnMarkButtonBeenLoopPressed__DelegateSignature();
		void OnJetTimesChanged__DelegateSignature(int32_t NewTimes);
		void OnJetModuleLevelChanged__DelegateSignature(int32_t NewLevel);
		void OnJetFlyStateChanged__DelegateSignature(bool bStart);
		void OnJetFlyForbiddenChanged__DelegateSignature(bool bForbidden);
		void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent);
		void OnCharacterRescueStateChanged__DelegateSignature(ERescueState NewRescueState);
		void OnCharacterEnterWater__DelegateSignature();
		void OnCharacterDead__DelegateSignature();
		void OnCapsulePlayerNumChange(int32_t CurrentNum, int32_t Total);
		void NotifyBombingEnd(int32_t BombId);
		void NotifyBombingBegin(int32_t BombId, const struct FVector& Location, float Radius);
		void MarkWarningOnWorld();
		void MarkPointOnWorld();
		bool HasBegunPlay();
		void HandleSendQuickMessage(const class FString& NickName, const class FString& Message, bool IsLocalPlayer, bool bSound);
		void CloseSetting();
		void CloseMap();
		void BroadcastSkydiveSpeed_Internal();
		void BroadcastSkydiveSpeed();
		void BroadcastOnVJetTotalTimesSetDelegate();
		void BroadcastOnVJetTotalTimesSet_Internal();
		void BroadcastOnVJetTimesChargingDelegate();
		void BroadcastOnVJetTimesCharging_Internal();
		void BroadcastOnVJetRestTimesSetDelegate();
		void BroadcastOnVJetRestTimesSet_Internal();
		void BroadcastOnVJetModuleLevelChangedDelegate();
		void BroadcastOnVJetModuleLevelChanged_Internal();
		void BroadcastOnVJetForbiddenChangedDelegate();
		void BroadcastOnVJetForbiddenChanged_Internal();
		void BroadcastOnVJetCoolingDownDelegate();
		void BroadcastOnVJetCoolingDown_Internal();
		void BroadcastOnVJetChargeStateChangedDelegate();
		void BroadcastOnVJetChargeStateChanged_Internal();
		void BroadcastOnVJetCDStateChangedDelegate();
		void BroadcastOnVJetCDStateChanged_Internal();
		void BroadcastOnTeammateStateChangedDelegate();
		void BroadcastOnTeammateStateChanged_Internal();
		void BroadcastOnSkydiveFlyStateChanged_Internal();
		void BroadcastOnSkydiveFlyStateChanged();
		void BroadcastOnShowGameNoticeDelegateDeprecated(int32_t InNoticeID, TMap<class FString, class FString> InNoticeParams);
		void BroadcastOnRefreshBackpackWeaponPartDelegate();
		void BroadcastOnRefreshBackpackWeaponDelegate();
		void BroadcastOnRefreshBackpackItemDelegate();
		void BroadcastOnRefreshBackpackEquipDelegate();
		void BroadcastOnHJetTotalTimesSetDelegate();
		void BroadcastOnHJetTotalTimesSet_Internal();
		void BroadcastOnHJetTimesChargingDelegate();
		void BroadcastOnHJetTimesCharging_Internal();
		void BroadcastOnHJetRestTimesSetDelegate();
		void BroadcastOnHJetRestTimesSet_Internal();
		void BroadcastOnHJetModuleLevelChangedDelegate();
		void BroadcastOnHJetModuleLevelChanged_Internal();
		void BroadcastOnHJetForbiddenChangedDelegate();
		void BroadcastOnHJetForbiddenChanged_Internal();
		void BroadcastOnHJetCoolingDownDelegate();
		void BroadcastOnHJetCoolingDown_Internal();
		void BroadcastOnHJetChargeStateChangedDelegate();
		void BroadcastOnHJetChargeStateChanged_Internal();
		void BroadcastOnHJetCDStateChangedDelegate();
		void BroadcastOnHJetCDStateChanged_Internal();
		void BroadcastOnBindPickupDelegates();
		void BroadcastOnBindItemPanelDelegates();
		void BroadcastOnBindHPPanelDelegates();
		void BindLocalPlayerSpectateDelegates(class ASolarSpectateInfo* LocalSpecInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHyperLinkRichText
	 * Size -> 0x0010 (FullSize[0x0730] - InheritedSize[0x0720])
	 */
	class USolarHyperLinkRichText : public URichTextBlock
	{
	public:
		class FScriptMulticastDelegate                             OnHyperLinkClicked;                                      // 0x0720(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarImage
	 * Size -> 0x01A8 (FullSize[0x02E0] - InheritedSize[0x0138])
	 */
	class USolarImage : public UWidget
	{
	public:
		struct FSlateBrush                                         Brush;                                                   // 0x0138(0x0098) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		ESolarImageFillType                                        FillType;                                                // 0x01D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LSI5[0x7];                                   // 0x01D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarImageProgressInfo                             ImageProgressInfo;                                       // 0x01D8(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		class FScriptDelegate                                      BrushDelegate;                                           // 0x01F8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		struct FLinearColor                                        ColorAndOpacity;                                         // 0x0208(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      ColorAndOpacityDelegate;                                 // 0x0218(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bEnableLocImage;                                         // 0x0228(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DDV5[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                ImagePath;                                               // 0x0230(0x0018) Edit, NativeAccessSpecifierPublic
		int32_t                                                    LocTextID;                                               // 0x0248(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarSupportLanguages                                     PreviewLang;                                             // 0x024C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SG6I[0x3];                                   // 0x024D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnMouseButtonDownEvent;                                  // 0x0250(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMouseButtonUpEvent;                                    // 0x0260(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMouseMoveEvent;                                        // 0x0270(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AQWI[0x60];                                  // 0x0280(0x0060) MISSED OFFSET (PADDING)

	public:
		void UpdateImageAsync(int32_t NewLocTextID);
		void UpdateImage(int32_t NewLocTextID);
		void SetOpacity(float InOpacity);
		void SetImageProgressInfo(const struct FSolarImageProgressInfo& InSolarImageProgressInfo);
		void SetImageProgressByInfo(const struct FSolarImageProgressInfo& InSolarImageProgressInfo);
		void SetImageProgress(float InProgress);
		void SetImageFillType(ESolarImageFillType InImageFillType);
		void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
		void SetBrushTintColor(const struct FSlateColor& TintColor);
		void SetBrushSize(const struct FVector2D& DesiredSize);
		void SetBrushResourceObject(class UObject* ResourceObject);
		void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);
		void SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize);
		void SetBrushFromSoftTexture(bool bMatchSize);
		void SetBrushFromSoftMaterial();
		void SetBrushFromMaterial(class UMaterialInterface* Material);
		void SetBrushFromAtlasInterface(bool bMatchSize);
		void SetBrushFromAsset(class USlateBrushAsset* Asset);
		void SetBrush(const struct FSlateBrush& InBrush);
		float GetImageProgressByInfo(const struct FSolarImageProgressInfo& InSolarImageProgressInfo);
		class UMaterialInstanceDynamic* GetDynamicMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarImageURL
	 * Size -> 0x01F8 (FullSize[0x0330] - InheritedSize[0x0138])
	 */
	class USolarImageURL : public UWidget
	{
	public:
		class FString                                              URL;                                                     // 0x0138(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDownloadFailedResetToPlaceholder;                       // 0x0148(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDownloadFailedAutoRetry;                                // 0x0149(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MQ0A[0x2];                                   // 0x014A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AutoRetryDelayTime;                                      // 0x014C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AutoRetryTimes;                                          // 0x0150(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F3BN[0x4];                                   // 0x0154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         Brush;                                                   // 0x0158(0x0098) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSlateBrush                                         PlaceholderBrush;                                        // 0x01F0(0x0098) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FScriptDelegate                                      BrushDelegate;                                           // 0x0288(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		struct FLinearColor                                        ColorAndOpacity;                                         // 0x0298(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      ColorAndOpacityDelegate;                                 // 0x02A8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bFlipForRightToLeftFlowDirection;                        // 0x02B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U3E6[0x3];                                   // 0x02B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnMouseButtonDownEvent;                                  // 0x02BC(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XL1H[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnURLDownloadFinish;                                     // 0x02D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A954[0x50];                                  // 0x02E0(0x0050) MISSED OFFSET (PADDING)

	public:
		void URLDownloadFinish__DelegateSignature(bool bSuccess);
		void UpdateURLImage();
		void SetURLForNextTick(const class FString& URLForNextTick);
		void SetOpacity(float InOpacity);
		void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
		void SetBrushTintColor(const struct FSlateColor& TintColor);
		void SetBrushSize(const struct FVector2D& DesiredSize);
		void SetBrushResourceObject(class UObject* ResourceObject);
		void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);
		void SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize);
		void SetBrushFromSoftTexture(bool bMatchSize);
		void SetBrushFromSoftMaterial();
		void SetBrushFromMaterial(class UMaterialInterface* Material);
		void SetBrushFromAtlasInterface(bool bMatchSize);
		void SetBrushFromAsset(class USlateBrushAsset* Asset);
		void SetBrush(const struct FSlateBrush& InBrush);
		void ResetToPlaceholder();
		void LoadURLImage(class UTexture2DDynamic* Texture);
		class FString GetUrl();
		class UMaterialInstanceDynamic* GetDynamicMaterial();
		EImageURLDownloadState GetDownloadState();
		void CancelDownload();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputActionContext
	 * Size -> 0x01F0 (FullSize[0x0218] - InheritedSize[0x0028])
	 */
	class USolarInputActionContext : public UObject
	{
	public:
		unsigned char                                              UnknownData_Q9FN[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputMappingContext* InputMappingContext;                                     // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<struct FKey, class UInputAction*>                     KeyChordInputActionDict;                                 // 0x0050(0x0050) NativeAccessSpecifierPrivate
		TMap<class FName, struct FSolarInputActionEntry>           ActionInputActionDict;                                   // 0x00A0(0x0050) NativeAccessSpecifierPrivate
		TMap<class FName, struct FSolarInputActionEntry>           ChordActionInputActionDict;                              // 0x00F0(0x0050) NativeAccessSpecifierPrivate
		class UInputAction* NullInputAction;                                         // 0x0140(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_98MK[0xD0];                                  // 0x0148(0x00D0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputButton
	 * Size -> 0x0020 (FullSize[0x04B8] - InheritedSize[0x0498])
	 */
	class USolarInputButton : public UButton
	{
	public:
		struct FSolarVirtualInput                                  VirtualActionInput;                                      // 0x0498(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputComponent
	 * Size -> 0x0010 (FullSize[0x0178] - InheritedSize[0x0168])
	 */
	class USolarInputComponent : public UEnhancedInputComponent
	{
	public:
		unsigned char                                              UnknownData_2TZO[0x10];                                  // 0x0168(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.InputTriggerDownOne
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UInputTriggerDownOne : public UInputTrigger
	{
	public:
		unsigned char                                              UnknownData_K99Y[0x1];                                   // 0x0040(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsOneShot;                                              // 0x0041(0x0001) Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_30SE[0x6];                                   // 0x0042(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.InputTriggerPressedOld
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UInputTriggerPressedOld : public UInputTrigger
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.InputTriggerReleasedOld
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UInputTriggerReleasedOld : public UInputTrigger
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.InputTriggerPressedAndReleased
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UInputTriggerPressedAndReleased : public UInputTrigger
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.InputTriggerTriggered
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UInputTriggerTriggered : public UInputTrigger
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.InputTriggerDoubleTap
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UInputTriggerDoubleTap : public UInputTrigger
	{
	public:
		float                                                      Delay;                                                   // 0x0040(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J0AC[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.InputModifierConstBool
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInputModifierConstBool : public UInputModifier
	{
	public:
		float                                                      ConstValue;                                              // 0x0028(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8Q1N[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputKeyMapSubsystem
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarInputKeyMapSubsystem : public UEngineSubsystem
	{
	public:
		unsigned char                                              UnknownData_YFSF[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputManager
	 * Size -> 0x0248 (FullSize[0x02F8] - InheritedSize[0x00B0])
	 */
	class USolarInputManager : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_MIQ0[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarPlayerSensitivitys* SenSetting;                                              // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7YYM[0x38];                                  // 0x00D0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTouchHandler                                       TouchHandler;                                            // 0x0108(0x0178) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KRE1[0x78];                                  // 0x0280(0x0078) MISSED OFFSET (PADDING)

	public:
		void SetTouchScaler(float InVal);
		void SetNoiseThresholdFactor(float InVal);
		void SetMouseScaler(const struct FVector2D& InVal);
		void SetMinNoiseMultiplier(float InVal);
		void SetCurveVerticalFix(const struct FVector2D& InVec);
		void SetCurveVerticalFactor(const struct FVector2D& InVec);
		void SetCurveHorizonFix(const struct FVector2D& InVec);
		void SetCurveHorizonFactor(const struct FVector2D& InVec);
		void OnCacheNeedUpdate();
		float GetTouchScaler();
		struct FVector2D GetTouchOutputScale();
		float GetNoiseThresholdFactor();
		struct FVector2D GetMouseScaler();
		float GetMinNoiseMultiplier();
		struct FVector2D GetFixedOutput();
		struct FVector2D GetDeltaMove();
		struct FVector2D GetCurveVerticalFix();
		struct FVector2D GetCurveVerticalFactor();
		struct FVector2D GetCurveHorizonFix();
		struct FVector2D GetCurveHorizonFactor();
		struct FVector2D GetAverageDeltaMove();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputMappingManager
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class USolarInputMappingManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_JFHA[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnInputMappingUpdate;                                    // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class FString, struct FInputKeyMappingEntry>          KeyMappingEntryDict;                                     // 0x0048(0x0050) NativeAccessSpecifierPrivate
		TArray<struct FInputKeyMappingEntry>                       CacheKeyMappingEntries;                                  // 0x0098(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void STATIC_SplitInputChord(const struct FInputChord& InInputChord, class FString* KeyStr1, class FString* KeyStr2);
		TArray<struct FInputKeyMappingEntry> GetKeyMappingEntries();
		struct FInputKeyMappingEntry FindKeyMappingEntry(const class FString& ActionID);
		struct FInputKeyMappingEntry STATIC_CreateKeyMappingEntry(const class FString& InActionID, const class FString& InActionName, ESolarTablesEnum_InputActionType InActionType, float InScale, const class FString& InKeyStr1, const class FString& InKeyStr2, const class FString& InKeyStr3, ESolarTablesEnum_InputTriggerType InInputTriggerType1, ESolarTablesEnum_InputTriggerType InInputTriggerType2, ESolarTablesEnum_InputTriggerType InInputTriggerType3);
		bool STATIC_CreateInputChord(const class FString& KeyStr1, const class FString& KeyStr2, struct FInputChord* OutInputChord);
		void ApplyKeyMappings();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputModePolicyComponent
	 * Size -> 0x00D0 (FullSize[0x0180] - InheritedSize[0x00B0])
	 */
	class USolarInputModePolicyComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FC52[0xD0];                                  // 0x00B0(0x00D0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputSetting
	 * Size -> 0x01F8 (FullSize[0x0230] - InheritedSize[0x0038])
	 */
	class USolarInputSetting : public UDeveloperSettings
	{
	public:
		struct FVector2D                                           TouchScaler;                                             // 0x0038(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NoiseThresholdFactor;                                    // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinNoiseMultiplier;                                      // 0x0044(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAccMode;                                          // 0x0048(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O72K[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AccConfigThreshold;                                      // 0x004C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ConstantThreshold;                                       // 0x0050(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GVZA[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     TouchDistHorizCurve;                                     // 0x0058(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     TouchDistVertCurve;                                      // 0x0070(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           TouchDistHorizCurveScale;                                // 0x0088(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           TouchDistVertCurveScale;                                 // 0x0090(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           TouchDistHorizCurveOffset;                               // 0x0098(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           TouchDistVertCurveOffset;                                // 0x00A0(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     TouchHorizCurve;                                         // 0x00A8(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     TouchVertCurve;                                          // 0x00C0(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           TouchHorizCurveScale;                                    // 0x00D8(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           TouchVertCurveScale;                                     // 0x00E0(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           TouchHorizCurveOffset;                                   // 0x00E8(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           TouchVertCurveOffset;                                    // 0x00F0(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxMagnitudeThreshold;                                   // 0x00F8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9H44[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FSoftObjectPath>                  InputActionPaths;                                        // 0x0100(0x0050) Edit, Config, NativeAccessSpecifierPrivate
		unsigned char                                              InputActionOneShotBlackList[0x50];                       // 0x0150(0x0050) UNKNOWN PROPERTY: SetProperty
		struct FSoftObjectPath                                     DefaultInputActionPath;                                  // 0x01A0(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     DefaultInputActionChordPath;                             // 0x01B8(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     DefaultInputActionModifyKeyPath;                         // 0x01D0(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     DefaultInputActionTapPath;                               // 0x01E8(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     DefaultInputActionDoubleTapPath;                         // 0x0200(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     DefaultInputActionHoldPath;                              // 0x0218(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class USolarInputSetting* STATIC_GetInputSettings();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInputSubsystem
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class USolarInputSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_0R8X[0x48];                                  // 0x0030(0x0048) MISSED OFFSET (PADDING)

	public:
		bool TestInputActionFlag(EInputActionFlags InFlagBit);
		void RemoveInputActionFlag(EInputActionFlags InFlagBit);
		void OnInputMethodChanged(ECommonInputType InInputType);
		void OnControllerConnectionChange(bool bIsConnected, int32_t UserId, int32_t ControllerId);
		void AddInputActionFlag(EInputActionFlags InFlagBit);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInteractableManager
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class USolarInteractableManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_DSYE[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ZoneNum;                                                 // 0x0040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    TotalNum;                                                // 0x0044(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FRadarStationCollection>                     CurrRadarStations;                                       // 0x0048(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASolarElectricShop*>                          CurrElectricShops;                                       // 0x0058(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class ASolarShieldUpgradeItemShop>>  ActiveShieldUpgradeItemShopList;                         // 0x0068(0x0010) ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SceneObjectLevelName;                                    // 0x0078(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarGlobalRepInfo>                  GlobalMapRepInfo;                                        // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_658X[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSceneObjectsLoadComplete(const class FString& LevelName);
		void OnClientShowShieldUpgradeItemShops();
		int32_t GetShieldUpgradeItemShopGroupID();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInteractionItemWidget
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class USolarInteractionItemWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_I5O8[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarInteractionListWidget* InteractionList;                                         // 0x0350(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        InteractionType;                                         // 0x0358(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void FadeOut();
		void FadeIn();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInteractionListWidget
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class USolarInteractionListWidget : public USolarUserWidget
	{
	public:
		TArray<class USolarInteractionItemWidget*>                 ItemWidgets;                                             // 0x0348(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USolarInteractionTriggerWidget*>              TriggerWidgets;                                          // 0x0358(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YXLE[0x8];                                   // 0x0368(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarInteractionItemWidget* FocusedActiveItem;                                       // 0x0370(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EE8I[0x4];                                   // 0x0378(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RefreshActiveWidgetInterval;                             // 0x037C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V780[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnTryCancelInteraction();
		void OnStopInteractionCountDown(const struct FCountDownInfo& InCountInfo);
		void OnStartInteractionCountDown(const struct FCountDownInfo& InCountInfo);
		bool OnInteractionTriggered();
		void OnInteractionTriggerDisappear(const struct FInteractionTriggerInfo& TriggerInfo);
		void OnInteractionTriggerAppear(const struct FInteractionTriggerInfo& TriggerInfo);
		void OnHideInteractionListRequested();
		void OnCancelHideInteractionListRequested();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInteractionOpenAirdropWidget
	 * Size -> 0x0018 (FullSize[0x0378] - InheritedSize[0x0360])
	 */
	class USolarInteractionOpenAirdropWidget : public USolarInteractionItemWidget
	{
	public:
		unsigned char                                              UnknownData_4B7K[0x8];                                   // 0x0360(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarBattleModel* BattleViewModel;                                         // 0x0368(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IZ1K[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateProgress(class ASolarTreasureBoxActor* InBoxActor, float InProgress);
		void UnBindDelegates();
		bool TryOpenAirdropBox();
		void SetTBoxActor(class ASolarTreasureBoxActor* InBoxActor);
		void SetSelfVisibility(bool InShow);
		void SetAirdropBoxActor(class AActor* InBoxActor);
		void RefreshToSelfOpening();
		void RefreshToOtherOpening();
		void RefreshToCanOpen();
		void RefreshProgressDisplay(float Progress, float InMaxOpenTime);
		void OnPressCancelButtonPC();
		bool OnPressButtonPC();
		void OnPressButtonOpen();
		void OnPressButtonCancel();
		void OnOpenCharacterChanged(class AAirDropTreasureBox* InBoxActor);
		void OnDrivingStateChanged(EDriveState InDriveState);
		void OnBtnActiveChanged(bool Inactive);
		void OnAirdropProgressChanged(class AAirDropTreasureBox* InBoxActor);
		void HideSelfByThisID(int64_t InThisID);
		void ForceCancel();
		bool BSameThisID(int64_t InThisID);
		void BindDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInteractionRescueTeammateWidget
	 * Size -> 0x0058 (FullSize[0x03B8] - InheritedSize[0x0360])
	 */
	class USolarInteractionRescueTeammateWidget : public USolarInteractionItemWidget
	{
	public:
		int32_t                                                    FastReliefSkillCharacterID;                              // 0x0360(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A3YS[0x54];                                  // 0x0364(0x0054) MISSED OFFSET (PADDING)

	public:
		void WrappedStopCountDownProgress(int32_t InActionID);
		void WrappedStartCountDownProgress(const struct FCountDownInfo& InCountInfo);
		void StopCountDownProgress(int32_t InActionID);
		void StartCountDownProgress(const struct FCountDownInfo& InCountInfo);
		void RefreshToPreInteracting();
		void RefreshToNonCancellableInteracting();
		void RefreshToCancellableInteracting();
		void OnRescueButtonVisibilitySet(bool bShow);
		void OnRescueButtonClicked();
		void OnProgressiveInteractCompleted();
		void OnProgressiveInteractCanceled();
		void OnCharacterIDSet(int32_t InCharacterId);
		void EnablePassiveBuffDisplay(int32_t CharacterId, int32_t LocalTextId);
		void DisablePassiveBuffDisplay();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInteractionTriggerWidget
	 * Size -> 0x0088 (FullSize[0x03E8] - InheritedSize[0x0360])
	 */
	class USolarInteractionTriggerWidget : public USolarInteractionItemWidget
	{
	public:
		unsigned char                                              UnknownData_9XKT[0x88];                                  // 0x0360(0x0088) MISSED OFFSET (PADDING)

	public:
		void WrappedStopCountDownProgress(int32_t InActionID);
		void WrappedStartCountDownProgress(const struct FCountDownInfo& InCountInfo);
		void StopCountDownProgress(int32_t InActionID);
		void StartCountDownProgress(const struct FCountDownInfo& InCountInfo);
		void RefreshToPreInteracting();
		void RefreshToNonCancellableInteracting();
		void RefreshToCancellableInteracting();
		void OnProgressiveInteractCompleted();
		void OnProgressiveInteractCanceled();
		void OnInteractButtonTriggered();
		void InitByTriggerInfo(const struct FInteractionTriggerInfo& TriggerInfo);
		void EnablePassiveBuffDisplay(int32_t CharacterId, int32_t LocalTextId);
		void DisablePassiveBuffDisplay();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarInteractionVolume
	 * Size -> 0x0020 (FullSize[0x0250] - InheritedSize[0x0230])
	 */
	class ASolarInteractionVolume : public ATriggerBox
	{
	public:
		unsigned char                                              UnknownData_PS13[0x18];                                  // 0x0230(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       DisableInteractionVolume;                                // 0x0248(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DebugDrawVolume;                                         // 0x0249(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D32L[0x6];                                   // 0x024A(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnEndOverlap(class AActor* ThisActor, class AActor* OtherActor);
		void OnBeginOverlap(class AActor* ThisActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarIrisSettings
	 * Size -> 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
	 */
	class USolarIrisSettings : public UDeveloperSettings
	{
	public:
		class FString                                              BaseURL;                                                 // 0x0038(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              GameID;                                                  // 0x0048(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              RegionID;                                                // 0x0058(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              KeyStr;                                                  // 0x0068(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarIronManVehicle
	 * Size -> 0x0538 (FullSize[0x18F0] - InheritedSize[0x13B8])
	 */
	class ASolarIronManVehicle : public ASolarHoverVehicle
	{
	public:
		class FName                                                LeftHandSocket;                                          // 0x13B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                RightHandSocket;                                         // 0x13C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LeftFootSocket;                                          // 0x13C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                RightFootSocket;                                         // 0x13D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                BackPackSocket;                                          // 0x13D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              RotationLaserMontage[0x28];                              // 0x13E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector                                             BoxHalfSize;                                             // 0x1408(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    QuerySameActorMaxNum;                                    // 0x1414(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleSpeedThresholdFromStandToLie;                     // 0x1418(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XLI4[0x4];                                   // 0x141C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVehicleVFX                                         LeftHandBulletEffect;                                    // 0x1420(0x0090) Edit, NativeAccessSpecifierPublic
		struct FVehicleVFX                                         LeftHandMuzzleEffect;                                    // 0x14B0(0x0090) Edit, NativeAccessSpecifierPublic
		struct FVehicleVFX                                         RightHandBulletEffect;                                   // 0x1540(0x0090) Edit, NativeAccessSpecifierPublic
		struct FVehicleVFX                                         RightHandMuzzleEffect;                                   // 0x15D0(0x0090) Edit, NativeAccessSpecifierPublic
		struct FVehicleVFX                                         HitEffect;                                               // 0x1660(0x0090) Edit, NativeAccessSpecifierPublic
		TArray<struct FVehicleVFX>                                 IronManJetEffectInfo;                                    // 0x16F0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<ECollisionChannel>                                  HitDecalExceptObjTypes;                                  // 0x1700(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              HitDecalParticle[0x28];                                  // 0x1710(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector                                             HitDecalScale;                                           // 0x1738(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitDecalInterval;                                        // 0x1744(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitDecalBeginTime;                                       // 0x1748(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitDecalEndTime;                                         // 0x174C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitDecalLength;                                          // 0x1750(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4LBA[0x4];                                   // 0x1754(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SmoothRotationSpeed;                                     // 0x1758(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxJetEffectFXkgValue;                                   // 0x175C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                JetEffectFXkgName;                                       // 0x1760(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass* CanNotSwitchSeat;                                        // 0x1768(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2TW7[0x50];                                  // 0x1770(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              IronManStaticMeshWithDriver[0x28];                       // 0x17C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              IronManStaticMeshWithNoDriver[0x28];                     // 0x17E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       bAddRiderSeat;                                           // 0x1810(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X5H8[0x7];                                   // 0x1811(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVehicleSeatSlot                                    RiderSeatSlot;                                           // 0x1818(0x00D8) Edit, NativeAccessSpecifierPrivate

	public:
		void OnIronManRootHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarIronManVehicleAnimInstance
	 * Size -> 0x0150 (FullSize[0x04B0] - InheritedSize[0x0360])
	 */
	class USolarIronManVehicleAnimInstance : public USolarHoverVehicleAnimInstance
	{
	public:
		unsigned char                                              UnknownData_WEXC[0x8];                                   // 0x0360(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FTransform>                       SocketToTransform;                                       // 0x0368(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0GE5[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          LeftHandTransform;                                       // 0x03C0(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          RightHandTransform;                                      // 0x03F0(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          LeftFootTransform;                                       // 0x0420(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FTransform                                          RightFootTransform;                                      // 0x0450(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FTransform                                          BackPackTransform;                                       // 0x0480(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemCardViewWidget
	 * Size -> 0x0010 (FullSize[0x0358] - InheritedSize[0x0348])
	 */
	class USolarItemCardViewWidget : public USolarUserWidget
	{
	public:
		ESolarItemQualityType                                      QualityType;                                             // 0x0348(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemSelectType                                       SelectType;                                              // 0x0349(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemLockType                                         LockType;                                                // 0x034A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemDownloadType                                     DownloadType;                                            // 0x034B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemMarkType                                         MarkType;                                                // 0x034C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemLimitType                                        LimitType;                                               // 0x034D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemUseType                                          UseType;                                                 // 0x034E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemBuyType                                          BuyType;                                                 // 0x034F(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemOwnType                                          OwnType;                                                 // 0x0350(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarRedHintType                                          RedHintType;                                             // 0x0351(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarItemShowType                                         ShowType;                                                // 0x0352(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EClassType                                                 CharacterBuildType;                                      // 0x0353(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TBCY[0x4];                                   // 0x0354(0x0004) MISSED OFFSET (PADDING)

	public:
		void ReflashItemView();
		void OnUseChanged(ESolarItemUseType InType);
		void OnShowTypeChanged(ESolarItemShowType InType);
		void OnSelectedChanged(ESolarItemSelectType InType);
		void OnrRedHintChanged(ESolarRedHintType InType);
		void OnQualityChanged(ESolarItemQualityType InType);
		void OnOwnChanged(ESolarItemOwnType InType);
		void OnMarkedChanged(ESolarItemMarkType InType);
		void OnLockedChanged(ESolarItemLockType InType);
		void OnLimitChanged(ESolarItemLimitType InType);
		void OnDownloadedChanged(ESolarItemDownloadType InType);
		void OnBuyChanged(ESolarItemBuyType InType);
		void OnBuildTypeChanged(EClassType InType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USolarItemComponent : public UActorComponent
	{
	public:
		class ASolarCharacter* OwnerChara;                                              // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B2NR[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UseItemRequestLuaCall(int32_t ItemID, int32_t Num);
		void OnPlayerBackpackItemUpdate();
		bool CanUseMedicine();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemCountActor
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASolarItemCountActor : public AActor
	{
	public:
		class UTextRenderComponent* TextPtr;                                                 // 0x0228(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              TextPrefix;                                              // 0x0230(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetItemCount(int32_t count);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarItemInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemManager
	 * Size -> 0x0788 (FullSize[0x07B0] - InheritedSize[0x0028])
	 */
	class USolarItemManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_6MX6[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarItemRootActor* RootActor;                                               // 0x0030(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<int32_t, TWeakObjectPtr<class AActor>>                SpawnedActors;                                           // 0x0038(0x0050) UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HNGI[0x50];                                  // 0x0088(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarItemSpawner*>                           ItemSpawners;                                            // 0x00D8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASolarItemSpawner*>                           NSItemSpanwers;                                          // 0x00E8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASolarVehicleSpawner*>                        VehicleSpawners;                                         // 0x00F8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DUU3[0x50];                                  // 0x0108(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, class ASolarItemSpawner*>                    ItemSpawnersMap;                                         // 0x0158(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, class ASolarAirDropSpawner*>                 AirDropSpawnersMap;                                      // 0x01A8(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, struct FSolarItemSpawnerArray>               NSItemSpawnerMap;                                        // 0x01F8(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, struct FOutcomeData>                         ItemOutcomeDatas;                                        // 0x0248(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, struct FOutcomeDataCollection>               OutcomeCollection;                                       // 0x0298(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, struct FSimpleDropItemDataCollection>        OriginDropItemDatas;                                     // 0x02E8(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, struct FFinalDropDataCollection>             AirDropItemDatas;                                        // 0x0338(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, int32_t>                                     AirDropChestIndexMap;                                    // 0x0388(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, int32_t>                                     UsedAirDropChestIndexMap;                                // 0x03D8(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, int32_t>                                     MaxPileMap;                                              // 0x0428(0x0050) NativeAccessSpecifierPrivate
		struct FRandomStream                                       ItemStream;                                              // 0x0478(0x0008) ZeroConstructor, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      DelaySpawnTime;                                          // 0x0480(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WD2P[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      SubLevelNames;                                           // 0x0488(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       BInitSpawner;                                            // 0x0498(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       BSpawnerDestoryed;                                       // 0x0499(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WKIK[0x6];                                   // 0x049A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        ItemInitSpawnerHandle;                                   // 0x04A0(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DelayInitSpawnerTime;                                    // 0x04A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YOPL[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        ItemLoopSpawnHandle;                                     // 0x04B0(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SpawnLoopInterval;                                       // 0x04B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SpawnMinDisSquared;                                      // 0x04BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SpawnMaxHeightOffset;                                    // 0x04C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ChestSpawnMinDisSquared;                                 // 0x04C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      VehicleSpawnMinDisSquared;                               // 0x04C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QU42[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* ItemResReferenceTable;                                   // 0x04D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              ItemResReferenceTablePath;                               // 0x04D8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MYIV[0x38];                                  // 0x04E8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       BOpenLog;                                                // 0x0520(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GKKA[0x3];                                   // 0x0521(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FirstSpawnerIndex;                                       // 0x0524(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FirstTBoxIndex;                                          // 0x0528(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FirstAirDropIndex;                                       // 0x052C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FirstVehicleIndex;                                       // 0x0530(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ChestKeyCode;                                            // 0x0534(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Level1OutcomeID;                                         // 0x0538(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Level2OutcomeID;                                         // 0x053C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Level3OutcomeID;                                         // 0x0540(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RZPZ[0xF4];                                  // 0x0544(0x00F4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, EItemType>                                   ItemID2Types;                                            // 0x0638(0x0050) NativeAccessSpecifierPublic
		int64_t                                                    ThisIdRefCount;                                          // 0x0688(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int64_t                                                    ServerNowSeconds;                                        // 0x0690(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              RootActorBpPath;                                         // 0x0698(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CheckDropRadius;                                         // 0x06A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CheckDropHeight;                                         // 0x06AC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DropLineTraceLength;                                     // 0x06B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DropUnitOffset;                                          // 0x06B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarMapManager* MapManager;                                              // 0x06B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarAirDropSpawner*>                        ActiveAirDropBox;                                        // 0x06C0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HFLU[0xB0];                                  // 0x06D0(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AAirDropTreasureBox>>          AirDropsList;                                            // 0x0780(0x0010) ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class ADeathTreasureBox>>            DeathTreasureBoxList;                                    // 0x0790(0x0010) ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4Q9Z[0x10];                                  // 0x07A0(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateItemParams();
		bool TryDropAtLocation(class ASolarCharacterBase* Owner, struct FVector* CheckPos);
		void SplitBurstItems(const struct FSolarItemData& Source, TArray<struct FSolarItemData>* SplitedPile);
		void SpawnTreasureBoxByID(int32_t TreasureId, const struct FTransform& trans, TArray<struct FSolarItemData> ItemsToSpawn, class ASolarCharacter* SummonCharacter, float InSpawnDelay, float InStartHeight);
		void SpawnMutipleItems(class ASolarCharacter* InCharacter, int32_t InItemID, int32_t InPerCount, int32_t InTotalCount);
		void SpawnItemsByOutcomeID(int32_t OutcomeID, struct FTransform* trans);
		void SpawnItems(int32_t ItemID, int32_t ItemNum, const struct FTransform& trans);
		struct FSolarItemData SpawnItemData(int32_t ItemID);
		void SpawnDeathBox(class ASolarCharacterBase* Owner, const struct FRotator& Rotator, TArray<struct FSolarItemData>* DataTarray, int32_t DeathBoxId, TArray<class ASolarPlayerWeapon*> DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, int32_t MonsterID);
		void SpawnAirDropByID(int32_t ChestID, const struct FVector& Location, TArray<struct FSolarItemData> ItemsToSpawn);
		void ResetThisID();
		bool RefreshOutcomePoolContent(struct FOutcomeData* InOutcomeData);
		void OnUpdateServerNowSeconds(int32_t InNowSeconds);
		void OnCustomGameStateChanged(ESCMInGameState InNewState);
		void OnAsyncLoadTreasureBoxComplete(const struct FSoftClassPath& SClassPath, const struct FSolarItemData& BoxItemData, TArray<struct FSolarItemData> ItemDataList, const struct FTransform& trans, class ASolarCharacter* InCharacter, float InSpawnDelay, float InStartHeight);
		void OnAsyncLoadItemComplete(const struct FSoftClassPath& SClassPath, const struct FSolarItemData& ItemData, const struct FTransform& trans);
		void OnAsyncLoadDiscardItemComplete(const struct FSoftClassPath& SClassPath, class ASolarCharacter* Owner, const struct FSolarItemData& ItemData);
		void OnAsyncLoadDeathBoxComplete(class UClass* DeathBoxClass, class ASolarCharacterBase* Owner, const struct FRotator& Rotator, TArray<struct FSolarItemData> DataTarray, const struct FSolarItemData& DeathBoxData, TArray<class ASolarPlayerWeapon*> DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, int32_t MonsterID);
		void OnAsyncLoadAirdropComplete(const struct FSoftClassPath& SClassPath, const struct FSolarItemData& BoxItemData, TArray<struct FSolarItemData> ItemDataList, const struct FVector& Location);
		void NotifySpawnerDestroy();
		void NotifyAvailableAirDropsNumChanged();
		void NotifyAirDropOpened();
		void NetStartAirDrops(int32_t SpawnerID, int32_t ChestID);
		void NetRunVehicleSpawn(ESpawnStage InSpawnStage);
		bool NetRunSpecOutcome(int32_t InData, TArray<struct FSolarItemData>* OutItemArray);
		void NetRunGlobalDrop();
		void NetRunDrop(ESpawnStage InSpecifiedStage);
		bool NetDropOutcomeContent(int32_t TargetContentID, struct FOutcomeData* OutcomeData, TMap<int32_t, struct FSimpleDropItemDataCollection>* InDropItemDatas, bool fromSpawner, const struct FTransform& trans);
		bool NetDropOutcome(struct FOutcomeData* OutcomeData, int32_t* OutTargetContentID);
		void NetDropGlobalOutcome(struct FGlobalOutcomeData* GlobalOutcomeData);
		void LoadSpawnerLevelComplete();
		void LoadItemSpawnerLevels();
		bool IsPosBlocked(const struct FVector& CheckPos);
		bool IsInSafeArea(const struct FVector& Location);
		void InitWeaponPartLevel(struct FSolarItemData* InItemData);
		void InitWeaponLevel(struct FSolarItemData* InItemData);
		void InitVehicleSpawnGroupData(TMap<int32_t, int32_t>* VehicleGroupIdToNum);
		void InitItemDataShieldValue(struct FSolarItemData* InItemData);
		int64_t IncreaseThisID();
		int32_t GetVehicleIDBySingleSpawnId(int32_t SpawnID);
		int32_t GetVehicleIDByGroupIDAndIndex(int32_t groupid, int32_t GroupIndex);
		int32_t GetVehicleIDByCustomRandomData();
		int32_t STATIC_GetVehicleGroupIDByVehicleID(int32_t InVehicleID);
		struct FSolarVehicleData STATIC_GetVehicleConfigData(int32_t InVehicleID);
		int32_t GetServerNowSeconds();
		int32_t GetRankSeasonID();
		int32_t GetRandomIDInMap(int32_t TotalWeight, TMap<int32_t, int32_t>* WeightIDMap);
		int32_t GetRandomAirDropIDInMap();
		int32_t GetOutcomeIdByTreasureBoxId(int32_t TreasureBoxID);
		struct FOutcomeData GetOutcomeDataByID(int32_t OutcomeID);
		struct FOutcomeContentData GetOutcomeContentDataByID(int32_t ContentID);
		bool GetItemResReference(int32_t InItemID, struct FItemResReference* outData);
		int32_t GetItemPrize(int32_t InItemID);
		int32_t GetItemMaxPileByID(int32_t InItemID);
		bool GetGlobalOutcomeData(int32_t GamePlayMode, TArray<struct FGlobalOutcomeData>* GlobalOutcomeDatas);
		int32_t GetEntryID();
		bool GetCurrItemSubLevels(const class FString& InMapName, TArray<class FString>* OutSubLevelNames);
		struct FOutcomeData GetCookedOutcomeDataByID(int32_t OutcomeID);
		bool GetChestsFromChestSpawn(int32_t ChestSpawnID, TArray<int32_t>* ChestIDs);
		int32_t GetAvailableAirDropsNum();
		bool GetAirDropChestIDsByGamePlayMode(int32_t GamePlayMode, TArray<int32_t>* ChestIDs);
		TArray<class ASolarAirDropSpawner*> GetActiveAirDropBox();
		void FindTransformForBoxItem(class AActor* TargetActor, struct FTransform* InTrans, bool bUseNewLocation);
		struct FRotator FindRotationForDropItem(class AActor* TargetActor, struct FVector* FindTargetPos);
		bool FindPosForDropItem(class ASolarCharacterBase* Owner, struct FVector* FindTargetPos, bool bPreferCenter);
		struct FSolarItemData CreateItemDataByKey(int32_t InItemID);
		void ConvertToItemdataAndSetToSpawners();
		void ClearSpawnLoopTimer();
		void CheckSpawnItemByDis();
		bool CheckPointInCircle(const struct FVector2D& Center, float Radius, const struct FVector2D& PlayerPoint);
		void AddVehicleGroupDataSingle(int32_t groupid, TMap<int32_t, int32_t>* SingleData);
		void AddOneDropDataToTempDatas(int32_t SpawnerID, int32_t InItemID, int32_t InItemNum, TMap<int32_t, struct FSimpleDropItemDataCollection>* InDropItemDatas);
		void AddAirDropToList(class AAirDropTreasureBox* AirDrop);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemResourceDataTable
	 * Size -> 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
	 */
	class USolarItemResourceDataTable : public UDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarItemRootActor
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASolarItemRootActor : public AActor
	{
	public:
		int32_t                                                    MAX_LOAD_NUM;                                            // 0x0228(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MAX_SPAWN_NUM;                                           // 0x022C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrLoadNum;                                             // 0x0230(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrSpawnNum;                                            // 0x0234(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TempFrame;                                               // 0x0238(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FrameInterval;                                           // 0x023C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarJoyStick
	 * Size -> 0x00A8 (FullSize[0x01E0] - InheritedSize[0x0138])
	 */
	class USolarJoyStick : public UWidget
	{
	public:
		struct FSolarVirtualInput                                  VirtualActionInput;                                      // 0x0138(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSolarVirtualInput                                  VirtualAxisXInput;                                       // 0x0158(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSolarVirtualInput                                  VirtualAxisYInput;                                       // 0x0178(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTouchPressed;                                          // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTouchReleased;                                         // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTouchMoveX;                                            // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTouchMoveY;                                            // 0x01C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BGP3[0x8];                                   // 0x01D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ResetControlInput();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarKeyMapButton
	 * Size -> 0x0028 (FullSize[0x0500] - InheritedSize[0x04D8])
	 */
	class USolarKeyMapButton : public USolarButton
	{
	public:
		struct FSolarVirtualInput                                  VirtualActionInput;                                      // 0x04D8(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       IsFocus;                                                 // 0x04F8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J962[0x7];                                   // 0x04F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLocalMessage
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarLocalMessage : public ULocalMessage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarKillEffectMessage
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarKillEffectMessage : public USolarLocalMessage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarKillNotifyMessage
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarKillNotifyMessage : public USolarLocalMessage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarlandContentStringDownloader
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class USolarlandContentStringDownloader : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnContentStringDownloaded;                               // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnContentStringDownloading;                              // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnContentStringFailed;                                   // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M27S[0x21];                                  // 0x0058(0x0021) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bForceRedownload;                                        // 0x0079(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JKUB[0xA];                                   // 0x007A(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ChunkSize;                                               // 0x0084(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G9E8[0x20];                                  // 0x0088(0x0020) MISSED OFFSET (PADDING)

	public:
		void StartDownload();
		bool IsCurrentDownloading();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarlandDownloadModule
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarlandDownloadModule : public UEngineSubsystem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarlandDownloadSetting
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class USolarlandDownloadSetting : public UObject
	{
	public:
		bool                                                       bPrepareDownloadWithApplocationStart;                    // 0x0028(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1VFK[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CDNURLPrefix;                                            // 0x0030(0x0010) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ExtraCDNURLPrefix;                                       // 0x0040(0x0010) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ServerListFileName;                                      // 0x0050(0x0010) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FileVersion;                                             // 0x0060(0x0010) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarlandFileDownloader
	 * Size -> 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
	 */
	class USolarlandFileDownloader : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnEachFileDownloaded;                                    // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDownloadCompleted;                                     // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEachFileDownloading;                                   // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFileDownloadFailed;                                    // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHashCheckFailedFileDownloader;                         // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5HG8[0x31];                                  // 0x0078(0x0031) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bForceRedownload;                                        // 0x00A9(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZJQ6[0x2A];                                  // 0x00AA(0x002A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ChunkSize;                                               // 0x00D4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M4BN[0x38];                                  // 0x00D8(0x0038) MISSED OFFSET (PADDING)

	public:
		void StartDownload();
		bool IsCurrentDownloading();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarlandPakMounter
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USolarlandPakMounter : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnMountCompleted;                                        // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMountFailed;                                           // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E2MY[0x39];                                  // 0x0048(0x0039) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bMounting;                                               // 0x0081(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J4U8[0x6];                                   // 0x0082(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLeggedVehicleMovement
	 * Size -> 0x0758 (FullSize[0x0890] - InheritedSize[0x0138])
	 */
	class USolarLeggedVehicleMovement : public UPawnMovementComponent
	{
	public:
		float                                                      LandingSweepTraceDistance;                               // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LandedVFXHeightThreshold;                                // 0x013C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EPhysicalSurface, struct FVehicleVFX>                 JumpLandedVFXs;                                          // 0x0140(0x0050) Edit, NativeAccessSpecifierPublic
		struct FVehicleLocomotionData                              LocomotionDatas[0x3];                                    // 0x0190(0x0054) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MaxControllableDegreeOffset;                             // 0x01E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WalkableFloorAngle;                                      // 0x01E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GravityZ;                                                // 0x01EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDelayInputForOneFrame;                                  // 0x01F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableProceduralAnimation;                              // 0x01F1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAdvancedProceduralAnimation;                            // 0x01F2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QBST[0x1];                                   // 0x01F3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StepHeight;                                              // 0x01F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StepDistanceForward;                                     // 0x01F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StepDistanceRight;                                       // 0x01FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StepSequencePercent;                                     // 0x0200(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinStepDuration;                                         // 0x0204(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinDistanceToUnplant;                                    // 0x0208(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FixFeetTargetsAfterPercent;                              // 0x020C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FeetTipBonesRotationInterpSpeed;                         // 0x0210(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PG9S[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SpeedCurve;                                              // 0x0218(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  HeightCurve;                                             // 0x02A0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BodyRelativeZCurve;                                      // 0x0328(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      AdditionalBodyRelativeZ;                                 // 0x03B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N5G8[0x4];                                   // 0x03B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveVector* BodyRelativeRotatorCurve;                                // 0x03B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BodyTransformLerpSpeedWithoutDriver;                     // 0x03C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TraceLength;                                             // 0x03C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceCheckMultiplier;                                 // 0x03C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RadiusCheckMultiplier;                                   // 0x03CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BodyAlignTerrainBlendSpeed;                              // 0x03D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BodyZOffsetMultiplier;                                   // 0x03D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxBodyZOffset;                                          // 0x03D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinBodyZOffset;                                          // 0x03DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinBodyAlignPitchDegree;                                 // 0x03E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxBodyAlignPitchDegree;                                 // 0x03E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinBodyAlignRollDegree;                                  // 0x03E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxBodyAlignRollDegree;                                  // 0x03EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkipIkTraceDurationWhenReceiveUpdateFromServer;          // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRotateOnInput;                                          // 0x03F4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_15WS[0x3];                                   // 0x03F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinRotateDegree;                                         // 0x03F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LerpSpeedWithinMinRotateDegree;                          // 0x03FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DegreeForRotatePiAnimation;                              // 0x0400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DegreeForRotateHalfPiAnimation;                          // 0x0404(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFindFloorResult                                    CurrentFloor;                                            // 0x0408(0x0094) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y40H[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLeggedVehiclePostPhysicsTickFunction               PostPhysicsTickFunction;                                 // 0x04A0(0x0030) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YN1C[0xD0];                                  // 0x04D0(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAlwaysCheckFloor;                                       // 0x05A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MUT8[0x3];                                   // 0x05A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxStepHeight;                                           // 0x05A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PerchRadiusThreshold;                                    // 0x05A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PerchAdditionalHeight;                                   // 0x05AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanWalkOffLedges;                                       // 0x05B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIgnoreBaseRotation;                                     // 0x05B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_22MQ[0x2];                                   // 0x05B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LedgeCheckThreshold;                                     // 0x05B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bJumpIgnoreInput;                                        // 0x05B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9QXG[0x3];                                   // 0x05B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      JumpZVelocity;                                           // 0x05BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JumpXYVelocityOnInput;                                   // 0x05C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        JumpFailedTagForNotice;                                  // 0x05C4(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    JumpFailedNoticeID;                                      // 0x05CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AirControl;                                              // 0x05D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AirControlBoostMultiplier;                               // 0x05D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AirControlBoostVelocityThreshold;                        // 0x05D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FallingLateralFriction;                                  // 0x05DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxJumpApexAttemptsPerSimulation;                        // 0x05E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNotifyApex;                                             // 0x05E4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3ZXU[0x3];                                   // 0x05E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      JumpOffJumpZFactor;                                      // 0x05E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MoveSpeedFactorForPiRotation;                            // 0x05EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MoveSpeedFactorForHalfPiRotation;                        // 0x05F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinFootIKEffectorZ;                                      // 0x05F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFootIKEffectorZ;                                      // 0x05F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_43TY[0x4];                                   // 0x05FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVehicleFootIKData>                          FootIKDataArray;                                         // 0x0600(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IKSweepTraceRadius;                                      // 0x0610(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IKEffectorBlendSpeed;                                    // 0x0614(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FloorAndMeshAngleForDoubleSweep;                         // 0x0618(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxBrokenWeakPointForLocomotion;                         // 0x061C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RefreshBoneTransformTimerForDedicatedServer;             // 0x0620(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CYEB[0x4];                                   // 0x0624(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVehicleVFX>                                 WeakPointParticles;                                      // 0x0628(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxJoyStickYaw;                                          // 0x0638(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinJoyStickYaw;                                          // 0x063C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxJoyStickPitch;                                        // 0x0640(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinJoyStickPitch;                                        // 0x0644(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationBlendSpeed;                                      // 0x0648(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFootZValueForAlignGround;                             // 0x064C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                LeaningBone;                                             // 0x0650(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAxis                                                      LeaningBoneForwardAxis;                                  // 0x0658(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KLMM[0x3];                                   // 0x0659(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpeedThresholdForLeaning;                                // 0x065C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeaningAnimationBlendSpeed;                              // 0x0660(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeaningDegree;                                           // 0x0664(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseDegreeForLeaningDegree;                              // 0x0668(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxSimulationIterations;                                 // 0x066C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSimulationTimeStep;                                   // 0x0670(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LandingTimerForAnitCheating;                             // 0x0674(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnablePhysicsCollisionTimer;                             // 0x0678(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1K5E[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* VehicleMesh;                                             // 0x0680(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCapsuleComponent* UpdatedCapsule;                                          // 0x0688(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarVehiclePawn* VehiclePawn;                                             // 0x0690(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent* DeferredUpdatedMoveComponent;                            // 0x0698(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarVehicleStateMachine* VehicleStateMachine;                                     // 0x06A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W5P8[0x1E8];                                 // 0x06A8(0x01E8) MISSED OFFSET (PADDING)

	public:
		void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, class ASolarCharacter* GetOnPlayer);
		void OnCapsuleComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void EnableFootIK(bool bEnable, bool bResetAlpha, bool bResetStandOnStatic);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLeggedVehicleStencilAnimInstance
	 * Size -> 0x0048 (FullSize[0x02B0] - InheritedSize[0x0268])
	 */
	class USolarLeggedVehicleStencilAnimInstance : public UAnimInstance
	{
	public:
		struct FVector                                             FLFootIKEffectorLocation;                                // 0x0268(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             FRFootIKEffectorLocation;                                // 0x0274(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BLFootIKEffectorLocation;                                // 0x0280(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BRFootIKEffectorLocation;                                // 0x028C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FLFootIKAlpha;                                           // 0x0298(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FRFootIKAlpha;                                           // 0x029C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BLFootIKAlpha;                                           // 0x02A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BRFootIKAlpha;                                           // 0x02A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class USolarLeggedVehicleAnimInstance>      VehicleAnim;                                             // 0x02A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarListView
	 * Size -> 0x0020 (FullSize[0x0970] - InheritedSize[0x0950])
	 */
	class USolarListView : public UListView
	{
	public:
		class FScriptMulticastDelegate                             OnFocusLosted;                                           // 0x0950(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnListViewScrolled;                                      // 0x0960(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetClampScoll(bool InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarListViewItem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarListViewItem : public UObject
	{
	public:
		unsigned char                                              UnknownData_O36K[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLobbyAnimInstance
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class USolarLobbyAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_S4IX[0x8];                                   // 0x0268(0x0008) Fix Super Size

	public:
		void ShowRecommendUI(bool bVisible);
		void SetEnableAnimSound(bool InEnableAnimSound);
		void SetCharacterInIdleShow(bool IsPlayingIdleShow);
		void SetCharacterCanBeLooked(bool IsVisible);
		void ResetToIdle();
		void RefreshTick();
		void RandIdleShow();
		void LookAtFunctionSwitcher(bool bOpen);
		void KawaiiPhysicsSwitcher(bool bOpen);
		void GetCameraLocation(const class FString& ModuleCameraName);
		void ExitAnimFinish();
		void AnimPlayIdleShow(bool Enable);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLobbyCharacterData
	 * Size -> 0x0268 (FullSize[0x0298] - InheritedSize[0x0030])
	 */
	class USolarLobbyCharacterData : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     SkinShareImage;                                          // 0x0030(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SkinBackgroundShare;                                     // 0x0048(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     Mesh;                                                    // 0x0060(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     Material;                                                // 0x0078(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<uint16_t, struct FCharacterTransformData>             CharacterTransformData;                                  // 0x0090(0x0050) Edit, NativeAccessSpecifierPublic
		TArray<struct FSoftObjectPath>                             MaterialArray;                                           // 0x00E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CharacterChangeMat[0x50];                                // 0x00F0(0x0050) UNKNOWN PROPERTY: MapProperty
		struct FSoftObjectPath                                     AnimBlueprint;                                           // 0x0140(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     WinAnimation;                                            // 0x0158(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoftObjectPath>                             IdleShowList;                                            // 0x0170(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     LobbyIdleAnimation;                                      // 0x0180(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     AccessoryBlueprint;                                      // 0x0198(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     EnterAnim;                                               // 0x01B0(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ExitAnim;                                                // 0x01C8(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     RefuseAnim;                                              // 0x01E0(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     EncounterIdleAnim;                                       // 0x01F8(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoftObjectPath>                             EncounterIdleShowList;                                   // 0x0210(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     RecommendAnimBlueprint;                                  // 0x0220(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bParameterChanged;                                       // 0x0238(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AYPE[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPSAttachElem>                               PSAttachArray;                                           // 0x0240(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     IdleShowSequence;                                        // 0x0250(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     LeftHandProp;                                            // 0x0268(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     RightHandProp;                                           // 0x0280(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLobbyCharacter
	 * Size -> 0x01B0 (FullSize[0x0438] - InheritedSize[0x0288])
	 */
	class ASolarLobbyCharacter : public APawn
	{
	public:
		unsigned char                                              UnknownData_U3X0[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DissolveCurvePath[0x28];                                 // 0x0290(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DissolveMatPath[0x28];                                   // 0x02B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FresnelCurvePath[0x28];                                  // 0x02E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FresnelMatPath[0x28];                                    // 0x0308(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              SwitchParticleEffectPath[0x28];                          // 0x0330(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_K60L[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwitchEffectInterval;                                    // 0x0360(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SelfDelayShowSeconds;                                    // 0x0364(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_18FE[0x8];                                   // 0x0368(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x0378(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* SkeletalMesh;                                            // 0x0380(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* MirrorSkeletalMesh;                                      // 0x0388(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor* LobbyAccessory;                                          // 0x0390(0x0008) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor* MirrorLobbyAccessory;                                    // 0x0398(0x0008) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* DissovleSkeletalMesh;                                    // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* FresnelSkeletalMesh;                                     // 0x03A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* MirrorDissovleSkeletalMesh;                              // 0x03B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* MirrorFresnelSkeletalMesh;                               // 0x03B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* DissovleMat;                                             // 0x03C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* FresnelMat;                                              // 0x03C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector* DissovleCurve;                                           // 0x03D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector* FresnelCurve;                                            // 0x03D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1JK4[0x8];                                   // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInstanceDynamic*>                    DynamicDissovleMats;                                     // 0x03E8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    DynamicFresnelMats;                                      // 0x03F8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3RAH[0x14];                                  // 0x0408(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCanPlayVoiceInIdleShow;                                 // 0x041C(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOpenMirror;                                             // 0x041D(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CharacterIsVisiblity;                                    // 0x041E(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M8OY[0x1];                                   // 0x041F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurSkinId;                                               // 0x0420(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurChunkId;                                              // 0x0424(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPlayIdleShow;                                         // 0x0428(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4UG7[0x7];                                   // 0x0429(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* AnimBPClass;                                             // 0x0430(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateLobbyAccessory(const class FString& InAccessoryPath);
		void StopPlayIdleShow();
		void StartPlaySwitchEffect();
		void StartPlayFresnelSwitchEffect();
		void StartPlayDissovleSwitchEffect();
		void SetSwitchEffetComp(class USkeletalMeshComponent* EffectComp, class USkeletalMeshComponent* DefaultComp, class UMaterialInterface* EffectMat, TArray<class UMaterialInstanceDynamic*>* DyniamEffectMats);
		void SetPropVisiable(bool isVisiable);
		void SetMeshVisibility(bool IsVisible);
		void SetIsPlayIdleShow(bool InIsPlayIdleShow);
		void SetCharacterRotationByDelta(float InDeltaYaw);
		void SetCharacterMeshAndMat(int32_t InSkinID, bool IsForce);
		void SetCharacterByLoadedData(class USolarLobbyCharacterData* InData);
		void PlayIdleShow();
		void OpenLookAtAndSetPostProcessABPCameraLocation(bool bOpen, const class FString& ModuleCameraName);
		bool IsCanOpenMirror();
		bool IsCanOpenChangeAnim();
		void InitSolarAkGameObject(class UActorComponent* Component, bool bReset);
		void InitCharacterByLua();
		class USolarAkGameObject* GetSolarAkGameObject();
		class USolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int32_t InSkinID, bool IsLowRes);
		bool GetIsPlayIdleShow();
		class USolarLobbyAnimInstance* GetCharAnimInstance();
		void DetachCharacterSocketPS();
		void DelayShowSelf(class USolarLobbyCharacterData* InData);
		void ClearSwitchEffect();
		void ClearCharacterByLua();
		void AttachCharacterSocketPS(TArray<struct FPSAttachElem>* PSAttachArray);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLobbyPlayerController
	 * Size -> 0x0010 (FullSize[0x05B8] - InheritedSize[0x05A8])
	 */
	class ASolarLobbyPlayerController : public APlayerController
	{
	public:
		unsigned char                                              UnknownData_3LZA[0x10];                                  // 0x05A8(0x0010) MISSED OFFSET (PADDING)

	public:
		void SolarGM_StartWarmup();
		int32_t GetTotalFrameCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLocalizationToolsWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USolarLocalizationToolsWidget : public USolarExternalToolsWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLockSettings
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USolarLockSettings : public USaveGame
	{
	public:
		TMap<int32_t, bool>                                        FeaturesLockStatus;                                      // 0x0028(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		void CopyFrom(class USolarLockSettings* InLockSettings);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLockSettingsMgr
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USolarLockSettingsMgr : public UObject
	{
	public:
		class USolarLockSettings* CurLockSettings;                                         // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarGameInstanceBase* SolarGameInstance;                                       // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AHDZ[0x10];                                  // 0x0038(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarLockSettings* DefaultLockSettings;                                     // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SaveLockSettings();
		void LoadLockSettings();
		void Init(class USolarGameInstanceBase* GameInstance);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLoginManager
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarLoginManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_9R2F[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		void InitFromLogin();
		void Init(class USolarGameInstanceBase* GameInstance);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUploaderSetting
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USolarUploaderSetting : public UDeveloperSettings
	{
	public:
		class FString                                              SolarLogServerUrl;                                       // 0x0038(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAutoUpload;                                       // 0x0048(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SX0S[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLootZone
	 * Size -> 0x00B0 (FullSize[0x02D8] - InheritedSize[0x0228])
	 */
	class ASolarLootZone : public AActor
	{
	public:
		unsigned char                                              UnknownData_MUFD[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarItemSpawner*>                           OwnningItemSpawners;                                     // 0x0230(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class ASolarItemSpawner*, struct FItemSpawnerGraphNode> SpawnerPathGraph;                                        // 0x0240(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic
		TArray<struct FLootZonePath>                               LootZonePathGraph;                                       // 0x0290(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxRadius;                                               // 0x02A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DG15[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              OwnningChargingPiles[0x10];                              // 0x02A8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              OwnningSniperPosition[0x10];                             // 0x02B8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<struct FVector>                                     OwnningPOIs;                                             // 0x02C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLowMemoryDeviceSettings
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USolarLowMemoryDeviceSettings : public UDeveloperSettings
	{
	public:
		bool                                                       EnableLowMemDevice;                                      // 0x0038(0x0001) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableLowMemDeviceDebugMode;                             // 0x0039(0x0001) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_91WO[0x6];                                   // 0x003A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      AdditionalCommand;                                       // 0x0040(0x0010) Edit, ZeroConstructor, Transient, Config, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLuaHelper
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USolarLuaHelper : public UObject
	{
	public:
		unsigned char                                              UnknownData_PNCW[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* KeyMappingInfoDataTable;                                 // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* KeyMappingDisplayInfoDataTable;                          // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarPlayerReport>                          SettleTeamReports;                                       // 0x0040(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool STATIC_WriteFile(const class FString& FilePath, const class FString& Content);
		void STATIC_UELogWarning(const class FString& str);
		void STATIC_UELogNetwork(const class FString& str);
		void STATIC_UELogError(const class FString& str);
		void STATIC_UELog(const class FString& str);
		class UObject* STATIC_TryLoadBySoftObjectPath(const struct FSoftObjectPath& ObjectPath);
		bool STATIC_TryConvertFilenameToLongPackageName(const class FString& InFilename, class FString* OutPackageName);
		void STATIC_StaticSetGlobalRTPCValue(const class FString& RTPC, float Value, int32_t InterpolationTimeMs);
		void STATIC_StaticSetAkState(const class FName& StateGroup, const class FName& State);
		void STATIC_StaticSetAkBusConfig(const class FString& BusName, EAkChannelConfiguration ChannelConfiguration);
		void STATIC_StaticPostAkEventByNameGlobal(const class FString& InEventName);
		int32_t STATIC_StaticPostAkEventByNameAndWaitForEnd(class UObject* WorldContextObject, const class FString& InEventName, const struct FLatentActionInfo& LatentInfo);
		int32_t STATIC_StaticPostAkEventByName(const class FString& InEventName);
		void STATIC_SolarSetVSyncEnabled(bool bEnable);
		void STATIC_SolarSetShadowQuality(int32_t InQuality);
		void STATIC_SolarSetMSAAEnabled(bool bEnable);
		void STATIC_SolarSetGraphicsQuality(ESolarGraphicsQualityLevel InLevel);
		void STATIC_SolarSetFrameRate(ESolarFrameRateLevel FrameRateLevel);
		void STATIC_SolarSetColorGrading(ESolarColorTheme InTheme);
		void STATIC_SolarRefreshContentScaleFactorLevel();
		bool STATIC_SolarGetTextureStreamingEnable();
		void STATIC_SolarEnableTextureStreaming(bool bEnable);
		void STATIC_SolarEnableDynamicShadow(bool bEnable);
		int32_t STATIC_ShouldEnterLobby();
		void STATIC_SetSwitch(class USolarAkGameObject* SolarAkGameObject, const class FString& SwitchGroup, const class FString& SwitchState);
		void STATIC_SetSkeletalMeshMatFromConfig(class USkeletalMeshComponent* SkeletalMeshComponent, const struct FSoftObjectPath& NewMatResPath, int32_t ElementIndex);
		void STATIC_SetSkeletalMeshMat(class USkeletalMeshComponent* SkeletalMeshComponent, const class FString& NewMatResPath, int32_t ElementIndex);
		void STATIC_SetSkeletalMeshFromConfig(class USkeletalMeshComponent* SkeletalMeshComponent, const struct FSoftObjectPath& NewMeshResPath);
		void STATIC_SetSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent, const class FString& NewMeshResPath);
		void STATIC_SetSkeletalAnimBPFromConfig(class USkeletalMeshComponent* SkeletalMeshComponent, const struct FSoftObjectPath& NewAnimBPResPath);
		void STATIC_SetSkeletalAnimBP(class USkeletalMeshComponent* SkeletalMeshComponent, const class FString& NewAnimBPResPath);
		void SetRenderBatch(int32_t Mode);
		void SetPlayerSettlementReport(const struct FSolarGameModeInfo& GameInfo);
		void SetPlayerNameColorByVIPState(class UTextBlock* TextWidget, unsigned char VipType);
		void STATIC_SetPatchBuildVersion(const class FString& Version);
		void STATIC_SetEnableSoftwareCursorWidgets(bool bIsEnabled);
		void STATIC_SetCurThirdPartyInfo(const class FString& InCurThirdPartyInfo);
		void STATIC_SetChangeListNumber(const class FString& ChangeListNum);
		void STATIC_SetActorYawByDeltaRotatedImpl(class AActor* InActor, float InDeltaYaw, bool bCheckCharaCanBeRotated);
		void STATIC_SetActorYawByDelta(class AActor* InActor, float InDeltaYaw);
		void STATIC_ResumeBatching();
		class UObject* STATIC_ResolveSoftObjectPath(const struct FSoftObjectPath& ObjectPath);
		void ReloadVoiceBanks();
		class FString STATIC_ReadFileContent(const class FString& FilePath);
		int32_t STATIC_PostAkEventByName(class USolarAkGameObject* SolarAkGameObject, const class FString& InEventName);
		void PlayVoiceLocaly(int32_t CharacterId, int32_t SkinId, EPassiveTriggeredVoice Type);
		void OnBroadcastModeChanged(bool bOpen);
		bool STATIC_MoveFile(const class FString& DestFilePath, const class FString& SrcFilePath);
		class UObject* STATIC_LoadObject_WithOuter(class UObject* Outer, const class FString& ObjectName);
		TArray<unsigned char> STATIC_LoadFileToArray(const class FString& FilePath);
		bool IsWorldTearingDown();
		bool STATIC_IsLocalBuild();
		bool STATIC_IsInputTypeGamepad(class APlayerController* InPlayerController);
		bool IsBattlePassInfoUpdated(class ASolarPlayerState* InPlayerState);
		bool STATIC_HasReviveItemManager(class UObject* InWorldContext);
		class FString STATIC_HashMd5(const class FString& InputText);
		int64_t STATIC_GetUtcNowTimestamp();
		class FString GetTaskDesc(int32_t TaskID);
		class FString STATIC_GetSourceCommitHash();
		class FString STATIC_GetSourceBuildVersion();
		class ASolarGameState* GetSolarGameState();
		class FString STATIC_GetShortName(const class FString& LongName);
		TArray<class FString> STATIC_GetServersUrlList();
		class FString STATIC_GetServerEnvTag();
		struct FVector2D STATIC_GetScreenSizeXY();
		class FString STATIC_GetPatchBuildVersion();
		int32_t GetMonsterDropItemOutcomeID(int32_t MonsterAICharID, int32_t StrengthGrade);
		int32_t GetMonsterDeathBoxID(int32_t MonsterAICharID);
		class FString STATIC_GetMainBuildVersion();
		class ASolarReplayPlayerController* GetLocalSolarReplayPlayerController();
		class ASolarPlayerState* GetLocalSolarPlayerState();
		class ASolarPlayerController* GetLocalSolarPlayerController();
		class APlayerController* GetLocalPlayerController();
		struct FKey STATIC_GetLeftMouseKeyDown();
		void GetKeyMappingInfoByRowName(const class FString& RowName, struct FKeyMappingRowInfo* OutClassInfo);
		class FString STATIC_GetHostByDomainName(const class FString& DomainName, bool bAppendPort);
		class FString GetGameModeParam(int32_t GameModeId, const class FString& Key);
		class FString STATIC_GetExtBackdoorUrl();
		class UEmojiBubbleSubsystem* STATIC_GetEmojiBubbleSubsystem(class USolarGameInstanceBase* GI);
		bool STATIC_GetCurrentInputType(class APlayerController* InPlayerController, ECommonInputType* OutInputType);
		class UCommonInputSubsystem* STATIC_GetCommonInputSubsystem(class APlayerController* PlayerController);
		class FString STATIC_GetClipboardPasteText();
		class FString STATIC_GetChangeListNumber();
		class FString STATIC_GetBuildVariation();
		class FString STATIC_GetBuildMode();
		class FString GetBroadcastPlayerName(const class FString& SolarPlayerID);
		int32_t GetBroadcastPlayerId(int32_t PlayerId);
		class FString GetBroadcastHeroName(const class FString& SolarPlayerID);
		struct FVector STATIC_GetBoneLocationByName(class USkeletalMeshComponent* SkeletalMeshComponent, const class FName& BoneName, EBoneSpaces Space);
		class FString STATIC_GetBackdoorUrl();
		class FString STATIC_GetAndroidPkgName();
		TArray<class FString> STATIC_GetAllLoadedPackagesPath();
		void GetAllKeyMappingInfoFromTable(TArray<struct FKeyMappingRowInfo>* OutKeyMappingInfo);
		class FString STATIC_GetActualBuildVersion();
		class FString STATIC_GetAbsolutePathForWrite(const class FString& FilePath);
		class FString STATIC_GetAbsolutePathForRead(const class FString& FilePath);
		struct FColor STATIC_FromHex(const class FString& HexString);
		TArray<class FString> STATIC_FindFiles(const class FString& Directory, const class FString& FileExtension);
		void STATIC_EndOfPlayInEditor(class UObject* InWorldContext, const class FString& EndReason, bool bPopMsgBox);
		void DoLuaDebug(TArray<class FString> cmdArray);
		bool STATIC_DirectoryExist(const class FString& TargetDirectory);
		bool STATIC_DeleteFile(const class FString& FilePath);
		bool STATIC_DeleteDirectoryRecursively(const class FString& Path);
		bool STATIC_DeleteDirectory(const class FString& Path);
		class FString STATIC_DecodeFile(const class FString& InFilePath);
		class ULevelStreamingDynamic* STATIC_CreateStreamInstance(class UWorld* World, const class FString& PackageName);
		class AActor* CreateEmptySkeletalMeshActor();
		class UMaterialInstanceDynamic* CreateDynamicMaterial(class ACameraActor* CameraActor, const class FString& TemplateMatResPath, int32_t RTSizeX, int32_t RTSizeY, ETextureRenderTargetFormat RenderTargetFormat);
		bool STATIC_CreateDirectoryTree(const class FString& Path);
		bool STATIC_CreateDirectory(const class FString& Path);
		bool STATIC_CopyFile(const class FString& DestFilePath, const class FString& SrcFilePath);
		void ConvertKeyMappingName(const struct FKey& Key, class FString* OutDisplayName);
		void STATIC_CloseVirtualKeyboard();
		void STATIC_ClipboardCopyText(const class FString& Content);
		void STATIC_ClearSkeletalMeshMat(class USkeletalMeshComponent* SkeletalMeshComponent);
		bool STATIC_CheckIsNeedDownLoad(int32_t ChunkID);
		void STATIC_ApplyVehicleSkinPreview(class UObject* PreviewVehicleObj, int32_t SkinId, int32_t PageType, const struct FVector& DefaultLoc);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.LuaErrorWidgetBase
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ULuaErrorWidgetBase : public UUserWidget
	{
	public:
		void ShowLuaError(TArray<class FString> LuaErrorMsgs);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarLuaManager
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class USolarLuaManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_MM16[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHandleLuaException;                                    // 0x0030(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1KHS[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     LuaErrorWidgetPath;                                      // 0x0050(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XRBY[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULuaErrorWidgetBase* LuaErrorWidget;                                          // 0x0070(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R2L9[0x60];                                  // 0x0078(0x0060) MISSED OFFSET (PADDING)

	public:
		void SetLuaErrorPopWidget(class ULuaErrorWidgetBase* Widget);
		void OnLuaContextCleanup(bool bFullCleanup);
		ESolarBuildConfiguration STATIC_GetBuildConfiguration();
		void AddToDoNotShowAgainList(const class FString& Msg);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMainPlayerModel
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarMainPlayerModel : public UObject
	{
	public:
		unsigned char                                              UnknownData_BWBJ[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		void SyncFromPlayerData(int32_t InAccountFlag);
		bool IsAccountFlagOn();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMapManager
	 * Size -> 0x0190 (FullSize[0x01C0] - InheritedSize[0x0030])
	 */
	class USolarMapManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_O5TM[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMapData                                            MapData;                                                 // 0x0038(0x003C) BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FVehicleData                                        VehicleData;                                             // 0x0074(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FMiniMapAirlineData                                 CurAirlineData;                                          // 0x0084(0x0030) BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             AirlineActorLoc;                                         // 0x00B4(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrentMapID;                                            // 0x00C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OLK6[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CurrentMapName;                                          // 0x00C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PVM3[0x70];                                  // 0x00D8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVisualSoundConfig* BattlePromptConfig;                                      // 0x0148(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameModeGlobalSetting* GameModeGlobalSetting;                                   // 0x0150(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ULLJ[0x50];                                  // 0x0158(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBattlePromptData                                   BattlePromptData;                                        // 0x01A8(0x0018) Protected, NativeAccessSpecifierProtected

	public:
		struct FVector2D WorldLocationToMiniMap(const struct FVector& WorldLocation);
		float WorldLengthToMiniMap(float WorldLength);
		void UnInitMapData();
		void ReceiveInitMapData(int32_t MapID);
		struct FVector2D Normal2D(const struct FVector2D& VectorToTransForm);
		struct FVector MiniMapToWorldLocation(const struct FVector2D& PositionXY, float Z);
		bool IsOutOfBound(const struct FVector2D& PlayerNavPos);
		bool STATIC_IsMiniMapAirlineDataValid(const struct FMiniMapAirlineData& InData);
		void InitMapData(int32_t MapID);
		class ASolarCharacter* GetViewportFocusedCharacter();
		bool GetSafeAreaInfo(struct FSafeAreaMapInfo* OutAreaInfo);
		struct FVector GetRandomVectorFromMapDarkData(class UObject* WorldContextObject, EMapDarkDataType InType, bool GetWhiteArea);
		class UCurveFloat* GetMiniMapFOVCurve(float InRadius);
		int32_t GetLenegthFromPlayerToMarkPoint(const struct FVector& MarkPosRealWorld, const struct FVector& CurrentPlayerLocation);
		bool GetIntersectionOnMapFrame(const struct FVector2D& TeamMatePos, const struct FVector2D& MapAPos, float MapFrameHeight, float MapFrameWidth, struct FVector2D* InterSecionList, EDirection* CrossDirection);
		float GetDistanceToSafeArea(const struct FSafeAreaMapInfo& AreaInfo, const struct FVector& FromLocation);
		int32_t GetCurrentMapID();
		struct FMiniMapAirlineData GetCurAirlineData();
		class UVisualSoundConfig* GetBattlePromptConfig();
		struct FVector2D FixNavPos(const struct FVector2D& PlayerNavPos);
		bool CheckMapDarkDataWithVector(const struct FVector& InVector, EMapDarkDataType InType, bool GetWhiteArea);
		bool CheckIfMarkedPointValid(const struct FVector2D& InMarkedPoint);
		float CalculatePoisonDistance(const struct FSafeAreaMapInfo& AreaInfo, const struct FVector& FromLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMapSelectPoint
	 * Size -> 0x0138 (FullSize[0x03D0] - InheritedSize[0x0298])
	 */
	class ASolarMapSelectPoint : public ASolarMapElementBase
	{
	public:
		int32_t                                                    MapID;                                                   // 0x0298(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FMapSelectPointCellConfig                           MapCellConfig;                                           // 0x029C(0x0014) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		class UClass* SelectPointNoticeMapWidgetClass;                         // 0x02B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* CellWidgetClass;                                         // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarMapManager* MapManager;                                              // 0x02C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarGameMode_ElementManager* ElementManager;                                          // 0x02C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMapSelectPointNoticeMap* SelectPointNoticeMap;                                    // 0x02D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FString, class UMapSelectPointCellWidget*>      WidgetInCells;                                           // 0x02D8(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6TXH[0x50];                                  // 0x0328(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, struct FMapSelectPointCellData>        AllCellsData;                                            // 0x0378(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T0X2[0x8];                                   // 0x03C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetCellSelectionAccess(const struct FMapSelectPointCellAddress& InCellAdr, EMapCellSelectionAccess InNewState);
		void ServerSetCellSelectionAccess(const class FString& InAddress, EMapCellSelectionAccess InNewState);
		void OnNoticeMapInitialized();
		void OnInitSelectPoint(int32_t InMapID);
		void OnCellBeSelected(const struct FMapSelectPointCellAddress& CellAddress, bool IsSelected);
		void InitSelectPointData();
		class UUserWidget* GetWidgetInCell(const struct FMapSelectPointCellAddress& InCellAdr);
		class UUserWidget* GetSelectPointNoticeMapWidget();
		TArray<class ASolarPlayerStart*> GetPlayerStartsInCell(const struct FMapSelectPointCellAddress& InCellAdr, TArray<class FString> InTags);
		EMapCellSelectionAccess GetCellSelectState(const struct FMapSelectPointCellAddress& InCellAdr);
		bool GetCellPositionOnBigMap(const struct FMapSelectPointCellAddress& InCellAdr, struct FVector2D* LU_Pos, struct FVector2D* RD_Pos);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMapVehicleObject
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USolarMapVehicleObject : public UObject
	{
	public:
		unsigned char                                              SoftVehicleIcon[0x28];                                   // 0x0028(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMapVehicleTabSlot
	 * Size -> 0x0010 (FullSize[0x0358] - InheritedSize[0x0348])
	 */
	class USolarMapVehicleTabSlot : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_ODYD[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage* Img_Car;                                                 // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetEmpty(bool bEmpty);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMapVehicleWidget
	 * Size -> 0x0078 (FullSize[0x03C0] - InheritedSize[0x0348])
	 */
	class USolarMapVehicleWidget : public USolarUserWidget
	{
	public:
		class UButton* Btn_EnableTaskPanel;                                     // 0x0348(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTileView* VehicleList;                                             // 0x0350(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExpand;                                                 // 0x0358(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_USW4[0x7];                                   // 0x0359(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              VehicleSpawnerTypeIcons[0x50];                           // 0x0360(0x0050) UNKNOWN PROPERTY: MapProperty
		TArray<class UObject*>                                     MapVehicleObjects;                                       // 0x03B0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetExpand(bool bInExpand);
		void OnBtnEnableTaskPanelClicked();
		void InitVehicleList();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMath
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarMath : public UObject
	{
	public:
		float STATIC_Clamp01(float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMetaAttributeSet
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USolarMetaAttributeSet : public USolarAttributeSet
	{
	public:
		struct FGameplayAttributeData                              Damage;                                                  // 0x0030(0x0010) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              ShieldDamage;                                            // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.MobilePlatform
	 * Size -> 0x0068 (FullSize[0x0290] - InheritedSize[0x0228])
	 */
	class AMobilePlatform : public AActor
	{
	public:
		class USplineComponent* SplineComponent;                                         // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* MeshComponent;                                           // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FMobilePlatformSplinePoint>                  PointInfos;                                              // 0x0238(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConfigDefaultSpeed;                                      // 0x0248(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ConfigDefaultDelayTime;                                  // 0x024C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentSpeed;                                            // 0x0250(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentDistance;                                         // 0x0254(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalDistance;                                           // 0x0258(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayTime;                                               // 0x025C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PointNum;                                                // 0x0260(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PointIndex;                                              // 0x0264(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MoveVecter;                                              // 0x0268(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MeshExtend;                                              // 0x0274(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AWN6[0x10];                                  // 0x0280(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateRotation(float DeltaSeconds);
		void UpdateOverlapActor(float DeltaSeconds, class AActor* InActor);
		void UpdateLocation(float DeltaSeconds);
		void UpdateCurrentDistance(float DeltSeconds);
		void OnEnterPoint();
		void OnEndOverlap(class AActor* ThisActor, class AActor* OtherActor);
		void OnBeginOverlap(class AActor* ThisActor, class AActor* OtherActor);
		void Init();
		class UShapeComponent* GetCollisionComponent();
		bool CheckNeedOverlap(float DeltaSeconds, class AActor* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarModMagnitudeCalc
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class USolarModMagnitudeCalc : public UGameplayModMagnitudeCalculation
	{
	public:
		class UClass* CDOProxyClass;                                           // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UModMagnitudeCalcProxy* CDOProxy;                                                // 0x0048(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_01S0[0x18];                                  // 0x0050(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarMoveToCostSecAction
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class USolarMoveToCostSecAction : public UBlueprintAsyncActionBase
	{
	public:
		unsigned char                                              UnknownData_2VLV[0x48];                                  // 0x0030(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCalcMoveToCostSuc;                                     // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCalcMoveToCostFailed;                                  // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		class USolarMoveToCostSecAction* STATIC_CalcMoveToCostSec(class UObject* WorldContextObject, class ASolarBotAIController* BotController, const struct FVector& MoveToLocation, class AActor* MoveToActor, float AcceptRadius, bool bAllowPartialPath, bool bProjectGoalLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavArea_Jet
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USolarNavArea_Jet : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavArea_Vault
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USolarNavArea_Vault : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavArea_Water
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USolarNavArea_Water : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavLink_Jet
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class ASolarNavLink_Jet : public ANavLinkProxy
	{
	public:
		float                                                      JetTimeout;                                              // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNoFail;                                                 // 0x027C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMarkInValidAfterFailedUse;                              // 0x027D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZYVS[0x12];                                  // 0x027E(0x0012) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavLink_Vault
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class ASolarNavLink_Vault : public ANavLinkProxy
	{
	public:
		float                                                      VaultTimeOut;                                            // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNoFail;                                                 // 0x027C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMarkInValidAfterFailedUse;                              // 0x027D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D555[0x2];                                   // 0x027E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDistancePrecision;                                    // 0x0280(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R6KY[0x1C];                                  // 0x0284(0x001C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavLinkCustomComponent
	 * Size -> 0x0010 (FullSize[0x01A0] - InheritedSize[0x0190])
	 */
	class USolarNavLinkCustomComponent : public UNavLinkCustomComponent
	{
	public:
		unsigned char                                              UnknownData_YD9F[0x10];                                  // 0x0190(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavLinkManager
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class ASolarNavLinkManager : public ANavLinkProxy
	{
	public:
		class USolarNavLinkRegisterComponent* SolarSmartLinkComp;                                      // 0x0278(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9FAG[0x10];                                  // 0x0280(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavLinkRegisterComponent
	 * Size -> 0x00D0 (FullSize[0x0260] - InheritedSize[0x0190])
	 */
	class USolarNavLinkRegisterComponent : public UNavLinkCustomComponent
	{
	public:
		TMap<uint32_t, struct FSmartLinkInstance>                  SmartLinkMap;                                            // 0x0190(0x0050) Edit, EditConst, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L66Q[0x50];                                  // 0x01E0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ENavLinkType                                               LinkType;                                                // 0x0230(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4KE1[0x3];                                   // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             VaultPoint;                                              // 0x0234(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             VaultDirect;                                             // 0x0240(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVaultType                                                 VaultAnimate;                                            // 0x024C(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V1P9[0x3];                                   // 0x024D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             VaultLandPoint;                                          // 0x0250(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4XIU[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavModifierComponent
	 * Size -> 0x0010 (FullSize[0x0150] - InheritedSize[0x0140])
	 */
	class USolarNavModifierComponent : public UNavModifierComponent
	{
	public:
		unsigned char                                              UnknownData_EHE4[0x10];                                  // 0x0140(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnVehicleRootHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnDriverGetOnVehicle(int32_t GetOnSeatIndex, class ASolarCharacter* GetOnPlayer);
		void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, class ASolarCharacter* GetOffPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavQueryFilter
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class USolarNavQueryFilter : public UNavigationQueryFilter
	{
	public:
		uint32_t                                                   MaxSearchNode;                                           // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VK2O[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavQueryFilter_ExcludeJet
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USolarNavQueryFilter_ExcludeJet : public USolarNavQueryFilter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavQueryFilter_JetInvalid
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USolarNavQueryFilter_JetInvalid : public USolarNavQueryFilter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNavWeedActor
	 * Size -> 0x0020 (FullSize[0x0248] - InheritedSize[0x0228])
	 */
	class ASolarNavWeedActor : public ATargetPoint
	{
	public:
		unsigned char                                              UnknownData_NA0D[0x20];                                  // 0x0228(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNetMovementComponent
	 * Size -> 0x05F0 (FullSize[0x06A0] - InheritedSize[0x00B0])
	 */
	class USolarNetMovementComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JHFF[0x34];                                  // 0x00B0(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InterpolatedBackTime;                                    // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ServerBufferCheckMinSpeed;                               // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ServerBufferIgnoreCheckTimer;                            // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AtRestThresholdCount;                                    // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EExtrapolationMode                                         ExtrapolationMode;                                       // 0x00F4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUseExtrapolationTimeLimit;                              // 0x00F5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7DTR[0x2];                                   // 0x00F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExtrapolationTimeLimit;                                  // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUseExtrapolationDistanceLimit;                          // 0x00FC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EFDX[0x3];                                   // 0x00FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExtrapolationDistanceLimit;                              // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SendPositionThreshold;                                   // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SendRotationThreshold;                                   // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SendVelocityThreshold;                                   // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SendAngularVelocityThreshold;                            // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ResetTimeOffsetsThreshold;                               // 0x0114(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      UsingRepLocationThreshold;                               // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      LinearVelcolityForPositionThreshold;                     // 0x011C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ReceivedPositionThreshold;                               // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AngularVelocityForRotationThreshold;                     // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ReceivedRotationThreshold;                               // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PositionSnapThreshold;                                   // 0x012C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RotationSnapThreshold;                                   // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PositionLerpSpeed;                                       // 0x0134(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RotationLerpSpeed;                                       // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SpeedOfLerp;                                             // 0x013C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESyncMode                                                  SyncPosition;                                            // 0x0140(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESyncMode                                                  SyncRotation;                                            // 0x0141(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESyncMode                                                  SyncVelocity;                                            // 0x0142(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESyncMode                                                  SyncAngularVelocity;                                     // 0x0143(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bSyncDesiredYaw;                                         // 0x0144(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       isPositionCompressed;                                    // 0x0145(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       isRotationCompressed;                                    // 0x0146(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       isVelocityCompressed;                                    // 0x0147(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       isAngularVelocityCompressed;                             // 0x0148(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0ZDR[0x3];                                   // 0x0149(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SendRate;                                                // 0x014C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TimeSmoothing;                                           // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUsingOriginRebasing;                                    // 0x0154(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAlwaysSendOrigin;                                       // 0x0155(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O874[0x3A];                                  // 0x0156(0x003A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimitiveComponent* PrimitiveComponent;                                      // 0x0190(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent* RelativeComponent;                                       // 0x0198(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarVehiclePawn* PreviousBaseVehicleActor;                                // 0x01A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5W5L[0x368];                                 // 0x01A8(0x0368) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AtRestPositionThreshold;                                 // 0x0510(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AtRestRotationThreshold;                                 // 0x0514(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XFZA[0x10];                                  // 0x0518(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarVehiclePawn* VehiclePawn;                                             // 0x0528(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LTFT[0x170];                                 // 0x0530(0x0170) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNightComesActor
	 * Size -> 0x0198 (FullSize[0x0578] - InheritedSize[0x03E0])
	 */
	class ASolarNightComesActor : public ASummonItemBase
	{
	public:
		float                                                      BeginEffectDuration;                                     // 0x03E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OngoingEffectDuration;                                   // 0x03E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OngoingEffectClearDelay;                                 // 0x03E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndEffectDuration;                                       // 0x03EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VisualEffectBeginDelay_AfterBeginEffect;                 // 0x03F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VisualEffectEndDelay_AfterEndEffect;                     // 0x03F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* BeginEffect;                                             // 0x03F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* OngoingEffect;                                           // 0x0400(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* EndEffect;                                               // 0x0408(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* ItemEffect;                                              // 0x0410(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* ItemExplodeEffect;                                       // 0x0418(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* ItemDisappearEffect;                                     // 0x0420(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EffectRadius;                                            // 0x0428(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NightfellRadius;                                         // 0x042C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NightFellRadius_WithBuff;                                // 0x0430(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NightFellCapacity;                                       // 0x0434(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NightfellFadeness;                                       // 0x0438(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I8DG[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* ItemFellRadiusCurve;                                     // 0x0440(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowDebug;                                              // 0x0448(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOpenVisualFell;                                         // 0x0449(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3L0U[0x2];                                   // 0x044A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UpdateEffectingCharacterInterval;                        // 0x044C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* StaticMeshCollision;                                     // 0x0450(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* ItemSkeletalMesh;                                        // 0x0458(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             EffectScale;                                             // 0x0460(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IKXT[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimationAsset* StartAnim;                                               // 0x0470(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              StartLoopSound;                                          // 0x0478(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndLoopSound;                                            // 0x0488(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EnterSound;                                              // 0x0498(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ExitSound;                                               // 0x04A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ExplodeSound;                                            // 0x04B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              HitBy1pSound;                                            // 0x04C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeshVisibleDelay;                                        // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PerspectiveMeshSortPriority;                             // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* StencilMaterial;                                         // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* NightComesContinousEffect;                               // 0x04E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ENightComesState                                           CurrentState;                                            // 0x04F0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ER2G[0x37];                                  // 0x04F1(0x0037) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* BeginEffectHandle;                                       // 0x0528(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent* OngingEffectHandle;                                      // 0x0530(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent* EndEffectHandle;                                         // 0x0538(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent* ItemEffectHandle;                                        // 0x0540(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarCharacter* InstigatorCharacter;                                     // 0x0548(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JZWZ[0x10];                                  // 0x0550(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      EffectingActors;                                         // 0x0560(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8JN8[0x8];                                   // 0x0570(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_NightComesState();
		void OnMeshVisible();
		void OnGoingPhase();
		void OnEndPhase();
		void OnComponentEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnBeginPhase();
		void LocalRemoveSelf();
		void EndVisualEffect();
		void BeginVisualEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNoSpringCameraComponent
	 * Size -> 0x0028 (FullSize[0x09E0] - InheritedSize[0x09B8])
	 */
	class USolarNoSpringCameraComponent : public USolarCameraComponent
	{
	public:
		unsigned char                                              UnknownData_A3KH[0x8];                                   // 0x09B8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_8UXD[0x20];                                  // 0x09C0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarNPC
	 * Size -> 0x0018 (FullSize[0x04E0] - InheritedSize[0x04C8])
	 */
	class ASolarNPC : public ACharacter
	{
	public:
		class USphereComponent* InteractionCollision;                                    // 0x04C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarCharacter* LookAtPlayer;                                            // 0x04D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LookYaw;                                                 // 0x04D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N8KP[0x4];                                   // 0x04DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarObjGameplayAbility
	 * Size -> 0x0018 (FullSize[0x0418] - InheritedSize[0x0400])
	 */
	class USolarObjGameplayAbility : public UGameplayAbility
	{
	public:
		class UClass* ActivateEffect;                                          // 0x0400(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CostEnergy;                                              // 0x0408(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y418[0xC];                                   // 0x040C(0x000C) MISSED OFFSET (PADDING)

	public:
		class ASolarInteractableActor* GetAbilityInstigator();
		class AActor* GetAbilityEffectUser();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarObjAbilityRadar
	 * Size -> 0x0010 (FullSize[0x0428] - InheritedSize[0x0418])
	 */
	class USolarObjAbilityRadar : public USolarObjGameplayAbility
	{
	public:
		class UClass* RadarClass;                                              // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LifeTime;                                                // 0x0420(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G4YC[0x4];                                   // 0x0424(0x0004) MISSED OFFSET (PADDING)

	public:
		void K2_ApplyRadarAbility(class ASolarRadarBase* SpawnedRadar);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarObjAbilitySystemComponent
	 * Size -> 0x0050 (FullSize[0x1348] - InheritedSize[0x12F8])
	 */
	class USolarObjAbilitySystemComponent : public UAbilitySystemComponent
	{
	public:
		unsigned char                                              UnknownData_7RE3[0x10];                                  // 0x12F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               NotifyTags;                                              // 0x1308(0x0020) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FGameplayTagContainer                               RepNotifiedTags;                                         // 0x1328(0x0020) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected

	public:
		void OnRep_RepNotifiedTags(const struct FGameplayTagContainer& Previous);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarObjectPoolManager
	 * Size -> 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
	 */
	class USolarObjectPoolManager : public UGameInstanceSubsystem
	{
	public:
		TMap<class FName, struct FObjectArray>                     CachedMap;                                               // 0x0030(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LKPQ[0x50];                                  // 0x0080(0x0050) MISSED OFFSET (PADDING)

	public:
		TArray<class UObject*> PushObjectArray(TArray<class UObject*> ObjectArray, const class FName& Tag);
		bool PushObject(class UObject* Object, const class FName& Tag);
		class UObject* PopObjectByTag(const class FName& Tag);
		class USolarObjectPoolManager* STATIC_Get(class UObject* WorldContextObject);
		void CleanUp();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarOBUIModel
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class USolarOBUIModel : public UObject
	{
	public:
		unsigned char                                              UnknownData_OAGJ[0x60];                                  // 0x0028(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAnyTeamKillCountChanged;                               // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YFZS[0x50];                                  // 0x0098(0x0050) MISSED OFFSET (PADDING)

	public:
		void SimpleDynamicMulticastDelegate__DelegateSignature();
		void RegisterEvents();
		void OnTeamSettled(class ASolarTeamInfo* Team);
		void OnTeamKillCountChanged(class ASolarTeamInfo* TeamInfo);
		void OnSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarPlayerState* NewTarget);
		void OnRemainTeamsCountChanged(unsigned char TeamsCount);
		void OnRemainPlayersCountChanged(unsigned char PlayersCount);
		void OnPlayingScrubCharactersCreated();
		void OnPlayerLeaveTeam(class ASolarTeamInfo* TeamInfo, class ASolarPlayerState* PlayerState);
		void OnPlayerKillCountChanged(class ASolarPlayerState* InPlayerState);
		void OnPlayerJoinTeam(class ASolarTeamInfo* TeamInfo, class ASolarPlayerState* PlayerState);
		void OnCheatersPlayerIDChanged();
		void Init();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarOperationUIElement
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USolarOperationUIElement : public UObject
	{
	public:
		TArray<struct FOperationUIElement>                         CharacterOperationUI;                                    // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FOperationUIElement>                         DirectionOperationUI;                                    // 0x0038(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FOperationUIElement>                         SteeringOperationUI;                                     // 0x0048(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FOperationUIElement>                         JoyStickOperationUI;                                     // 0x0058(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarOrnamentChildActor
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASolarOrnamentChildActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarOrnamentHackerBall
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ASolarOrnamentHackerBall : public ASolarOrnamentChildActor
	{
	public:
		class ASolarCharacter* OwnerCharacter;                                          // 0x0228(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* OwnerMeshComp;                                           // 0x0230(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                SoftAttachBoneName;                                      // 0x0238(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                SoftAttachSecondBoneName;                                // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QOB3[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          AttachRelativeTransform;                                 // 0x0250(0x0030) Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPawn
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarPawn : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPerceptionComponent
	 * Size -> 0x01B0 (FullSize[0x0330] - InheritedSize[0x0180])
	 */
	class USolarPerceptionComponent : public UAIPerceptionComponent
	{
	public:
		struct FSolarBotThreatConfig                               DefaultThreatConfig;                                     // 0x0180(0x006C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_92DW[0x4];                                   // 0x01EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EPerceivableEffectAreaType, class UClass*>            ConfigAreaTypeIdentifyMap;                               // 0x01F0(0x0050) Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		struct FPerceivableEAInfluenceConfig                       EffectAreasInfluenceConfig;                              // 0x0240(0x0060) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      MaxInfluenceRadius;                                      // 0x02A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SmokeGrenadeAffectRadius;                                // 0x02A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnergyBubbleAffectRadius;                                // 0x02A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SummonWallAffectRadius;                                  // 0x02AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UAVShieldAffectRadius;                                   // 0x02B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UAVRescueAffectRadius;                                   // 0x02B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTargetSelectEnabled;                                    // 0x02B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8L3Q[0x7];                                   // 0x02B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ForbiddenTags;                                           // 0x02C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4VUM[0x38];                                  // 0x02D0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxNumCachedDamage;                                      // 0x0308(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8FZ3[0x24];                                  // 0x030C(0x0024) MISSED OFFSET (PADDING)

	public:
		void UpdateSenseConfig(float NewSightRadius);
		void SetTargetSelectEnabled(bool bInEnable);
		void SetForbiddenTags(TArray<class FName> Tags, bool bCleanExists);
		void OnBotPerceptionUpdated(class AActor* Actor, const struct FAIStimulus& Stimulus);
		bool IsInEffectAreaOfType(EPerceivableEffectAreaType Type, class AActor* InTestActor);
		bool IsInAnyEffectArea(TArray<struct FPerceivableEffectArea>* ActiveEffectAreas, class AActor* InTestActor);
		float GetTargetCurrentThreatValue(class ASolarCharacter* ThreatTarget);
		void ClearCurrentThreat(bool bCleanBestTarget);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPickupComponent
	 * Size -> 0x04F0 (FullSize[0x0A50] - InheritedSize[0x0560])
	 */
	class USolarPickupComponent : public UCapsuleComponent
	{
	public:
		class ASolarCharacter* OwnerChar;                                               // 0x0560(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D6NV[0x8];                                   // 0x0568(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PickUpHighlyThresholdFactor;                             // 0x0570(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PY1H[0x1];                                   // 0x0574(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bWantedClearItemData;                                    // 0x0575(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V4HI[0x2];                                   // 0x0576(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EPickupItemType, class USolarPickupHandlerBase*>      PickupHandlerMap;                                        // 0x0578(0x0050) Transient, NativeAccessSpecifierPublic
		class USolarPickupHandlerBase* NormalPickupHandler;                                     // 0x05C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       GlobalPickup;                                            // 0x05D0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D9UL[0x3];                                   // 0x05D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AAirDropTreasureBox>                  TagetAirDropBox;                                         // 0x05D4(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BET8[0xC];                                   // 0x05DC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FActorArrayMap                                      NormalPickupItems;                                       // 0x05E8(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      ProccessedList;                                          // 0x0638(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      SortedPickupActors;                                      // 0x0648(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPickupListVisible;                                      // 0x0658(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPickupListCollapsed;                                    // 0x0659(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_67JW[0x6];                                   // 0x065A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUIManager* UIManager;                                               // 0x0660(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarItemManager* ItemManager;                                             // 0x0668(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7YBE[0x52];                                  // 0x0670(0x0052) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       GlobalAutoPickup;                                        // 0x06C2(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9PRN[0x1];                                   // 0x06C3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UnAutoPickupItemTime;                                    // 0x06C4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoPickupTime;                                          // 0x06C8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7GVR[0x4];                                   // 0x06CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       StopAutoPickupWhenClose;                                 // 0x06D0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReqPickItem;                                            // 0x06D1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4H1Q[0x1A];                                  // 0x06D2(0x001A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPickupCheckBoxOpen;                                     // 0x06EC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J61T[0x3];                                   // 0x06ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        AutoPickupTimer;                                         // 0x06F0(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CIG2[0x30];                                  // 0x06F8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnItemDataSet;                                           // 0x0728(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             UpdateCheckBoxesVisibility;                              // 0x0738(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateCheckBoxesHighLight;                             // 0x0748(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateCheckBoxesStates;                                // 0x0758(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPickupListClear;                                       // 0x0768(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTogglePickupList;                                      // 0x0778(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       ListenFireReslutFlag;                                    // 0x0788(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2E3I[0x3];                                   // 0x0789(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayedDisplayTime;                                      // 0x078C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTimerHandle                                        AutoShowPickupListHandle;                                // 0x0790(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTimerHandle                                        DelayProcessFireResultHandle;                            // 0x0798(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTimerHandle                                        EnsuredAutoShowHandle;                                   // 0x07A0(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      FireResultMsgs;                                          // 0x07A8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T41K[0x10];                                  // 0x07B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class ADeathTreasureBox>>            NearByDeathboxes;                                        // 0x07C8(0x0010) ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ADeathTreasureBox>                    NearestResurrectBox;                                     // 0x07D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LastResurrecteBtnVisbile;                                // 0x07E0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B66D[0x3];                                   // 0x07E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CheckResurrectInterval;                                  // 0x07E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TempResurrectInterval;                                   // 0x07E8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CheckStopResurrectInterval;                              // 0x07EC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TempStopResurrectInterval;                               // 0x07F0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1A8Y[0x4];                                   // 0x07F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PickupRecommendPriority;                                 // 0x07F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X92F[0x4];                                   // 0x07FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EItemType, int32_t>                                   ItemPriorityMap;                                         // 0x0800(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<EItemType, int32_t>                                   ItemMutiPickupMap;                                       // 0x0850(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<EWeaponPartType, int32_t>                             WeaponPartPriorityMap;                                   // 0x08A0(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<int32_t, int32_t>                                     WeaponPartIDPriorityMap;                                 // 0x08F0(0x0050) Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               PendingFirstItemActor;                                   // 0x0940(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P9ZI[0x108];                                 // 0x0948(0x0108) MISSED OFFSET (PADDING)

	public:
		void UpdateResurrection(float InDeltaTime);
		void UpdateItemUI(bool bForce);
		void UpdateCheckboxSwitches(bool InPickupOpen);
		void TryReqPickupItem(class ASolarItemActor* ItemActor, bool IsAutoPickup, int32_t TargetIndex);
		void TryPickupTreasureItem(class ASolarTreasureBoxActor* PickActor, const struct FSolarItemData& ItemData);
		void TryPickupItem(class AActor* PickActor);
		bool TryOpenAirDropTreasureBox(class AAirDropTreasureBox* AirDropTreasureBox);
		void TryClearDirtyData(bool bForce);
		bool TryCancelOpenAirDropTreasureBox(class AAirDropTreasureBox* AirDropTreasureBox);
		void TogglePickupList(bool InVisibility);
		void StopListenFireInput(bool bIsInstantlyStop);
		void StopAutoPickupTimer();
		void StartListenFireInput();
		void StartAutoPickupTimer();
		bool ShouldPickupTreasureBoxItem(class ASolarTreasureBoxActor* InTreasureBox);
		void SetStopAutoPickupWhenClose(bool InStopAutoPickupWhenClose);
		void SetPickupSwitchInLua(bool IsOpen);
		void SetPickupSwitch(bool IsOpen);
		void SetPickupListVisibility(bool InVisibility);
		void SetPickupCapsuleSize(const struct FVector& Size);
		void SetAutoPickupSwitch(bool InCanAutoPickup);
		void RestartPickupTimer();
		void ReqPickupWeapon(class AActor* WeaponData, bool IsAutoPickup);
		void ReqPickupTreasureItem(class ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID, bool IsAutoPickup, int32_t TargetIndex, EItemType InItemType, bool bSorted);
		void ReqPickupItem(class ASolarItemActor* ItemActor, bool IsAutoPickup, int32_t TargetIndex);
		void ReqOpenTreasureBox(class ASolarTreasureBoxActor* TreasureBox);
		void RemoveNearbyDeathbox(class ADeathTreasureBox* InDeathBox);
		void RefreshResurrectBtn();
		void RefreshPickupTimer();
		void RefreshItemUI();
		void RecheckPendingActors();
		void ReceiveFireResult(const class FString& InFireResultMsg);
		void ProcessFireResultMsgs();
		void OnWeaponUpgrade(class ASolarPlayerWeapon* InWeapon);
		void OnWeaponSlotEquip(int32_t InWeaponSlotID, class ASolarPlayerWeapon* InWeapon);
		void OnUsingSkillStatusChanged();
		void OnUpdateItemUIDataChanged(class UObject* Object, int32_t OldItemID, int32_t NewItemID);
		void OnTreasureBoxStateChange(int64_t ThisID, ETreasureBoxState State);
		void OnPickupSettingChanged();
		void OnPickupConfirmHandle();
		void OnPickupActorEnd(class AActor* ItemActor);
		void OnPickupActorBegin(class AActor* ItemActor);
		void OnEquipChanged();
		void OnCharacterDeathBegin();
		void OnActorDestroyed(class AActor* Actor);
		void MarkDirtyForTick();
		bool IsValidItemActor(class AActor* ItemActor);
		bool IsNeedReplace(EItemType InType, const struct FSolarItemData& InItemData);
		bool IsEquipItem(EItemType InType);
		bool IsCharacterInAir();
		void InitPickupPriorityMaps();
		struct FSolarItemData GetTreasureItemDataByThisID(class ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID);
		int32_t GetPickupWeaponPartTypePriority(const struct FSolarItemData& InItemData);
		int32_t GetPickupTypePriority(EItemType InItemType);
		class AActor* GetPickupTreasureBoxActor();
		int32_t GetPickupPriority(const struct FSolarItemData& InItemType);
		class ADeathTreasureBox* GetNearestResurrectBox();
		TMap<int32_t, struct FActorArray> GetItemDataMap();
		int32_t GetItemDataCount(EPickupItemType PickupItemType);
		bool GetIsGlobalPickup();
		bool GetIsAutoPickupHomeItems();
		void DoStopOpeningAirDropBox();
		void DoOpenAirDropBox();
		void DetectNearestResurrectTarget();
		void CloseItemUI();
		void ClearAutoShowPickupListHandle();
		void ClearAllTimer();
		void CheckToShowConfirm(const struct FSolarItemData& ItemData);
		bool CheckIsItemMaximizing(int32_t ItemID);
		bool CanResurrectOwner(class ADeathTreasureBox* InDeathBox, float* OutDistance);
		bool CanMutiAutoPickup(EItemType InItemType);
		void CallHUDSetTreasureBoxActor(class AActor* InActor);
		void CallHUDSetAirdropBoxActor(class AActor* InActor);
		void CallHUDSetActiveResurrectBtn(bool Inactive);
		void CallHUDSetActiveOpenBoxProgress(bool Inactive);
		void CallHUDSetActiveOpenBoxBtn(bool Inactive);
		void CallHUDHideOpenBoxUIByThisID(int64_t InThisID);
		void CallHUDHideAirdropBoxUIByThisID(int64_t InThisID);
		void AddNearbyDeathbox(class ADeathTreasureBox* InDeathBox);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPickupHandlerBase
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class USolarPickupHandlerBase : public UObject
	{
	public:
		EPickupItemType                                            Type;                                                    // 0x0028(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FCMS[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarPickupComponent* OwnerComponent;                                          // 0x0030(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarItemManager* ItemManager;                                             // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NDJ4[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPickupHandlerNormal
	 * Size -> 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
	 */
	class USolarPickupHandlerNormal : public USolarPickupHandlerBase
	{
	public:
		unsigned char                                              UnknownData_IT9R[0x10];                                  // 0x0048(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPingFpsManager
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USolarPingFpsManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_E72K[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              GetPingDS;                                               // 0x0030(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CL2X[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GetPingBackend;                                          // 0x0034(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FPS;                                                     // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LG71[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		unsigned char GetPingBattleServer();
		float GetPacketsLossRate();
		float GetAverageFPS();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPingFpsWidget
	 * Size -> 0x00E0 (FullSize[0x0428] - InheritedSize[0x0348])
	 */
	class USolarPingFpsWidget : public USolarUserWidget
	{
	public:
		class UImage* Img_Ping;                                                // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Ping;                                                // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_ms;                                                  // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_fps_2;                                               // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S18Y[0x10];                                  // 0x0368(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        ImgLowDelayColor;                                        // 0x0378(0x0010) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        ImgMediumDelayColor;                                     // 0x0388(0x0010) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        ImgHighDelayColor;                                       // 0x0398(0x0010) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateColor                                         TxtLowDelayColor;                                        // 0x03A8(0x0028) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		struct FSlateColor                                         TxtMediumDelayColor;                                     // 0x03D0(0x0028) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		struct FSlateColor                                         TxtHighDelayColor;                                       // 0x03F8(0x0028) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		float                                                      RefreshFpsInterval;                                      // 0x0420(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_422I[0x4];                                   // 0x0424(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdatePing(float InPing);
		void CreateUpdateUIFpsTimer();
		void ClearUpdateUIFpsTimer();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlatformHelper
	 * Size -> 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
	 */
	class USolarPlatformHelper : public UObject
	{
	public:
		unsigned char                                              UnknownData_YTXN[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarPlatformStats* SolarPlatformStats;                                      // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarGameInstanceBase* SolarGameInstanceBase;                                   // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_17A1[0xB0];                                  // 0x0040(0x00B0) MISSED OFFSET (PADDING)

	public:
		bool STATIC_UseRenderThread();
		bool STATIC_SupportsMultithreading();
		double STATIC_Seconds();
		void ReceiveShutdown();
		void ReceiveInit();
		bool STATIC_IsThisApplicationForeground();
		bool STATIC_IsRunningOnBattery();
		bool STATIC_Is64bitOperatingSystem();
		int64_t STATIC_GetVideoMemory();
		class FString GetUniqueDeviceId();
		class FString STATIC_GetTimeZoneId();
		class FString STATIC_GetSuitableStringWithUnitOfBytes(uint64_t NumberOfBytes, const class FString& ExtraUnit);
		class USolarPlatformStats* GetSolarPlatformStats();
		int32_t GetSimultaneousInstanceId();
		class FString STATIC_GetPrimaryGPUBrand();
		class FString STATIC_GetPathVarDelimiter();
		void STATIC_GetOSVersions(class FString* out_OSVersionLabel, class FString* out_OSSubVersionLabel);
		class FString STATIC_GetOSVersion();
		uint32_t STATIC_GetMoniterWidth();
		int32_t STATIC_GetMoniterRefreshRate();
		uint32_t STATIC_GetMoniterHeight();
		int32_t STATIC_GetMaxPathLength();
		class UGameUserSettings* GetGameUserSettings();
		class FString STATIC_GetEnvironmentVariable(const class FString& VariableName);
		class UEngine* GetEngine();
		bool STATIC_GetDiskTotalAndFreeSpace(const class FString& InPath, uint64_t* TotalNumberOfBytes, uint64_t* NumberOfFreeBytes);
		float STATIC_GetDeviceTemperatureLevel();
		class FString STATIC_GetDeviceMakeAndModel();
		class FString STATIC_GetDefaultDeviceProfileName();
		class FString STATIC_GetCPUVendor();
		uint32_t STATIC_GetCPUInfo();
		class FString STATIC_GetCPUChipset();
		class FString STATIC_GetCPUBrand();
		int32_t STATIC_GetBatteryLevel();
		class FString STATIC_ClipboardPaste();
		void STATIC_ClipboardCopy(const class FString& str);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlatformStats
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USolarPlatformStats : public UObject
	{
	public:
		unsigned char                                              UnknownData_ME8E[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint64_t                                                   MaxUsedPhysical;                                         // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_98PN[0x28];                                  // 0x0038(0x0028) MISSED OFFSET (PADDING)

	public:
		void ReceiveWorldCleanup(class UWorld* World, bool bSessionEnded, bool bCleanupResources);
		void ReceiveShutdown();
		void ReceivePostWorldInitialization(class UWorld* World);
		void ReceiveInit();
		uint64_t GetRHIUsedMemory();
		float GetRenderThreadTime();
		int32_t GetNumDrawCalls();
		int32_t GetMinFPS();
		float GetGameThreadTime();
		int32_t GetAverageFPS();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerActivityHeatComponent
	 * Size -> 0x00E0 (FullSize[0x0190] - InheritedSize[0x00B0])
	 */
	class USolarPlayerActivityHeatComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FEX8[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WeaponScore;                                             // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      VehicleScore;                                            // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AbilityScore;                                            // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VK6Z[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* DistScoreCurve;                                          // 0x00D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DefenderOrReaperScore;                                   // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FirstKillTimeBefore;                                     // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      LastKillTimeLater;                                       // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8YM9[0xAC];                                  // 0x00E4(0x00AC) MISSED OFFSET (PADDING)

	public:
		void ReceiveKillInfoNotify(class ASolarPlayerState* InKiller, class ASolarPlayerState* InVictim, const struct FSolarPointDamageEvent& DamageEvent);
		void ReceiveActivityHeatFragmentsFromReplay(const class FString& PlayerId, const struct FReplayActivityHeatFragment& NewFragment);
		void OnPlayerWin(const class FString& SolarPlayerID);
		void OnPlayerResurrectionParachute(const class FString& SolarPlayerID);
		void OnPlayerDeath(const class FString& SolarPlayerID);
		void OnPlayerCruiseEnded(const class FString& SolarPlayerID);
		TArray<struct FReplayActivityHeatFragment> GetPlayerActivityHeatFragmentsById(const class FString& SolarPlayerID);
		void FillInPlayerActivityHeatKillDetail(class ASolarPlayerState* InKiller, class ASolarPlayerState* InVictim, const struct FSolarPointDamageEvent& DamageEvent, struct FPlayerActivityHeatKillDetail* OutKillDetail);
		int32_t AddPlayerActivityHeatRawData(const class FString& SolarPlayerID, EPlayerActivityHeatType ActivityHeatType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerCameraManager
	 * Size -> 0x0030 (FullSize[0x2FF0] - InheritedSize[0x2FC0])
	 */
	class ASolarPlayerCameraManager : public APlayerCameraManager
	{
	public:
		TWeakObjectPtr<class AActor>                               OldViewTarget;                                           // 0x2FC0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve;                           // 0x2FC8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z692[0x20];                                  // 0x2FD0(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnPlayerGetOnViewTargetVehicle(int32_t GetOnSeatIndex, class ASolarCharacter* GetOnPlayer);
		struct FMinimalViewInfo GetDebugPOV();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SinglePlayerHPModel
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class USinglePlayerHPModel : public USingleCharacterModelBase
	{
	public:
		unsigned char                                              UnknownData_UQ42[0x28];                                  // 0x0030(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnRescueStateChanged(ERescueState InRescueState);
		void OnHPValueChanged(class ASolarCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayersHPModel
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class USolarPlayersHPModel : public USolarCharactersModelBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerInput
	 * Size -> 0x0060 (FullSize[0x0660] - InheritedSize[0x0600])
	 */
	class USolarPlayerInput : public UEnhancedPlayerInput
	{
	public:
		unsigned char                                              UnknownData_32C1[0x60];                                  // 0x0600(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeapon
	 * Size -> 0x0868 (FullSize[0x0A90] - InheritedSize[0x0228])
	 */
	class ASolarWeapon : public AActor
	{
	public:
		unsigned char                                              UnknownData_9572[0x150];                                 // 0x0228(0x0150) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnWeaponUnhold;                                          // 0x0378(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FWeaponMechanicalState                              WeaponState;                                             // 0x0388(0x0050) Edit, BlueprintVisible, Net, EditConst, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6VHM[0x1];                                   // 0x03D8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EShootingOpt                                               PrimaryShootingOption;                                   // 0x03D9(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E937[0x2];                                   // 0x03DA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FImpactDisplayInfo                                  ImpactInfo;                                              // 0x03DC(0x0010) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K60V[0xC];                                   // 0x03EC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESCMDamageType                                             DefaultDamageType;                                       // 0x03F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PM8F[0x7];                                   // 0x03F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarVirtualBulletCollector* VirtualBulletCollector;                                  // 0x0400(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponFireLaserCollector* LaserCollector;                                          // 0x0408(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CKRO[0x4];                                   // 0x0410(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ExtraPoints;                                             // 0x0414(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ExtraPointsForInit;                                      // 0x0418(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseSkillStateMachine;                                   // 0x041C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L2JN[0x3];                                   // 0x041D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ExtraPointsLimit;                                        // 0x0420(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SecModeLimitTypeID;                                      // 0x0424(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RestoreProgressPerSec;                                   // 0x0428(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZKY9[0xC];                                   // 0x042C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RestoreProgressPerKill;                                  // 0x0438(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RestoreProgressPerDmg;                                   // 0x043C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RestoreProgressAccumulation;                             // 0x0440(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RestoreProgressAccumulationForInit;                      // 0x0444(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AAOE[0x9];                                   // 0x0448(0x0009) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              FireModeIndex;                                           // 0x0451(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_97Y5[0x12];                                  // 0x0452(0x0012) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EWeaponOverloadState                                       OverloadState;                                           // 0x0464(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PUK4[0x3];                                   // 0x0465(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverloadAccum;                                           // 0x0468(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CKLB[0xC];                                   // 0x046C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* OverloadCurve;                                           // 0x0478(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L69M[0x4];                                   // 0x0480(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GatlingRollSpeed;                                        // 0x0484(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GatlingHoldTime;                                         // 0x0488(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GatlingRollSpeedInterp;                                  // 0x048C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GatlingRepState;                                         // 0x0490(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OA3J[0x24];                                  // 0x0494(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FireChargingTime;                                        // 0x04B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FireChargingPhase;                                       // 0x04BC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireChargingSumTime;                                     // 0x04C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YN8M[0x8];                                   // 0x04C4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChargeAnimationRate;                                     // 0x04CC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* ChargingEffect;                                          // 0x04D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B4J5[0x8];                                   // 0x04D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UAbilitySystemComponent>              OwnerGAS;                                                // 0x04E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7N0Z[0x8];                                   // 0x04E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* NormalOverloadCoolingCurve;                              // 0x04F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrentMode;                                             // 0x04F8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_13NT[0xC];                                   // 0x04FC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFireMode>                                   FireModes;                                               // 0x0508(0x0010) Net, ZeroConstructor, RepNotify, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor* WeaponHolder;                                            // 0x0518(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacterBase* ControlWeaponCharacter;                                  // 0x0520(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FGameplayAbilitySpecHandle>                  EquippedAbilityHandles;                                  // 0x0528(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bControlWeaponCharacterChanged;                          // 0x0538(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SGGE[0x7];                                   // 0x0539(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor* AimTarget;                                               // 0x0540(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* ProjSplineClass;                                         // 0x0548(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarWeaponProjectileSpline* ProjSpline;                                              // 0x0550(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EShootingOpt>                                       ShootingOptArray;                                        // 0x0558(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowSpecialEffect;                                      // 0x0568(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1VVR[0x7];                                   // 0x0569(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USingleWeaponConfig* Config;                                                  // 0x0570(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTexture2D* WeaponIcon;                                              // 0x0578(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USlateWidgetStyleAsset* PrimaryFireBtnStyle;                                     // 0x0580(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USlateWidgetStyleAsset* SecondaryFireBtnStyle;                                   // 0x0588(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGlobalWeaponConfig* WeaponsConfig;                                           // 0x0590(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponRecoilComponent* RecoilComponent;                                         // 0x0598(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    weaponid;                                                // 0x05A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RHCA[0x4];                                   // 0x05A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponSpreadAndRecoil* SpreadAndRecoil;                                         // 0x05A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IZ81[0xC];                                   // 0x05B0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bTeamDamageEnable;                                       // 0x05BC(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInfiniteAmmo;                                           // 0x05BD(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInfinitePackageAmmo;                                    // 0x05BE(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_26AL[0x1];                                   // 0x05BF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ExtraAmmo;                                               // 0x05C0(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BB4N[0x4];                                   // 0x05C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TWeakObjectPtr<class UParticleSystem>, class UParticleLoopListener*> LoopParticlesMap;                                        // 0x05C8(0x0050) Protected, NativeAccessSpecifierProtected
		int32_t                                                    CurrentClipAmmo;                                         // 0x0618(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0OL8[0x10C];                                 // 0x061C(0x010C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ECharacterMontage, struct FWeaponAnimationInfo>       WeaponAnimationMap;                                      // 0x0728(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       bResetMuzzleIndexWhenStopFire;                           // 0x0778(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0UCC[0xF];                                   // 0x0779(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCameraShakeData>                            WeaponFireCameraShakes;                                  // 0x0788(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCameraShakeData>                            WeaponScopeFireCameraShakes;                             // 0x0798(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCameraShakeData>                            UsingSkillCameraShakes;                                  // 0x07A8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCameraShakeData>                            WeaponChargingCameraShakes;                              // 0x07B8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseEmptyActor;                                          // 0x07C8(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A4IU[0x7];                                   // 0x07C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     FightMeshPath;                                           // 0x07D0(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent* Mesh;                                                    // 0x07E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMesh* OriginalMesh;                                            // 0x07F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* OriginalAnimBP;                                          // 0x07F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* AkAudioComponent;                                        // 0x0800(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x0808(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SoundFireAutoCount;                                      // 0x0810(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTriggerSoundFireAuto;                                   // 0x0814(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SPPF[0x3];                                   // 0x0815(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OldSoundFireAutoCount;                                   // 0x0818(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTriggerSoundB9A04Skill;                                 // 0x081C(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTriggerSoundFireBurst;                                  // 0x081D(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I4A5[0x2];                                   // 0x081E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SkillFireCount;                                          // 0x0820(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SingleFireCount;                                         // 0x0824(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FireOverloadCount;                                       // 0x0828(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FireLastCount;                                           // 0x082C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_171B[0x60];                                  // 0x0830(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FOverrideBulletStruct                               OverrideBullet;                                          // 0x0890(0x0018) Net, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bLoadInitAssets;                                         // 0x08A8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLoadAllCfgAssets;                                       // 0x08A9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2IYW[0x6];                                   // 0x08AA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FFireUniqueID, float>                          FireHitVerifyMap;                                        // 0x08B0(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OSXO[0x8];                                   // 0x0900(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDetectedEnemy;                                          // 0x0908(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_456K[0x7];                                   // 0x0909(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UParticleSystemComponent*>                    GatlingOverHeatPSCs;                                     // 0x0910(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTracingAimTarget;                                       // 0x0920(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_65F4[0xF];                                   // 0x0921(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface* SpecialFireChargeMaterial;                               // 0x0930(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, struct FColor>                               SpecialFireChargeColorMap;                               // 0x0938(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bPerspectiveForReplay;                                   // 0x0988(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GEAV[0x27];                                  // 0x0989(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESolarWeaponSpreadState                                    CurrentSpreadState;                                      // 0x09B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G7GQ[0x3];                                   // 0x09B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ContinuousAddSpreadByFireCount;                          // 0x09B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLastAddSpreadByFireIsHipFire;                           // 0x09B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int8_t                                                     LastAddSpreadByFireFireMode;                             // 0x09B9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_18NL[0x2];                                   // 0x09BA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastAddSpreadByFireTime;                                 // 0x09BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpreadPrepareTimer;                                      // 0x09C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PendingBaseSpread;                                       // 0x09C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetBaseSpread;                                        // 0x09C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PendingAddSpread;                                        // 0x09CC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetAddSpread;                                         // 0x09D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VIK4[0x2C];                                  // 0x09D4(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHitResult                                          AimHitResult;                                            // 0x0A00(0x0088) IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4S89[0x8];                                   // 0x0A88(0x0008) MISSED OFFSET (PADDING)

	public:
		void WeaponStateOnRepReload();
		bool VerifyLastClipAmmo(int32_t InFireModeType, int32_t InLastClipAmmo);
		bool UseEnergy(int32_t Mode);
		bool TryHitOperation(const struct FFireUniqueID& FireUniqueID, int32_t FireMode, const struct FVector& StartLocation, const struct FVector& WeaponLocation, float ServerTime, float DamageScale, const struct FBulletHitDetailData& HitDetailData, bool IsNotDelay);
		void StopSoundDelay(float DelayTime);
		void StopSound(EShootingSoundOpt Opt, int32_t idx);
		void StopLastValidFire();
		void StopGatlingSound();
		void StartSound(EShootingSoundOpt Opt, int32_t idx);
		void StartAsyncLoading();
		class ASolarProjBullet* SpawnProjWithFireID(const struct FSpawnBulletParam& Param, const struct FFireUniqueID& FireID, bool Local);
		void ShowSpecialEffect(bool bShow);
		void SetWeaponAnimState(EWeaponAnimState InWeaponAnimState);
		void SetReservedAmmoForce(int32_t InFireModeType, int32_t InAmount);
		void SetPrimaryShootingOption(EShootingOpt Opt);
		void SetLastFireTime(int32_t InFireModeType, float InFireTime);
		void SetHolder(class AActor* InHolder);
		void ServerWeaponSound(EShootingSoundOpt Opt, bool TriggerSound);
		void ServerVirtualBulletShotHit(TArray<struct FSolarVirtualBulletHitParameter> AllHitParams, class APawn* SourcePawn);
		void ServerVirtualBulletShot(const struct FSolarVirtualBulletSpawnParameter& InParameter, float InTimestamp);
		void ServerUpdateMechanicalState(EWeaponMechanicalUniqueState NewMechanicalState, EWeaponMechanicalSideFlag NewSubFlags);
		void ServerUpdateLaserInfo(const struct FVector& InTarget, class AActor* InTargetActor);
		void ServerUpdateGatlingRepState(int32_t InState);
		void ServerSpawnProjWithVelocity(const struct FSpawnProjParam& Param);
		void ServerSpawnProjWithFireID(const struct FSpawnBulletParam& Param, const struct FFireUniqueID& FireID);
		void ServerSetTracingAimTarget(bool InbTracingAimTarget);
		void ServerSetPrimaryOption(EShootingOpt Opt);
		void ServerSetHipFire(bool InbHipFire);
		void ServerResetFireCount();
		void ServerRequestDropWeapon();
		void ServerPlayAnimWithNetMulticast(ECharacterMontage InMontageType, float ExpectAnimLength);
		void ServerModeState(unsigned char ModeIndex);
		void ServerLaserHit(TArray<struct FHitResult> Hits, float InActivateTime);
		void ServerInterruptLaser();
		void ServerInstantLineShot(unsigned char ModeIndex, const struct FVector_NetQuantize& Start, const struct FVector_NetQuantize& End, float DamageScale, const struct FMutiBulletHitData& HitData);
		void ServerFireChargeShoot(class UAmmoConfig* InAmmo, int8_t InFireChargingPhase, int32_t InFireChargingTime);
		void ServerFireChargePhaseChange(int8_t InFireChargingPhase);
		void ServerFire_JustAbilitiesAmmo(unsigned char ModeIndex);
		void ServerChangeOverloadState(EWeaponOverloadState InState);
		void ServerCanisterShot(const struct FVector_NetQuantize& Start, const struct FVector_NetQuantize& End, float RandomA, float RandomB, const struct FMutiBulletHitData& HitData);
		void ServerAddExpWithReason(int32_t InExp, int32_t InReasonID);
		void ServerActivateLaserShot(const struct FVector& InTarget, class AActor* InTargetActor);
		void RuntimeUpdateData(int32_t Cmd, const class FString& Params);
		void ResetRecoilComponent();
		void ReceivePlayImpactPositionEffect(class UParticleSystemComponent* PSC, const struct FVector& Position, float Scale);
		void ReceiveChargingState(int32_t Index, EWeaponSkillChargedState State);
		void PrimaryCost();
		void PlayVibrate(EWeaponVibrateType InType);
		void PlayReloadRestoreVibrate();
		void PlayReloadGetOldVibrate();
		void PlayFireVibrate();
		void PlayChargeVibrate();
		void PlayBulletHitEffect(const struct FHitResult& HitResult, class ASolarBullet* Bullet, bool bForce, class APawn* HitCauser, float HitEffectScale);
		void PlayBoltVibrate();
		void PlayAutoSingleSound();
		void PlayAnimWithNetMulticast(ECharacterMontage InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int32_t AnimCount);
		void OverrideFireMode(int32_t InFireModeType, class UAmmoConfig* InNewAmmoConfig);
		void OnRep_WeaponState();
		void OnRep_TracingAimTarget();
		void OnRep_SoundFireSkillCast();
		void OnRep_SoundFireSingle();
		void OnRep_SoundFireOverload();
		void OnRep_SoundFireLast();
		void OnRep_SoundFireBurst();
		void OnRep_SoundFireAutoCount();
		void OnRep_SoundB9A04Skill();
		void OnRep_OverloadStateChange(EWeaponOverloadState PreviousState);
		void OnRep_ImpactPosition();
		void OnRep_FireModes();
		void OnRep_FireChargingPhase(int32_t InOldFireChargingPhase);
		void OnRep_ExtraAmmo();
		void OnRep_CurrentMode();
		void OnRep_ControlWeaponCharacterChanged();
		void OnPlayMuzzleEffect();
		void OnLoadInitAssetComplete();
		void OnLoadCfgAssetsComplete();
		void OnInternalUnControlled();
		void OnInternalControlled(class ASolarCharacterBase* OwnerChar);
		void OnInstantLineShotHit(const struct FHitResult& InHit, float DamageScale);
		void OnInitFlowComplete();
		void OnGatlingRollChange(bool bIncrease);
		void OnFireChargeBurstCountChange(int32_t BurstSum);
		EShootingOpt NextShootingPrimaryOption();
		void LuaStopSoundWithParameters(EShootingSoundOpt Opt, int32_t idx, const struct FPlaySoundParams& Params);
		void LuaStartSoundWithParameters(EShootingSoundOpt Opt, int32_t idx, const struct FPlaySoundParams& Params);
		void LoadInitAsset();
		void LoadAllCfgAssets();
		class UAmmoConfig* K2_GetOverrideAmmoConfigBase(int32_t ModeIndex);
		class USingleWeaponConfig* K2_GetCurrentConfig();
		bool IsVisible();
		bool IsShowCoolDownWidget();
		bool IsShotAimEnemy();
		bool IsScopeOpen();
		bool IsOpenedScope();
		bool IsHipFire();
		bool IsEnergyID(int32_t BulletItemID);
		bool IsControlled();
		bool IsCanFire();
		class UParticleSystemComponent* InternalPlayEffectAttached(class UParticleSystem* PS, class USceneComponent* AttachToComponent, const class FName& AttachPointName, const struct FAttachedEffectParam& Param);
		class UParticleSystemComponent* InternalPlayEffectAtLocation(class UObject* WorldContext, class UParticleSystem* PS, const struct FVector& Location, const struct FLocationEffectParam& Param, bool bUseDistScale);
		void InternalClientPlayFiringEffects();
		bool InSameTeam();
		void InitConfigs();
		bool ImmediatelyFire(int32_t idx, bool bEnable);
		bool HasLoadInitAsset();
		bool HasLoadAllCfgAssets();
		bool HasInitFinish();
		bool HasInitConfigs();
		void HandFireModeInput(EWeaponFireModeType WeaponFireModeType, bool Press);
		EWeaponType GetWeaponType();
		class FString GetWeaponTextType();
		uint32_t GetWeaponNoticeID(const class FName& InNoticeType);
		int32_t GetWeaponLevel();
		int32_t GetWeaponID();
		class UTexture2D* GetWeaponIcon();
		ESolarWeaponBrand GetWeaponBrand();
		class UAnimMontage* GetWeaponAnimSequence(ECharacterMontage InMontageType);
		struct FWeaponAnimationInfo GetWeaponAnimationInfo(ECharacterMontage InMontageType);
		struct FSlateBrush GetTriggerIcon(int32_t InFireModeType);
		int32_t GetSpareAmmo(int32_t InFireModeType);
		float GetSoundRTPCValue();
		int32_t GetSkinID();
		float GetShotGunSpreadSeed();
		struct FVector GetShotDir(bool NeedSpread);
		struct FVector GetShootingTraceStartLocation();
		class FString GetShootingPrimaryShootingOptionName(EShootingOpt Opt);
		float GetSecondModeValue();
		int32_t GetReservedAmmo(int32_t idx);
		float GetReloadProgress();
		class UWeaponRecoilComponent* GetRecoilComponent();
		int32_t GetPrimaryShootingOptionIndex();
		float GetPostFireDuration(int32_t idx);
		class UWeaponPartsComponent* GetPartsComponent();
		float GetOverloadPercent();
		float GetOverloadMaxValue();
		class ASolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();
		int32_t GetMaxAmmo(int32_t idx, bool bWithExtraAmmoByChaAbility);
		float GetLastFireTime(int32_t InFireModeType);
		bool GetIsVehicleMounted();
		bool GetIsSupportSecondaryFire();
		bool GetIsSupportAutoFire();
		bool GetIsSupportAssistAim();
		bool GetIsQuickScope();
		bool GetIsCoolDown(int32_t Mode);
		class UGlobalWeaponConfig* GetGlobalWeaponConfig();
		int32_t GetFireModeNameLocalizationID(int32_t InFireModeType);
		float GetFireIntervalProgress(int32_t idx);
		float GetFireInterval(int32_t idx);
		void GetFireChargeInfo(int32_t* OutChargingPhase, float* OutChargingTime, float* OutRate, struct FFireChargeData* OutChargeData);
		float GetFireCD(int32_t idx);
		float GetExtraPointsPercent();
		int32_t GetExtraPoints();
		class UParticleSystem* GetDedicatedKillEffect();
		struct FSoftObjectPath GetDedicatedDissolvedDeathFXPath();
		class UClass* GetDedicatedDissolvedDeathActorEffectClass();
		struct FWeaponDebugFlag GetDebugFlag();
		int32_t GetCurScopeType();
		EShootingOpt GetCurrentShootingPrimaryOption();
		EWeaponScopeType GetCurrentScopeType();
		struct FFireChargeData GetCurrentFireChargeData(class UAmmoConfig* InAmmo);
		class UAmmoConfig* GetCurrentFireChargeAmmoData(class UAmmoConfig* InAmmo);
		int32_t GetCurrentClipAmmo(int32_t InFireModeType);
		bool GetCurrentChargeModePercent(int32_t InFireModeType, int32_t* OutChargeMode, float* OutChargePercent);
		int32_t GetCostPreAttack(int32_t idx);
		class ASolarCharacterBase* GetControlWeaponCharacter();
		float GetChargingPercent(int32_t idx);
		float GetBurstInterval(int32_t idx);
		float GetBurstInternalInterval(int32_t idx);
		void GetBulletHitEffectRot(const struct FHitResult& HitResult, class ASolarBullet* Bullet, struct FRotator* TargetPos, bool bIsHittedShield);
		void GetBulletHitEffectPos(const struct FHitResult& HitResult, struct FVector* TargetRot, float Offset);
		class ASolarBullet* GetBulletDefaultObject(int32_t idx, class UAmmoConfig* AmmoCfg);
		class UClass* GetBulletClass(int32_t idx, class UAmmoConfig* AmmoCfg);
		float GetBotAIDamageFactor();
		ETriggerType GetAmmoTriggerType(int32_t fireModeType);
		int32_t GetAmmoItemID(int32_t idx);
		bool GetAllInitAssetPath(TArray<struct FSoftObjectPath>* PathArray);
		bool GetAllCfgAssetsPath(TArray<struct FSoftObjectPath>* PathArray);
		void GetAimStartEnd(class UAmmoConfig* InAmmo, struct FVector* OutStart, struct FVector* OutEnd, class AActor** OutTargetActor, bool NeedSpread);
		bool FireVerify_Location(int32_t FireMode, const struct FVector& StartLocation, const struct FVector& WeaponLocation, float ServerTime, const struct FBulletHitDetailData& HitDetailData);
		bool FireVerify_EffectRange(int32_t FireMode, const struct FVector& StartLocation, const struct FVector& WeaponLocation, float ServerTime, const struct FBulletHitDetailData& HitDetailData);
		bool FireVerify_Block(int32_t FireMode, const struct FVector& StartLocation, const struct FVector& WeaponLocation, float ServerTime, const struct FBulletHitDetailData& HitDetailData);
		bool FireValidate(int32_t idx, float InLastShootTime);
		ECharacterMontage FindMontageKeyFromWeaponAnim(class UAnimMontage* InAnimation);
		void EnterOverloadState();
		void DestroyWeaponProjectileSpline();
		void ClientVirtualBulletShot(const struct FSolarVirtualBulletSpawnParameter& InParameter);
		void ClientUpdateLaserInfo(const struct FVector& InTarget, class AActor* InTargetActor);
		void ClientPlayHitEffect(const struct FMultiHitResult& InMultiHitResult);
		void ClientPlayFiringEffects();
		void ClientPlayAnimWithNetMulticast(ECharacterMontage InMontageType, float ExpectAnimLength);
		void ClientNotifyUpdateReservedAmmoForce(int32_t InFireModeType, int32_t InAmount);
		void ClientLaserHit(TArray<struct FHitResult> Hits, float InActivateTime);
		void ClientInterruptLaser();
		void ClientInstantLineShot(unsigned char ModeIndex, TArray<struct FHitResult> HitResults, const struct FVector_NetQuantize& End, float DamageScale);
		void ClientFireChargeShoot(class UAmmoConfig* InAmmo, int8_t InFireChargingPhase, int32_t InFireChargingTime);
		void ClientCanisterShot(const struct FVector_NetQuantize& Start, TArray<struct FWeaponShotHitResult> ValidHits, const struct FVector_NetQuantize& Target);
		void ClientActivateLaserShot(const struct FVector& InTarget, class AActor* InTargetActor);
		void ClearFireHitVerify();
		bool CheckOpenParticleOptimization(int32_t Bias);
		bool CanOverload();
		bool CanCauseTeamDamage();
		float CalcScale(const struct FFireMode& Mode);
		int32_t CalcCost(const struct FFireMode& Mode);
		void AddExtraPoints(ESolarHitType InHitType, int32_t InDamage);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerWeapon
	 * Size -> 0x0318 (FullSize[0x0DA8] - InheritedSize[0x0A90])
	 */
	class ASolarPlayerWeapon : public ASolarWeapon
	{
	public:
		unsigned char                                              UnknownData_XL9J[0xC0];                                  // 0x0A90(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpawnOffset;                                             // 0x0B50(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GKMM[0x4];                                   // 0x0B54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarItemData                                      ItemData;                                                // 0x0B58(0x00B8) Net, NativeAccessSpecifierPublic
		TArray<unsigned char>                                      MarkedTeamIdList;                                        // 0x0C10(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseSceneActorOptimization;                              // 0x0C20(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_51KT[0x7];                                   // 0x0C21(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent* SphereComponent;                                         // 0x0C28(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             DroppedLocation;                                         // 0x0C30(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YTS8[0x4];                                   // 0x0C3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacterBase* WeaponOwner;                                             // 0x0C40(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponAnimationComponent* WeaponAnimationComponent;                                // 0x0C48(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemDiscardState                                          WeaponCurrentDiscardState;                               // 0x0C50(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemState                                                 WeaponCurrentState;                                      // 0x0C51(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JBGR[0x6];                                   // 0x0C52(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSoftObjectPath>                             DiscardMatPath;                                          // 0x0C58(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     HoldMeshMaterialPath;                                    // 0x0C68(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* OutlineBaseMat;                                          // 0x0C80(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DZFC[0x8];                                   // 0x0C88(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UParticleSystemComponent*>                    SkinExtraPSCArray;                                       // 0x0C90(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* SkinSpecialEffect;                                       // 0x0CA0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_APPQ[0x10];                                  // 0x0CA8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic* MeshSubpassMaterial;                                     // 0x0CB8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    MeshDiscardMaterialArray;                                // 0x0CC0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponSkinData* WeaponSkinData;                                          // 0x0CD0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeaponSkinID;                                            // 0x0CD8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ScopePartID;                                             // 0x0CDC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GripPartID;                                              // 0x0CE0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    StockPartID;                                             // 0x0CE4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MuzzlePartID;                                            // 0x0CE8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ClipPartID;                                              // 0x0CEC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DefaultSkinID;                                           // 0x0CF0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9QRD[0x5];                                   // 0x0CF4(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsAutoDrop;                                             // 0x0CF9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QMAM[0x2];                                   // 0x0CFA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LifespanAfterAutoDrop;                                   // 0x0CFC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsed;                                                   // 0x0D00(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G8PM[0x7];                                   // 0x0D01(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* SkinDedicatedKillEffect;                                 // 0x0D08(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* SkinDedicatedSpecialEffect;                              // 0x0D10(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PH9D[0x90];                                  // 0x0D18(0x0090) Fix size for supers

	public:
		void UpdateCharacterState(ECharacterStateForWeapon CharacterState, bool bIsOnGround, bool bResetState);
		void UpdateCharacterPosture(bool IsCrouch);
		void SetOpenScopeOnVehicle(bool InbOpenScope);
		void SetDedicatedSkinEffect(class UWeaponSkinData* InSkinData);
		void RequestUnlimitedAmmo(bool InEnable);
		void PostUpdateAppearance();
		void OnSetWeaponSkinMesh(class USkeletalMesh* InMesh, class UClass* InAnimClass);
		void OnRep_WeaponCurrentStateChanged();
		void OnRep_WeaponCurrentDiscardStateChanged();
		void OnClientMeshLodChanged(int32_t LOD);
		void NotifyThisItemWasPickedUp();
		void K2_SwitchDrawDistance(bool Hold);
		void K2_OnHold(bool bLocal);
		void K2_OnDrop();
		bool IsOpenedScopeOnVehicle();
		bool IsItemWeapon();
		bool IsExistPart(EWeaponPartType PartType);
		void Hold(bool bInHold);
		bool HasScope();
		float GetWeaponSilencerMagnitude();
		class UPlayerWeaponRecoilComponent* GetRecoilComp();
		int32_t GetQualityByLevel(int32_t Level);
		int32_t GetQuality();
		EItemState GetItemCurrentState();
		bool GetIsHolded();
		struct FVector GetFPPLocation();
		float GetFire2AnimPlayRate();
		float GetDistanceToEyeWhenScope();
		struct FVector GetCurrentScopeAimCenterPoint();
		class UWeaponPartClipComp* GetCurrentClip();
		void ClearSkinExtraPSC();
		void ClearDedicatedSkinEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerItemWeapon
	 * Size -> 0x0000 (FullSize[0x0DA8] - InheritedSize[0x0DA8])
	 */
	class ASolarPlayerItemWeapon : public ASolarPlayerWeapon
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerNormalWeapon
	 * Size -> 0x0008 (FullSize[0x0DB0] - InheritedSize[0x0DA8])
	 */
	class ASolarPlayerNormalWeapon : public ASolarPlayerWeapon
	{
	public:
		class UWeaponPartsComponent* WeaponPartsComponent;                                    // 0x0DA8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool QueryCanEquipPart(EWeaponPartType Type, int32_t InWeaponID);
		bool GetEquippedScopeTypeAndLevel(EWeaponPartType* Type, int32_t* Level);
		int32_t GetEquippedPartLevel(EWeaponPartType Type);
		void GameStatisticsWeaponAddExp(float newExp, float AddExp, int32_t OldLevel, int32_t NewLevel, int32_t reason);
		bool CanEquipPart(EWeaponPartType Type);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerSensitivitys
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class USolarPlayerSensitivitys : public UObject
	{
	public:
		unsigned char                                              UnknownData_5NK9[0x48];                                  // 0x0028(0x0048) MISSED OFFSET (PADDING)

	public:
		void InitPlayerSensitivity();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SinglePlayerShieldModel
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class USinglePlayerShieldModel : public USingleCharacterModelBase
	{
	public:
		unsigned char                                              UnknownData_HKYU[0x70];                                  // 0x0030(0x0070) MISSED OFFSET (PADDING)

	public:
		void ShieldValueChanged(EShieldWidgetState InWidgetState, float InCurValue, float InChangeValue, EShieldRechargeState InRechargeState, bool bInFixPreAdd);
		void ShieldChanged(bool bInAvailable, float InCurValue, float InMaxValue, int32_t InQualityColor, bool bInIsAdvancedShield);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayersShieldModel
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class USolarPlayersShieldModel : public USolarCharactersModelBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPlayerStart
	 * Size -> 0x0078 (FullSize[0x02D0] - InheritedSize[0x0258])
	 */
	class ASolarPlayerStart : public APlayerStart
	{
	public:
		unsigned char                                              UnknownData_S9LS[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Distance;                                                // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RMKN[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Side;                                                    // 0x0268(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Job;                                                     // 0x0278(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ElementID;                                               // 0x0288(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESGameMode_ElementType                                     Type;                                                    // 0x0298(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EElementStateType                                          State;                                                   // 0x0299(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EElementVisibilityType                                     Visibility;                                              // 0x029A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6ILK[0x1];                                   // 0x029B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ElementTypeName;                                         // 0x029C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5266[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              GroupKey;                                                // 0x02A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     PlayerLocations;                                         // 0x02B8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_333F[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetElementVisibility(EElementVisibilityType NewType);
		EElementStateType SetElementState(EElementStateType NewState);
		void OnElementVisibilityChanged(EElementVisibilityType CurrentVisibility);
		void OnElementStateChanged(EElementStateType CurrentState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPoolActorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarPoolActorInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPoolObjectInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarPoolObjectInterface : public UInterface
	{
	public:
		void OnPreDestroy();
		void OnDeactivated();
		void OnActivated();
		int32_t GetDefaultPoolLimit(const class FName& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPopPanelManager
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarPopPanelManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_4I6A[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPreloadAssetCollection
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USolarPreloadAssetCollection : public UPrimaryDataAsset
	{
	public:
		TArray<class UObject*>                                     PreloadRes;                                              // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      PreloadClass;                                            // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPreservedBotManager
	 * Size -> 0x02B0 (FullSize[0x02D8] - InheritedSize[0x0028])
	 */
	class USolarPreservedBotManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_TYB3[0x60];                                  // 0x0028(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FVector>                              SilenceLocationInDiffMap;                                // 0x0088(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZO51[0x4];                                   // 0x00D8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDetectDistance;                                       // 0x00DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RC0V[0x20];                                  // 0x00E0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USolarPreservedBotPopTask*>                   PopTasks;                                                // 0x0100(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FEQSParametrizedQueryExecutionRequest               DefaultPopQuery;                                         // 0x0110(0x0048) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<EPopLocationType, struct FEQSParametrizedQueryExecutionRequest> PopQueryMap;                                             // 0x0158(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UEnvQuery* SeparateQuery;                                           // 0x01A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EEnvQueryRunMode                                           SeparateEQSRunMode;                                      // 0x01B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HNRS[0x7];                                   // 0x01B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarBotTimelineAIItemSetting                      DefaultItemTemplate;                                     // 0x01B8(0x00F0) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		float                                                      TimeBetweenDyingAndDead;                                 // 0x02A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P1IN[0xC];                                   // 0x02AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSendBotsSuccess;                                       // 0x02B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSendBotsFail;                                          // 0x02C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void STATIC_TryUpdateEquipment(class UObject* Context, const struct FSolarBotTimelineAIItemSetting& ItemSetting);
		bool STATIC_TryPopBotByNum(class UObject* Context, int32_t PopNum, const struct FPopParameter& InPopParam);
		void STATIC_TryPopAllBotByGuarantee(class UObject* Context, const struct FVector& PopLocation);
		void STATIC_TryPopAllBot(class UObject* Context, const struct FPopParameter& InPopParam);
		void TryKillOneBot();
		void STATIC_TryAddPreservedBot(class ASolarPlayerState* InBot, float DelayTime);
		void OnPopSingleBotSuccess(class USolarPreservedBotPopTask* InTask);
		void OnPopBotsFinished(class USolarPreservedBotPopTask* InTask);
		void OnGetFinalTeleportLocSuccess(class USolarPreservedBotPopTask* InTask, class ASolarPlayerState* BotPS, const struct FVector& TeleportLoc);
		void OnGetFinalTeleportLocFail(class USolarPreservedBotPopTask* InTask, class ASolarPlayerState* BotPS);
		void STATIC_OnCharacterDeath(class ASolarPlayerController* InPlayer);
		void InitBotPreservedManager(unsigned char InActivePlayerNum, int32_t GameModeId);
		class USolarPreservedBotManager* STATIC_Get(class UObject* Context);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPreservedBotPopTask
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class USolarPreservedBotPopTask : public UObject
	{
	public:
		int32_t                                                    CurrentTaskID;                                           // 0x0028(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VVAB[0x14];                                  // 0x002C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     PickedTeleportCenters;                                   // 0x0040(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarPlayerState*>                           FailedBots;                                              // 0x0050(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarBotAIController*>                       PendingSeparateBots;                                     // 0x0060(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnGetTeleportLocationSuccess;                            // 0x0070(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPopBotsFinished;                                       // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetFinalTeleportLocSuccess;                            // 0x0090(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetFinalTeleportLocFail;                               // 0x00A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		struct FVector GetWarmTargetLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPrimaryAssetDirectoryLabel
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class USolarPrimaryAssetDirectoryLabel : public UPrimaryDataAsset
	{
	public:
		struct FPrimaryAssetRules                                  Rules;                                                   // 0x0030(0x000C) Edit, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bIsRuntimeLabel : 1;                                     // 0x003C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KPEK[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDirectoryPath>                              ExplicitDirectories;                                     // 0x0040(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ExplicitAssets[0x10];                                    // 0x0050(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarProgressiveInteractButton
	 * Size -> 0x00A0 (FullSize[0x03E8] - InheritedSize[0x0348])
	 */
	class USolarProgressiveInteractButton : public USolarUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnCompleteDelegate;                                      // 0x0348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCancelDelegate;                                        // 0x0358(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartInteract;                                         // 0x0368(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HVH9[0x1C];                                  // 0x0378(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsInCD : 1;                                             // 0x0394(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V4IR[0xB];                                   // 0x0395(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGaugeImage* Image_GameProgressBar;                                   // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Text_GameProgressTime;                                   // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BTN_GameProgressCancel;                                  // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_GameProgressTips;                                   // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* HorizontalBox_Cancel;                                    // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHUDPassiveHeadWidget* Panel_PassiveBuff;                                       // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_CD;                                              // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGaugeImage* Image_CD;                                                // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_CDTime;                                              // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateGameProgressTipsText(int32_t InTextId);
		void UpdateGameProgressText();
		void UpdateGameProgressBarPercent(float InPercent);
		void UpdateGameProgress(float InAddition);
		void TryCancelInteraction();
		void StopGameProgress(int32_t InActionID);
		void StopCountDownProgress(int32_t InActionID);
		void StartCountDownProgress(const struct FCountDownInfo& InCountInfo);
		void SimpleDynamicMulticastDelegate__DelegateSignature();
		void ShowPassiveBuff(int32_t CharacterId, int32_t LocalTextId);
		void RefreshToPreInteract();
		void RefreshToNonCancellableInteracting();
		void RefreshToCancellableInteracting();
		void OnSteamCancelCountDown();
		void OnParentVisibilityChanged(bool bVisible);
		void OnCompleteInternal();
		void OnCancelButtonClicked();
		void HidePassiveBuff();
		void EnterCD(float TotalTime, float StartTime);
		void BP_UpdateStateView(ECountDownState InState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarProjBullet
	 * Size -> 0x0190 (FullSize[0x0508] - InheritedSize[0x0378])
	 */
	class ASolarProjBullet : public ASolarBullet
	{
	public:
		unsigned char                                              UnknownData_DYYL[0x18];                                  // 0x0378(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UShapeComponent* CollisionComp;                                           // 0x0390(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UProjectileMovementComponent* MovementComp;                                            // 0x0398(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CWIV[0xA0];                                  // 0x03A0(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             SpawnedLocation;                                         // 0x0440(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VM3V[0x5C];                                  // 0x044C(0x005C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x04A8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* CurrentTrajectoryParticle;                               // 0x04B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAttachToActorOnStop;                                    // 0x04B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_84WW[0x3];                                   // 0x04B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeferExplodeTime;                                        // 0x04BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlySoundPlayDistance;                                    // 0x04C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bForceExplodeOnLifeSpanExpired;                          // 0x04C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_80V5[0x3];                                   // 0x04C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      HitActorImmediateExplodeArray;                           // 0x04C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* ExplosionParticle;                                       // 0x04D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ExplosionSoundName;                                      // 0x04E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ServerWaitClientTime;                                    // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R70A[0x4];                                   // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* BulletGameplayAbilityClass;                              // 0x04F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_54BC[0x8];                                   // 0x0500(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopSound(EShootingSoundOpt Opt);
		void StartSound(EShootingSoundOpt Opt);
		void OnTeamIgnoreCollisionActorChange(bool bAdd, class AActor* InActor, unsigned char TeamID);
		void OnStop(const struct FHitResult& HitResult);
		void OnAttachedActorDestroyed(class AActor* Other);
		void K2_OnExplode();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarProjBoxBullet
	 * Size -> 0x0008 (FullSize[0x0510] - InheritedSize[0x0508])
	 */
	class ASolarProjBoxBullet : public ASolarProjBullet
	{
	public:
		int32_t                                                    BoxBulletIndex;                                          // 0x0508(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8QAF[0x4];                                   // 0x050C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarProjectileMovementComponent
	 * Size -> 0x0000 (FullSize[0x01D0] - InheritedSize[0x01D0])
	 */
	class USolarProjectileMovementComponent : public UProjectileMovementComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarQuickSummonProxy
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarQuickSummonProxy : public UObject
	{
	public:
		bool TryGetSummonHitResult(struct FHitResult* OutHitResult, class AActor* InSummoner, class USolarSummonDetectionConfig* InSummonConfig);
		bool CanSummonForward(struct FHitResult* OutHitResult, class AActor* InSummoner, class USolarSummonDetectionConfig* InSummonConfig, TArray<float> InDistanceArray, float InUpHeight, float InDownHeight);
		bool CanSummonFootDown(struct FHitResult* OutHitResult, class AActor* InSummoner, class USolarSummonDetectionConfig* InSummonConfig, float InUpHeight, float InDownHeight);
		bool CanSummonAround(struct FHitResult* OutHitResult, class AActor* InSummoner, class USolarSummonDetectionConfig* InSummonConfig, int32_t InCheckNum, float InRadius, float InUpHeight, float InDownHeight);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRadarBase
	 * Size -> 0x0178 (FullSize[0x03A0] - InheritedSize[0x0228])
	 */
	class ASolarRadarBase : public AActor
	{
	public:
		ERadarType                                                 RadarType;                                               // 0x0228(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSuperRadar;                                             // 0x0229(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              SuperRadarMaxCount;                                      // 0x022A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0RZ1[0x1];                                   // 0x022B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EffectRadius;                                            // 0x022C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           EffectSize;                                              // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTeamShare;                                              // 0x0238(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNotifyEnemy;                                            // 0x0239(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V4CY[0x2];                                   // 0x023A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTag                                        RadarImmunityTag;                                        // 0x023C(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUniqueExist;                                            // 0x0244(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDisplayOnMap;                                           // 0x0245(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NALN[0x2];                                   // 0x0246(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EActorRegisterType>                                 ScanTargetTypes;                                         // 0x0248(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowTowards;                                            // 0x0258(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMarkPlayer;                                             // 0x0259(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZVNL[0x2];                                   // 0x025A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DisplayTime;                                             // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScanFrequency;                                           // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1V2C[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class AActor*, struct FRadarDelegateHandle>           ProcessingActorsImmunityTagsHandleMap;                   // 0x0268(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OWH3[0x48];                                  // 0x02B8(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayAbilitySpecHandle                          RadarHandle;                                             // 0x0300(0x0004) Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3K0A[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPerspectiveInScene;                                     // 0x0308(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAddWorldMark;                                           // 0x0309(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8OMW[0x2];                                   // 0x030A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayCueTag                                     CharacterPerspectiveCueTag;                              // 0x030C(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FGameplayCueTag                                     CharacterPerspectiveInSmokeCueTag;                       // 0x0314(0x0008) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7O8Z[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      PerspectiveedActors;                                     // 0x0320(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class AActor*, struct FPerspectiveActorInfo>          ProcessingActors;                                        // 0x0330(0x0050) Transient, NativeAccessSpecifierPrivate
		TArray<class FString>                                      OneTimeScannedPlayerIDs;                                 // 0x0380(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASolarCharacter*>                             ScanNotifiedPlayers;                                     // 0x0390(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdatePerspectiveActor();
		void ToggleWorldMarkByActor(class AActor* InTargetActor, bool bInAdd);
		struct FTransform ServerSpawningRadar(class APawn* RadarOwner, class ASolarCharacter* RadarInstigator, const struct FGameplayAbilitySpecHandle& InRadarHandle, float InLifeTime);
		void ServerOneTimeScanStart();
		void RemovePerspectivedCharacter(class ASolarCharacter* InTargetCharacter);
		void PerspectOneTimeScannedActor(class AActor* InActor);
		void PerspectiveTargetCharacter(class ASolarCharacter* InTargetCharacter);
		void OnRep_OneTimeScannedPlayerIDs();
		void AddPerspectiveDatas(class AActor* InActor, class UMeshComponent* InMesh);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRadarComponent
	 * Size -> 0x00F0 (FullSize[0x01A0] - InheritedSize[0x00B0])
	 */
	class USolarRadarComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FI05[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class URadarScanSoundDataAsset* RadarScanSoundDataAsset;                                 // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* ScannedScreenUIClass;                                    // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ScannedEffectID;                                         // 0x00C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5PKV[0x18];                                  // 0x00D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUserWidget* CreatedScreenUI;                                         // 0x00E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        DetectedTimerHandle;                                     // 0x00F0(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TimerHandleCounter;                                      // 0x00F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OBTJ[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FTimerHandle>                         DetectedTimerHandles;                                    // 0x0100(0x0050) Protected, NativeAccessSpecifierProtected
		class ASolarCharacter* CharacterOwner;                                          // 0x0150(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FScannedInfo>                                CurrentScanResults;                                      // 0x0158(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentSpanTimer;                                        // 0x0168(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O37I[0x4];                                   // 0x016C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ActivedRadarTags;                                        // 0x0170(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FMaterialChangeHandle                               DetectedMaterialHandle;                                  // 0x0180(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C08V[0x18];                                  // 0x0188(0x0018) MISSED OFFSET (PADDING)

	public:
		void WarningByRadarNotifation(float InRemainingTime);
		void OnRecivedScanResults();
		void OnRecieveOnceScanStart(int32_t ScanedNum, bool bSuperRader);
		void OnRadarScanStart(struct FRadarDataSpec* RadarDataSpec);
		void OnRadarScanEnd(struct FRadarDataSpec* RadarDataSpec);
		void OnRadarImmunityTagChanged(const struct FGameplayTag& Tag, int32_t NewCount);
		void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, const struct FGameplayTag& InRadarImmunityTag, bool bSuperRader);
		void OnceScanSuccessNotifation(int32_t ScanedNum);
		void OnceScanFailedNotifation();
		void MarkedByOnceScanNotifation();
		class FString GetModuleName_Implementation();
		void ExposedByRadarNotifation();
		void ChangeDetectedMaterial(bool bInDetected);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RadarScanSoundDataAsset
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class URadarScanSoundDataAsset : public UDataAsset
	{
	public:
		class FString                                              RadarScan_Loop_Start;                                    // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              RadarScan_Loop_End;                                      // 0x0040(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              RadarScan_Once_Success;                                  // 0x0050(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              RadarScan_Once_Failed;                                   // 0x0060(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SuperRadarScan_FoundEnemy;                               // 0x0070(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SuperRadarScan_FoundByEnemy;                             // 0x0080(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRadarStation
	 * Size -> 0x0058 (FullSize[0x0290] - InheritedSize[0x0238])
	 */
	class ASolarRadarStation : public ASolarInteractableActor
	{
	public:
		bool                                                       bEnable;                                                 // 0x0238(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I8QY[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Zone;                                                    // 0x023C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxTirggerDistance;                                      // 0x0240(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxTirggerAngle;                                         // 0x0244(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        CDTag;                                                   // 0x0248(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBroken;                                                 // 0x0250(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInCD;                                                   // 0x0251(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N0EY[0x2];                                   // 0x0252(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CoolDownTime;                                            // 0x0254(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CostEnergy;                                              // 0x0258(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RemainCDTime;                                            // 0x025C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USphereComponent* CollisionComp;                                           // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* NormalMesh;                                              // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarObjAbilitySystemComponent* ObjAbilitySystemComp;                                    // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* ObjAbilityClass;                                         // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayAbilitySpecHandle                          ObjAbilityHandle;                                        // 0x0280(0x0004) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9XSJ[0xC];                                   // 0x0284(0x000C) MISSED OFFSET (PADDING)

	public:
		bool TryTriggerRadarStation(class ASolarCharacter* InUser);
		void ServerInitailizeAbility();
		void OnResetCD();
		void OnRep_Broken();
		void OnRep_BInCD();
		void OnRadarStationCDChanged();
		void OnPlayStartScanEffect();
		void OnGameplayTagChanged(const struct FGameplayTag& Tag, bool bAdd);
		void OnClientStartScan();
		void OnBrokenChanged(bool InBroken);
		void InitailizeAbilityParams();
		float GetAbilityReaminingCD();
		float GetAbilityCostEnergy();
		float GetAbilityCooldown();
		bool CanActivateNow();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRedHintManager
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarRedHintManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_OLV4[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRenderParametersBasedOnDifferentStates
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASolarRenderParametersBasedOnDifferentStates : public AActor
	{
	public:
		class UDataTable* StreamingDistanceDataTable;                              // 0x0228(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetRelativeStreamingDistanceScale(ECharacterSkydivingState InCharacterSkydivingState);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarReplayCameraBase : public UObject
	{
	public:
		unsigned char                                              UnknownData_L083[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraFocusSinglePlayer
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USolarReplayCameraFocusSinglePlayer : public USolarReplayCameraBase
	{
	public:
		struct FReplayFindSpectateTargetParams                     FindSpectateTargetParams;                                // 0x0030(0x0018) Protected, NativeAccessSpecifierProtected
		class ASolarPlayerState* Target;                                                  // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraThirdPerson
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USolarReplayCameraThirdPerson : public USolarReplayCameraFocusSinglePlayer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraLock
	 * Size -> 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
	 */
	class USolarReplayCameraLock : public USolarReplayCameraFocusSinglePlayer
	{
	public:
		unsigned char                                              UnknownData_MWCW[0x18];                                  // 0x0050(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraFree
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USolarReplayCameraFree : public USolarReplayCameraBase
	{
	public:
		class ASolarSpectatorPawn* SpectatorPawn;                                           // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K5K6[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraLookAtMovablePoint
	 * Size -> 0x0048 (FullSize[0x0078] - InheritedSize[0x0030])
	 */
	class USolarReplayCameraLookAtMovablePoint : public USolarReplayCameraBase
	{
	public:
		unsigned char                                              UnknownData_UXZE[0x38];                                  // 0x0030(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSolarActorGroupOfReplayCamera>              ActorGroups;                                             // 0x0068(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraLookAt
	 * Size -> 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
	 */
	class USolarReplayCameraLookAt : public USolarReplayCameraLookAtMovablePoint
	{
	public:
		unsigned char                                              UnknownData_D5ND[0x10];                                  // 0x0078(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraCircular
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class USolarReplayCameraCircular : public USolarReplayCameraLookAtMovablePoint
	{
	public:
		unsigned char                                              UnknownData_L1Q5[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayCameraControlComp
	 * Size -> 0x00C0 (FullSize[0x0170] - InheritedSize[0x00B0])
	 */
	class USolarReplayCameraControlComp : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnReplayCameraModeChanged;                               // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ASolarSpectateInfo* ReplayPCSpectateInfo;                                    // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DefaultSpeed;                                            // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveSpeedChangeStep;                                     // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveSpeedMin;                                            // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveSpeedMax;                                            // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedUpScale;                                            // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DefaultTurnRate;                                         // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnRateChangeStep;                                      // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnSpeedMin;                                            // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnSpeedMax;                                            // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceChangeStep;                                      // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarReplayCameraBase* ReplayCamera;                                            // 0x00F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OO9J[0x8];                                   // 0x00F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarPlayerState* LastTarget;                                              // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RPAH[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EReplayCameraMode, class USolarReplayCameraBase*>     CacheCameras;                                            // 0x0118(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YMO1[0x8];                                   // 0x0168(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnStreamingReadied();
		void OnSpectateInfoRep(class ASolarSpectateInfo* InSpecInfo);
		void OnReplayCameraModeChanged__DelegateSignature(EReplayCameraMode OldMode, EReplayCameraMode CurMode);
		void OnPlayingScrubStart();
		void OnPlayingScrubCharactersCreated();
		void OnPlayingFirstScrubFinished();
		EReplayCameraMode GetReplayCameraMode();
		void ChangeLockSpectatorModeDistance(float val);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayHighlightComponent
	 * Size -> 0x0078 (FullSize[0x0128] - InheritedSize[0x00B0])
	 */
	class USolarReplayHighlightComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_67VS[0x30];                                  // 0x00B0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RecordAfterSettled;                                      // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SlowMoStartTime;                                         // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SlowMoEndTime;                                           // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SlowMoMultiplier;                                        // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      KillEffectTime;                                          // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZGWD[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOBHighlightOverviewWidget* HighlightOverviewWidget;                                 // 0x00F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_P8R0[0x28];                                  // 0x0100(0x0028) MISSED OFFSET (PADDING)

	public:
		void ReceiveHighlightOverviewData(const struct FPlayerHighlightOverview& OverviewData);
		void ReceiveHighlightData(const class FString& PlayerId, const struct FReplayActivityHeatFragment& NewFragment);
		void OnReplayWidgetTranslatePlayEndOver();
		void OnReplayWidgetTranslatePlayBeginOver();
		void OnReplayWidgetOverviewPlayEnd();
		void OnReplayWidgetHighlightPlayEnd();
		void OnReplayScrubStarted();
		void OnReplayPaused();
		void OnReplayContinued();
		class UUISubsystem* GetUISubSystem();
		class USolarReplayManager* GetReplayManager();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayManager
	 * Size -> 0x04F8 (FullSize[0x0520] - InheritedSize[0x0028])
	 */
	class USolarReplayManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_TKD1[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     WaitingOBMap;                                            // 0x0040(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      WaitingReplayStartUIClass;                               // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      OBModeSpectatorPawnClass;                                // 0x0070(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      OBModeHUDClass;                                          // 0x0088(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      OBHeadInfoWidgetClass;                                   // 0x00A0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     PerspectiveCueTag;                                       // 0x00B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     PerspectiveInSmokeCueTag;                                // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     PerspectiveMaterial;                                     // 0x00C8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAddMultiplePassMaterialChangeParams                PerspectiveMaterialParams;                               // 0x00E0(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      DirectorModeSpectatorPawnClass;                          // 0x0120(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DirectorModeInputModeName;                               // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UpdateDistanceInterval;                                  // 0x0140(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBTeamListNearbyDistance;                                // 0x0144(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBHeadInfoNearDistance;                                  // 0x0148(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBHeadInfoFarDistance;                                   // 0x014C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBDamageTextHideDistance;                                // 0x0150(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBDelayTimeForTournament;                                // 0x0154(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBLivePreDownloadTime;                                   // 0x0158(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBSkipBeginningTime;                                     // 0x015C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<float>                                              OBPlaybackSpeedList;                                     // 0x0160(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              OBPlaybackSpeedDefaultIndex;                             // 0x0170(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              OBLiveDelayChunkCount;                                   // 0x0171(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XYGZ[0x2];                                   // 0x0172(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                OBLockCameraBindBoneName;                                // 0x0174(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             OBLockCameraBindBoneOffset;                              // 0x017C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBInitLockDistance;                                      // 0x0188(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBMinLockDistance;                                       // 0x018C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBMaxLockDistance;                                       // 0x0190(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBMinLockPitch;                                          // 0x0194(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBMaxLockPitch;                                          // 0x0198(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBPitchAdjustTriggerFloor;                               // 0x019C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OBPitchAdjustValue;                                      // 0x01A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ReplayCacheFileRetentionTimeInSeconds;                   // 0x01A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HighlightFileRetentionTimeInSeconds;                     // 0x01A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HighlightFileMaxCount;                                   // 0x01AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HighlightMinimalDiskSpaceInMB;                           // 0x01B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A65Z[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            EnableHighlightModeGroups;                               // 0x01B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BDHU[0x8];                                   // 0x01C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayingStartedDelegate;                                // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingLoadLevelsStartedDelegate;                      // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingLevelLoadedDelegate;                            // 0x01F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingStreamReadiedDelegate;                          // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingAtEndDelegate;                                  // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingFinishedDelegate;                               // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRecordingStartedDelegate;                              // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRecordingStartFailedDelegate;                          // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRecordingFinishedDelegate;                             // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingScrubStartDelegate;                             // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingPreScrubDelegate;                               // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingFirstScrubFinishedDelegate;                     // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingScrubFailedDelegate;                            // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingScrubCharactersCreatedDelegate;                 // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingPauseDelegate;                                  // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayingContinueDelegate;                               // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlaybackSpeedChangedDelegate;                          // 0x02D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCheatersPlayerIDChanged;                               // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAutoPlaybackSpeedUpStart;                              // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAutoPlaybackSpeedUpStop;                               // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H1UW[0x40];                                  // 0x0310(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHighlightListChanged;                                  // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q0KV[0x78];                                  // 0x0360(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUserWidget* WaitingReplayStartUI;                                    // 0x03D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FAVA[0x140];                                 // 0x03E0(0x0140) MISSED OFFSET (PADDING)

	public:
		void WriteHeaderData(TArray<class FString>* OutHeaderData);
		void StopRecording();
		void StopPlayReplay();
		void StartRecording(const class FString& SessionName, const class FString& UploadUrl, ERecordingType ForceRecordingType);
		void StartRecordHighlightOfCurrentBattle(const class FString& SessionNameOverride);
		void SpeedUpTimeDilation();
		void SlowDownTimeDilation();
		bool ShouldShowProgressBar();
		void SetTimeDilation(float Dilation);
		void SetStartSpectateTournamentTime();
		void SetRequestTryStrategy(float Interval, int32_t Times);
		void SetRecordingType(ERecordingType InRecordingType);
		void SetReadyToRecord(bool bIsReady, TArray<class FString> OBPlayerIDs);
		void SetLiveWatchingPlayerForPlaying(const class FString& BeWatchingPlayerID);
		void SetEnableCompressForHttpReplay(bool bEnable);
		void RetryPlayReplayFromServer();
		void RequestWatchingLiveOfPlayer(const class FString& SolarPlayerID);
		void RequestPlayReplayOfCurrentBattle();
		void RequestPlayReplay(const class FString& InBattleID, bool IsLive);
		void RequestBattleList(int32_t PageIndex, int32_t PageSize);
		void ReplayManagerNoParamDelegate__DelegateSignature();
		void RecordReplayInfosOnRecordingStarted();
		void ReceivePlayingStartFailed();
		bool ReceivePlayingFinished(EReplayPlayingFinishReason reason, unsigned char StreamerErrorCode, const class FString& StreamerErrorMsg);
		void ProcessHeaderData(TArray<class FString> HeaderData, class FString* Error);
		void PlayReplayFromServer(const class FString& SessionName, const class FString& DownloadUrl);
		void PlayReplayFromLocal(const class FString& ReplayFileName);
		void PlayingFinishedInternal();
		void PlayHighlight(const class FString& InBattleID);
		void PausePlayReplay();
		void OnPlayingFinished(class UWorld* World);
		void OnPlayingAtEnd(class UWorld* World);
		void OnPlayerStopWatchingLive(const class FString& StopWatchingPlayerID);
		void OnPlayerStartWatchingLive(const class FString& RequestWatchingPlayerID, const class FString& BeWatchingPlayerID);
		void OnLiveWatchTargetLost();
		void NotifyTournamentSpectate(bool bIsInLiveReplay);
		bool NotifyBackendPlayReplayFinished();
		void LuaOnPostLoadMapWithWorld(const class FString& LevelName);
		void LuaBindDelegates();
		bool IsTournament();
		bool IsScrubing();
		bool IsReplayLive();
		bool IsRecordingHighlight();
		bool IsRecording();
		bool IsReady();
		bool IsPlayingHighlight();
		bool IsPlaying();
		bool IsPlayerBeWatching(const class FString& SolarPlayerID);
		bool IsPausing();
		bool IsLocal();
		bool IsLiveWatchOnly();
		bool IsInState(EReplayManagerState CheckState);
		bool IsACheater(const class FString& PlayerId);
		bool HasHighlight(const class FString& InBattleID);
		void GotoTimeInSecond(float Second);
		float GetTotalSessionTimeInSecond();
		float GetTimeDilation();
		void GetStartRecordingParams(struct FStartRecordingParams* OutParams);
		ERecordingType GetRecordingType();
		float GetCurrentSessionTimeInSecond();
		class FString GetCurrentSessionName();
		class FString GetBeWatchingPlayerID();
		class FString GetBattleIDByIndex(int32_t Index);
		void EnterSettlementStage();
		void DestroyWaitingOBStartUI();
		void DebugAllPlayerIsBeWatching(bool bAllPlayerIsBeWatching);
		void CreateWaitingOBStartUI();
		void ContinuePlayReplay();
		void AppendCheatersPlayerID(TArray<class FString> InCheatersPlayerID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayPerspectiveEffect
	 * Size -> 0x0048 (FullSize[0x01A8] - InheritedSize[0x0160])
	 */
	class USolarReplayPerspectiveEffect : public UMaterialEffectBase
	{
	public:
		unsigned char                                              UnknownData_PC95[0x48];                                  // 0x0160(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayPerspectiveInSmokeEffect
	 * Size -> 0x0000 (FullSize[0x01A8] - InheritedSize[0x01A8])
	 */
	class USolarReplayPerspectiveInSmokeEffect : public USolarReplayPerspectiveEffect
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplayPlayerController
	 * Size -> 0x00F8 (FullSize[0x0F98] - InheritedSize[0x0EA0])
	 */
	class ASolarReplayPlayerController : public ASolarPlayerController
	{
	public:
		float                                                      WaitFirstTeamNumberInputTime;                            // 0x0EA0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WaitTeamNumberInputTime;                                 // 0x0EA4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarReplayCameraControlComp* SolarReplayCameraControlComp;                            // 0x0EA8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarReplayHighlightComponent* SolarReplayHighlightComponent;                           // 0x0EB0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEmitBulletDelegate;                                    // 0x0EB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class FString, float>                                 HorizontalDistanceBetweenPlayerAndOBCamera;              // 0x0EC8(0x0050) Transient, NativeAccessSpecifierPrivate
		class USolarReplayManager* ReplayManager;                                           // 0x0F18(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDemoNetDriver* DemoNetDriver;                                           // 0x0F20(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L1GH[0x20];                                  // 0x0F28(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<unsigned char, class UMaterialInstanceDynamic*>       TeamNumToPerspectiveMaterialMap;                         // 0x0F48(0x0050) NativeAccessSpecifierPrivate

	public:
		void UpdateDistanceBetweenOBCamAndPlayer();
		void StopSpectatePlayer();
		void StopPlayReplay();
		void SpectateVictim();
		void SpectatePlayerByPlayerID(const class FString& SolarPlayerID);
		void SpectateAttacker();
		void SolarGM_ToggleProgressControlButton();
		void SolarGM_SetWatchingLiveTarget(const class FString& InPlayerID);
		void SolarGM_ReplayDebugLog(bool bOpenDebugLog);
		bool ShowDamageText(struct FSolarDamageText* InDamageText);
		void SetUISettingHeadInfoStyle(EOBPlayerHeadInfoWidgetStyle InType);
		void SetDamageTextVisible(bool bIsVisible);
		void SetBattleOBHUDType(EBattleOBHUDType Type);
		void PauseReplay();
		void OnReplayPlayingLevelLoaded();
		void OnReplayPlayingFirstScrubFinished();
		void OnPlayingFinished();
		void OnEmitBulletDelegate__DelegateSignature(const struct FVector& StartLoc, const struct FVector& AimLoc, const class FString& SolarPlayerID);
		void OnBattleOBHUDTypeChanged(EBattleOBHUDType CurrentType);
		bool IsSpectatingPlayer();
		class ASolarPlayerState* GetWatchingLiveTarget();
		TMap<class FString, float> GetHorizontalDistanceBetweenPlayerAndOBCamera();
		class FString GetCurrentSpectatePlayerID();
		EBattleOBHUDType GetBattleOBHUDType();
		void ExitDirectorMode();
		void EnterDirectorMode();
		void ContinueReplay();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraph
	 * Size -> 0x01D8 (FullSize[0x06D0] - InheritedSize[0x04F8])
	 */
	class USolarReplicationGraph : public UReplicationGraph
	{
	public:
		TArray<class UClass*>                                      SpatializedClasses;                                      // 0x04F8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      NonSpatializedChildClasses;                              // 0x0508(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AlwaysRelevantClasses;                                   // 0x0518(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection* RejoinNode;                                              // 0x0528(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarReplicationGraphNode_GridSpatialization2D* GridNode;                                                // 0x0530(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReplicationGraphNode_ActorList* AlwaysRelevantNode;                                      // 0x0538(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarReplicationGraphNode_CustomRelevancy* CustomRelevancyNode;                                     // 0x0540(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FGZL[0x50];                                  // 0x0548(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<unsigned char, class USolarReplicationGraphNode_AlwaysRelevant_ForTeam*> AlwaysRelevantForTeamNodes;                              // 0x0598(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L7R5[0xE8];                                  // 0x05E8(0x00E8) MISSED OFFSET (PADDING)

	public:
		void UnbindActorToCharacterTeam(class ASolarCharacter* Character, class AActor* Actor);
		void BindActorToCharacterTeam(class ASolarCharacter* Character, class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection
	 * Size -> 0x00A8 (FullSize[0x0178] - InheritedSize[0x00D0])
	 */
	class USolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection : public UReplicationGraphNode_ActorList
	{
	public:
		unsigned char                                              PendingForceNetUpdateConnections[0x50];                  // 0x00D0(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              PendingForceNetUpdateActors[0x50];                       // 0x0120(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_WIL6[0x8];                                   // 0x0170(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraphNode_CustomRelevancy
	 * Size -> 0x0010 (FullSize[0x00E0] - InheritedSize[0x00D0])
	 */
	class USolarReplicationGraphNode_CustomRelevancy : public UReplicationGraphNode_ActorList
	{
	public:
		unsigned char                                              UnknownData_9M5G[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForConnection
	 * Size -> 0x0248 (FullSize[0x0298] - InheritedSize[0x0050])
	 */
	class USolarReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_86FZ[0x228];                                 // 0x0050(0x0228) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor* LastPawn;                                                // 0x0278(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FAlwaysRelevantActorInfo>                    PastRelevantActors;                                      // 0x0280(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4WZ2[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForTeam
	 * Size -> 0x0078 (FullSize[0x00C8] - InheritedSize[0x0050])
	 */
	class USolarReplicationGraphNode_AlwaysRelevant_ForTeam : public UReplicationGraphNode
	{
	public:
		TArray<class AActor*>                                      TeamActors;                                              // 0x0050(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BUFX[0x10];                                  // 0x0060(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              LastReplicationActors[0x50];                             // 0x0070(0x0050) UNKNOWN PROPERTY: SetProperty
		class AActor* LastPawn;                                                // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraphNode_PlayerStateFrequencyLimiter
	 * Size -> 0x0028 (FullSize[0x0078] - InheritedSize[0x0050])
	 */
	class USolarReplicationGraphNode_PlayerStateFrequencyLimiter : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_D7D3[0x28];                                  // 0x0050(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraphNode_GridSpatialization2D
	 * Size -> 0x00A8 (FullSize[0x02D0] - InheritedSize[0x0228])
	 */
	class USolarReplicationGraphNode_GridSpatialization2D : public UReplicationGraphNode_GridSpatialization2D
	{
	public:
		unsigned char                                              PendingForceNetUpdateActors[0x50];                       // 0x0228(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_80QS[0x58];                                  // 0x0278(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraphNode_GridCell
	 * Size -> 0x0010 (FullSize[0x0130] - InheritedSize[0x0120])
	 */
	class USolarReplicationGraphNode_GridCell : public UReplicationGraphNode_GridCell
	{
	public:
		class UReplicationGraphNode_ActorList* ForceNetUpdateNode;                                      // 0x0120(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F0UW[0x8];                                   // 0x0128(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarReplicationGraphDebugActor
	 * Size -> 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
	 */
	class ASolarReplicationGraphDebugActor : public AReplicationGraphDebugActor
	{
	public:
		void ServerSetClassNetCullDistance(class UClass* Class, float CullDistance);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarResolutionSettings
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarResolutionSettings : public UObject
	{
	public:
		void STATIC_SetScreenModeByNum(int32_t InScreenMode);
		void STATIC_SetScreenMode(EWindowMode InScreenMode);
		EWindowMode STATIC_GetScreenMode();
		bool STATIC_CanViewportSetWindowedMode();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarResurrectionComponent
	 * Size -> 0x0088 (FullSize[0x0138] - InheritedSize[0x00B0])
	 */
	class USolarResurrectionComponent : public UActorComponent
	{
	public:
		unsigned char                                              bEnableResurrection;                                     // 0x00B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OJ8J[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ADeathTreasureBox* DeathBox;                                                // 0x00B8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DeathBoxLoc;                                             // 0x00C0(0x000C) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EResurrectionState                                         ResurrectionState;                                       // 0x00CC(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EKL6[0x3];                                   // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnResurrectionStateChanged;                              // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      CurrentCountDownStartTime;                               // 0x00E0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CountDownAccTime;                                        // 0x00E4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XAXA[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ConfigCountDownTime;                                     // 0x00F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResurrectionClutchTime;                                  // 0x00F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_USJV[0x8];                                   // 0x00F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsTimeoutCountDownPaused : 1;                           // 0x0100(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0447[0x7];                                   // 0x0101(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTimeoutCountDownStateChanged;                          // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UWorldMark_ReviveTeammates>           DeathBoxMark;                                            // 0x0118(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* DeathBoxMarkClass;                                       // 0x0120(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               RebornLine;                                              // 0x0128(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* RebornLineClass;                                         // 0x0130(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void TryContinueTimeoutCountDown();
		void SetResurrectionState(EResurrectionState NewState, bool bShouldNotifyOnServer);
		void SetDeathBox(class ADeathTreasureBox* InDeathBox);
		void ServerNotifyTeammatesHelp();
		void OnTimeoutCountDownStateChanged__DelegateSignature(bool bPaused);
		void OnResurrectionStateChanged__DelegateSignature(EResurrectionState NewState);
		void OnRep_ResurrectionState(EResurrectionState LastState);
		void OnRep_bIsTimeoutCountDownPaused();
		void MulticastPlayMarkNotify();
		void LazyPauseTimeoutCountDownByClutchTime();
		float GetWaitTimeRemaining();
		struct FVector GetDeathBoxLoc();
		void Event_OnRevivingComplete(const class FString& PlayerId);
		void Event_OnRevivedComplete();
		void Event_OnResurrectionStateChanged(EResurrectionState LastState);
		void EnterBuyResurrectionProcess();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRichTextBlock
	 * Size -> 0x05F0 (FullSize[0x0750] - InheritedSize[0x0160])
	 */
	class USolarRichTextBlock : public UTextLayoutWidget
	{
	public:
		bool                                                       bEnableLocText;                                          // 0x0160(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8G3E[0x7];                                   // 0x0161(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Text;                                                    // 0x0168(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    LocTextID;                                               // 0x0180(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESolarSupportLanguages                                     PreviewLang;                                             // 0x0184(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J2EH[0x3];                                   // 0x0185(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable* TextStyleSet;                                            // 0x0188(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      DecoratorClasses;                                        // 0x0190(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideDefaultStyle;                                   // 0x01A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IRFJ[0x7];                                   // 0x01A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTextBlockStyle                                     DefaultTextStyleOverride;                                // 0x01A8(0x02A8) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      MinDesiredWidth;                                         // 0x0450(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsingAccurateScale;                                     // 0x0454(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AO3R[0x2AB];                                 // 0x0455(0x02AB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class URichTextBlockDecorator*>                     InstanceDecorators;                                      // 0x0700(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YMDC[0x40];                                  // 0x0710(0x0040) MISSED OFFSET (PADDING)

	public:
		void SetWrapTextAt(float InWrapTextAt);
		void SetWrappingPolicy(ETextWrappingPolicy InWrappingPolicy);
		void SetTextStyleSet(class UDataTable* NewTextStyleSet);
		void SetText(const class FText& InText);
		void SetMinDesiredWidth(float InMinDesiredWidth);
		void SetDefaultTextStyle(const struct FTextBlockStyle& InDefaultTextStyle);
		void SetDefaultStrikeBrush(struct FSlateBrush* InStrikeBrush);
		void SetDefaultShadowOffset(const struct FVector2D& InShadowOffset);
		void SetDefaultShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
		void SetDefaultFont(const struct FSlateFontInfo& InFontInfo);
		void SetDefaultColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
		void SetAutoWrapText(bool InAutoTextWrap);
		ETextWrappingPolicy GetWrappingPolicy();
		class UDataTable* GetTextStyleSet();
		class FText GetText();
		class URichTextBlockDecorator* GetDecoratorByClass(class UClass* DecoratorClass);
		void ClearAllDefaultStyleOverrides();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRocketVehicleAnimInstance
	 * Size -> 0x0094 (FullSize[0x0480] - InheritedSize[0x03EC])
	 */
	class USolarRocketVehicleAnimInstance : public USolarLeggedVehicleAnimInstance
	{
	public:
		float                                                      FootTargetTraceLength;                                   // 0x03EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     FootTargetTraceStartLocations;                           // 0x03F0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FootTraceRadius;                                         // 0x0400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FootTargetBlendSpeed;                                    // 0x0404(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<float>                                              FootTargetOffsets;                                       // 0x0408(0x0010) Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* VehicleWeapoReloadMontage;                               // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWeaponFiring;                                           // 0x0420(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInPrecisionShoot;                                       // 0x0421(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4WN1[0x2];                                   // 0x0422(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RocketBoneAlpha;                                         // 0x0424(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, struct FVector>                          RocketBoneScales;                                        // 0x0428(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JM3C[0x8];                                   // 0x0478(0x0008) MISSED OFFSET (PADDING)

	public:
		void AnimNotify_EnterOpen();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRoleSkillDataConfig
	 * Size -> 0x01C0 (FullSize[0x01F0] - InheritedSize[0x0030])
	 */
	class USolarRoleSkillDataConfig : public UDataAsset
	{
	public:
		unsigned char                                              ClassCommonPassiveSkill[0x28];                           // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		TMap<EClassType, struct FHeroClassConfig>                  HeroClassConfigs;                                        // 0x0058(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class UDataTable* RoleSkillDataTable;                                      // 0x00A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* BattleUpgradeEffectTypeDataTable;                        // 0x00B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RoleSkillCannotActiveNoticeID;                           // 0x00B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9IEC[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftClassPath                                      UniqueSkillForbiddenGameplayEffect;                      // 0x00C0(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      TacticalSkillForbiddenGameplayEffect;                    // 0x00D8(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      InitCDValueGameplayEffect;                               // 0x00F0(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      SuperSkillBlockGameplayEffect;                           // 0x0108(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      TacticalSkillBlockGameplayEffect;                        // 0x0120(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* UsingContinuousSkillStatusEffect;                        // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* HoldingSkillStatusEffect;                                // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* WeaponUIStyleDataTable;                                  // 0x0148(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, class FString>                               CharacterUpgradeEffects;                                 // 0x0150(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2MWJ[0x50];                                  // 0x01A0(0x0050) MISSED OFFSET (PADDING)

	public:
		EClassLevelUpRewardType GetLevelUpRewardType(int32_t CharacterId, int32_t TargetLevel);
		struct FSoftObjectPath GetLevelUpInnerIconPath(int32_t CharacterId, int32_t TargetLevel);
		class FString GetLevelUpInnerDescription(int32_t CharacterId, int32_t TargetLevel);
		TArray<struct FSoftObjectPath> GetLevelUpAllInnerIconPath(int32_t CharacterId, int32_t TargetLevel);
		TArray<class FString> GetLevelUpAllInnerDescription(int32_t CharacterId, int32_t TargetLevel);
		class FString GetEffectIdForCharacterUpgrade(int32_t TargetLevel);
		EClassType GetClassTypeForCharacter(int32_t CharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarRuntimeAssetsCollection
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarRuntimeAssetsCollection : public URuntimeAssetsCollectionBase
	{
	public:
		TArray<struct FFilteredData>                               AssetFilters;                                            // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPattern
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarPattern : public UObject
	{
	public:
		bool                                                       bEnabled;                                                // 0x0028(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_B5XB[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarPatternRuntime
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarPatternRuntime : public UObject
	{
	public:
		class USolarPattern* PattenData;                                              // 0x0028(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarIncreaseAndDecreasePattern
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USolarIncreaseAndDecreasePattern : public USolarPattern
	{
	public:
		EIncreaseAndDecreaseTransitionMode                         TransitionMode;                                          // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D3VR[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarIncreaseAndDecreasePatternRuntime
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USolarIncreaseAndDecreasePatternRuntime : public USolarPatternRuntime
	{
	public:
		unsigned char                                              UnknownData_RNFR[0x20];                                  // 0x0030(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSaveGame
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class USolarSaveGame : public USaveGame
	{
	public:
		bool                                                       HasShowNewPlayerGuide;                                   // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OACM[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    EditorGameModeId;                                        // 0x002C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FNeverShowCheckWindow>                       NeverShowCheckWindowList;                                // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasReadSurvey;                                           // 0x0040(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasReadSurvey2;                                          // 0x0041(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasPlayedHuntMode;                                       // 0x0042(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              MatchTimes;                                              // 0x0043(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasCompleteTeamUp;                                       // 0x0044(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsMorrowPlayer;                                          // 0x0045(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClickSocialEntranceBtnDiscord;                          // 0x0046(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClickSocialEntranceBtnFacebook;                         // 0x0047(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClickSocialEntranceBtnYouTube;                          // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClickSocialEntranceBtnTikTok;                           // 0x0049(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClickSocialEntranceBtnInstagram;                        // 0x004A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClickSocialTip;                                         // 0x004B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClickLiveBroadcast;                                     // 0x004C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5I9K[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    SocialLinkLastClickTime;                                 // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasReportedOnline15min;                                 // 0x0058(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasReportedOnline30min;                                 // 0x0059(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasPlayedPackEnterAnimation;                            // 0x005A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasClickClanPermission;                                 // 0x005B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasClickVipCard;                                        // 0x005C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KN23[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BattlePassID;                                            // 0x0060(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6OJD[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            MarkingPassTaskID;                                       // 0x0068(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            DisplayedProductIDs;                                     // 0x0078(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            ClickedPosterRecIDs;                                     // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2V4P[0x8];                                   // 0x0098(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<uint32_t>                                           ReadMailIds;                                             // 0x00A0(0x0010) Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool ValidateNeverShowCheckWindow(int32_t TargetConfirmID);
		void UpdateNeverShowCheckWindow(int32_t TargetConfirmID, ENeverShowDuration NewDuration);
		void UpdateMarkTask(int32_t InBattlePassID, int32_t TaskID, bool Add);
		void UpdateDisplayedIDs(TArray<int32_t> InIDs);
		void UpdateClickedPosterRecIDs(int32_t InID);
		void SetMarkingTask(int32_t InBattlePassID, TArray<int32_t>* InTaskID);
		void PrintTwiceConfirmCheckWindowList();
		void GetMarkingTask(int32_t InBattlePassID, TArray<int32_t>* OutTaskID);
		bool DeleteNeverShowCheckWindow(int32_t TargetConfirmID);
		void ClearDisplayIDs();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSceneConfig
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class USolarSceneConfig : public UDataAsset
	{
	public:
		struct FSoftObjectPath                                     MeshMapPath;                                             // 0x0030(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     LightmapPath;                                            // 0x0048(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarScreenEffectWidget
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class USolarScreenEffectWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_NCLF[0x4];                                   // 0x0348(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCanBeReused;                                            // 0x034C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MWWZ[0x3];                                   // 0x034D(0x0003) MISSED OFFSET (PADDING)

	public:
		void StopPlayScreenEffect();
		void StartPlayScreenEffect();
		bool ShouldEnablePoisonEffect();
		void PreAddToReuseCache();
		void PostRemoveFromReuseCache();
		void NotifyScreenEffectComplete();
		bool IsInstantEffectComplete();
		bool IsFadeOutFinished();
		void FadeOutScreenEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarShieldDamageEffect
	 * Size -> 0x0008 (FullSize[0x01A0] - InheritedSize[0x0198])
	 */
	class USolarShieldDamageEffect : public USolarAbilityEffect
	{
	public:
		float                                                      ShieldDamage;                                            // 0x0198(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1ZJM[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (PADDING)

	public:
		float GetShieldDamage();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarShieldProgressBoard
	 * Size -> 0x0038 (FullSize[0x02F0] - InheritedSize[0x02B8])
	 */
	class USolarShieldProgressBoard : public USolarAdvProgressBoard
	{
	public:
		float                                                      AutoRechargeSpeed;                                       // 0x02B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RechargeTime;                                            // 0x02BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreChangeSpeed;                                          // 0x02C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OXVV[0x2C];                                  // 0x02C4(0x002C) MISSED OFFSET (PADDING)

	public:
		void UpdateCurrentValue(float Current);
		void SetSpeed(float NewSpeed);
		void SetProgressColorByID(const struct FLinearColor& InColor, int32_t InID);
		void SetPreAddColor();
		void PreAddValue(float InCurrentValue, float InChangeValue, EShieldRechargeState RechargeState, bool bInFixPreAdd);
		void InitProgressBoard(float Current, float Max, int32_t Fragment);
		void InitProgress();
		float GetSpeed();
		void DoMinusValue(float InCurrentValue, float InChangeValue);
		void DoAddValue(float InCurrentValue);
		void CancelAddValue(float InCurrentValue, float InChangeValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarShieldUpgradeItemShop
	 * Size -> 0x0200 (FullSize[0x0438] - InheritedSize[0x0238])
	 */
	class ASolarShieldUpgradeItemShop : public ASolarInteractableActor
	{
	public:
		int32_t                                                    groupid;                                                 // 0x0238(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ServerActiveGroupID;                                     // 0x023C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent* BodyMesh;                                                // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USphereComponent* CollisionComp;                                           // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* HeadUpIconMesh;                                          // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* BodyScreenMesh;                                          // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DVT0[0x18];                                  // 0x0260(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    UpgradeItemNum;                                          // 0x0278(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D90J[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              InteractionTriggeredEffect[0x28];                        // 0x0280(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FSolarIntArray                                      InteractedPlayerIDList;                                  // 0x02A8(0x0130) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		int32_t                                                    Uid;                                                     // 0x03D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FKJ3[0x1C];                                  // 0x03DC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent* AudioTriggerComp;                                        // 0x03F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* AkAudioComponent;                                        // 0x0400(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x0408(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SNameHint;                                               // 0x0410(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SNameStopHint;                                           // 0x0420(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0RHH[0x8];                                   // 0x0430(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_UID();
		void OnRep_InteractedPlayerIDList();
		void OnRep_ActiveGroupID();
		void OnOtherPlayerInteracted();
		void OnLocalPlayerSpectateTargetChanged(class ASolarPlayerState* OldTarget, class ASolarSpectateInfo* InSpectateInfo);
		void OnBindLocalPlayerSpectateTargetChanged(class ASolarSpectateInfo* SpecInfo);
		void OnActorEndOverlapAudioSphere(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnActorEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnActorBeginOverlapAudioSphere(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnActorBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void InitSolarAkGameObject(class UActorComponent* Component, bool bReset);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWheeledVehicle
	 * Size -> 0x0028 (FullSize[0x13A8] - InheritedSize[0x1380])
	 */
	class ASolarWheeledVehicle : public ASolarVehiclePawn
	{
	public:
		unsigned char                                              UnknownData_RE3B[0x8];                                   // 0x1380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarWheeledVehicleMovement* VehicleMovement;                                         // 0x1388(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReplicatedDrift;                                        // 0x1390(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReplicatedIsBurnout;                                    // 0x1391(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_22ZM[0x2];                                   // 0x1392(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlatformDetachImpulse;                                   // 0x1394(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2UU3[0x10];                                  // 0x1398(0x0010) Fix size for supers

	public:
		void StatVehicleAutoSteering(bool bInSameDirection);
		void ServerSetIsDrift(bool bInDrift, unsigned char InDriveType);
		void ServerSetIsBurnout(bool bInBurnout);
		void OnRep_IsBurnout();
		void OnRep_Drift();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSiegeVehicle
	 * Size -> 0x0068 (FullSize[0x1410] - InheritedSize[0x13A8])
	 */
	class ASolarSiegeVehicle : public ASolarWheeledVehicle
	{
	public:
		TArray<struct FSiegeVehicleOpenTraceData>                  CheckOpenTraceBox;                                       // 0x13A8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSiegeVehicleOpenCapsuleData>                CheckOpenTraceCap;                                       // 0x13B8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckOffsetZ;                                            // 0x13C8(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TKQX[0x4];                                   // 0x13CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarSiegeVehicleAnimInstance* SolarVehicleAnimInstance;                                // 0x13D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        HolerBoneNames;                                          // 0x13D8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* SiegeWeaponFire;                                         // 0x13E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QA2L[0x8];                                   // 0x13F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* OpenCameraShake;                                         // 0x13F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      OpenCameraShakeSpeed;                                    // 0x1400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7WOK[0x4];                                   // 0x1404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* MuzzlePSC;                                               // 0x1408(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool IsSiegeWeaponOpened();
		unsigned char GetCurrentVehicleAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWheeledVehicleAnimInstance
	 * Size -> 0x00E4 (FullSize[0x0410] - InheritedSize[0x032C])
	 */
	class USolarWheeledVehicleAnimInstance : public USolarVehicleAnimInstance
	{
	public:
		unsigned char                                              UnknownData_NGTP[0x4];                                   // 0x032C(0x0004) Fix Super Size
		struct FVector                                             FLWheelBoneScale;                                        // 0x0330(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FRWheelBoneScale;                                        // 0x033C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MLWheelBoneScale;                                        // 0x0348(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MRWheelBoneScale;                                        // 0x0354(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BLWheelBoneScale;                                        // 0x0360(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BRWheelBoneScale;                                        // 0x036C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FLWheelBoneLocation;                                     // 0x0378(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FRWheelBoneLocation;                                     // 0x0384(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MLWheelBoneLocation;                                     // 0x0390(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MRWheelBoneLocation;                                     // 0x039C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BLWheelBoneLocation;                                     // 0x03A8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BRWheelBoneLocation;                                     // 0x03B4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            FLWheelBoneRotation;                                     // 0x03C0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            FRWheelBoneRotation;                                     // 0x03CC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            MLWheelBoneRotation;                                     // 0x03D8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            MRWheelBoneRotation;                                     // 0x03E4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            BLWheelBoneRotation;                                     // 0x03F0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            BRWheelBoneRotation;                                     // 0x03FC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PQ8J[0x8];                                   // 0x0408(0x0008) MISSED OFFSET (PADDING)

	public:
		void AnimNotify_EnablePlatform();
		void AnimNotify_DisablePlatform();
		void AnimNotify_ClosePlatform();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSiegeVehicleAnimInstance
	 * Size -> 0x0030 (FullSize[0x0440] - InheritedSize[0x0410])
	 */
	class USolarSiegeVehicleAnimInstance : public USolarWheeledVehicleAnimInstance
	{
	public:
		TArray<struct FVector>                                     SiegeHolderLocations;                                    // 0x0410(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UIMR[0x4];                                   // 0x0420(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreStopSpeed;                                            // 0x0424(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeaponFireAlphaF;                                        // 0x0428(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeaponFireAlphaB;                                        // 0x042C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeaponFireAlphaR;                                        // 0x0430(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeaponFireAlphaL;                                        // 0x0434(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StopSoundMinSpeed;                                       // 0x0438(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WERU[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (PADDING)

	public:
		void AnimNotify_StopLeft();
		void AnimNotify_CloseIdleLeft();
		void AnimNotify_CloseIdleEnter();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSignificanceInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarSignificanceInterface : public UInterface
	{
	public:
		void PostGroupIDChangedFunction(int32_t OldGroup, int32_t NewGroup);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSignificanceManager
	 * Size -> 0x0088 (FullSize[0x01C0] - InheritedSize[0x0138])
	 */
	class USolarSignificanceManager : public USignificanceManager
	{
	public:
		float                                                      CalculateSceneActorTickInterval;                         // 0x0138(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LQA7[0x1C];                                  // 0x013C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ManagedSceneActors;                                      // 0x0158(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ManagedSceneActorSet[0x50];                              // 0x0168(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_ISVM[0x8];                                   // 0x01B8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkeletalMeshMergeUtil
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarSkeletalMeshMergeUtil : public UBlueprintFunctionLibrary
	{
	public:
		class USkeletalMesh* STATIC_MergeMeshes(const struct FSkeletalMeshMergeParams& Params);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SummonItemTurret
	 * Size -> 0x00B8 (FullSize[0x0498] - InheritedSize[0x03E0])
	 */
	class ASummonItemTurret : public ASummonItemBase
	{
	public:
		float                                                      DetectableRadius;                                        // 0x03E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CJ7U[0x4];                                   // 0x03E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   DetectableCollisionTypes;                                // 0x03E8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurretYawRotateSpeed;                                    // 0x03F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WJF4[0x4];                                   // 0x03FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* TurretWeaponBP;                                          // 0x0400(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* BoomEffect;                                              // 0x0408(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AimMaxAngle;                                             // 0x0410(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GP78[0x4];                                   // 0x0414(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   BlockShotObjectTypes;                                    // 0x0418(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockShotCheckRadius;                                    // 0x0428(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TestEnemyHeight;                                         // 0x042C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        PrioritizeTargetingBoneNames;                            // 0x0430(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurretTransformTime;                                     // 0x0440(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ForceResearchTargetTime;                                 // 0x0444(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarSummonWeapon* CurrentWeapon;                                           // 0x0448(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            LookAtTargetRotator;                                     // 0x0450(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              AnimationIndex;                                          // 0x045C(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5N1U[0x3];                                   // 0x045D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponentBudgeted* TurretMesh;                                              // 0x0460(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OPJD[0x4];                                   // 0x0468(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSpawnedActorHandle                                 CachedTurretHandle;                                      // 0x046C(0x0004) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PIHH[0x28];                                  // 0x0470(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnTurretStandby();
		void OnTurretLocked();
		void OnTurretFire();
		void OnTurretDead();
		void OnTurretAppear();
		void OnRep_LookAtTargetRotator();
		void OnRep_AnimationIndex();
		void NetMulticastDrawAimLine(const struct FVector& InStartLocation, TArray<struct FVector4> InEndLocationArray);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_AutomaticTurret
	 * Size -> 0x0018 (FullSize[0x04B0] - InheritedSize[0x0498])
	 */
	class ASolarSkill_AutomaticTurret : public ASummonItemTurret
	{
	public:
		int32_t                                                    TestOverlapDestroyInterval;                              // 0x0498(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             TestOverlapDestroyBoxExtent;                             // 0x049C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TestOverlapDestroyTimer;                                 // 0x04A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AX6V[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_Projectile
	 * Size -> 0x0330 (FullSize[0x0558] - InheritedSize[0x0228])
	 */
	class ASolarSkill_Projectile : public AActor
	{
	public:
		unsigned char                                              UnknownData_206G[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UProjectileMovementComponent* ProjectileMovementComponent;                             // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPrimitiveComponent* DefaultUpdateComponent;                                  // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ProjectileVelocity;                                      // 0x0240(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RQ20[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayEffectSpecHandle                           ToSelfGameplayEffectHandle;                              // 0x0250(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		struct FGameplayEffectSpecHandle                           ToTargetGameplayEffectHandle;                            // 0x0260(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		struct FHitResult                                          ProjectileStopResult;                                    // 0x0270(0x0088) Net, IsPlainOldData, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       bDebug;                                                  // 0x02F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInstantStop;                                            // 0x02F9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q32O[0x2];                                   // 0x02FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceStopTime;                                           // 0x02FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeferExplodeTime;                                        // 0x0300(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TSTS[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     ProjectileStopEffectPath;                                // 0x0308(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTransform                                          ProjectileStopEffectTransform;                           // 0x0320(0x0030) Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     ProjectileExplosionEffectPath;                           // 0x0350(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YW0S[0x8];                                   // 0x0368(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          ProjectileExplosionEffectTransform;                      // 0x0370(0x0030) Edit, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     ProjectileTrajectoryEffectPath;                          // 0x03A0(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAttachToHitActorOnStop;                                 // 0x03B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDestroyOnExplode;                                       // 0x03B9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2NDN[0x2];                                   // 0x03BA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeferDestroyTime;                                        // 0x03BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHiddenOnStop;                                           // 0x03C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHiddenOnExplode;                                        // 0x03C1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9SIN[0x6];                                   // 0x03C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* SpawnActorClassOnStop;                                   // 0x03C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* SpawnActorClassOnExplode;                                // 0x03D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bForbidSpawnActorOnHitSomeActor;                         // 0x03D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VOYS[0x7];                                   // 0x03D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ForbidSpawnActorArray;                                   // 0x03E0(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V6RX[0xA0];                                  // 0x03F0(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x0490(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SetProjectileVelocitySoundEvent1P;                       // 0x0498(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SetProjectileVelocitySoundEvent3P;                       // 0x04A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SetProjectileVelocitySoundEvent3PEnemy;                  // 0x04B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              OnProjectileMovementStopSoundEvent1P;                    // 0x04C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              OnProjectileMovementStopSoundEvent3P;                    // 0x04D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              OnProjectileMovementStopSoundEvent3PEnemy;               // 0x04E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CommonHitSound1P;                                        // 0x04F8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CommonHitSound3P;                                        // 0x0508(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CommonHitSound3PEnemy;                                   // 0x0518(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ExplosionSound1P;                                        // 0x0528(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ExplosionSound3P;                                        // 0x0538(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ExplosionSound3PEnemy;                                   // 0x0548(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveSetProjectileMovement();
		void ReceiveProjectileMovementStop(const struct FHitResult& InImpactResult);
		void ReceiveExplosion(const struct FHitResult& InImpactResult);
		void OnTeamIgnoreCollisionActorChange(bool bAdd, class AActor* InActor, unsigned char TeamID);
		void OnRep_ProjectileVelocity();
		void OnRep_ProjectileStopResult();
		void OnProjectileMovementStopInternal(const struct FHitResult& InImpactResult);
		void OnProjectileMovementStop(const struct FHitResult& InImpactResult);
		void OnProjectileBounce(const struct FHitResult& InImpactResult, const struct FVector& InImpactVelocity);
		void OnChangeOwnerCharacterInternal();
		void OnChangeOwnerCharacter();
		void K2_PlaySound(const class FString& InControlledOrSpectatedSoundName, const class FString& InTeammateSoundName, const class FString& InEnemySoundName);
		class ASolarCharacter* GetOwnerCharacter();
		void ExplodeInternal(const struct FHitResult& InImpactResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_ClusterGrenade
	 * Size -> 0x00E8 (FullSize[0x0640] - InheritedSize[0x0558])
	 */
	class ASolarSkill_ClusterGrenade : public ASolarSkill_Projectile
	{
	public:
		unsigned char                                              UnknownData_MEMH[0x4];                                   // 0x0558(0x0004) Fix Super Size
		float                                                      ThrowAngleOffset;                                        // 0x055C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExplosionRadius;                                         // 0x0560(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7VO9[0x4];                                   // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent* ClusterGrenadeMesh;                                      // 0x0568(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsLeader;                                               // 0x0570(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NBTJ[0x3];                                   // 0x0571(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Damage;                                                  // 0x0574(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  DamageScaleByDistanceCurve;                              // 0x0578(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TArray<EObjectTypeQuery>                                   CanDamageObjectTypes;                                    // 0x0600(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayDestroyTime;                                        // 0x0610(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SHH9[0x4];                                   // 0x0614(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSolarSubClusterGrenadeData>                 SubClusterGrenades;                                      // 0x0618(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTeammateDamage;                                         // 0x0628(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5PKZ[0x7];                                   // 0x0629(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class ASolarSkill_ClusterGrenade>>   ClusterGrenadeIgnoreArray;                               // 0x0630(0x0010) ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_EMP
	 * Size -> 0x0048 (FullSize[0x05A0] - InheritedSize[0x0558])
	 */
	class ASolarSkill_EMP : public ASolarSkill_Projectile
	{
	public:
		unsigned char                                              UnknownData_47AC[0x4];                                   // 0x0558(0x0004) Fix Super Size
		float                                                      DamageToShield;                                          // 0x055C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageToSummon;                                          // 0x0560(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M4XO[0x4];                                   // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   TestObjectTypes;                                         // 0x0568(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayDestroyTime;                                        // 0x0578(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_70DG[0x4];                                   // 0x057C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* PerformActorClass;                                       // 0x0580(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* EnemyPerformActorClass;                                  // 0x0588(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PerformActorLifeTime;                                    // 0x0590(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpawndPerformActor;                                     // 0x0594(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TA3W[0xB];                                   // 0x0595(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_EMPForceField
	 * Size -> 0x0180 (FullSize[0x0560] - InheritedSize[0x03E0])
	 */
	class ASolarSkill_EMPForceField : public ASummonItemBase
	{
	public:
		TArray<EActorRegisterType>                                 TestTypes;                                               // 0x03E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           TestRange;                                               // 0x03F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                CoreName;                                                // 0x03F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<ESolarEMPParticleType, struct FSolarEMPParticleInfo>  EMPParticleTable;                                        // 0x0400(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      ForceFieldReadyTime;                                     // 0x0450(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ForceFieldActiveTime;                                    // 0x0454(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ForceFieldEndTime;                                       // 0x0458(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZPQ[0x4];                                   // 0x045C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              EMPStartSoundName;                                       // 0x0460(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EMPEndSoundName;                                         // 0x0470(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              DamageShiledSoundName;                                   // 0x0480(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftClassPath                                      EffectActorClassPathForTeammate;                         // 0x0490(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftClassPath                                      EffectActorClassPathForEnemy;                            // 0x04A8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageValueToCharacterShield;                            // 0x04C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageCharacterShieldInterval;                           // 0x04C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FixedDamageValueToCharacterShield;                       // 0x04C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9C0A[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TWeakObjectPtr<class AActor>, struct FActiveGameplayEffectHandle> TestActorMap;                                            // 0x04D0(0x0050) Transient, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class UShapeComponent>                      CoreComponent;                                           // 0x0520(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UParticleSystemComponent*>                    ManualReleaseEmitterArray;                               // 0x0528(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DPCB[0x1];                                   // 0x0538(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESolarEMPForceFieldState                                   CurrentEMPState;                                         // 0x0539(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LUTE[0x6];                                   // 0x053A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarSkill_ForceFieldEffect* EffectActor;                                             // 0x0540(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8XAS[0x18];                                  // 0x0548(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnTestActorEndPlay(class AActor* InActor, EEndPlayReason InEndPlayReason);
		void OnRep_CurrentState();
		void MulticastOnDamagedCharacterShield(class ASolarCharacter* InCharacter);
		void K2_OnDamagedCharacterShield(class ASolarCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_ForceFieldEffect
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASolarSkill_ForceFieldEffect : public AActor
	{
	public:
		void PlayLoopAnimation();
		void PlayFadeOutAnimation();
		void PlayFadeInAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_Grenade
	 * Size -> 0x0098 (FullSize[0x05F0] - InheritedSize[0x0558])
	 */
	class ASolarSkill_Grenade : public ASolarSkill_Projectile
	{
	public:
		struct FRuntimeFloatCurve                                  DamageCurve;                                             // 0x0558(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9LZ5[0x10];                                  // 0x05E0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_Incendiary
	 * Size -> 0x0188 (FullSize[0x06E0] - InheritedSize[0x0558])
	 */
	class ASolarSkill_Incendiary : public ASolarSkill_Projectile
	{
	public:
		struct FVector                                             FireDecalSize;                                           // 0x0558(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9GCH[0x4];                                   // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              FireParticle[0x28];                                      // 0x0568(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FireDecalMaterial[0x28];                                 // 0x0590(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BuffParticle[0x28];                                      // 0x05B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FName                                                BuffAttachPointName;                                     // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayDestroyTime;                                        // 0x05E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FireEffectCountMax;                                      // 0x05EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnRamainTime;                                          // 0x05F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IHKS[0x4];                                   // 0x05F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   DetectableObjectTypes;                                   // 0x05F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                FireDecalFadeOutName;                                    // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTeammateDamage;                                         // 0x0610(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnlyOne;                                                // 0x0611(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q1FP[0x6];                                   // 0x0612(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UParticleSystemComponent*>                    FireParticleSystemComponents;                            // 0x0618(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDecalComponent* FireDecalComponent;                                      // 0x0628(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* IncendiaryMesh;                                          // 0x0630(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* AkComponent;                                             // 0x0638(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInBuring;                                               // 0x0640(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9NM5[0x3];                                   // 0x0641(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrentFireEffectCount;                                  // 0x0644(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MI1X[0x8];                                   // 0x0648(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic* FireDecalDynamicMaterial;                                // 0x0650(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireDecalFadeOutTimer;                                   // 0x0658(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnRadius;                                              // 0x065C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnHeight;                                              // 0x0660(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VZPL[0x4];                                   // 0x0664(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   QueryObjectTypeArray;                                    // 0x0668(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class UClass*, float>                                 ClassTypeDamageValueMap;                                 // 0x0678(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      DamageTimeInternal;                                      // 0x06C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AKCK[0x14];                                  // 0x06CC(0x0014) MISSED OFFSET (PADDING)

	public:
		void ReceviceExplodeEvent();
		void ReceviceDestroyEvent();
		void ReceviceDamageActorEvent(class AActor* InActor);
		void PostSoundEvent(const class FString& InSoundEvent, bool InbHasCamp, class AActor* InTarget);
		void MulticastOnDamagedActor(class AActor* InActor);
		class UClass* GetClassType();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_SkeletealMeshProjectile
	 * Size -> 0x0004 (FullSize[0x055C] - InheritedSize[0x0558])
	 */
	class ASolarSkill_SkeletealMeshProjectile : public ASolarSkill_Projectile
	{
	public:
		unsigned char                                              UnknownData_VN3Z[0x4];                                   // 0x0558(0x0004) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_PenetrateGrenade
	 * Size -> 0x00B4 (FullSize[0x0610] - InheritedSize[0x055C])
	 */
	class ASolarSkill_PenetrateGrenade : public ASolarSkill_SkeletealMeshProjectile
	{
	public:
		float                                                      DefaultDamage;                                           // 0x055C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class UClass*, float>                                 ClassTypeDamageMap;                                      // 0x0560(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       bCanDamageTeamate;                                       // 0x05B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UEJ4[0x3];                                   // 0x05B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OnStopDestroyTime;                                       // 0x05B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TraceTestDistance;                                       // 0x05B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageSphereRadius;                                      // 0x05BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DamageBoxExtent;                                         // 0x05C0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_94M8[0x4];                                   // 0x05CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   DamageObjectTypeArray;                                   // 0x05D0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VXNP[0x30];                                  // 0x05E0(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnPenetrateGrenadeReady(float InDeltaDistance);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_CapsuleProjectile
	 * Size -> 0x0008 (FullSize[0x0560] - InheritedSize[0x0558])
	 */
	class ASolarSkill_CapsuleProjectile : public ASolarSkill_Projectile
	{
	public:
		unsigned char                                              UnknownData_NHOA[0x8];                                   // 0x0558(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_SphereProjectile
	 * Size -> 0x0008 (FullSize[0x0560] - InheritedSize[0x0558])
	 */
	class ASolarSkill_SphereProjectile : public ASolarSkill_Projectile
	{
	public:
		unsigned char                                              UnknownData_1RJ6[0x8];                                   // 0x0558(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_BoxProjectile
	 * Size -> 0x0008 (FullSize[0x0560] - InheritedSize[0x0558])
	 */
	class ASolarSkill_BoxProjectile : public ASolarSkill_Projectile
	{
	public:
		unsigned char                                              UnknownData_DBLN[0x8];                                   // 0x0558(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_StaticMeshProjectile
	 * Size -> 0x0008 (FullSize[0x0560] - InheritedSize[0x0558])
	 */
	class ASolarSkill_StaticMeshProjectile : public ASolarSkill_Projectile
	{
	public:
		unsigned char                                              UnknownData_B8S1[0x8];                                   // 0x0558(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkill_ProjectileInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarSkill_ProjectileInterface : public UInterface
	{
	public:
		void SetStartAndTargetTransform(const struct FTransform& InStartTransform, const struct FTransform& InTargetTransform);
		void SetProjectileVelocity(class UProjectileMovementComponent* InProjectileMovementComponent, const struct FVector& InVelocity, bool bCalculateVelocity, float InSpeed, float InVelocityPitchOffset);
		void SetGameplayEffectHandle(const struct FGameplayEffectSpecHandle& InGameplayEffectHandleToSelf, const struct FGameplayEffectSpecHandle& InGameplayEffectHandleToTarget);
		class UProjectileMovementComponent* GetProjectileMovementComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillAndBuffDurationWidget
	 * Size -> 0x0090 (FullSize[0x03D8] - InheritedSize[0x0348])
	 */
	class USolarSkillAndBuffDurationWidget : public USolarUserWidget
	{
	public:
		class USolarSkillSubDurationWidget* UI_Skill_Duration_Super;                                 // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical;                              // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical_2;                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical_3;                            // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FBuffDurationInfo                                   MainBuffInfo;                                            // 0x0368(0x0060) Protected, NativeAccessSpecifierProtected
		TArray<struct FBuffDurationInfo>                           SubBuffInfo;                                             // 0x03C8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateSubWidget();
		void OnRoleAbilityBuffUpdate(const struct FActiveGameplayEffectHandle& ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime);
		void OnRoleAbilityBuffResume(bool bIsMainDuration, class ASolarCharacter* SourceCharacter, unsigned char AbilityIndex);
		void OnRoleAbilityBuffRemoved(bool bIsMainDuration, const struct FActiveGameplayEffectHandle& ActiveEffectHandle);
		void OnRoleAbilityBuffPause(bool bIsMainDuration, class ASolarCharacter* SourceCharacter, unsigned char AbilityIndex);
		void OnRoleAbilityBuffApplied(bool bIsMainDuration, class ASolarCharacter* SourceCharacter, unsigned char AbilityIndex, float Duration, float PreDuration, const struct FActiveGameplayEffectHandle& ActiveEffectHandle);
		void OnCharacterChange(int32_t InCharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGA_SuperEMP
	 * Size -> 0x0018 (FullSize[0x0630] - InheritedSize[0x0618])
	 */
	class USolarSkillGA_SuperEMP : public USolarSkillGA_Summon
	{
	public:
		class FString                                              LocalActiveAbilityAudioName;                             // 0x0618(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EMPLevel;                                                // 0x0628(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AYGA[0x4];                                   // 0x062C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGATA_ChaSocketLoc
	 * Size -> 0x0008 (FullSize[0x0340] - InheritedSize[0x0338])
	 */
	class ASolarSkillGATA_ChaSocketLoc : public AGameplayAbilityTargetActor
	{
	public:
		class FName                                                SocketName;                                              // 0x0338(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGATA_MissileSwarm
	 * Size -> 0x0228 (FullSize[0x0560] - InheritedSize[0x0338])
	 */
	class ASolarSkillGATA_MissileSwarm : public AGameplayAbilityTargetActor
	{
	public:
		class ASolarCharacter* SourceCharacter;                                         // 0x0338(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        PreviewMeshes;                                           // 0x0340(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh* PreviewMeshTemplate;                                     // 0x0350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* PreviewMaterial;                                         // 0x0358(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MK7K[0x200];                                 // 0x0360(0x0200) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGATA_Projectile
	 * Size -> 0x00F8 (FullSize[0x0430] - InheritedSize[0x0338])
	 */
	class ASolarSkillGATA_Projectile : public AGameplayAbilityTargetActor
	{
	public:
		unsigned char                                              UnknownData_JJJT[0x8];                                   // 0x0338(0x0008) Fix Super Size
		struct FSolarSkillProjectileData                           PredictData;                                             // 0x0340(0x00D0) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0Y15[0x20];                                  // 0x0410(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGATA_Spline
	 * Size -> 0x0030 (FullSize[0x0460] - InheritedSize[0x0430])
	 */
	class ASolarSkillGATA_Spline : public ASolarSkillGATA_Projectile
	{
	public:
		class USceneComponent* SplineRoot;                                              // 0x0430(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        HitPointMeshes;                                          // 0x0438(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USplineMeshComponent*>                        SplineMeshComponents;                                    // 0x0448(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVisibilityPropagateToChildren;                          // 0x0458(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z1HD[0x7];                                   // 0x0459(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGATA_Summon
	 * Size -> 0x00E0 (FullSize[0x0510] - InheritedSize[0x0430])
	 */
	class ASolarSkillGATA_Summon : public ASolarSkillGATA_Projectile
	{
	public:
		class USceneComponent* PreviewRoot;                                             // 0x0430(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* PreviewSkeletalMeshComponent;                            // 0x0438(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* PreviewStaticMeshComponent;                              // 0x0440(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* PreviewCheckMeshComponent;                               // 0x0448(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     SummonConfigPath;                                        // 0x0450(0x0018) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarSummonDetectionConfig* SummonConfig;                                            // 0x0468(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* SummonActorClass;                                        // 0x0470(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      KeyDownTime;                                             // 0x0478(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bStopUpdatePreview;                                      // 0x047C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VTQW[0x3];                                   // 0x047D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHitResult                                          StopPreviewHitResult;                                    // 0x0480(0x0088) IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class USplineMeshComponent* SplineComponent;                                         // 0x0508(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void K2_UpdatePreview(bool bInCanPlace, const struct FPredictProjectilePathResult& InPredictPathResult, int32_t InIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGC_Burning
	 * Size -> 0x0018 (FullSize[0x02B0] - InheritedSize[0x0298])
	 */
	class ASolarSkillGC_Burning : public AGameplayCueNotify_Actor
	{
	public:
		class FName                                                BurningActorEffectID;                                    // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                BurningScreenEffectID;                                   // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2GOY[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGC_Freeze
	 * Size -> 0x00C8 (FullSize[0x0360] - InheritedSize[0x0298])
	 */
	class ASolarSkillGC_Freeze : public AGameplayCueNotify_Actor
	{
	public:
		class UParticleSystem* IceSmokeParticle;                                        // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                IceSmokeAttachPointName;                                 // 0x02A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5849[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          IceSmokeTransform;                                       // 0x02B0(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UParticleSystemComponent* IceSmokeParticleHandle;                                  // 0x02E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FreezeStartSoundName1P;                                  // 0x02E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FreezeStartSoundName3P;                                  // 0x02F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FreezeStartSoundName3PEnemy;                             // 0x0308(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FreezeEndSoundName1P;                                    // 0x0318(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FreezeEndSoundName3P;                                    // 0x0328(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              FreezeEndSoundName3PEnemy;                               // 0x0338(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* FreezeMatEffectClass;                                    // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MLGO[0x10];                                  // 0x0350(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGC_RapidBoost
	 * Size -> 0x0020 (FullSize[0x02B8] - InheritedSize[0x0298])
	 */
	class ASolarSkillGC_RapidBoost : public AGameplayCueNotify_Actor
	{
	public:
		class USolarAbilitySystemComponent* CachedAbilitySystemComponent;                            // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InBackpackFXHandle;                                      // 0x02A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        EffectTag;                                               // 0x02A4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                EffectName;                                              // 0x02AC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DSKE[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillGC_SurroundLightning
	 * Size -> 0x0060 (FullSize[0x02F8] - InheritedSize[0x0298])
	 */
	class ASolarSkillGC_SurroundLightning : public AGameplayCueNotify_Actor
	{
	public:
		TMap<ESolarSurroundLightningApplyType, struct FSolarSurroundLightningConfig> SurroundLightningApplyTypeConfigs;                       // 0x0298(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FName                                                EMPEffectID;                                             // 0x02E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CharacterEffectHandle;                                   // 0x02F0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6FAB[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillSubDurationWidget
	 * Size -> 0x00D0 (FullSize[0x0418] - InheritedSize[0x0348])
	 */
	class USolarSkillSubDurationWidget : public USolarUserWidget
	{
	public:
		class USolarImage* Img_Skill;                                               // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* Progress_Duration_L;                                     // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* Progress_Duration_R;                                     // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* Progress_Recharge;                                       // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarInputButton* Btn_Cancel;                                              // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget* Panel_CancelAbility_KeyMapping;                          // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Enter_Anim;                                              // 0x0378(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Exit_Anim;                                               // 0x0380(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Prompt_Anim;                                             // 0x0388(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Skill_Start;                                        // 0x0390(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProgressUpdateInterval;                                  // 0x0398(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MainProgressDisableOpacity;                              // 0x039C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PGV8[0x78];                                  // 0x03A0(0x0078) MISSED OFFSET (PADDING)

	public:
		void UpdateWidget();
		void OnRoleAbilityBuffEnd();
		void OnRoleAbilityBuffContinous(const struct FBuffDurationInfo& Info);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSkillSubsystem
	 * Size -> 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
	 */
	class USolarSkillSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_QSBW[0x20];                                  // 0x0030(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class UUserWidget>>                  FullScreenWidgetArray;                                   // 0x0050(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E83L[0x60];                                  // 0x0060(0x0060) MISSED OFFSET (PADDING)

	public:
		bool TryGetGeneralSummonHitResult(struct FHitResult* OutHitResult, class AActor* InSummoner, class USolarSummonDetectionConfig* InSummonConfig);
		bool IsWithinQuickSummonTime(class USolarSummonDetectionConfig* InSummonConfig, float InStartTime);
		void HideSkillFullScreenWidget(class UClass* InWidgetClass, ESlateVisibility InSlateVisibility);
		struct FRotator GetSummonPlaceOrientation(const struct FVector& InPlaceLocation, const struct FVector& InPlaceNormal);
		class UUserWidget* GetSkillFullScreenWidget(class UClass* InWidgetClass);
		bool CanSummonPlaceSpace(const struct FSolarSummonCondition& InCondition, const struct FVector& InPlaceLocation, const struct FVector& InPlaceNormal, const struct FRotator& InPlaceOrientation);
		bool CanSummonPlaceAngle(const struct FSolarSummonCondition& InCondition, const struct FVector& InPlaceNormal);
		class UUserWidget* AddSkillFullScreenWidgetToBattlePanel(class UClass* InWidgetClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSoundPlayer
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASolarSoundPlayer : public AActor
	{
	public:
		unsigned char                                              UnknownData_WM5B[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x0238(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class ASolarSoundPlayer* STATIC_PostSoundEventAtLocation(class UObject* WorldContextObject, const class FString& EventName, const struct FVector& Location, bool bAutoDestroy);
		void PostSoundEvent(const class FString& EventName);
		void InitSolarAkGameObject(class UActorComponent* Component, bool bReset);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSpawnAdjustConfig
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class USolarSpawnAdjustConfig : public UDataAsset
	{
	public:
		bool                                                       bDrawDebug;                                              // 0x0030(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L6QA[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   AdjustBlockTypes;                                        // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             AdjustDetectBoxExtent;                                   // 0x0048(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             AdjustDetectBoxOffset;                                   // 0x0054(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseActorRotation;                                       // 0x0060(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5809[0x3];                                   // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AdjustVerticalDist;                                      // 0x0064(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AdjustHorizonDist;                                       // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AdjustFindStep;                                          // 0x006C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TraceUpLength;                                           // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TraceDownLength;                                         // 0x0074(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TraceZOffset;                                            // 0x0078(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7LVW[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   AdjustPlaceTypes;                                        // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSpecABP_Skill
	 * Size -> 0x0058 (FullSize[0x02C0] - InheritedSize[0x0268])
	 */
	class USolarSpecABP_Skill : public UAnimInstance
	{
	public:
		class ASolarCharacter* SolarCharacterOwner;                                     // 0x0268(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ViewPitch;                                               // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ViewYaw;                                                 // 0x0274(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CKGM[0xC];                                   // 0x0278(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InputDirection;                                          // 0x0284(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Speed;                                                   // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsWalking : 1;                                          // 0x028C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsCrouching : 1;                                        // 0x028C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSixDirRunForward : 1;                                 // 0x028C(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWalkMode                                                  CurrentWalkMode;                                         // 0x028D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EIdleTurnType                                              IdleTurnType;                                            // 0x028E(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_64SY[0x1];                                   // 0x028F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurnExplicitTime;                                        // 0x0290(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageDirection;                                         // 0x0294(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageReactionAlpha;                                     // 0x0298(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageNormalizedTime;                                    // 0x029C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAirMoveMode                                               CurrentAirMoveMode;                                      // 0x02A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAirMoveMode                                               LastAirMoveMode;                                         // 0x02A1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JZX9[0xF];                                   // 0x02A2(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bNewJet;                                                 // 0x02B1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESkillAnimType                                             CurrentSkillAnimType;                                    // 0x02B2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESkillAnimRightHandType                                    CurrentSkillAnimRightHandType;                           // 0x02B3(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8Q94[0xC];                                   // 0x02B4(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetLeftHandIKTransform(const struct FTransform& RelativeTrans);
		struct FVector GetJetPackDashAnimationBlend();
		struct FVector GetInputVector();
		float GenJumpDirection(float InInputDirection);
		bool CheckNewJetAndReset();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSpecABP_Vehicle
	 * Size -> 0x0088 (FullSize[0x02F0] - InheritedSize[0x0268])
	 */
	class USolarSpecABP_Vehicle : public UAnimInstance
	{
	public:
		class ASolarCharacter* SolarCharacterOwner;                                     // 0x0268(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ViewPitch;                                               // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ViewYaw;                                                 // 0x0274(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EInVehicleState                                            InVehicleState;                                          // 0x0278(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EVehicleAnimationType                                      CurrentVehicleAnimationType;                             // 0x0279(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9RBA[0x2];                                   // 0x027A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentVehicleRotationValue;                             // 0x027C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           CurrentInputOnVehicle;                                   // 0x0280(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeanTowardRightValue;                                    // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVehicleInAir;                                           // 0x028C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6CUG[0x3];                                   // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AngleBetweenViewAndVehicle;                              // 0x0290(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotateThreshold;                                         // 0x0294(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotateSpeed;                                             // 0x0298(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotateSpeedForAiming;                                    // 0x029C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            CurrentRotateOffset;                                     // 0x02A0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CBQ6[0x9];                                   // 0x02AC(0x0009) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIronManCanFlyFlight;                                    // 0x02B5(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIronManForceOutInVehicleState;                          // 0x02B6(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasPassenger;                                           // 0x02B7(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleSpeed;                                            // 0x02B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIronManUseIK;                                           // 0x02BC(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDriveTurnType                                             DriveIdleTurnType;                                       // 0x02BD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J6S2[0x2];                                   // 0x02BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SteeringRoatingratio;                                    // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LeftHandOnRudderLocation;                                // 0x02C4(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RightHandOnRudderLocation;                               // 0x02D0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             IronManHandRIKLocation;                                  // 0x02DC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EWeaponStatus                                              WeaponStatus;                                            // 0x02E8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8OI5[0x7];                                   // 0x02E9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSpecialEffectsMgr
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarSpecialEffectsMgr : public UObject
	{
	public:
		unsigned char                                              UnknownData_NN7P[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSpectateInfo
	 * Size -> 0x0350 (FullSize[0x0578] - InheritedSize[0x0228])
	 */
	class ASolarSpectateInfo : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnBeginUpdateSpectateInfo;                               // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStopUpdateSpectateInfo;                                // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOtherPlayerBeginSpectateMe;                            // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOtherPlayerStopSpectateMe;                             // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBeforeSpectateTargetChange;                            // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectateTargetChanged;                                 // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectatePhaseChanged;                                  // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSwitchSpectateTargetFailed;                            // 0x0298(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectatorOfMyTargetChanged;                            // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpectateCharacterOfMyTargetReadied;                    // 0x02B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		ESpectatePhase                                             SpectatePhase;                                           // 0x02C8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MGC2[0x7];                                   // 0x02C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarPlayerState* SpectateTargetPlayerState;                               // 0x02D0(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CQOT[0x10];                                  // 0x02D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPlayerState*>                           PlayersSpectatingMyTarget;                               // 0x02E8(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASolarPlayerState*>                           PlayersSpectatingMe;                                     // 0x02F8(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RFWC[0x10];                                  // 0x0308(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsServerRecording;                                      // 0x0318(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_B25G[0x7];                                   // 0x0319(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarReplayManager* ReplayManager;                                           // 0x0320(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSpectateConditions                                 SpectateConditions;                                      // 0x0328(0x0020) Net, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PB80[0x80];                                  // 0x0348(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGiftSenderInfo>                             SendGiftPlayerInfo;                                      // 0x03C8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FInteractiveTaskStatus                              TaskStatus;                                              // 0x03D8(0x0078) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		class UDataTable* InteractiveTaskTable;                                    // 0x0450(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              TaskTablePath;                                           // 0x0458(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarPlayerState* LatestAttacker;                                          // 0x0468(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarPlayerState* LatestVictim;                                            // 0x0470(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YP32[0x10];                                  // 0x0478(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TotalCausedDamage;                                       // 0x0488(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            PlayerCameraRotation;                                    // 0x048C(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		TArray<struct FReplicateItemData>                          CharacterBackpackItems;                                  // 0x0498(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FReplicateMaxPileData>                       CharacterBackpackItemMaxPiles;                           // 0x04A8(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CharacterVJetChargeTime;                                 // 0x04B8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CharacterVJetTotalTimes;                                 // 0x04BC(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CharacterVJetRestTimes;                                  // 0x04C0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CharacterVJetModuleLevel;                                // 0x04C4(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CharacterVJetStartChargeTime;                            // 0x04C8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CharacterHJetChargeTime;                                 // 0x04CC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CharacterHJetTotalTimes;                                 // 0x04D0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CharacterHJetRestTimes;                                  // 0x04D4(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CharacterHJetModuleLevel;                                // 0x04D8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CharacterHJetStartChargeTime;                            // 0x04DC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCharacterRoleAbilityInfo>                   CharacterRoleAbilitiesInfo;                              // 0x04E0(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRepCountdownData                                   SpectateCountdownData;                                   // 0x04F0(0x002C) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AUZP[0x4];                                   // 0x051C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBattleUpgradeEffectParamData>               BattleUpgradeEffectData;                                 // 0x0520(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ExtraARMag;                                              // 0x0530(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ExtraSGMag;                                              // 0x0534(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bExposedByRadar;                                         // 0x0538(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TE81[0x7];                                   // 0x0539(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVehicleSpectateInfo                                VehicleSpectateInfo;                                     // 0x0540(0x0030) Net, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       bShowBattlePrompt : 1;                                   // 0x0570(0x0001) BIT_FIELD Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B6N9[0x7];                                   // 0x0571(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetSpectateTargetForPlayingReplay(class ASolarPlayerState* TargetPlayerState);
		void ServerStopSpectateOtherPlayer_Internal();
		void ServerStopSpectateOtherPlayer();
		void ServerSpectatePreviousPlayer();
		void ServerSpectateNextPlayer();
		void ServerSetSpectateConditions_Internal(const struct FSpectateConditions& InSpectateConditions);
		void ServerSetSpectateConditions(const struct FSpectateConditions& InSpectateConditions);
		void ServerSendGiftAction(int32_t GiftID, int32_t Num);
		void ServerRequestSendTask(int32_t InTaskID);
		void ServerRequestIncreaseTargetTaskLevel();
		void ServerRequestAvailableTask();
		void ServerChangeLikeValue(int32_t Value, int32_t AddInteractValue, ESocialActionType ActionType);
		void ServerBeginSpectateOtherPlayer_Internal();
		void ServerBeginSpectateOtherPlayer();
		bool SendTask(int32_t InTaskID);
		void SendGift(int32_t GiftID, int32_t Num);
		void RequestSendTask(int32_t InTaskID);
		void RequestIncreaseTargetTaskLevel();
		void RequestAvailableTask();
		void OnTargetSpecInfoSetToItsPlayerState(class ASolarSpectateInfo* TargetSpecInfo);
		void OnSwitchSpectateTargetFailed__DelegateSignature(class ASolarSpectateInfo* SpectateInfo);
		void OnStopUpdateSpectateInfo__DelegateSignature(class ASolarSpectateInfo* SpectateInfo);
		void OnStopRecordingReplay();
		void OnStartRecordingReplay();
		void OnSpectatorOfMyTargetChanged__DelegateSignature(class ASolarSpectateInfo* SpectateInfo);
		void OnSpectateTargetChanged__DelegateSignature(class ASolarPlayerState* OldTarget, class ASolarSpectateInfo* SpectateInfo);
		void OnSpectatePhaseChanged__DelegateSignature(ESpectatePhase CurrentPhase);
		void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(class ASolarSpectateInfo* SpectateInfo);
		void OnRep_VehicleSpectateInfo(const struct FVehicleSpectateInfo& PreviousVehicleSpectateInfo);
		void OnRep_TotalCausedDamage();
		void OnRep_TaskStatus();
		void OnRep_SpectateTargetPlayerState(class ASolarPlayerState* LastTarget);
		void OnRep_SpectatePhase();
		void OnRep_SpectateCountdownData();
		void OnRep_PlayersSpectatingMyTarget();
		void OnRep_PlayersSpectatingMe();
		void OnRep_ExposedByRadar();
		void OnRep_CharacterVJetTotalTimes();
		void OnRep_CharacterVJetRestTimes();
		void OnRep_CharacterVJetModuleLevel();
		void OnRep_CharacterRoleAbilitiesInfo();
		void OnRep_CharacterHJetTotalTimes();
		void OnRep_CharacterHJetRestTimes();
		void OnRep_CharacterHJetModuleLevel();
		void OnRep_CharacterBackpackItems();
		void OnRep_bIsServerRecording();
		void OnRep_BattleUpgradeEffectData();
		void OnOtherPlayerStopSpectateMe__DelegateSignature(class ASolarPlayerState* SpectatorPlayerState, class ASolarSpectateInfo* SpectateInfo);
		void OnOtherPlayerBeginSpectateMe__DelegateSignature(class ASolarPlayerState* SpectatorPlayerState, class ASolarSpectateInfo* SpectateInfo);
		void OnOpenAirBoxNum(EStatisticsType InStatType);
		void OnLikeActionCalled(int32_t Value, int32_t AddInteractValue, ESocialActionType ActionType);
		void OnIncreaseKillNumWithWeaponType(EStatisticsType InStatType, int32_t InWeaponID);
		void OnIncreaseKillNumWithPunch(EStatisticsType InStatType);
		void OnIncreaseKillNumWithAnyVehicle(EStatisticsType InStatType);
		void OnGiftActionCalled(int32_t GiftID, int32_t Num);
		void OnDamageChanged__DelegateSignature(float Damage);
		void OnCurrentPlayerCountChanged();
		void OnBeginUpdateSpectateInfo__DelegateSignature(class ASolarSpectateInfo* SpectateInfo);
		void OnBeforeSpectateTargetChange__DelegateSignature(class ASolarPlayerState* NewTarget, class ASolarSpectateInfo* SpectateInfo);
		void OnAvailableAirDropsNumChanged();
		bool NeedUpdateSpectateInfo();
		bool IsSpectatingOtherPlayer();
		bool IsRecordingReplay();
		bool IsClientRecording();
		bool IncreaseTaskLevel(class ASolarPlayerState* SendPlayer);
		TArray<class ASolarPlayerState*> GetSpectatorsOfMyTarget();
		TArray<class ASolarPlayerState*> GetSpectatingMePlayerStates();
		class ASolarPlayerState* GetSpectateTargetPlayerState();
		class ASolarCharacter* GetSpectateTargetCharacter();
		void GetSpectateReportInfo(struct FSpectateReportInfo* SpectateReportInfo, bool HasNextTarget);
		class ASolarSpectateInfo* GetSpectateInfoOfMyTarget();
		struct FSpectateConditions GetSpectateConditions();
		class ASolarPlayerState* GetSolarPlayerState();
		bool GetInteractiveTaskConfigByID(int32_t InTaskID, struct FInteractiveTaskConfig* OutConfig);
		TArray<int32_t> GetAvailableTaskByRandom();
		void GetAllInteractiveTaskConfigFromTable(TArray<struct FInteractiveTaskConfig>* OutAllConfig);
		TArray<class ASolarPlayerState*> GetAllAlivePlayers();
		bool CostCurrencyByTaskAction(int32_t InTaskID, int32_t CurTasklevel);
		void ClientNotifyTaskActionResult(ESocialActionType ActionType, int32_t InTaskID, int32_t CurTasklevel, class ASolarPlayerState* SendPlayer, class ASolarPlayerState* ReceivePlayer, int32_t NowLikeValue);
		void ClientNotifySelfTaskActionResult(ESocialActionType ActionType, int32_t InTaskID, int32_t CurTasklevel, class ASolarPlayerState* SendPlayer, class ASolarPlayerState* ReceivePlayer, int32_t NowLikeValue);
		void ClientNotifySelfLikeValueChanged(ESocialActionType ActionType, int32_t DeltaValue, int32_t NowValue, class ASolarPlayerState* SendPlayer, class ASolarPlayerState* ReceivePlayer, int32_t GiftID);
		void ClientNotifyLikeValueChanged(ESocialActionType ActionType, int32_t DeltaValue, int32_t NowValue, class ASolarPlayerState* SendPlayer, class ASolarPlayerState* ReceivePlayer, int32_t GiftID);
		void ClientNotifyAvailableTaskResult(TArray<int32_t> AvailableTask);
		bool CheckIsCanSpectateOthers();
		bool CanISpectate(class ASolarPlayerState* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TickWhenPauseCineCameraActor
	 * Size -> 0x0000 (FullSize[0x0860] - InheritedSize[0x0860])
	 */
	class ATickWhenPauseCineCameraActor : public ACineCameraActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSpectateLevelSequenceActor
	 * Size -> 0x0098 (FullSize[0x0350] - InheritedSize[0x02B8])
	 */
	class ASolarSpectateLevelSequenceActor : public ALevelSequenceActor
	{
	public:
		struct FSoftObjectPath                                     SwitchTargetSequencePath;                                // 0x02B8(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              AtLeastPlayToMark;                                       // 0x02D0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M2KJ[0x18];                                  // 0x02E0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULevelSequence* SwitchTargetSequence;                                    // 0x02F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ACineCameraActor* SequenceCamera;                                          // 0x0300(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ACameraRig_Crane* SequenceCameraRigCrane;                                  // 0x0308(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_N21S[0x40];                                  // 0x0310(0x0040) MISSED OFFSET (PADDING)

	public:
		void OnSequenceStoped();
		void OnSequenceFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSpectatorPawn
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class ASolarSpectatorPawn : public ASpectatorPawn
	{
	public:
		class USpringArmComponent* SpringArmComponent;                                      // 0x02B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraComponent* CameraComponent;                                         // 0x02B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarInputActionContext* InputActionContext;                                      // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSplineMovementComponent
	 * Size -> 0x0038 (FullSize[0x0128] - InheritedSize[0x00F0])
	 */
	class USolarSplineMovementComponent : public UMovementComponent
	{
	public:
		class USplineComponent* SplineComponent;                                         // 0x00F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSolarSplineMovementComponentStop;                      // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      SplineLengthRatio;                                       // 0x0108(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            SplineRotation;                                          // 0x010C(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AYO3[0x10];                                  // 0x0118(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarState
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USolarState : public UObject
	{
	public:
		class UObject* StateMachineOwner;                                       // 0x0028(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarStateMachine* OwnerStateMachine;                                       // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MYY3[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReceiveUpdateState(float DeltaTime);
		void ReceiveInitializeState();
		void ReceiveEndState(class USolarState* NextState);
		void ReceiveBeginState();
		class USolarState* STATIC_K2_CreateSolarState(class USolarStateMachine* StateMachine, class UClass* StateClass, const class FName& Name);
		void GotoState();
		class USolarState* GetState(const class FName& StateClassName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarStateMachine
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class USolarStateMachine : public UObject
	{
	public:
		TMap<class FName, class USolarState*>                      StateMap;                                                // 0x0028(0x0050) NativeAccessSpecifierPublic
		class USolarState* CurrentState;                                            // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarState* PreviousState;                                           // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_89UT[0x10];                                  // 0x0088(0x0010) MISSED OFFSET (PADDING)

	public:
		bool IsInState(const class FName& StateName);
		void AddState(class USolarState* NewState, const class FName& StateName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSummonDetectionConfig
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class USolarSummonDetectionConfig : public UDataAsset
	{
	public:
		struct FSolarSummonPreview                                 SummonPreview;                                           // 0x0030(0x0018) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bEnableQuickSummon;                                      // 0x0048(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableQuickSummonInAir;                                 // 0x0049(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V8AP[0x6];                                   // 0x004A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* QuickSummonClass;                                        // 0x0050(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      QuickSummonTime;                                         // 0x0058(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableCheckCondition;                                   // 0x005C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J67B[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarSummonCondition                               SummonCondition;                                         // 0x0060(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSummonEnergyWall
	 * Size -> 0x0060 (FullSize[0x0440] - InheritedSize[0x03E0])
	 */
	class ASolarSummonEnergyWall : public ASummonItemBase
	{
	public:
		unsigned char                                              UnknownData_823S[0x8];                                   // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HitLocationLifeTime;                                     // 0x03E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IQ3J[0x4];                                   // 0x03EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FSolarSummonTimer>                HitLocations;                                            // 0x03F0(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected

	public:
		void OnReceiveHitResult(bool InbVisible, const class FName& InHitLocationName, const struct FHitResult& InHitResult);
		void HandleHitResult(const struct FHitResult& InHitResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSummonJumpPad
	 * Size -> 0x00D8 (FullSize[0x04B8] - InheritedSize[0x03E0])
	 */
	class ASolarSummonJumpPad : public ASummonItemBase
	{
	public:
		unsigned char                                              UnknownData_55KI[0x58];                                  // 0x03E0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* Mesh;                                                    // 0x0438(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence* SpawnAnim;                                               // 0x0440(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimSequence* LaunchAnim;                                              // 0x0448(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HorizantalSpeedMultipleFac;                              // 0x0450(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHorizantalSpeed;                                      // 0x0454(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalSpeed;                                           // 0x0458(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CNG6[0x4];                                   // 0x045C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* LaunchCDEffect;                                          // 0x0460(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                SpawnSound;                                              // 0x0468(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                DestroySound;                                            // 0x0470(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                HitSoundAttacker2D;                                      // 0x0478(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                HitSound;                                                // 0x0480(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                LaunchSound;                                             // 0x0488(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* SmokeFX;                                                 // 0x0490(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* DestroyFX;                                               // 0x0498(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LaunchCount;                                             // 0x04A0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    HitCount;                                                // 0x04A4(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VehicleHitCheckInterval;                                 // 0x04A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9O3P[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UShapeComponent>                      VehicleCheckShape;                                       // 0x04B0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_LaunchCount();
		void OnRep_HitCount();
		void OnCharacterEndOverlap(class ASolarCharacter* OtherCharacter);
		void OnCharacterBeginOverlap(class ASolarCharacter* OtherCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSummonLifeCycleComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class USolarSummonLifeCycleComponent : public UActorComponent
	{
	public:
		class FMulticastSparseDelegate                             OnLifeCycleEnd;                                          // 0x00B0(0x0001) InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SLCK[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AliveTimeMax;                                            // 0x00B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AliveTimer;                                              // 0x00B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealthPointsMax;                                         // 0x00BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealthPoints;                                            // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealthPointsDwindle;                                     // 0x00C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateDwindleHealthPoints(float InDeltaTime);
		void UpdateAliveTime(float InDeltaTime);
		void SetHealthPointsMax(float InMaxHealthPoints);
		void SetHealthPointsDwindle(float InDwindleHealthPoints);
		void SetHealthPoints(float InHealthPoints);
		void SetAliveTimeMax(float InMaxAliveTime);
		void SetAliveTime(float InAliveTime);
		void LifeCycleEnd();
		float GetHealthPointsMax();
		float GetHealthPointsDwindle();
		float GetHealthPoints();
		float GetAliveTimeMax();
		float GetAliveTime();
		void DestroyOwner();
		void AddHealthPoints(float InExtraHealthPoints);
		void AddAliveTime(float InExtraAliveTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSummonVehicleSpawner
	 * Size -> 0x0090 (FullSize[0x02B8] - InheritedSize[0x0228])
	 */
	class ASolarSummonVehicleSpawner : public AActor
	{
	public:
		int32_t                                                    VehicleID;                                               // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                EffectMeshTagName;                                       // 0x022C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                EffectMaterialParameterName;                             // 0x0234(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EffectDuration;                                          // 0x023C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SpawnSoundName1P;                                        // 0x0240(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SpawnSoundName3P;                                        // 0x0250(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SpawnSoundName3PEnemy;                                   // 0x0260(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent* AkComponent;                                             // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        EffectMeshComponentArray;                                // 0x0278(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RK8D[0x30];                                  // 0x0288(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSummonWall
	 * Size -> 0x0030 (FullSize[0x0410] - InheritedSize[0x03E0])
	 */
	class ASolarSummonWall : public ASummonItemBase
	{
	public:
		struct FSoftClassPath                                      EnergyBarrierClassPath;                                  // 0x03E0(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             EnergyBarrierLocationOffset;                             // 0x03F8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TJ49[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASummonItemBase* EnergyBarrier;                                           // 0x0408(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SpawnEnergyBarrier();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSummonWeapon
	 * Size -> 0x0040 (FullSize[0x0AD0] - InheritedSize[0x0A90])
	 */
	class ASolarSummonWeapon : public ASolarWeapon
	{
	public:
		unsigned char                                              UnknownData_JBGS[0x10];                                  // 0x0A90(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarCharacter>                      SummonWeaponHolder;                                      // 0x0AA0(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASummonItemTurret>                    SummonWeaponOwner;                                       // 0x0AA8(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ShotDirection;                                           // 0x0AB0(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JD7K[0x4];                                   // 0x0ABC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* WeaponCanUseEffect;                                      // 0x0AC0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XBIO[0x8];                                   // 0x0AC8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSummonWeapon_Vehicle
	 * Size -> 0x0088 (FullSize[0x0E30] - InheritedSize[0x0DA8])
	 */
	class ASolarSummonWeapon_Vehicle : public ASolarPlayerItemWeapon
	{
	public:
		struct FSoftObjectPath                                     SummonConfigPath;                                        // 0x0DA8(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* SummonVehicleSpawnerClass;                               // 0x0DC0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             VehicleSpawnOffset;                                      // 0x0DC8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7U40[0x5C];                                  // 0x0DD4(0x005C) MISSED OFFSET (PADDING)

	public:
		void ServerRequestSummon(const struct FVector& InLocation, const struct FVector& InNormal, const struct FRotator& InOrientation);
		void ClientResponseSummonResult(bool bInSuccess);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSwitchTargetCameraControlComp
	 * Size -> 0x0090 (FullSize[0x0140] - InheritedSize[0x00B0])
	 */
	class USolarSwitchTargetCameraControlComp : public UActorComponent
	{
	public:
		class UClass* SpectateLevelSequenceActorClass;                         // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraBlendCurveHeightScale;                             // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraBlendSpeed;                                        // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinCameraBlendDistanceBetweenTargets;                    // 0x00C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L5GW[0x3C];                                  // 0x00C4(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarSpectateLevelSequenceActor* SpectateLevelSequenceActor;                              // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DUOK[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACameraActor* IntermediatePointCameraActor;                            // 0x0118(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J0RX[0x10];                                  // 0x0120(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               IntermediateEndTarget;                                   // 0x0130(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class UCameraComponent>                     EndTargetCameraCache;                                    // 0x0138(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnViewTargetBlendComplete();
		void OnScoutPlayerWorkComplete();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSyncComponent
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class USolarSyncComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_QE4Q[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SendSyncAxisRotMessage(const class FString& Type, const struct FRotator& Value);
		void SendSyncAxisMoveMessage(const class FString& Type, float Value, const struct FVector& Location);
		void SendSyncAxisMessage(const class FString& Type, float Value);
		void SendPlayerMoveMessage(const struct FServerMoveData& MoveData);
		void SendActionMessage(const class FString& Type, const class FString& Value);
		void RegisterActor(class AActor* AC);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSyncPlayerControllerComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USolarSyncPlayerControllerComponent : public USolarSyncComponent
	{
	public:
		unsigned char                                              UnknownData_WQMZ[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (PADDING)

	public:
		void InputTurnRate(float Value);
		void InputTurn(float Value);
		void InputSecondWeaponReleased();
		void InputSecondWeaponPressed();
		void InputReloadReleased();
		void InputReloadPressed();
		void InputPrimaryWeaponReleased();
		void InputPrimaryWeaponPressed();
		void InputOutVehicleReleased();
		void InputOutVehiclePressed();
		void InputMoveRight(float Value);
		void InputMoveForward(float Value);
		void InputMapReleased();
		void InputMapPressed();
		void InputLookUpRate(float Value);
		void InputLookUp(float Value);
		void InputJumpReleased();
		void InputJumpPressed();
		void InputJetVerticalReleased();
		void InputJetVerticalPressed();
		void InputJetHorizontalReleased();
		void InputJetHorizontalPressed();
		void InputInteractReleased();
		void InputInteractPressed();
		void InputInteractAlternativeReleased();
		void InputInteractAlternativePressed();
		void InputGunsightReleased();
		void InputGunsightPressed();
		void InputFreeLookReleased();
		void InputFreeLookPressed();
		void InputFireReleased();
		void InputFirePressed();
		void InputEquip2Released();
		void InputEquip2Pressed();
		void InputEquip1Released();
		void InputEquip1Pressed();
		void InputEjectReleased();
		void InputEjectPressed();
		void InputCrouchReleased();
		void InputCrouchPressed();
		void InputAltFireReleased();
		void InputAltFirePressed();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarSyncRemoteController
	 * Size -> 0x0038 (FullSize[0x0380] - InheritedSize[0x0348])
	 */
	class ASolarSyncRemoteController : public AAIController
	{
	public:
		unsigned char                                              UnknownData_SBNK[0x38];                                  // 0x0348(0x0038) MISSED OFFSET (PADDING)

	public:
		void TakeWeapon(const class FString& Cmd);
		void OnReceivedServerMoveData(const struct FServerMoveData& MoveData);
		void InputTurnRate(const struct FRotator& Rot);
		void InputTurn(const struct FRotator& Rot);
		void InputSecondWeaponReleased();
		void InputSecondWeaponPressed();
		void InputReloadReleased();
		void InputReloadPressed();
		void InputPrimaryWeaponReleased();
		void InputPrimaryWeaponPressed();
		void InputOutVehicleReleased();
		void InputOutVehiclePressed();
		void InputMoveRight(const struct FSolarSyncMoveMessageParams& Params);
		void InputMoveForward(const struct FSolarSyncMoveMessageParams& Params);
		void InputMapReleased();
		void InputMapPressed();
		void InputLookUpRate(const struct FRotator& Rot);
		void InputLookUp(const struct FRotator& Rot);
		void InputJumpReleased();
		void InputJumpPressed();
		void InputJetVerticalReleased();
		void InputJetVerticalPressed();
		void InputJetHorizontalReleased();
		void InputJetHorizontalPressed();
		void InputInteractReleased();
		void InputInteractPressed();
		void InputInteractAlternativeReleased();
		void InputInteractAlternativePressed();
		void InputGunsightReleased();
		void InputGunsightPressed();
		void InputFreeLookReleased();
		void InputFreeLookPressed();
		void InputFireReleased();
		void InputFirePressed();
		void InputEquip2Released();
		void InputEquip2Pressed();
		void InputEquip1Released();
		void InputEquip1Pressed();
		void InputEjectReleased();
		void InputEjectPressed();
		void InputCrouchReleased();
		void InputCrouchPressed();
		void InputAltFireReleased();
		void InputAltFirePressed();
		void Fire(bool Activate);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTabControlList
	 * Size -> 0x0010 (FullSize[0x0358] - InheritedSize[0x0348])
	 */
	class USolarTabControlList : public USolarUserWidget
	{
	public:
		class USolarTreeView* TabList;                                                 // 0x0348(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CompoundStyleFlags;                                      // 0x0350(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LeafStyleFlags;                                          // 0x0354(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool STATIC_IsMatchStyle(int32_t InStyleFlags, int32_t BitMask);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTabControlListSlot
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class USolarTabControlListSlot : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_9N8O[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		bool BP_IsItemSelectableChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTableManager
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USolarTableManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_PI31[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESolarSupportLanguages                                     SystemLang;                                              // 0x0030(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VV2Z[0xF];                                   // 0x0031(0x000F) MISSED OFFSET (PADDING)

	public:
		void STATIC_SetIMInitFlag(bool Flag);
		void STATIC_SetCurrentLangEnum(ESolarSupportLanguages InLang);
		void STATIC_SetCurrentLang(const class FString& InLang);
		void ReceiveInit();
		void OnSetCurrentLang(const class FString& InLang);
		void STATIC_MakeUpperLocalTextWithLang(class FString* OutLocalText, ESolarSupportLanguages InLang);
		void STATIC_MakeUpperLocalText(class FString* OutLocalText);
		void STATIC_MakeLowerLocalTextWithLang(class FString* OutLocalText, ESolarSupportLanguages InLang);
		void STATIC_MakeLowerLocalText(class FString* OutLocalText);
		bool STATIC_IsLocalTextIDValid(int32_t ID);
		class FString STATIC_GetLocalTextWithLang(int32_t ID, ESolarSupportLanguages InLang, bool bMakeUpperText);
		class FString STATIC_GetLocalText(int32_t ID, bool bMakeUpperText);
		bool STATIC_GetIMInitFlag();
		ESolarSupportLanguages STATIC_GetCurrentLangEnum();
		class FString STATIC_GetCurrentLang();
		ESolarSupportLanguages STATIC_ConvertLangNameToEnum(const class FString& LangName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables
	 * Size -> 0x2BB8 (FullSize[0x2BE0] - InheritedSize[0x0028])
	 */
	class USolarTables : public UObject
	{
	public:
		struct FSolarTables_Tables                                 Tables;                                                  // 0x0028(0x2B88) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic
		class USolarTables_TablesReader* TablesReader;                                            // 0x2BB0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJsonTableReloadComplete;                               // 0x2BB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9HE8[0x18];                                  // 0x2BC8(0x0018) MISSED OFFSET (PADDING)

	public:
		void UnloadTables();
		void UnitTest();
		void ReloadTablesAsync_Internal();
		void ReloadTablesAsync();
		void ReloadTables();
		void LoadTables();
		bool IsReloadTablesComplete();
		bool STATIC_IsInstanceValid();
		bool Hotfix_FixValue(const class FString& TableName, const class FString& RowKey, const class FString& ColKey, const class FString& NewValue, class FString* ErrorMsg);
		bool Hotfix_FixRow(const class FString& TableName, const class FString& RowKey, const class FString& NewRowValue, class FString* ErrorMsg);
		bool HasTableName(const class FString& TableName);
		class USolarTables* STATIC_GetInstance();
		void STATIC_DestroyInstance();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTableReaderBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USolarTableReaderBase : public UObject
	{
	public:
		unsigned char                                              UnknownData_PVF0[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		int32_t STATIC_RandomRangeInt(const struct FSolarTablesRangeInt& InData);
		float STATIC_RandomRangeFloat(const struct FSolarTablesRangeFloat& InData);
		bool IsReaderValid();
		class FString STATIC_GetLocText(const struct FSolarTablesLocalText& InData);
		class FString STATIC_GetDeviceRes(const struct FSolarTablesDeviceRes& InData);
		bool STATIC_ContainsRangeInt(const struct FSolarTablesRangeInt& InData, int32_t In, bool bEqualMin, bool bEqualMax);
		bool STATIC_ContainsRangeFloat(const struct FSolarTablesRangeFloat& InData, float In, bool bEqualMin, bool bEqualMax);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_AccountFixedExp
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_AccountFixedExp : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_AccountFixedExp TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_AccountFixedExp GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_AccountFlag
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_AccountFlag : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_AccountFlag TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_AccountFlag GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Achievement
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Achievement : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Achievement TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Achievement GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Airline
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Airline : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Airline TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Airline GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ArmorProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ArmorProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ArmorProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ArmorProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Armory
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Armory : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Armory TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Armory GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_AutoDirector
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_AutoDirector : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_AutoDirector TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_AutoDirector GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_AutoDirectorActivityScore
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_AutoDirectorActivityScore : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_AutoDirectorActivityScore TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_AutoDirectorActivityScore GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_BackpackProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_BackpackProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_BackpackProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_BackpackProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_BackpackTrailProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_BackpackTrailProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_BackpackTrailProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_BackpackTrailProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_BattleEndRankSettlement
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_BattleEndRankSettlement : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_BattleEndRankSettlement TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_BattleEndRankSettlement GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_BattleRoyaleMode
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_BattleRoyaleMode : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_BattleRoyaleMode TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_BattleRoyaleMode GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_BattleUpgradeContent
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_BattleUpgradeContent : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_BattleUpgradeContent TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_BattleUpgradeContent GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_BattleUpgradeEffect
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_BattleUpgradeEffect : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_BattleUpgradeEffect TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_BattleUpgradeEffect GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_BattleUpgradeEffectPool
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_BattleUpgradeEffectPool : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_BattleUpgradeEffectPool TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_BattleUpgradeEffectPool GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Behavior
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Behavior : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Behavior TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Behavior GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_BpAward
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_BpAward : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_BpAward TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_BpAward GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_CapsuleProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_CapsuleProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_CapsuleProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_CapsuleProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_CaseToggleAlphabet
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_CaseToggleAlphabet : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_CaseToggleAlphabet TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_CaseToggleAlphabet GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_CharacterAbility
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_CharacterAbility : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_CharacterAbility TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_CharacterAbility GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_CharacterPassiveAbility
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_CharacterPassiveAbility : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_CharacterPassiveAbility TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_CharacterPassiveAbility GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_CharacterVoiceover
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_CharacterVoiceover : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_CharacterVoiceover TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_CharacterVoiceover GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Chest
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Chest : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Chest TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Chest GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ChestSpawn
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ChestSpawn : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ChestSpawn TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ChestSpawn GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ChestSpawnGroup
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ChestSpawnGroup : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ChestSpawnGroup TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ChestSpawnGroup GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_CircularCameras
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_CircularCameras : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_CircularCameras TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_CircularCameras GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ClanFlag
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ClanFlag : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ClanFlag TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ClanFlag GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Dance
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Dance : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Dance TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Dance GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_DayAndNight
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_DayAndNight : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_DayAndNight TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_DayAndNight GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_DsVariableRange
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_DsVariableRange : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_DsVariableRange TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_DsVariableRange GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Emote
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Emote : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Emote TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Emote GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_EnergyProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_EnergyProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_EnergyProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_EnergyProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_EscapeExp
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_EscapeExp : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_EscapeExp TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_EscapeExp GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_EShop
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_EShop : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_EShop TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_EShop GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_EShopDemoModel
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_EShopDemoModel : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_EShopDemoModel TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_EShopDemoModel GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_EShopGoodsPool
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_EShopGoodsPool : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_EShopGoodsPool TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_EShopGoodsPool GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_EShopGoodsPoolGroup
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_EShopGoodsPoolGroup : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_EShopGoodsPoolGroup TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_EShopGoodsPoolGroup GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_EShopSpawn
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_EShopSpawn : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_EShopSpawn TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_EShopSpawn GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ExtraEnergyProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ExtraEnergyProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ExtraEnergyProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ExtraEnergyProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_GameMap
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_GameMap : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_GameMap TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_GameMap GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_GameModeGroup
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_GameModeGroup : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_GameModeGroup TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_GameModeGroup GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_GameModeMain
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_GameModeMain : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_GameModeMain TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_GameModeMain GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_GameTimeLine
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_GameTimeLine : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_GameTimeLine TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_GameTimeLine GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_GetPoint
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_GetPoint : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_GetPoint TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_GetPoint GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_GlobalOutcome
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_GlobalOutcome : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_GlobalOutcome TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_GlobalOutcome GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_GlobalSensitivity
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_GlobalSensitivity : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_GlobalSensitivity TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_GlobalSensitivity GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_GunProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_GunProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_GunProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_GunProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_HeroPowerFormula
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_HeroPowerFormula : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_HeroPowerFormula TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_HeroPowerFormula GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_HotSpot
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_HotSpot : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_HotSpot TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_HotSpot GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_InputAction
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_InputAction : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_InputAction TryGetRowData(const class FString& Key, bool* HasKey);
		bool HasRowKey(const class FString& Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<class FString>* OutKeys);
		struct FSolarTablesData_InputAction GetRowData(const class FString& Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_InputMapping
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_InputMapping : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_InputMapping TryGetRowData(const class FString& Key, bool* HasKey);
		bool HasRowKey(const class FString& Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<class FString>* OutKeys);
		struct FSolarTablesData_InputMapping GetRowData(const class FString& Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Item
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Item : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Item TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Item GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ItemBehavior
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ItemBehavior : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ItemBehavior TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ItemBehavior GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ItemCustomType
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ItemCustomType : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ItemCustomType TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ItemCustomType GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ItemInBattle
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ItemInBattle : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ItemInBattle TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ItemInBattle GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ItemQuality
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ItemQuality : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ItemQuality TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ItemQuality GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ItemSound
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ItemSound : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ItemSound TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ItemSound GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ItemWeaponParts
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ItemWeaponParts : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ItemWeaponParts TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ItemWeaponParts GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_JetPackModuleProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_JetPackModuleProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_JetPackModuleProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_JetPackModuleProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_LanguageSwitcher
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_LanguageSwitcher : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_LanguageSwitcher TryGetRowData(const class FString& Key, bool* HasKey);
		bool HasRowKey(const class FString& Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<class FString>* OutKeys);
		struct FSolarTablesData_LanguageSwitcher GetRowData(const class FString& Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_LobbyAutoDownload
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_LobbyAutoDownload : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_LobbyAutoDownload TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_LobbyAutoDownload GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Localization
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Localization : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Localization TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Localization GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Localization_BattleUI
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Localization_BattleUI : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Localization_BattleUI TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Localization_BattleUI GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Localization_EventSystem
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Localization_EventSystem : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Localization_EventSystem TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Localization_EventSystem GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Localization_General
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Localization_General : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Localization_General TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Localization_General GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Localization_Heroes
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Localization_Heroes : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Localization_Heroes TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Localization_Heroes GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Localization_Item
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Localization_Item : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Localization_Item TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Localization_Item GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Localization_Tournament
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Localization_Tournament : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Localization_Tournament TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Localization_Tournament GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Localization_Uncategorized
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Localization_Uncategorized : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Localization_Uncategorized TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Localization_Uncategorized GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_LookAtCameras
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_LookAtCameras : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_LookAtCameras TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_LookAtCameras GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_MapMarkIcon
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_MapMarkIcon : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_MapMarkIcon TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_MapMarkIcon GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_MatchRule
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_MatchRule : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_MatchRule TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_MatchRule GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_MaterialProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_MaterialProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_MaterialProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_MaterialProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_NameCardBackground
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_NameCardBackground : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_NameCardBackground TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_NameCardBackground GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_NameCardPose
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_NameCardPose : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_NameCardPose TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_NameCardPose GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ObGift
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ObGift : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ObGift TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ObGift GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Outcome
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Outcome : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Outcome TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Outcome GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_OutcomeContent
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_OutcomeContent : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_OutcomeContent TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_OutcomeContent GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_OutcomeSet
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_OutcomeSet : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_OutcomeSet TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_OutcomeSet GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_PickupPriorityItem
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_PickupPriorityItem : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_PickupPriorityItem TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_PickupPriorityItem GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_PickupPriorityWeaponPart
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_PickupPriorityWeaponPart : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_PickupPriorityWeaponPart TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_PickupPriorityWeaponPart GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_PlayerOperationListLayout
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_PlayerOperationListLayout : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_PlayerOperationListLayout TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_PlayerOperationListLayout GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_QuickChat
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_QuickChat : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_QuickChat TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_QuickChat GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_QuickVoice
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_QuickVoice : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_QuickVoice TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_QuickVoice GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_RankLevel
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_RankLevel : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_RankLevel TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_RankLevel GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_RankMatch
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_RankMatch : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_RankMatch TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_RankMatch GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Rescue
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Rescue : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Rescue TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Rescue GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_SecondMode
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_SecondMode : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_SecondMode TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_SecondMode GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_ShieldProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_ShieldProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_ShieldProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_ShieldProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Skin
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Skin : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Skin TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Skin GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_TablesReader
	 * Size -> 0x03A0 (FullSize[0x03C8] - InheritedSize[0x0028])
	 */
	class USolarTables_TablesReader : public UObject
	{
	public:
		class USolarTables_Reader_AccountFixedExp* AccountFixedExp;                                         // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_AccountFlag* AccountFlag;                                             // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Airline* Airline;                                                 // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Armory* Armory;                                                  // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent;                                    // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect;                                     // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool;                                 // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement;                                 // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_BpAward* BpAward;                                                 // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Behavior* Behavior;                                                // 0x0070(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_EscapeExp* EscapeExp;                                               // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_CaseToggleAlphabet* CaseToggleAlphabet;                                      // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_UnitCharacter* UnitCharacter;                                           // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_CharacterAbility* CharacterAbility;                                        // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility;                                 // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_GetPoint* GetPoint;                                                // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ChestSpawn* ChestSpawn;                                              // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ChestSpawnGroup* ChestSpawnGroup;                                         // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ClanFlag* ClanFlag;                                                // 0x00B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_DayAndNight* DayAndNight;                                             // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_DsVariableRange* DsVariableRange;                                         // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_EShop* EShop;                                                   // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_EShopDemoModel* EShopDemoModel;                                          // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_EShopGoodsPool* EShopGoodsPool;                                          // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup;                                     // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_EShopSpawn* EShopSpawn;                                              // 0x00F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode;                                        // 0x00F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_GameModeGroup* GameModeGroup;                                           // 0x0100(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_GameModeMain* GameModeMain;                                            // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_OutcomeSet* OutcomeSet;                                              // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_GameTimeLine* GameTimeLine;                                            // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_GlobalOutcome* GlobalOutcome;                                           // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_GlobalSensitivity* GlobalSensitivity;                                       // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_HeroPowerFormula* HeroPowerFormula;                                        // 0x0130(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_InputAction* InputAction;                                             // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_InputMapping* InputMapping;                                            // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Item* Item;                                                    // 0x0148(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_BackpackProperty* BackpackProperty;                                        // 0x0150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty;                                   // 0x0158(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_CapsuleProperty* CapsuleProperty;                                         // 0x0160(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Dance* Dance;                                                   // 0x0168(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Emote* Emote;                                                   // 0x0170(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_MaterialProperty* MaterialProperty;                                        // 0x0178(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty;                                     // 0x0180(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty;                                      // 0x0188(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ItemCustomType* ItemCustomType;                                          // 0x0190(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ItemInBattle* ItemInBattle;                                            // 0x0198(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ArmorProperty* ArmorProperty;                                           // 0x01A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Chest* Chest;                                                   // 0x01A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_EnergyProperty* EnergyProperty;                                          // 0x01B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty;                                     // 0x01B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_GunProperty* GunProperty;                                             // 0x01C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ItemBehavior* ItemBehavior;                                            // 0x01C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ItemWeaponParts* ItemWeaponParts;                                         // 0x01D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty;                                   // 0x01D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ShieldProperty* ShieldProperty;                                          // 0x01E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ItemQuality* ItemQuality;                                             // 0x01E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ItemSound* ItemSound;                                               // 0x01F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload;                                       // 0x01F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_LanguageSwitcher* LanguageSwitcher;                                        // 0x0200(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Localization* Localization;                                            // 0x0208(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Localization_BattleUI* Localization_BattleUI;                                   // 0x0210(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Localization_EventSystem* Localization_EventSystem;                                // 0x0218(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Localization_General* Localization_General;                                    // 0x0220(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Localization_Heroes* Localization_Heroes;                                     // 0x0228(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Localization_Item* Localization_Item;                                       // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Localization_Tournament* Localization_Tournament;                                 // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized;                              // 0x0240(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_GameMap* GameMap;                                                 // 0x0248(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_MapMarkIcon* MapMarkIcon;                                             // 0x0250(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_MatchRule* MatchRule;                                               // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_RankMatch* RankMatch;                                               // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_NameCardBackground* NameCardBackground;                                      // 0x0268(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_NameCardPose* NameCardPose;                                            // 0x0270(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_ObGift* ObGift;                                                  // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Outcome* Outcome;                                                 // 0x0280(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_OutcomeContent* OutcomeContent;                                          // 0x0288(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_PickupPriorityItem* PickupPriorityItem;                                      // 0x0290(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart;                                // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_CharacterVoiceover* CharacterVoiceover;                                      // 0x02A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_QuickChat* QuickChat;                                               // 0x02A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_QuickVoice* QuickVoice;                                              // 0x02B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_VODownload* VODownload;                                              // 0x02B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_RankLevel* RankLevel;                                               // 0x02C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_AutoDirector* AutoDirector;                                            // 0x02C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_AutoDirectorActivityScore* AutoDirectorActivityScore;                               // 0x02D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_CircularCameras* CircularCameras;                                         // 0x02D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_HotSpot* HotSpot;                                                 // 0x02E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_LookAtCameras* LookAtCameras;                                           // 0x02E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Rescue* Rescue;                                                  // 0x02F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Skin* Skin;                                                    // 0x02F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Achievement* Achievement;                                             // 0x0300(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_TaskProgress* TaskProgress;                                            // 0x0308(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_TaskSystem* TaskSystem;                                              // 0x0310(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout;                               // 0x0318(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Variables* Variables;                                               // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Vehicle* Vehicle;                                                 // 0x0328(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_VehicleSkin* VehicleSkin;                                             // 0x0330(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_VehicleType* VehicleType;                                             // 0x0338(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_VehicleSpawn* VehicleSpawn;                                            // 0x0340(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup;                                       // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WarmGame* WarmGame;                                                // 0x0350(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WarmGameMode* WarmGameMode;                                            // 0x0358(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponDamage* WeaponDamage;                                            // 0x0360(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_Weapon* Weapon;                                                  // 0x0368(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponAmmo* WeaponAmmo;                                              // 0x0370(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade;                                     // 0x0378(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponDefault* WeaponDefault;                                           // 0x0380(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponKillTip* WeaponKillTip;                                           // 0x0388(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponParts* WeaponParts;                                             // 0x0390(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponPartsOp* WeaponPartsOp;                                           // 0x0398(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponQuality* WeaponQuality;                                           // 0x03A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_SecondMode* SecondMode;                                              // 0x03A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponSkin* WeaponSkin;                                              // 0x03B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponSound* WeaponSound;                                             // 0x03B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTables_Reader_WeaponStatu* WeaponStatu;                                             // 0x03C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_TaskProgress
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_TaskProgress : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_TaskProgress TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_TaskProgress GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_TaskSystem
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_TaskSystem : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_TaskSystem TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_TaskSystem GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_UnitCharacter
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_UnitCharacter : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_UnitCharacter TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_UnitCharacter GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Variables
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Variables : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Variables TryGetRowData(const class FString& Key, bool* HasKey);
		bool HasRowKey(const class FString& Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<class FString>* OutKeys);
		struct FSolarTablesData_Variables GetRowData(const class FString& Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Vehicle
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Vehicle : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Vehicle TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Vehicle GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_VehicleSkin
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_VehicleSkin : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_VehicleSkin TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_VehicleSkin GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_VehicleSkinProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_VehicleSkinProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_VehicleSkinProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_VehicleSkinProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_VehicleSpawn
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_VehicleSpawn : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_VehicleSpawn TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_VehicleSpawn GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_VehicleSpawnGroup
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_VehicleSpawnGroup : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_VehicleSpawnGroup TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_VehicleSpawnGroup GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_VehicleType
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_VehicleType : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_VehicleType TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_VehicleType GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_VODownload
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_VODownload : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_VODownload TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_VODownload GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WarmGame
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WarmGame : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WarmGame TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WarmGame GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WarmGameMode
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WarmGameMode : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WarmGameMode TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WarmGameMode GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_Weapon
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_Weapon : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_Weapon TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_Weapon GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponAmmo
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponAmmo : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponAmmo TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponAmmo GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponBattleUpgrade
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponBattleUpgrade : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponBattleUpgrade TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponBattleUpgrade GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponDamage
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponDamage : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponDamage TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponDamage GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponDefault
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponDefault : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponDefault TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponDefault GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponKillTip
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponKillTip : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponKillTip TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponKillTip GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponParts
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponParts : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponParts TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponParts GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponPartsOp
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponPartsOp : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponPartsOp TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponPartsOp GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponQuality
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponQuality : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponQuality TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponQuality GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponSkin
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponSkin : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponSkin TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponSkin GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponSkinProperty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponSkinProperty : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponSkinProperty TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponSkinProperty GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponSound
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponSound : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponSound TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponSound GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTables_Reader_WeaponStatu
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USolarTables_Reader_WeaponStatu : public USolarTableReaderBase
	{
	public:
		struct FSolarTablesData_WeaponStatu TryGetRowData(int32_t Key, bool* HasKey);
		bool HasRowKey(int32_t Key);
		bool HasColKey(const class FString& Key);
		class FString GetTableName();
		int32_t GetRowKeys(TArray<int32_t>* OutKeys);
		struct FSolarTablesData_WeaponStatu GetRowData(int32_t Key);
		int32_t GetRowCount();
		int32_t GetDataNum();
		TArray<class FString> GetColKeys();
		int32_t GetColCount();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TaskFormula
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ATaskFormula : public AInfo
	{
	public:
		class USolarTaskComponent* TaskSystem;                                              // 0x0228(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetTaskProgress(int64_t InTaskID, int64_t ProgressValue, bool bOverrideLastMatch);
		void IncreaseTaskProgress(int64_t InTaskID, int64_t ProgressValue);
		int32_t GetTaskConditionValue(int64_t InTaskID, int64_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTaskComponent
	 * Size -> 0x00F8 (FullSize[0x01A8] - InheritedSize[0x00B0])
	 */
	class USolarTaskComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_G4Q2[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             TaskUpdateDelegate;                                      // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TaskCompoleteDelegate;                                   // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             MarkingTaskChangedDelegate;                              // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ClientTaskUpdatedDelegate;                               // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ClientBattlePassTimeInfoDelegate;                        // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UDataTable* TaskTypeHandleConfig;                                    // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* TaskFormula;                                             // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATaskFormula* FormulaInst;                                             // 0x0118(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int64_t>                                            MarkingTask;                                             // 0x0120(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FBattlePassTimeInfo                                 BattlePassTimeInfo;                                      // 0x0130(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FTaskBriefData>                              tasks;                                                   // 0x0148(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8V3B[0x50];                                  // 0x0158(0x0050) MISSED OFFSET (PADDING)

	public:
		void ServerEnableMarkTask(int64_t InTaskID, bool bMarking);
		void OnRep_Tasks();
		void OnRep_MarkingTask();
		void OnRep_BattlePassTimeInfo();
		bool IsMaxLevel();
		bool IsEnable();
		struct FBattlePassTimeInfo GetBattlePassTimeInfo();
		TArray<struct FTaskBriefData> GetAllTaskBriefData();
		TArray<int64_t> GetAllMarkTask();
		void EnableMarkTask(int64_t InTaskID, bool bMarking);
		void ClientNotifyTaskComplete(const struct FTaskBriefData& InTaskInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTcpNetworkManager
	 * Size -> 0x04E8 (FullSize[0x0510] - InheritedSize[0x0028])
	 */
	class USolarTcpNetworkManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_XM98[0x21];                                  // 0x0028(0x0021) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsSsmMatchEnd;                                          // 0x0049(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N3UB[0x6];                                   // 0x004A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarTCPSocketClient* SocketClient;                                            // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USCMMatchChannelAction* MatchChannelAction;                                      // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsSsm;                                                   // 0x0060(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K8CX[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              EncryptKeyClientTCPDynamic;                              // 0x0068(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bEncrypt;                                                // 0x0078(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bCompression;                                            // 0x0079(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LQFS[0x2];                                   // 0x007A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      DisconnectedDelegate;                                    // 0x007C(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      ConnectedDelegate;                                       // 0x008C(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      MessageReceivedDelegate;                                 // 0x009C(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L8NZ[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarPlayerReport                                  MyReport;                                                // 0x00B0(0x0428) NativeAccessSpecifierPrivate
		class ASolarPlayerState* MyPS;                                                    // 0x04D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LIH6[0x30];                                  // 0x04E0(0x0030) MISSED OFFSET (PADDING)

	public:
		void UpdateTeamRank(unsigned char TeamID, int32_t Rank);
		void UpdateTeamMVPPlayer(unsigned char TeamID, const class FString& InPlayerID);
		void UpdatePlayerData(const class FString& PlayerId, class ASolarPlayerState* PlayerState);
		void UpdatePlayerBattleInfo(class ASolarPlayerState* PS);
		bool UpdateBotAIData(int32_t AIIndex, class ASolarPlayerState* PlayerState);
		void TryEndBattle();
		void SyncSsmDataToGameState();
		void SsmDSSendGiftRequest(int32_t GiftID, int32_t Num, const class FString& SendPlayerId, const class FString& RecivePlayerId, class ASolarPlayerState* SendPlayer);
		void SsmDSChangeRoleIDRequest(const class FString& InPlayerID, int32_t InRoleID);
		void SetKnockoutPoints(const class FString& InClanId, int32_t InKnockoutPoints);
		void SendSceenshot2Server(const class FString& UserId, const class FString& PlayerId, const class FString& BattleID, int64_t ScreenshotTime, int32_t ImageSize, int32_t ImageWidth, int32_t ImageHeight, const class FString& ImageType, const class FString& ImageBuffer);
		void SendInputDeviceChangedWrapper(ECommonInputType NowInputType);
		void RequestOpenMatchChannel(int32_t InMatchType, TArray<int32_t> InPlayerStructure, int32_t InMaxMatchTime);
		void ReportTournamentSpectate(TMap<class FString, class FString>* TournamentSpectateData);
		void ReportPlayerBattleInfo(class ASolarPlayerState* PS);
		void RecordLastUsedVehicle();
		void PlayerRequireToChangeGold(int32_t InChangedGoldType, int32_t InGoldNum, const class FString& InPlayerID, class ASolarPlayerState* InPlayer);
		void PlayerCancelJoinRequest(const class FString& PlayerId);
		void PlayerCancelJoin(const class FString& PlayerId);
		void OpenSupplement(int32_t MaxSecond);
		void OnStartBattleResponse();
		void OnRecvData(TArray<unsigned char> Data);
		void OnRecordBattleStartTime(float InStartTime);
		bool OnReceivedTeamPreJoinRequest(TArray<class FString> PlayerIds, int32_t TeamID);
		void OnReceivedPlayerJoinData(const class FString& PlayerId);
		void OnReceivedPlayerCancelJoin(const class FString& PlayerId);
		void OnPostLoadMapWithWorld(class UWorld* World);
		void OnPlayerLogin(const class FString& PlayerId);
		void OnMessageReceived(int32_t ConnId, TArray<unsigned char> Message);
		void OnDisconnected(int32_t ConnId);
		void OnConnected(int32_t ConnId);
		void NotifyTournamentSpectateState(bool bIsEnterReplay, class FString* BattleID);
		void NotifyRoomDataChanged(const struct FCustomRoomData& CustomRoomData);
		void NotifyPlayerReward_CustomMode(const struct FSCustomMode_PlayerReport& Report);
		void NotifyPlayerReward();
		void NotifyPlayerOffline(class ASolarPlayerController* PC);
		void NotifyPlayerEnterBattle(class ASolarPlayerController* PC);
		void NotifyOBPlayersChanged(TArray<class FString>* PlayerIds);
		void NotifyEquipCharacterSkinRequest(const class FString& PlayerId, int32_t CharacterId, int32_t SkinId);
		void NotifyClientBattleStateFish();
		void NotifyBattleGroupResultRequest(unsigned char TeamID, int32_t Rank);
		bool IsEnableAITeamManager();
		bool IsAllowReconnectGame();
		void HandlePlayerLogoutInPreparatoryPhase(class AController* PC);
		void HandlePlayerLogoutInBattlePhase(class AController* PC);
		void GetWeaponUpgradeSlotByWeaponID(TArray<struct FUpgradeSlotStruct>* outData, const class FString& PlayerId, int32_t weaponid);
		int32_t GetWeaponSkinIDByWeaponID(const class FString& PlayerId, int32_t weaponid);
		int32_t GetWarmGameType();
		int32_t GetTournamentID();
		void GetStartBattleRequestInfo(struct FStartBattleRequestInfo* OutResult);
		struct FSolarGameModeInfo GetSolarGameModeInfo();
		int32_t GetRuleID();
		void GetReportWeaponExpIds(TArray<int32_t>* OutWeaponExpIds);
		int32_t GetRankMatchID();
		TArray<int32_t> GetPlayerUsableTailFlameIds(const class FString& PlayerId);
		TArray<int32_t> GetPlayerUsableJetpackIds(const class FString& PlayerId);
		TArray<unsigned char> GetPlayerTeamIDs();
		TArray<class FString> GetPlayerRoleAndOpenIDs();
		int32_t GetPlayerCount();
		class FString GetPlayerClanID(const class FString& PlayerId);
		void GetPlayerBattleRequestInfo(const class FString& InSolarPlayerID, struct FPlayerBattleRequestInfo* OutResult);
		int32_t GetNumMode();
		TArray<int32_t> GetMLRelatedAIDataMLRatio();
		TArray<int32_t> GetMLRelatedAIDataMLFeature();
		bool GetMLRelatedAIDataMLClosed();
		int32_t GetMaxPlayerNum();
		class FString GetLocalPlayerID();
		class FString GetLocalIPAddress();
		struct FKnockoutParams GetKnockoutPointParams();
		bool GetIsCloseMatch();
		bool GetHasMonster();
		bool GetHasMachineLearning();
		int32_t GetGameModeGroupId();
		int32_t GetEntryID();
		int32_t GetCurrentMatchBotTeamPresetID();
		TArray<int32_t> GetClientMatchingMapIds();
		float GetBotShootSimulatorRatio();
		class FString GetBattleID();
		TMap<int32_t, int32_t> GetAILevelConfig();
		int32_t GetAIAccompanyTimelineID();
		int32_t GetAboutToEnterPlayerCount();
		void FakePlayerJoin(const class FString& PlayerId, int32_t TeamID);
		void CloseSupplement();
		bool CheckPlayerLeave(const class FString& PlayerId);
		bool CheckJoinToken(const class FString& Token, const class FString& PlayerId);
		bool CheckIfPlayerHasJoined(const class FString& PlayerId);
		void CheckBattleOver();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTeamInfo
	 * Size -> 0x00D0 (FullSize[0x02F8] - InheritedSize[0x0228])
	 */
	class ASolarTeamInfo : public AInfo
	{
	public:
		unsigned char                                              UnknownData_BTKY[0x18];                                  // 0x0228(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              TeamID;                                                  // 0x0240(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              TeamRank;                                                // 0x0241(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              KillCount;                                               // 0x0242(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              MemberLimit;                                             // 0x0243(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_907U[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                TeamName;                                                // 0x0248(0x0018) BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic
		unsigned char                                              MatchCount;                                              // 0x0260(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasSettled : 1;                                         // 0x0261(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FMulticastSparseDelegate                             OnJoinTeam;                                              // 0x0262(0x0001) InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic
		class FMulticastSparseDelegate                             OnLeaveTeam;                                             // 0x0263(0x0001) InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0SAQ[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarPlayerState*>                           BotMembers;                                              // 0x0268(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarPlayerState*>                           PlayerMembers;                                           // 0x0278(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarPlayerState*>                           TeamMembers;                                             // 0x0288(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HBYF[0x50];                                  // 0x0298(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarTeamInfoComponent* TeamInfoDetails;                                         // 0x02E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HQTF[0x8];                                   // 0x02F0(0x0008) MISSED OFFSET (PADDING)

	public:
		void Settle(unsigned char Rank);
		void RemoveFromTeam(class ASolarPlayerState* PS);
		void ReceivedTeamID();
		void ReceivedKillCount();
		void ReceivedHasSettled();
		void RearrangeMembersPos();
		void OnPlayerStateEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
		bool IsAPlayerTeam();
		bool IsAOnlyPlayerTeam();
		bool IsAOnlyBotTeam();
		bool IsA(ETeamType TeamType);
		void InitFromGameModeConfig();
		bool HasBeenEliminated();
		class ASolarPlayerState* GetTeammatePlayerByPosInTeam(int32_t InPosInTeam);
		int32_t GetSize();
		void GetSCMPlayerStateTeamMembers(TArray<class ASCMPlayerState*>* OutTeamMembers);
		int32_t GetAliveTeammateNum();
		void AddToTeam(class ASolarPlayerState* PS);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTeamInfoComponent
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USolarTeamInfoComponent : public UActorComponent
	{
	public:
		int32_t                                                    KillDownCount;                                           // 0x00B0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AssistCount;                                             // 0x00B4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DeathCount;                                              // 0x00B8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SaveCount;                                               // 0x00BC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTeamInfoModel
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USolarTeamInfoModel : public UObject
	{
	public:
		unsigned char                                              UnknownData_HNB3[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTeamInfoReplicated;                                    // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SimpleTeamInfoDelegate__DelegateSignature(class ASolarTeamInfo* PreTeamInfo, class ASolarTeamInfo* NowTeamInfo);
		void OnMyTeamInfoReplicated(class ASolarTeamInfo* InPreTeamInfo, class ASolarTeamInfo* InMyTeamInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTeammateHUDWidgetComponent
	 * Size -> 0x0054 (FullSize[0x06F0] - InheritedSize[0x069C])
	 */
	class USolarTeammateHUDWidgetComponent : public UWidgetComponent
	{
	public:
		float                                                      HUDTranslucentValue;                                     // 0x069C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LocationUpdateTolerance;                                 // 0x06A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InterpolationTimeRatio;                                  // 0x06A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InterpolationSpeed;                                      // 0x06A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InterpolationEaseInOutExp;                               // 0x06AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat* DistanceToScaleCurve;                                    // 0x06B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseDistanceToCharacterForScale;                         // 0x06B8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CTIG[0x7];                                   // 0x06B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             TargetWorldLocation;                                     // 0x06C0(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8F4O[0x24];                                  // 0x06CC(0x0024) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTeamRescueComponent
	 * Size -> 0x0048 (FullSize[0x00F8] - InheritedSize[0x00B0])
	 */
	class USolarTeamRescueComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_CIQ0[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacter* OwnerChara;                                              // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WWKU[0x14];                                  // 0x00C0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TempReqTime;                                             // 0x00D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RequestTimeout;                                          // 0x00D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSendRequest;                                            // 0x00DC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLastRescueBtnVisibility;                                // 0x00DD(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B0G1[0x2];                                   // 0x00DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacter* ClosestTarget;                                           // 0x00E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class ASolarCharacter>>              NearByDeathVergeTeamMates;                               // 0x00E8(0x0010) ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void TryRescueClosestTeammateLuaCall();
		void TryRescueClosestTeammate();
		void ShowTeamRescueToUI(bool IsShow);
		void SetRescueBtnVisibility(bool bIsVisible);
		void ReqStartTeamRescue(class ASolarCharacter* TargetCharacter);
		void ReqCancelTeamRescure();
		void OnRescueStateChangeInternal();
		void OnRescueStateChange();
		void DetectRescueTeammate(float DeltaTime);
		bool CanRescue(class ASolarCharacter* Player, bool bStart);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTestActor
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASolarTestActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTextBlock
	 * Size -> 0x01F0 (FullSize[0x0350] - InheritedSize[0x0160])
	 */
	class USolarTextBlock : public UTextLayoutWidget
	{
	public:
		bool                                                       bEnableLocText;                                          // 0x0160(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PNTJ[0x7];                                   // 0x0161(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Text;                                                    // 0x0168(0x0018) Edit, NativeAccessSpecifierPublic
		int32_t                                                    LocTextID;                                               // 0x0180(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESolarSupportLanguages                                     PreviewLang;                                             // 0x0184(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCapitalsLock;                                           // 0x0185(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L27T[0x2];                                   // 0x0186(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           CalcSize;                                                // 0x0188(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      TextDelegate;                                            // 0x0190(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		struct FSlateColor                                         ColorAndOpacity;                                         // 0x01A0(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FScriptDelegate                                      ColorAndOpacityDelegate;                                 // 0x01C8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		struct FSlateFontInfo                                      Font;                                                    // 0x01D8(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateFontSizeForLang                               SpecialLangFont;                                         // 0x0238(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSlateBrush                                         StrikeBrush;                                             // 0x0250(0x0098) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FVector2D                                           ShadowOffset;                                            // 0x02E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        ShadowColorAndOpacity;                                   // 0x02F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      ShadowColorAndOpacityDelegate;                           // 0x0300(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MinDesiredWidth;                                         // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWrapWithInvalidationPanel;                              // 0x0314(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoWrapText;                                           // 0x0315(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUsingAccurateScale;                                     // 0x0316(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableCacheSize;                                        // 0x0317(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSimpleTextMode;                                         // 0x0318(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeverResize;                                            // 0x0319(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G9KU[0x36];                                  // 0x031A(0x0036) MISSED OFFSET (PADDING)

	public:
		void SetWrapTextAt(float InWrapTextAt);
		void SetWrappingPolicy(ETextWrappingPolicy InWrappingPolicy);
		void SetText(const class FText& InText);
		void SetStrikeBrush(const struct FSlateBrush& InStrikeBrush);
		void SetShadowOffset(const struct FVector2D& InShadowOffset);
		void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
		void SetOpacity(float InOpacity);
		void SetMinDesiredWidth(float InMinDesiredWidth);
		void SetMargin(const struct FMargin& InMargin);
		void SetLocTextID(int32_t InLocTextID);
		void SetLocLangTextData(const class FText& InText, bool InEnableLocText, int32_t InLocTextID, ESolarSupportLanguages InPreviewLang, const struct FSlateFontSizeForLang& InSlateFontSizeForLang);
		void SetLineHeightPercentage(float InLineHeightPercentage);
		void SetFont(const struct FSlateFontInfo& InFontInfo);
		void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
		void SetAutoWrapText(bool InAutoTextWrap);
		struct FVector2D GetTextSize();
		class FText GetText();
		class UMaterialInstanceDynamic* GetDynamicOutlineMaterial();
		class UMaterialInstanceDynamic* GetDynamicFontMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTimeLineManager
	 * Size -> 0x0060 (FullSize[0x0288] - InheritedSize[0x0228])
	 */
	class ASolarTimeLineManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_V0P6[0x60];                                  // 0x0228(0x0060) MISSED OFFSET (PADDING)

	public:
		void NotifyWeatherCHange(int32_t ID);
		void NotifyPoisonShrink(int32_t ID);
		void NotifyBombing(TArray<int32_t> IDs);
		void NotifyAirDrops(int32_t ChestSpawnID);
		void Exec_NotifyBombing(int32_t ZoneId);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTimerManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarTimerManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_YT5J[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bFullCleanup;                                            // 0x0030(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LB3F[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		void UnPauseTimerInternal(const struct FTimerHandle& Handle);
		void TimerCallbackToLuaInternal(const class FString& CallbackKey);
		struct FTimerHandle SetTimerForNextTickInternal(const class FString& CallbackKey);
		void PauseTimerInternal(const struct FTimerHandle& Handle);
		void OnLuaContextCleanup(bool InBFullCleanup);
		bool IsValidTimerInternal(const struct FTimerHandle& Handle);
		bool IsTimerActiveInternal(const struct FTimerHandle& Handle);
		void ClearTimerInternal(const struct FTimerHandle& Handle);
		struct FTimerHandle AddTimerInternal(const class FString& CallbackKey, float Rate, bool IsLoop, float InitialStartDelay);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTransformerVehicle
	 * Size -> 0x0180 (FullSize[0x1500] - InheritedSize[0x1380])
	 */
	class ASolarTransformerVehicle : public ASolarVehiclePawn
	{
	public:
		unsigned char                                              UnknownData_8VFZ[0x8];                                   // 0x1380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarWheeledVehicleMovement* WheeledMovement;                                         // 0x1388(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarLeggedVehicleMovement* LeggedMovement;                                          // 0x1390(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AdditionalVelocityOnZToLeg;                              // 0x1398(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxVelocityOnXYToWheel;                                  // 0x139C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTransformerSetting                                 TransformerSettings[0x2];                                // 0x13A0(0x0130) Edit, Protected, NativeAccessSpecifierProtected
		ETransformerType                                           CurrentTransformerType;                                  // 0x14D0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2UQN[0x7];                                   // 0x14D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCapsuleComponent* VehicleCapsule;                                          // 0x14D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReplicatedDrift;                                        // 0x14E0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReplicatedRequestJump;                                  // 0x14E1(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3MVA[0x16];                                  // 0x14E2(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LeggedHealthUIID;                                        // 0x14F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_15Z2[0x4];                                   // 0x14FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void StatVehicleAutoSteering(bool bInSameDirection);
		void SetCurrentWeaponActive();
		void ServerSetIsDrift(bool bInDrift, unsigned char InDriveType);
		void OnTransformingFinished();
		void OnRep_ReplicatedJumpRequest();
		void OnRep_Drift();
		void OnRep_CurrentTransformerType(ETransformerType PreviousType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTransformerVehicleAnim
	 * Size -> 0x0144 (FullSize[0x0470] - InheritedSize[0x032C])
	 */
	class USolarTransformerVehicleAnim : public USolarVehicleAnimInstance
	{
	public:
		unsigned char                                              UnknownData_7H2Q[0x4];                                   // 0x032C(0x0004) Fix Super Size
		unsigned char                                              UnknownData_UPJM[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ETransformerType                                           TransformerType;                                         // 0x0338(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4HED[0x3];                                   // 0x0339(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UpdateWeaponRotatorAlpha;                                // 0x033C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FLWheelBoneScale;                                        // 0x0340(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FRWheelBoneScale;                                        // 0x034C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BLWheelBoneScale;                                        // 0x0358(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BRWheelBoneScale;                                        // 0x0364(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FLWheelBoneLocation;                                     // 0x0370(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FRWheelBoneLocation;                                     // 0x037C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BLWheelBoneLocation;                                     // 0x0388(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BRWheelBoneLocation;                                     // 0x0394(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            FLWheelBoneRotation;                                     // 0x03A0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            FRWheelBoneRotation;                                     // 0x03AC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            BLWheelBoneRotation;                                     // 0x03B8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            BRWheelBoneRotation;                                     // 0x03C4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      LeaningDegree;                                           // 0x03D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVehicleAnimationState                                     VehicleAnimState;                                        // 0x03D4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EPXB[0x3];                                   // 0x03D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      YawDifference;                                           // 0x03D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVehicleRotateAnimationType                                VehicleRotateType;                                       // 0x03DC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VG2K[0x3];                                   // 0x03DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             RotationBlend;                                           // 0x03E0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FLFootIKEffectorLocation;                                // 0x03EC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FRFootIKEffectorLocation;                                // 0x03F8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BLFootIKEffectorLocation;                                // 0x0404(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BRFootIKEffectorLocation;                                // 0x0410(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FLFootIKAlpha;                                           // 0x041C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FRFootIKAlpha;                                           // 0x0420(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BLFootIKAlpha;                                           // 0x0424(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BRFootIKAlpha;                                           // 0x0428(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FUJ3[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              FootRotatorOffsets;                                      // 0x0430(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LeftFootLocationX;                                       // 0x0440(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RightFootLocationX;                                      // 0x0444(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BodyRelativeLocation;                                    // 0x0448(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            BodyRelativeRotator;                                     // 0x0454(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ProceduralWalkingAlhpa;                                  // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0878[0xC];                                   // 0x0464(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTreasureBoxSpawner
	 * Size -> 0x00A0 (FullSize[0x0430] - InheritedSize[0x0390])
	 */
	class ASolarTreasureBoxSpawner : public ASolarItemSpawner
	{
	public:
		int32_t                                                    ChestSpawnID;                                            // 0x0390(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ETreasureBoxSpawnType                                      TreasureBoxSpawnType;                                    // 0x0394(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2QLZ[0x3];                                   // 0x0395(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSpawonTreasureBoxIdAndWeight>               SpawnTreasureBox;                                        // 0x0398(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JMPV[0x1C];                                  // 0x03A8(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRandomStream                                       ItemStream;                                              // 0x03C4(0x0008) ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6NCQ[0x58];                                  // 0x03CC(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSpawnedActorHandle                                 CachedActorHandle;                                       // 0x0424(0x0004) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FV7C[0x8];                                   // 0x0428(0x0008) MISSED OFFSET (PADDING)

	public:
		int32_t GetTargetTreasureBoxID();
		int32_t GetOutcomeIdTreasureBoxId(int32_t ItemID);
		struct FSolarItemData CreateItemDataByKey(int32_t ItemID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTreatmentComponent
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class USolarTreatmentComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCharacterHealthLow;                                    // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S0C7[0x10];                                  // 0x00C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacter* OwnerCharacter;                                          // 0x00D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RFLU[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void TryStopTreatment();
		void TryStatisticsTreatedTimes();
		void TryStartTreatment();
		void StopProgress();
		void StartProgress();
		bool IsMedicineEnough();
		bool IsFullHealth();
		bool IsAbleToContinueTreatment();
		void IncreaseTreatedTimes();
		bool CanStartTreatment();
		bool CanBeTreated();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTreeView
	 * Size -> 0x0000 (FullSize[0x09A8] - InheritedSize[0x09A8])
	 */
	class USolarTreeView : public UTreeView
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialGlobalConfig
	 * Size -> 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
	 */
	class UTutorialGlobalConfig : public UDataAsset
	{
	public:
		bool                                                       bSwitch;                                                 // 0x0030(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YRZM[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, ETutorialStage>                        MapName2TutorialStage;                                   // 0x0038(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		float                                                      SubtitleDisappearTime;                                   // 0x0088(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AsyncLoadUIDelayTime;                                    // 0x008C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SameConditionCheckInterval;                              // 0x0090(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1NF9[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTutorialLevelConfig                                TutorialLevelConfig;                                     // 0x0098(0x0038) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		ETutorialStage GetTutorialStageByLevelName(const class FString& LevelName);
		class FString GetTutorialLevelMainMapPath();
		class FString GetTutorialLevelMainMapName();
		struct FTutorialLevelConfigData GetTutorialLevelConfigDataByName(const class FString& LevelName);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarTutorialManager
	 * Size -> 0x0468 (FullSize[0x0498] - InheritedSize[0x0030])
	 */
	class USolarTutorialManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_3ZHO[0x20];                                  // 0x0030(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ETutorialStage                                             CurrentTutorialStage;                                    // 0x0050(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VHJE[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRegisterEvent;                                         // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStepActionBegan;                                       // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStepActionEnded;                                       // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStepActionReset;                                       // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStepActionDisposed;                                    // 0x0098(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FA4O[0x70];                                  // 0x00A8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTutorialGlobalConfig* TutorialGlobalConfig;                                    // 0x0118(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, struct FTutorialTableRow>                    TutorialTableMapRows;                                    // 0x0120(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FTutorialActionTableRow>                     ActionTableRows;                                         // 0x0170(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, struct FTutorialConditionTableRow>           ConditionTableMapRows;                                   // 0x0180(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, class UTutorial*>                            Tutorials;                                               // 0x01D0(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I4CX[0x110];                                 // 0x0220(0x0110) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsConditionCheckCodeParsed : 1;                         // 0x0330(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZV79[0x7];                                   // 0x0331(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TutorialDataTablePath;                                   // 0x0338(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              ActionDataTablePath;                                     // 0x0348(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              ConditionDataTablePath;                                  // 0x0358(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              TutorialGlobalConfigPath;                                // 0x0368(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<uint16_t, class FName>                                OriginCheckFuncNames;                                    // 0x0378(0x0050) Transient, NativeAccessSpecifierPrivate
		TMap<uint16_t, class UFunction*>                           CheckFuncs;                                              // 0x03C8(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EMG3[0x10];                                  // 0x0418(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, struct FCacheConditionInfo>            CacheRanConditions;                                      // 0x0428(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LNIQ[0x10];                                  // 0x0478(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTutorialLevelSaveGame* CurrentTutorialLevelSaveGame;                            // 0x0488(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H69R[0x8];                                   // 0x0490(0x0008) MISSED OFFSET (PADDING)

	public:
		TArray<class FString> TriggerWidgetClicked(TArray<class FString> Params);
		TArray<class FString> TriggerWeaponSlotHasSpecifiedItem(TArray<class FString> Params);
		TArray<class FString> TriggerUseSpecifiedWeaponAbility(TArray<class FString> Params);
		TArray<class FString> TriggerUseSpecifiedVehicleWeapon(TArray<class FString> Params);
		TArray<class FString> TriggerUseSpecifiedVehicleAbility(TArray<class FString> Params);
		TArray<class FString> TriggerTutorialLevelDone(TArray<class FString> Params);
		void TriggerTutorialInternal(ETutorialTriggerType TriggerID);
		void TriggerTutorialEvents(TArray<ETutorialTriggerType>* TriggerTypeArrays, bool bPostTrigger);
		void TriggerTutorialEvent(ETutorialTriggerType TriggerType, bool bPostTrigger);
		TArray<class FString> TriggerSprintingContinuously(TArray<class FString> Params);
		TArray<class FString> TriggerSpecifiedPlayerProficiency(TArray<class FString> Params);
		TArray<class FString> TriggerShieldNotFull(TArray<class FString> Params);
		TArray<class FString> TriggerRunningStep(TArray<class FString> Params);
		TArray<class FString> TriggerPlayerUpgradeBattleLevel(TArray<class FString> Params);
		TArray<class FString> TriggerPlayerInTargetStage(TArray<class FString> Params);
		TArray<class FString> TriggerPlayerAcountLevel(TArray<class FString> Params);
		TArray<class FString> TriggerOpenTreasureBox(TArray<class FString> Params);
		TArray<class FString> TriggerOpenBigMapUMG(TArray<class FString> Params);
		TArray<class FString> TriggerNearAirDropBox(TArray<class FString> Params);
		TArray<class FString> TriggerJumpBegin(TArray<class FString> Params);
		TArray<class FString> TriggerHasUIPanelOpened(TArray<class FString> Params);
		TArray<class FString> TriggerHasTakenDamage(TArray<class FString> Params);
		TArray<class FString> TriggerHasSpecifiedItem(TArray<class FString> Params);
		TArray<class FString> TriggerHasSpecifiedEquipmentByType(TArray<class FString> Params);
		TArray<class FString> TriggerFeatureUnlock(TArray<class FString> Params);
		TArray<class FString> TriggerEquipSpecifiedWeapon(TArray<class FString> Params);
		TArray<class FString> TriggerBotAIDying(TArray<class FString> Params);
		TArray<class FString> TriggerApproachTreasureBox(TArray<class FString> Params);
		TArray<class FString> TriggerAlreadyTriggeredMaxCount(TArray<class FString> Params);
		TArray<class FString> TriggerAirDropBoxLanded(TArray<class FString> Params);
		void TickActivatedTutorials();
		void SetWidgetInteractionFlag(const class FString& InWidgetName, EWidgetInteractionFlag InWidgetInteractionFlag);
		void SetTipsUIInteractionFlag(int32_t TutorialID, bool boolChange);
		void SetSignNameBool(const class FString& SignName, bool InValue);
		void SetFlagNameCount(const class FString& FlagName, int32_t Num);
		void SetAirDropBoxLandedAddOneNum(int32_t Value);
		void SaveTutorialLevelSaveGame();
		void SaveLevelTutorialID(const class FString& InLevelName, int32_t InTutorialID);
		void SaveLevelTutorialHasFinished(const class FString& InLevelName, bool InFinished);
		void SaveLevelPlayerStartTag(const class FString& InLevelName, const class FString& InPlayerStartTag);
		void RequestAddTutorialProgress(int32_t TutorialID, int32_t Progress);
		void ReceiveOnSingleTutorialStart(int32_t TutorialID);
		void ReceiveOnSingleTutorialFinished(int32_t TutorialID);
		void ReceiveLoadTutorialLevelData();
		void ReceiveLoadData();
		void ReceiveClearData();
		void OnPostLoadMap(const class FString& LevelName);
		bool IsInTutorialLevel();
		void InitGuideActorByActionID(TArray<int32_t> ActionIDs, class ATutorialLevelInteractableActor* TutorialGuideActor);
		bool HasAnyTutorialPlaying();
		bool HasAnyMandatoryTutorialPlaying();
		void GM_OpenUI(int32_t ID);
		void GM_CloseUI(int32_t ID);
		EWidgetInteractionFlag GetWidgetInteractionFlag(const class FString& InWidgetName);
		int32_t GetTutorialSingleRoundTriggerMax(int32_t TutorialID);
		class UTutorialLevelSaveGame* GetTutorialLevelSaveGame();
		bool GetTipsUIInteractionFlag(int32_t TutorialID);
		bool GetSignNameBool(const class FString& SignName);
		class UUserWidget* GetPanelUI(const class FString& PanelName);
		int32_t GetLevelTutorialID(const class FString& InLevelName, int32_t DefaultValue);
		bool GetLevelTutorialHasFinished(const class FString& InLevelName, bool DefaultValue);
		int32_t GetFlagNameCount(const class FString& FlagName);
		unsigned char GetCurrentPlayerLevel();
		struct FTutorialActionTableRow GetActionDataByID(int32_t ActionDataID);
		class UWidget* FindWidget(TArray<class FName> InWidgetLink);
		void EnterTutorialLevel(const class FString& LevelName, int32_t Proficiency);
		bool CheckTutorialTipUIOnClick(TArray<class FString> InParams);
		bool CheckIfWidgetReleased(TArray<class FString> InParams);
		bool CheckIfWidgetPressed(TArray<class FString> InParams);
		bool CheckIfWidgetPlayAnimationFinish(TArray<class FString> InParams);
		bool CheckIfWidgetClicked(TArray<class FString> InParams);
		bool CheckIfWeaponSlotHasSpecifiedItem(TArray<class FString> InParams);
		bool CheckIfUIPanelOpened(TArray<class FString> InParams);
		bool CheckIfTutorialLevelDone(TArray<class FString> InParams);
		bool CheckIfTakeDamage(TArray<class FString> InParams);
		bool CheckIfSprintingContinuously(TArray<class FString> InParams);
		bool CheckIfSpecifiedPlayerProficiency(TArray<class FString> InParams);
		bool CheckIfShieldNotFull();
		bool CheckIfRunningStep(TArray<class FString> InParams);
		bool CheckIfReloading();
		bool CheckIfRechargingShield();
		bool CheckIfPlayerLevel(TArray<class FString> InParams);
		bool CheckIfPlayerInTargetScene(TArray<class FString> InParams);
		bool CheckIfPlayerInBattling();
		bool CheckIfPlayerBattleLevel(TArray<class FString> InParams);
		bool CheckIfOpenBigMapUMG();
		bool CheckIfNearAirDropBox();
		bool CheckIfJumpBegin();
		bool CheckIfJetFlyingVertically();
		bool CheckIfJetFlyingHorizontally();
		bool CheckIfInWater();
		bool CheckIfInVehicle();
		bool CheckIfInAir();
		bool CheckIfHasSpecifiedItem(TArray<class FString> InParams);
		bool CheckIfHasSpecifiedEquipmentByType(TArray<class FString> InParams);
		bool CheckIfHasSpecifiedEquipmentById(TArray<class FString> InParams);
		bool CheckIfHasShield();
		bool CheckIfHasMatched();
		bool CheckIfGrowTaskInLevelReceivedAnimationFinish(TArray<class FString> InParams);
		bool CheckIfGrowLevelRewardIsInStatus(TArray<class FString> InParams);
		bool CheckIfFeatureUnlock(TArray<class FString> InParams);
		bool CheckIfFeatureOpen(TArray<class FString> InParams);
		bool CheckIfEquipSpecifiedWeapon(TArray<class FString> InParams);
		bool CheckIfDying();
		bool CheckIfDead();
		bool CheckIfCurrentWeaponAmmoFull();
		bool CheckIfConsumingMedicine();
		bool CheckIfClaimBattlePassLevelReward(TArray<class FString> InParams);
		bool CheckIfCanUseSpecifiedWeaponAbility(TArray<class FString> InParams);
		bool CheckIfCanUseSpecifiedVehicleWeapon(TArray<class FString> InParams);
		bool CheckIfCanUseSpecifiedVehicleAbility(TArray<class FString> InParams);
		bool CheckIfCanOpenTreasureBox();
		bool CheckIfCanJetFlyVertically();
		bool CheckIfCanJetFlyHorizontally();
		bool CheckIfBoughtBattlePass();
		bool CheckIfBotAIDying(TArray<class FString> InParams);
		bool CheckIfBattlePassLevelGreaterThan(TArray<class FString> InParams);
		bool CheckIfApproachElectronicTreasureBox();
		bool CheckIfAlreadyTriggeredMaxCount(TArray<class FString> InParams);
		bool CheckIfAirDropBoxLanded();
		bool CheckConsumeItemButtonType(TArray<class FString> InParams);
		void AddTutorialProgress(int32_t TutorialID, int32_t Progress);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUAV
	 * Size -> 0x0078 (FullSize[0x0458] - InheritedSize[0x03E0])
	 */
	class ASolarUAV : public ASummonItemBase
	{
	public:
		bool                                                       bShowDebug;                                              // 0x03E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EF7L[0x3];                                   // 0x03E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DebugLineThickness;                                      // 0x03E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* Mesh;                                                    // 0x03E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AttachCharacterSocketName;                               // 0x03F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* AppearAnim;                                              // 0x03F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AppearAnimLength;                                        // 0x0400(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LCWL[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimationAsset* DisappearAnim;                                           // 0x0408(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DisppearAnimLength;                                      // 0x0410(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZCS9[0xC];                                   // 0x0414(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bProbeCollisionConfig;                                   // 0x0420(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6EM5[0x3];                                   // 0x0421(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProbeCollisionInterval;                                  // 0x0424(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ProbeCollisionRadius;                                    // 0x0428(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidCollisionMaxHeight;                                 // 0x042C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidCollisionOverTime;                                  // 0x0430(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvoidCollisionCDTime;                                    // 0x0434(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GHGM[0x20];                                  // 0x0438(0x0020) MISSED OFFSET (PADDING)

	public:
		void UAVDestroy();
		void OnCharacterInVehicleTag(const struct FGameplayTag& Tag, int32_t NewCount);
		void Disappear();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUAVRescue
	 * Size -> 0x0488 (FullSize[0x08E0] - InheritedSize[0x0458])
	 */
	class ASolarUAVRescue : public ASolarUAV
	{
	public:
		unsigned char                                              UnknownData_IF7V[0x21];                                  // 0x0458(0x0021) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EUAVRescueState                                            NewState;                                                // 0x0479(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YMCI[0x6];                                   // 0x047A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimationAsset* SuspendAnim_Active_NotWork;                              // 0x0480(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* SuspendAnim_Active_Work;                                 // 0x0488(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* SuspendAnim_Deactive;                                    // 0x0490(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* ActiveAnim;                                              // 0x0498(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* DeactiveAnim;                                            // 0x04A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* BeginWorkAnim;                                           // 0x04A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* EndWorkAnim;                                             // 0x04B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimationAsset* ExplodeAnim;                                             // 0x04B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* ActiveEffect;                                            // 0x04C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* AppearBeginEffect;                                       // 0x04C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AppearBeginEffectSocket;                                 // 0x04D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* JetEffect;                                               // 0x04D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                JetEffectSocket;                                         // 0x04E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XGHV[0x8];                                   // 0x04E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          JetEffectTrans;                                          // 0x04F0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UParticleSystem* ActiveLoopEffect;                                        // 0x0520(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* ChaActiveEffect;                                         // 0x0528(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* ExplodeEffect;                                           // 0x0530(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* DeathVergeEffect;                                        // 0x0538(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ChaActiveEffectSocket;                                   // 0x0540(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AppearEffectLength;                                      // 0x0548(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BRXU[0x4];                                   // 0x054C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstance* MatAppearing;                                            // 0x0550(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FMatAppearingData>                           MatAppearingData;                                        // 0x0558(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstance* MatAppearEndBody;                                        // 0x0568(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstance* MatAppearEndEye;                                         // 0x0570(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeginSound;                                              // 0x0578(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndSound;                                                // 0x0588(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ActiveChaSound;                                          // 0x0598(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ActiveAnimSound;                                         // 0x05A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeginActiveLoopSound;                                    // 0x05B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndActiveLoopSound;                                      // 0x05C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              DeactiveAnimSound;                                       // 0x05D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ExplodeSound;                                            // 0x05E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeginDeathVergeLoopSound;                                // 0x05F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndDeathVergeLoopSound;                                  // 0x0608(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChaSpeedThreshold;                                       // 0x0618(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotateSpeed;                                             // 0x061C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      YawOffset;                                               // 0x0620(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QTVV[0x4];                                   // 0x0624(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* ActivatingScaleCurve;                                    // 0x0628(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat* DeactivatingScaleCurve;                                  // 0x0630(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat* TargetSpeedByDistance;                                   // 0x0638(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Acceleration;                                            // 0x0640(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistance;                                             // 0x0644(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XZM1[0xC];                                   // 0x0648(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             DefaultLocationOffset;                                   // 0x0654(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetLocationOffsetSpeed;                               // 0x0660(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_838L[0x24];                                  // 0x0664(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ActiveDuration;                                          // 0x0688(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ActiveEffectLength;                                      // 0x068C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathVergeHealthThreshold;                               // 0x0690(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3HE2[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     UAVIcon;                                                 // 0x0698(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LPB8[0x10];                                  // 0x06B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* DeathVergeEffectHandle;                                  // 0x06C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* ActiveLoopEffectHandle;                                  // 0x06C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFollowCharacter;                                        // 0x06D0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EJ00[0x2];                                   // 0x06D1(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAppearEnd;                                              // 0x06D3(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1ME2[0x1C];                                  // 0x06D4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bActive;                                                 // 0x06F0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPermanent;                                              // 0x06F1(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bExplodeEffect;                                          // 0x06F2(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5BA9[0x25];                                  // 0x06F3(0x0025) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HealTickInterval;                                        // 0x0718(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealHealthAmount;                                        // 0x071C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealShieldAmount;                                        // 0x0720(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DQXV[0x4];                                   // 0x0724(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* HealLineEffect;                                          // 0x0728(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                HealMeshSocket;                                          // 0x0730(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeginHealSound;                                          // 0x0738(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeginHealLoopSound;                                      // 0x0748(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndHealSound;                                            // 0x0758(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndHealLoopSound;                                        // 0x0768(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeginHealHPLoopSound;                                    // 0x0778(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndHealHPLoopSound;                                      // 0x0788(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeginHealShieldLoopSound;                                // 0x0798(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndHealShieldLoopSound;                                  // 0x07A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* HealLineEffectHandle;                                    // 0x07B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZPD[0x8];                                   // 0x07C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* RescueEffect;                                            // 0x07C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem* RescueEffect_Enermy;                                     // 0x07D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VF0L[0x8];                                   // 0x07D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          RescueEffectTransform;                                   // 0x07E0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FName                                                RescueMeshSocket;                                        // 0x0810(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RescueTime;                                              // 0x0818(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckRescueBlock;                                       // 0x081C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B46X[0x3];                                   // 0x081D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CheckRescueBlockInteval;                                 // 0x0820(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B0ER[0x4];                                   // 0x0824(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BeginRescueLoopSound;                                    // 0x0828(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EndRescueLoopSound;                                      // 0x0838(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              CompleteRescueSound;                                     // 0x0848(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* RescueEffectHandle;                                      // 0x0858(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4YFE[0x10];                                  // 0x0860(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic* MatInstanceAppearingBody;                                // 0x0870(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic* MatInstanceAppearingEye;                                 // 0x0878(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bNavigateToOwner;                                        // 0x0880(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P8UR[0x3];                                   // 0x0881(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RecordInterval;                                          // 0x0884(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NavigateInterval;                                        // 0x0888(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BeginNavigateDistance;                                   // 0x088C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndNavigateDistance;                                     // 0x0890(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KFMU[0x2C];                                  // 0x0894(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* UAVHealBuffGameplayEffect;                               // 0x08C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* UAVRescueGameplayEffect;                                 // 0x08C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5RFE[0x10];                                  // 0x08D0(0x0010) MISSED OFFSET (PADDING)

	public:
		void TickRescue(float DeltaTime);
		void TickNavigate(float DeltaTime);
		void TickHeal(float DeltaTime);
		void ServerSetRescueBlocked(bool bBlocked);
		void OnRescueComplete();
		void OnRep_NewState();
		void OnRep_Active();
		void OnCheckUAVInvisible(const struct FGameplayTag& Tag, int32_t NewCount);
		void OnCharacterEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
		void OnCharacterDeathVergeStatusTag(const struct FGameplayTag& Tag, int32_t NewCount);
		void OnCharacterDeathStatusTag(const struct FGameplayTag& Tag, int32_t NewCount);
		float GetRescueTime();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUAVShield
	 * Size -> 0x0068 (FullSize[0x04C0] - InheritedSize[0x0458])
	 */
	class ASolarUAVShield : public ASolarUAV
	{
	public:
		class UClass* EnergyShieldClass;                                       // 0x0458(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTransform                                          EnergyShieldSpawnTransform;                              // 0x0460(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FString                                              StartSound;                                              // 0x0490(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USpringArmComponent* SpringArm;                                               // 0x04A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZKMT[0x10];                                  // 0x04A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarEnergyShield* EnergyShield;                                            // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnCharacterDeathVergeStatusTag(const struct FGameplayTag& Tag, int32_t NewCount);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUDPManager
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USolarUDPManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_QGBH[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SendBufferSize;                                          // 0x0030(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ReceiveBufferSize;                                       // 0x0034(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UX0I[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnMessageReceived(TArray<unsigned char> Data);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUIRoot
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USolarUIRoot : public USolarUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUnArmWeapon
	 * Size -> 0x01B8 (FullSize[0x03E0] - InheritedSize[0x0228])
	 */
	class ASolarUnArmWeapon : public AActor
	{
	public:
		unsigned char                                              UnknownData_4GA1[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Angle;                                                   // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5RU9[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   HitDetectableTypes;                                      // 0x0238(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Interval;                                                // 0x0248(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IPAP[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* Crosshair;                                               // 0x0250(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     FireIconPath;                                            // 0x0258(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayCueTag                                     HitCueTag;                                               // 0x0270(0x0008) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FSlateBrush                                         FireBtnBrush;                                            // 0x0278(0x0098) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class USolarAbilitySystemComponent* AbilitySystemComponent;                                  // 0x0310(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PSGH[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacterBase* AttackTargetCharacter;                                   // 0x0320(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F6ST[0x50];                                  // 0x0328(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSolarDamageInfo                                    DamageInfo;                                              // 0x0378(0x0040) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UClass* MeleeAbilityClass;                                       // 0x03B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GS64[0x20];                                  // 0x03C0(0x0020) MISSED OFFSET (PADDING)

	public:
		void TryDealMeleeDamage(const struct FVector& Location, float DetectSphereRadius);
		void ServerDealMeleeDamage(class ASolarCharacterBase* Target, const struct FVector& ClientHitLoc, bool bHeavyPunch);
		bool HitAnyCharacters(class ASolarCharacterBase** HitTarget, const struct FVector& Location, float DetectSphereRadius);
		struct FSlateBrush GetFireButtonBrush();
		class ASolarCharacterBase* GetAttackTargetCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUserLuaWidget
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USolarUserLuaWidget : public USolarUserWidget
	{
	public:
		void OnInitWidgetLuaLogic();
		void InitWidgetLuaLogic();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUserWidgetSettings
	 * Size -> 0x00D8 (FullSize[0x0110] - InheritedSize[0x0038])
	 */
	class USolarUserWidgetSettings : public UDeveloperSettings
	{
	public:
		struct FSoftObjectPath                                     SolarImage_Mat_Normal_91;                                // 0x0038(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SolarImage_Mat_Mirror_91;                                // 0x0050(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SolarImage_Mat_Quarter_91;                               // 0x0068(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SolarImage_Mat_Normal_181;                               // 0x0080(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SolarImage_Mat_Mirror_181;                               // 0x0098(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SolarImage_Mat_Quarter_181;                              // 0x00B0(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SolarImage_Mat_Normal_361;                               // 0x00C8(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SolarImage_Mat_Mirror_361;                               // 0x00E0(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     SolarImage_Mat_Quarter_361;                              // 0x00F8(0x0018) Edit, ZeroConstructor, Transient, Config, EditConst, DuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarAyncTask
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarAyncTask : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnAsyncTask;                                             // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarHelper
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarHelper : public UObject
	{
	public:
		void OnAsyncTask__DelegateSignature();
		class FString STATIC_GetUE4LogFilePath();
		class FString STATIC_GetSavedPath();
		class FString STATIC_GetProjectPath();
		class FString STATIC_GetGamePersistentDownloadDir();
		class FString STATIC_GetFileText(const class FString& Path);
		TArray<unsigned char> STATIC_GetFileBinary(const class FString& Path);
		bool STATIC_CleanAllCacheData();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUtils
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarUtils : public UObject
	{
	public:
		class UTextureRenderTarget2D* STATIC_WidgetToTexture(class UUserWidget* Widget, const struct FVector2D& DrawSize);
		struct FVector2D STATIC_TransformScreenPositionToLocal(class UObject* WorldContextObject, const struct FVector2D& InScreenPositon, const struct FVector2D& AnchorsVector);
		void STATIC_PostAkEvent(class UAkComponent* InAkComponent, class ASolarCharacter* InCharacter, const class FString& InControlledSoundName, const class FString& InTeammateSoundName, const class FString& InEnemySoundName);
		bool STATIC_NeedOptimizeShow(class UObject* WorldContext, const struct FVector& Location, float Radius, float BackThreshold);
		class FString STATIC_GetAndroidSavedPngPath();
		bool STATIC_ExportRenderTarget2DAsPNG(class UTextureRenderTarget2D* TexRT, const class FString& TotalFileName);
		void STATIC_ExportImageToSystemAlbum(const class FString& InFilePath);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarUWSettlementBase
	 * Size -> 0x0010 (FullSize[0x0358] - InheritedSize[0x0348])
	 */
	class USolarUWSettlementBase : public USolarUserWidget
	{
	public:
		int32_t                                                    MvpCharacterID;                                          // 0x0348(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MvpSkinID;                                               // 0x034C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class USettlementStageManager>              SettlementStageManager;                                  // 0x0350(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetStageManager(class USettlementStageManager* InStageManager);
		void PlayMvpCharacterVoice();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVaultSystemSettings
	 * Size -> 0x0218 (FullSize[0x0250] - InheritedSize[0x0038])
	 */
	class USolarVaultSystemSettings : public UDeveloperSettings
	{
	public:
		float                                                      MaxFacingAngle2D;                                        // 0x0038(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinFallingVeloZ;                                         // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxFallingVeloZ;                                         // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VaultFallingVeloAngleTolerance;                          // 0x0044(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAutoVaultWhileFalling;                            // 0x0048(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPreventAutoVaultToFalling;                              // 0x0049(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BAUL[0x2];                                   // 0x004A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoMaxFacingAngle2D;                                    // 0x004C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AutoVaultDistThreshold;                                  // 0x0050(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JoystickForwardRange;                                    // 0x0054(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JoystickBackwardRange;                                   // 0x0058(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableWallRun;                                          // 0x005C(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1H30[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             WallRunForce;                                            // 0x0060(0x000C) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WallRunDuration;                                         // 0x006C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinWallRunTriggerHeight;                                 // 0x0070(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WallRunDistThreshold;                                    // 0x0074(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WallRunFallingVeloAngleTolerance;                        // 0x0078(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAutoWallRun;                                      // 0x007C(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4LH0[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoWallRunDistThreshold;                                // 0x0080(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YZ0Q[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EObstacleDetectorType, struct FDetectorShapeParams>   DetectorShapeParams;                                     // 0x0088(0x0050) Edit, Config, NativeAccessSpecifierPublic
		float                                                      PlatformNorAngleTolerance;                               // 0x00D8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VaultWallNorAngleTolerance;                              // 0x00DC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinPlatformWidth;                                        // 0x00E0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EdgeOffset;                                              // 0x00E4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TraceTolerance;                                          // 0x00E8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxIllegalCornerHeight;                                  // 0x00EC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxIllegalCornerWidth;                                   // 0x00F0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CancelDistFromWall;                                      // 0x00F4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CapsuleHalfHeightScaler;                                 // 0x00F8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WallRunWallNorAngleTolerance;                            // 0x00FC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WallRunWallNorNegAngleTolerance;                         // 0x0100(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WallRunBumpMaxHeight;                                    // 0x0104(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WallRunBumpAngle2D;                                      // 0x0108(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VeloThreshold;                                           // 0x010C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EVaultType, struct FVector>                           WarpTargetOffsets;                                       // 0x0110(0x0050) Edit, Config, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EHA6[0x50];                                  // 0x0160(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                LandWarpTargetName;                                      // 0x01B0(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                HandWarpTargetName;                                      // 0x01B8(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                FootWarpTargetName;                                      // 0x01C0(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ServerDistThreshold;                                     // 0x01C8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetSelectRange;                                       // 0x01CC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetSelectAngle;                                       // 0x01D0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChaseLowerLimit;                                         // 0x01D4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceWeight;                                          // 0x01D8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AngleWeight;                                             // 0x01DC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                EnemyWarpTargetName;                                     // 0x01E0(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              TrackWidgetClass[0x28];                                  // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		float                                                      CapsuleShrinkScale;                                      // 0x0210(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAdjustMeshZForAdaptingCapsuleShrink;                    // 0x0214(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4FZG[0x3];                                   // 0x0215(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DurationToResetMeshZAdjustment;                          // 0x0218(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FollowDanceRange;                                        // 0x021C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FollowDanceCheckInterval;                                // 0x0220(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0EOR[0x2C];                                  // 0x0224(0x002C) MISSED OFFSET (PADDING)

	public:
		class USolarVaultSystemSettings* STATIC_Get();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleAbilitySystemComponent
	 * Size -> 0x0018 (FullSize[0x1310] - InheritedSize[0x12F8])
	 */
	class USolarVehicleAbilitySystemComponent : public UAbilitySystemComponent
	{
	public:
		unsigned char                                              UnknownData_592Z[0x18];                                  // 0x12F8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WheeledVehicleAnim
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UWheeledVehicleAnim : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.LeggedVehicleAnim
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULeggedVehicleAnim : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleAttributeSet
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class USolarVehicleAttributeSet : public USolarAttributeSet
	{
	public:
		struct FGameplayAttributeData                              CurrentVehicleHealth;                                    // 0x0030(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              MaxVehicleHealth;                                        // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              MaxBrokenHealth;                                         // 0x0050(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              StealthMaterialPercent;                                  // 0x0060(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              SpeedMultiplier;                                         // 0x0070(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              CurrentVehicleWholeShield;                               // 0x0080(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		struct FGameplayAttributeData                              MaxVehicleWholeShield;                                   // 0x0090(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic

	public:
		void OnRep_StealthMaterialPercent(const struct FGameplayAttributeData& OldStealthMaterialPercent);
		void OnRep_SpeedMultiplier(const struct FGameplayAttributeData& OldSpeedMultiplier);
		void OnRep_MaxVehicleWholeShield(const struct FGameplayAttributeData& OldMaxVehicleWholeShield);
		void OnRep_MaxVehicleHealth(const struct FGameplayAttributeData& OldMaxVehicleHealth);
		void OnRep_MaxBrokenHealth(const struct FGameplayAttributeData& OldMaxBrokenHealth);
		void OnRep_CurrentVehicleWholeShield(const struct FGameplayAttributeData& OldVehicleWholeShield);
		void OnRep_CurrentVehicleHealth(const struct FGameplayAttributeData& OldVehicleHealth);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleCameraComponent
	 * Size -> 0x0038 (FullSize[0x09F0] - InheritedSize[0x09B8])
	 */
	class USolarVehicleCameraComponent : public USolarCameraComponent
	{
	public:
		class ASolarVehiclePawn* Vehicle;                                                 // 0x09B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarVehicleSpringArmComponent* VehicleSpringArm;                                        // 0x09C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R5QU[0x18];                                  // 0x09C8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UVehicleCameraDataAsset*>                     CameraDataAssets;                                        // 0x09E0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGameplayAbility
	 * Size -> 0x00D8 (FullSize[0x04D8] - InheritedSize[0x0400])
	 */
	class USolarVehicleGameplayAbility : public UGameplayAbility
	{
	public:
		bool                                                       bCancelAfterVacateSeat;                                  // 0x0400(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCancelManually;                                         // 0x0401(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              AbilityIndex;                                            // 0x0402(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZYP1[0x5];                                   // 0x0403(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               GameplayCueTags;                                         // 0x0408(0x0020) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FString                                              AbilityActivateVirationHeString;                         // 0x0428(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              AbilityEndVirationHeString;                              // 0x0438(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCheckInstigatorBeforeActivation;                        // 0x0448(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bActivateAbilityOnGranted;                               // 0x0449(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZL1A[0x2];                                   // 0x044A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DurationTime;                                            // 0x044C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* ActivateEffect;                                          // 0x0450(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              AbilityIcon[0x28];                                       // 0x0458(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AdditionalAbilityIcon[0x28];                             // 0x0480(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    AbilityDescription;                                      // 0x04A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_54V6[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AbilityTextType;                                         // 0x04B0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageToVehicle;                                         // 0x04C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DamageToCharacter;                                       // 0x04C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VKR4[0x10];                                  // 0x04C8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_Dash
	 * Size -> 0x0008 (FullSize[0x04E0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_Dash : public USolarVehicleGameplayAbility
	{
	public:
		float                                                      HorizontalDashSpeed;                                     // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      VerticalDashSpeed;                                       // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_EMP
	 * Size -> 0x0018 (FullSize[0x04F0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_EMP : public USolarVehicleGameplayAbility
	{
	public:
		class UClass* EMPActorClass;                                           // 0x04D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* ApplyToTargetGameplayEffectClass;                        // 0x04E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EMPLevel;                                                // 0x04E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ILDF[0x4];                                   // 0x04EC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_EquipWeapon
	 * Size -> 0x0048 (FullSize[0x0520] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_EquipWeapon : public USolarVehicleGameplayAbility
	{
	public:
		class UVehicleCameraDataAsset* CameraDataAsset;                                         // 0x04D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EquipDelayTimer;                                         // 0x04E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDegreeBetweenMeshUpAndGloblaUp;                       // 0x04E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVehicleEquipWeaponOverlapBox>               EquipWeaponOverlapBoxes;                                 // 0x04E8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVehicleEquipWeaponOverlapCapsule>           EquipWeaponOverlapCapsules;                              // 0x04F8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FailToEquipWeaponNotice;                                 // 0x0508(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSendMeshRelativeTransform;                              // 0x050C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1QRI[0x3];                                   // 0x050D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    WeaponSeatIndex;                                         // 0x0510(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P5VV[0xC];                                   // 0x0514(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_HoverFly
	 * Size -> 0x0010 (FullSize[0x04E8] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_HoverFly : public USolarVehicleGameplayAbility
	{
	public:
		float                                                      MaxFlyHeight;                                            // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumTime;                                             // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaximumTime;                                             // 0x04E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6ZDC[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_HoverJump
	 * Size -> 0x0018 (FullSize[0x04F0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_HoverJump : public USolarVehicleGameplayAbility
	{
	public:
		float                                                      HoverJumpHeight;                                         // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GravityScale;                                            // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ServerEndTimerWhenNotReceiveBuffer;                      // 0x04E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G5RB[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarVehicleAT_HoverJump* HoverJumpTask;                                           // 0x04E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleAT_HoverJump
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class USolarVehicleAT_HoverJump : public UAbilityTask
	{
	public:
		unsigned char                                              UnknownData_TQTK[0x10];                                  // 0x0080(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_HoverRolling
	 * Size -> 0x0018 (FullSize[0x04F0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_HoverRolling : public USolarVehicleGameplayAbility
	{
	public:
		float                                                      RollForwardDegree;                                       // 0x04D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollBackDegree;                                          // 0x04DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollForwardDistance;                                     // 0x04E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollForwardDuration;                                     // 0x04E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollHorizontalDistance;                                  // 0x04E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0R4F[0x4];                                   // 0x04EC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_IronManLaser
	 * Size -> 0x0018 (FullSize[0x04F0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_IronManLaser : public USolarVehicleGameplayAbility
	{
	public:
		float                                                      TraceLength;                                             // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TraceLengthScaleOnServer;                                // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxFadingLaserLifeTime;                                  // 0x04E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F9A4[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* EffectToDriver;                                          // 0x04E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleAT_IronManLaser
	 * Size -> 0x0050 (FullSize[0x00D0] - InheritedSize[0x0080])
	 */
	class USolarVehicleAT_IronManLaser : public UAbilityTask
	{
	public:
		unsigned char                                              UnknownData_4O6J[0x50];                                  // 0x0080(0x0050) MISSED OFFSET (PADDING)

	public:
		void OnNotifyEndQueryActor(const class FName& NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);
		void OnNotifyBeginQueryActor(const class FName& NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);
		void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_Jump
	 * Size -> 0x0008 (FullSize[0x04E0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_Jump : public USolarVehicleGameplayAbility
	{
	public:
		float                                                      LandedDamageRadius;                                      // 0x04D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LandedDamageHeight;                                      // 0x04DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ApplyDamageOnLanding(const struct FHitResult& LandedHit);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_NOS
	 * Size -> 0x0030 (FullSize[0x0508] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_NOS : public USolarVehicleGameplayAbility
	{
	public:
		class FName                                                VerticalAxisName;                                        // 0x04D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                HorizontalAxisName;                                      // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalAxisValueForCancel;                              // 0x04E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      JoyStickCancelDegree;                                    // 0x04EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CancelTimeForInput;                                      // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CancelTimeForHit;                                        // 0x04F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CancelSpeedForHit;                                       // 0x04F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UZF8[0x4];                                   // 0x04FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarVehicleAT_NOS* NosTask;                                                 // 0x0500(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleAT_NOS
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class USolarVehicleAT_NOS : public UAbilityTask
	{
	public:
		unsigned char                                              UnknownData_XW7R[0x10];                                  // 0x0080(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnHitDuringNos(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_PrecisionShoot
	 * Size -> 0x0000 (FullSize[0x04D8] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_PrecisionShoot : public USolarVehicleGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_Radar
	 * Size -> 0x0010 (FullSize[0x04E8] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_Radar : public USolarVehicleGameplayAbility
	{
	public:
		class UClass* RadarClass;                                              // 0x04D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ID8V[0x8];                                   // 0x04E0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_SeatEject
	 * Size -> 0x0028 (FullSize[0x0500] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_SeatEject : public USolarVehicleGameplayAbility
	{
	public:
		struct FRotator                                            EjectRotation;                                           // 0x04D8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVehicleEjectParams                                 EjectParams;                                             // 0x04E4(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FGameplayTag                                        GameplayCueTag;                                          // 0x04F4(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T5F5[0x4];                                   // 0x04FC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_SelfHealing
	 * Size -> 0x0008 (FullSize[0x04E0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_SelfHealing : public USolarVehicleGameplayAbility
	{
	public:
		uint32_t                                                   FullHealthNotifyId;                                      // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NLV1[0x4];                                   // 0x04DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_ShieldTrigger
	 * Size -> 0x0000 (FullSize[0x04D8] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_ShieldTrigger : public USolarVehicleGameplayAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_Smoke
	 * Size -> 0x0008 (FullSize[0x04E0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_Smoke : public USolarVehicleGameplayAbility
	{
	public:
		class UClass* VehicleSmoke;                                            // 0x04D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_Stealth
	 * Size -> 0x0028 (FullSize[0x0500] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_Stealth : public USolarVehicleGameplayAbility
	{
	public:
		unsigned char                                              UnknownData_6TDQ[0x28];                                  // 0x04D8(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, class ASolarCharacter* GetOnPlayer);
		void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, class ASolarCharacter* GetOffPlayer);
		void OnCancelStealthByPassenger();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_WeaponFire
	 * Size -> 0x0018 (FullSize[0x04F0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_WeaponFire : public USolarVehicleGameplayAbility
	{
	public:
		unsigned char                                              UnknownData_3Q5I[0x18];                                  // 0x04D8(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnFireTaskEnd();
		void OnCtrlTaskEnd();
		void DoFireTask();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_WeaponReload
	 * Size -> 0x0010 (FullSize[0x04E8] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_WeaponReload : public USolarVehicleGameplayAbility
	{
	public:
		unsigned char                                              UnknownData_V61J[0x10];                                  // 0x04D8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_WheelTransform
	 * Size -> 0x0058 (FullSize[0x0530] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_WheelTransform : public USolarVehicleGameplayAbility
	{
	public:
		TArray<class UClass*>                                      WheeledEffects;                                          // 0x04D8(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      LeggedEffects;                                           // 0x04E8(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PI2B[0x10];                                  // 0x04F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InhibitTransformNoticeIDByBrokenWeakPointNums;           // 0x0508(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckBrokenWeakPointNumConfig;                          // 0x050C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DM60[0x3];                                   // 0x050D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InhibitTransformIfSurpassBrokenWeakPointNumConfig;       // 0x0510(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InhibitTransformNoticeIDByBlock;                         // 0x0514(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             TransformToWheelBoxExtent;                               // 0x0518(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TransformToWheelOverlapOffset;                           // 0x0524(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxFallingSpeedForTransformingWheel;                     // 0x0528(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InhibitTransformNoticeIDByFallingSpeed;                  // 0x052C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_WholeShield
	 * Size -> 0x0018 (FullSize[0x04F0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_WholeShield : public USolarVehicleGameplayAbility
	{
	public:
		unsigned char                                              UnknownData_T2A7[0x18];                                  // 0x04D8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGA_ZombieTruck
	 * Size -> 0x0008 (FullSize[0x04E0] - InheritedSize[0x04D8])
	 */
	class USolarVehicleGA_ZombieTruck : public USolarVehicleGameplayAbility
	{
	public:
		float                                                      PlatformAttachDegree;                                    // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IHR2[0x4];                                   // 0x04DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleWeapon
	 * Size -> 0x0818 (FullSize[0x12A8] - InheritedSize[0x0A90])
	 */
	class ASolarVehicleWeapon : public ASolarWeapon
	{
	public:
		unsigned char                                              UnknownData_MY4B[0x8];                                   // 0x0A90(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxWeaponPitch;                                          // 0x0A98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinWeaponPitch;                                          // 0x0A9C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxWeaponYaw;                                            // 0x0AA0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinWeaponYaw;                                            // 0x0AA4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PitchFollowSpeed;                                        // 0x0AA8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      YawFollowSpeed;                                          // 0x0AAC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SimulationSmoothLerpSpeed;                               // 0x0AB0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SimulationSmoothLerpThreshold;                           // 0x0AB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAbsoluteRotator;                                        // 0x0AB8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasScope;                                               // 0x0AB9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHiddenMesh;                                             // 0x0ABA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OHAN[0x1];                                   // 0x0ABB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ScopeCameraOffset;                                       // 0x0ABC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ScopeTargetOffset;                                       // 0x0AC8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScopeCameraDistance;                                     // 0x0AD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScopeBlendTime;                                          // 0x0AD8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VUJL[0x4];                                   // 0x0ADC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVehicleCameraDataAsset* ScopeCameraData;                                         // 0x0AE0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScopeFOVSwitchSpeed;                                     // 0x0AE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      QuickAdsFireDelay;                                       // 0x0AEC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVehicleWeaponScopeType                                    DefaultWeaponScopeType;                                  // 0x0AF0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7TN5[0x7];                                   // 0x0AF1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* ScopeUI;                                                 // 0x0AF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PitchCameraOffset;                                       // 0x0B00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCameraFocusWeapon;                                      // 0x0B04(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseNormalCameraMode;                                    // 0x0B05(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EWeaponFireModeType                                        FireType;                                                // 0x0B06(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WRTU[0x1];                                   // 0x0B07(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                FireSocketName;                                          // 0x0B08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UpdateShotStartLocThreshold;                             // 0x0B10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EAxis                                                      FireAixsType;                                            // 0x0B14(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OXNK[0x3];                                   // 0x0B15(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                TurretVSocketName;                                       // 0x0B18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                TurretHSocketName;                                       // 0x0B20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShootTolerance;                                          // 0x0B28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YJV5[0x4];                                   // 0x0B2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarVehiclePawn* AttachedVehicle;                                         // 0x0B30(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* WeaponOwner;                                             // 0x0B38(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVehicleWeaponScopeOpen;                                 // 0x0B40(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bActivedWeapon;                                          // 0x0B41(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RZYB[0x2];                                   // 0x0B42(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   RotationYawAndPitchPacket;                               // 0x0B44(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FCX9[0x18];                                  // 0x0B48(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent* VehicleMesh;                                             // 0x0B60(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              VehicleStencilClass[0x28];                               // 0x0B68(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class USkeletalMeshComponent* VehicleStencilNew;                                       // 0x0B90(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AttachBoneName;                                          // 0x0B98(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarCharacter>                      CahedLastOwner;                                          // 0x0BA0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LL8J[0x338];                                 // 0x0BA8(0x0338) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseAssistLock : 1;                                      // 0x0EE0(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowAssistLockUI : 1;                                   // 0x0EE0(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E2V1[0x3];                                   // 0x0EE1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           AssistLockImageSize;                                     // 0x0EE4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           PCAssistLockImageSize;                                   // 0x0EEC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoLockSpreadSwitch : 1;                               // 0x0EF4(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZN0Y[0x3];                                   // 0x0EF5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoLockSpreadDecPerSecond;                              // 0x0EF8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreSelectProgress;                                       // 0x0EFC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  ProgressUpgradeSpeedCurve;                               // 0x0F00(0x0088) Edit, NativeAccessSpecifierPublic
		EAssistLockState                                           AssistLockState;                                         // 0x0F88(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSimulateWeaponFireSocket;                               // 0x0F89(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OLXF[0x2];                                   // 0x0F8A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TriggerSmoothReticleDistance;                            // 0x0F8C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           SmoothReticleSpeed;                                      // 0x0F90(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UPRQ[0x8];                                   // 0x0F98(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          CachedWeaponRelativeTransform;                           // 0x0FA0(0x0030) Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          CachedFireMuzzleTransform;                               // 0x0FD0(0x0030) Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          CachedTurretVSocketTransform;                            // 0x1000(0x0030) Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          CachedTurretHSocketTransform;                            // 0x1030(0x0030) Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      SimulateMuzzleDistanceThreshold;                         // 0x1060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RU8M[0x5C];                                  // 0x1064(0x005C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* VehicleWeaponPrimaryOverrideBulletClass;                 // 0x10C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* VehicleWeaponSecondaryOverrideBulletClass;               // 0x10C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* VehicleWeaponPrimaryOverrideTraceBulletClass;            // 0x10D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               BlockVehicleWeaponFireTags;                              // 0x10D8(0x0020) Edit, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8N8X[0x19];                                  // 0x10F8(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnablePreAimingLaser;                                   // 0x1111(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bNotOptTickIntervalPreAimingActive;                      // 0x1112(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WHV7[0x1];                                   // 0x1113(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                PreAimingLaserLaunchScoket;                              // 0x1114(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TVWX[0x4];                                   // 0x111C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              PreAimingLaserFX[0x28];                                  // 0x1120(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PreAimingLaserEnermyFX[0x28];                            // 0x1148(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    PreAimingLaserChagringPhase;                             // 0x1170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WLPM[0x4];                                   // 0x1174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* PreAimingLaserEffect;                                    // 0x1178(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bEnableBackupAmmo;                                       // 0x1180(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7BK0[0x3];                                   // 0x1181(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BackupAmmoFireCost;                                      // 0x1184(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxBackupAmmo;                                           // 0x1188(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReloadBackupAmmoInterval;                                // 0x118C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ReloadBackupAmmoNum;                                     // 0x1190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurrentBackupAmmo;                                       // 0x1194(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BM17[0x8];                                   // 0x1198(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableRechamber;                                        // 0x11A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0AL0[0x3];                                   // 0x11A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlayRechamberFinishTime;                                 // 0x11A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XPHY[0x8];                                   // 0x11A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              RechamberStartAndStopSound;                              // 0x11B0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              RechamberFinishSound;                                    // 0x11C0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVehicleVFX                                         RechamberAlertVFX;                                       // 0x11D0(0x0090) Edit, NativeAccessSpecifierPublic
		int32_t                                                    RechamberAlertMaterialIndex;                             // 0x1260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bKeepWeaponStateAfterUncontrolled;                       // 0x1264(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V5DV[0x3];                                   // 0x1265(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ReloadSoundName1P;                                       // 0x1268(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ReloadSoundName3P;                                       // 0x1278(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ReloadSoundName3PEnemy;                                  // 0x1288(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReloadingAfterUncontrol;                                // 0x1298(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BTLD[0x7];                                   // 0x1299(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* ReloadAbilityClass;                                      // 0x12A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void VehicleWeaponOpenScope();
		void VehicleWeaponCloseScope();
		void ServerUpdateVehicleWeaponRotate(uint32_t PackedRotation);
		void ServerSendCurveShotHit(uint32_t SpawnID, float InTime, class ASolarPlayerController* InPlayerController, const struct FHitResult& InHit);
		void ServerCancelVehicleFireAbility(const struct FGameplayAbilitySpecHandle& InAbilityHandle);
		void ServerAddWeaponFireTagToCharacter(class ASolarCharacter* InFiredCharacter);
		void ResetWeaponRotation(float DeltaTime);
		void OnVehicleWeaponUnControlled();
		void OnVehicleWeaponControlled();
		void OnStencilLoaded();
		void OnRep_BackupAmmoChanged(int32_t InOldAmmo);
		void LocallyVehicleWeaponTick(float DeltaTime);
		bool IsPlayerLocallyControlledWeapon();
		void InitializeVehicleWeapon(class ASolarVehiclePawn* VehicleWeaponOwner, const class FName& WeaponAttachSocket);
		struct FVector GetShotTargetLocation();
		EWeaponFireModeType GetFireType();
		struct FVector GetAimTargetLocation();
		void ClientFinishedWeaponReload();
		void ClientDrawDebugString(const struct FVector& TextLocation, const class FString& Text, const struct FColor& TextColor, float Duration);
		bool CheckCanOpenScope();
		bool CanEnterFireState();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGatlingWeapon
	 * Size -> 0x0008 (FullSize[0x12B0] - InheritedSize[0x12A8])
	 */
	class ASolarVehicleGatlingWeapon : public ASolarVehicleWeapon
	{
	public:
		unsigned char                                              UnknownData_RRHJ[0x8];                                   // 0x12A8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGC_BrokenDanger
	 * Size -> 0x0030 (FullSize[0x0080] - InheritedSize[0x0050])
	 */
	class USolarVehicleGC_BrokenDanger : public UGameplayCueNotify_Static
	{
	public:
		unsigned char                                              SourceMaterial[0x28];                                    // 0x0050(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_5IOO[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGC_EquipWeapon
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USolarVehicleGC_EquipWeapon : public UGameplayCueNotify_Static
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGC_HoverJump
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class USolarVehicleGC_HoverJump : public UGameplayCueNotify_Static
	{
	public:
		TArray<struct FVehicleVFX>                                 HoverJumpVFXes;                                          // 0x0050(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGC_ZombieTruck
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USolarVehicleGC_ZombieTruck : public UGameplayCueNotify_Static
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleGCNotify_Actor
	 * Size -> 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
	 */
	class ASolarVehicleGCNotify_Actor : public AGameplayCueNotify_Actor
	{
	public:
		unsigned char                                              UnknownData_R1MR[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleHealthWidget
	 * Size -> 0x0150 (FullSize[0x0498] - InheritedSize[0x0348])
	 */
	class USolarVehicleHealthWidget : public USolarUserWidget
	{
	public:
		TMap<int32_t, struct FVehicleHealthResource>               VehicleHealthResourceMap;                                // 0x0348(0x0050) Edit, Transient, NativeAccessSpecifierPublic
		class UProgressBar* ProgressBar_Health;                                      // 0x0398(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Txt_Health;                                              // 0x03A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Txt_Health_percent;                                      // 0x03A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_Health;                                              // 0x03B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* UI_Vehicle_Health_Anim;                                  // 0x03B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* CarHealth_Loop_Anim;                                     // 0x03C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UImage*>                                      WeakPointImgs;                                           // 0x03C8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VehicleNormalColor;                                      // 0x03D8(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VehicleDamageColor;                                      // 0x03E8(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VehicleBrokenColor;                                      // 0x03F8(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VehicleFillImageNormalColor;                             // 0x0408(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VehicleFillImageDamageColor;                             // 0x0418(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VehicleFillImageBrokenColor;                             // 0x0428(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        WeakNormalColor;                                         // 0x0438(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        WeakDamageColor;                                         // 0x0448(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        WeakBrokenColor;                                         // 0x0458(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        RepairingColor;                                          // 0x0468(0x0010) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_68IK[0x20];                                  // 0x0478(0x0020) MISSED OFFSET (PADDING)

	public:
		void InitHealthUI(class ASolarVehiclePawn* InVehiclePawn, bool bInDriveControl);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleHoverWeapon
	 * Size -> 0x0058 (FullSize[0x1300] - InheritedSize[0x12A8])
	 */
	class ASolarVehicleHoverWeapon : public ASolarVehicleWeapon
	{
	public:
		unsigned char                                              UnknownData_EGR1[0x4];                                   // 0x12A8(0x0004) Fix Super Size
		float                                                      InterpSpeed;                                             // 0x12AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             WeaponOpenOffset;                                        // 0x12B0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NGY9[0x4];                                   // 0x12BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* WeaponHoverOffsetCurve;                                  // 0x12C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HGH1[0x38];                                  // 0x12C8(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WheeledVehicleInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UWheeledVehicleInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleWeaponAnimInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UVehicleWeaponAnimInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleIronManWeapon
	 * Size -> 0x0058 (FullSize[0x1300] - InheritedSize[0x12A8])
	 */
	class ASolarVehicleIronManWeapon : public ASolarVehicleWeapon
	{
	public:
		unsigned char                                              DriverStandAttackRight[0x28];                            // 0x12A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DriverLieAttackRight[0x28];                              // 0x12D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FName                                                AttackSectionName;                                       // 0x12F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class USkeletalMeshComponent* GetDriverCharacterMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleLegTurretWeapon
	 * Size -> 0x0058 (FullSize[0x1300] - InheritedSize[0x12A8])
	 */
	class ASolarVehicleLegTurretWeapon : public ASolarVehicleWeapon
	{
	public:
		TArray<struct FBoneIKPreset>                               TargetIKSettings;                                        // 0x12A8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IKBlendSpeed;                                            // 0x12B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                LeftMuzzleName;                                          // 0x12BC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                RightMuzzleName;                                         // 0x12C4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             TargetLeftBoneIK;                                        // 0x12CC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             TargetRightBoneIK;                                       // 0x12D8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CurrentLeftBoneIK;                                       // 0x12E4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CurrentRightBoneIK;                                      // 0x12F0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9CT1[0x4];                                   // 0x12FC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleNosGCNotify_Actor
	 * Size -> 0x0000 (FullSize[0x02A0] - InheritedSize[0x02A0])
	 */
	class ASolarVehicleNosGCNotify_Actor : public ASolarVehicleGCNotify_Actor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleRocketLauncherWeapon
	 * Size -> 0x0428 (FullSize[0x16D0] - InheritedSize[0x12A8])
	 */
	class ASolarVehicleRocketLauncherWeapon : public ASolarVehicleWeapon
	{
	public:
		TArray<struct FBombingAreaData>                            BombingAreaDatas;                                        // 0x12A8(0x0010) Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ERocketFireMode                                            RocketFireMode;                                          // 0x12B8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VWRY[0x7];                                   // 0x12B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FBombingAreaAsset>                    BombingAreaAssetMap;                                     // 0x12C0(0x0050) Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UTQA[0x30];                                  // 0x1310(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSpawnedRocketData>                          SpawnedRocketDatas;                                      // 0x1340(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XLNB[0x160];                                 // 0x1350(0x0160) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBombingAreaAsset                                   PreviewRangeAsset;                                       // 0x14B0(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FBombingAreaAsset                                   BombingAreaAimAsset;                                     // 0x1510(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FBombingAreaAsset                                   BombingAreaWarningAsset;                                 // 0x1570(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              AlertLineMeshClass[0x28];                                // 0x15D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FireMuzzleParticle[0x28];                                // 0x15F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      BombingAreaBlendTime;                                    // 0x1620(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFireModeSetting                                    RocketFireModeSettings[0x2];                             // 0x1624(0x0070) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      ResetOwnerTimer;                                         // 0x1694(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpawnRocketHight;                                        // 0x1698(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_334D[0x4];                                   // 0x169C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        MuzzleSocketNames;                                       // 0x16A0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              RocketLaunchSound_1P;                                    // 0x16B0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              RocketLaunchSound_3P;                                    // 0x16C0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ServerRocketLauncherRealFire(int32_t InFireCounter);
		void ServerActivateRocketLauncherFire(const struct FVector_NetQuantize& InTargetLocation, int32_t InFireCount);
		void OnRocketLauncherRealFire(int32_t InFireCounter);
		void OnRep_RocketSpawnerChanged();
		void OnRep_RocketFireModeChanged();
		void OnLocallyActiveFire(int32_t InFireCount);
		void MulticastRocketLauncherRealFire(int32_t InFireCounter);
		void MulticastPrepareRocketSpawn(const struct FVector_NetQuantize& InLocation, ERocketFireMode InFireMode);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSettings
	 * Size -> 0x01E0 (FullSize[0x0218] - InheritedSize[0x0038])
	 */
	class USolarVehicleSettings : public UDeveloperSettings
	{
	public:
		float                                                      HpLowerLimitInNormalStatus;                              // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HpLowerLimitInDamagedStatus;                             // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleHitTimer;                                         // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReplicatedDelayTimer;                                    // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WaterToDestoryTime;                                      // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxWarningTweenRate;                                     // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinWarningTweenRate;                                     // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinDangerWarningOpacity;                                 // 0x0054(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinProgressBarWarningOpacity;                            // 0x0058(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleBurningSpendTimer;                                // 0x005C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleBurningDeltaTime;                                 // 0x0060(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DisableOverlapTimer;                                     // 0x0064(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ResetOwnerTimer;                                         // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MeshLodLevelForDefaultDeviceLocalPlayer;                 // 0x006C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MeshLodLevelForLowDeviceLocalPlayer;                     // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AutoBrakeTimerWithoutDriver;                             // 0x0074(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                WeakPointVFXParamterName;                                // 0x0078(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeakPointVFXDefaultValue;                                // 0x0080(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeakPointVFXStartValue;                                  // 0x0084(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeakPointVFXTargetValue;                                 // 0x0088(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeakPointVFXDuration;                                    // 0x008C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LeftFootLocationXCurve;                                  // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                RightFootLocationXCurve;                                 // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LeftFootLocationZCurve;                                  // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                RightFootLocationZCurve;                                 // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeaponMagnifiers[0x4];                                   // 0x00B0(0x0010) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* FireAbilityClass;                                        // 0x00C0(0x0008) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleScopeFovBlendTime;                                // 0x00C8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleOutShootFovCoefficients[0x8];                     // 0x00CC(0x0020) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OCI6[0x4];                                   // 0x00EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              VehiclePreviewDissolveMat[0x28];                         // 0x00F0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              VehiclePreviewFresnelMat[0x28];                          // 0x0118(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              VehiclePreviewDissolveCurve[0x28];                       // 0x0140(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              VehiclePreviewFresnelCurve[0x28];                        // 0x0168(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      VehiclePreviewDelayShowSeconds;                          // 0x0190(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    VehiclePreviewMeshSortPriority;                          // 0x0194(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    VehiclePreviewMirrorMeshSortPriority;                    // 0x0198(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    VehiclePreviewVFXSortPriority;                           // 0x019C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    VehiclePreviewMirrorVFXSortPriority;                     // 0x01A0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              VehiclePreviewPlayAnimSound[0xA];                        // 0x01A4(0x000A) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZTPK[0x2];                                   // 0x01AE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VehicleHitTimerForAntiCheating;                          // 0x01B0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HLZ0[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESolarShakeMainType, float>                           VehicleVibrationMultiplier;                              // 0x01B8(0x0050) Edit, Config, NativeAccessSpecifierPublic
		float                                                      ForceUpdateProceduralAnimationToTargetTimeThreshold;     // 0x0208(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ServerBufferCheckFrameInterval;                          // 0x020C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ServerBufferCheckTimeInterval;                           // 0x0210(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ServerBufferCheckCount;                                  // 0x0214(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class USolarVehicleSettings* STATIC_Get();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSiegeWeapon
	 * Size -> 0x0118 (FullSize[0x13C0] - InheritedSize[0x12A8])
	 */
	class ASolarVehicleSiegeWeapon : public ASolarVehicleWeapon
	{
	public:
		unsigned char                                              BulletTargetAreaInSameTeam[0x28];                        // 0x12A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BulletDecalMaterialInSameTeam[0x28];                     // 0x12D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BulletTargetAreaInEnemy[0x28];                           // 0x12F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BulletDecalMaterialInEnemy[0x28];                        // 0x1320(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      AreaParticleScale;                                       // 0x1348(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             AreaDecalSize;                                           // 0x134C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AreaFadeOutTime;                                         // 0x1358(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AreaFadeOutName;                                         // 0x135C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AreaDisplayDistance;                                     // 0x1364(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AreaBlockThreshold;                                      // 0x1368(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B8OE[0x4];                                   // 0x136C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FFireUniqueID, struct FBulletExplodedAreaData> BulletAreaParticleMap;                                   // 0x1370(0x0050) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void OnBulletSpawned(const struct FPredictProjectilePathResult& InHitResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSmoke
	 * Size -> 0x01C0 (FullSize[0x03E8] - InheritedSize[0x0228])
	 */
	class ASolarVehicleSmoke : public AActor
	{
	public:
		float                                                      Duration;                                                // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5422[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  AppearCurve;                                             // 0x0230(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  DisappearCurve;                                          // 0x02B8(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              SmokeEffect[0x28];                                       // 0x0340(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UAkComponent* AkAudioComponent;                                        // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                SmokeFadeName;                                           // 0x0370(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SoundBegin;                                              // 0x0378(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SoundLoop;                                               // 0x0388(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SoundLoopEnd;                                            // 0x0398(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SmokeTranslucentSortPriority;                            // 0x03A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C2YS[0x4];                                   // 0x03AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* SmokeEffectComp;                                         // 0x03B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QHV9[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSmokeWaitToDestory;                                     // 0x03C0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P6PY[0x27];                                  // 0x03C1(0x0027) MISSED OFFSET (PADDING)

	public:
		void OnRep_SmokeWaitToDestory();
		void OnEffectPlayOver();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSoundDataAsset
	 * Size -> 0x05D8 (FullSize[0x0608] - InheritedSize[0x0030])
	 */
	class USolarVehicleSoundDataAsset : public UDataAsset
	{
	public:
		class FString                                              Engine_3P;                                               // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_3P_Enemy;                                         // 0x0040(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_Down_3P;                                          // 0x0050(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_Down_3P_Enemy;                                    // 0x0060(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_RTPC;                                             // 0x0070(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_Stop_3P;                                          // 0x0080(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_Stop_3P_Enemy;                                    // 0x0090(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_Input_RTPC;                                       // 0x00A0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxMoveSpeed;                                            // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R8IE[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MoveSpeed_Acc_RTPC;                                      // 0x00B8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Tire_3P;                                                 // 0x00C8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Tire_3P_Enemy;                                           // 0x00D8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Tire_End_3P;                                             // 0x00E8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Tire_End_3P_Enemy;                                       // 0x00F8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Tire_RTPC;                                               // 0x0108(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Tire_Group;                                              // 0x0118(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EPhysicalSurface, class FString>                      Tire_States;                                             // 0x0128(0x0050) Edit, NativeAccessSpecifierPublic
		bool                                                       bUseEngineRpm;                                           // 0x0178(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VI1E[0x7];                                   // 0x0179(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Vehicle_Collision_3P;                                    // 0x0180(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Collision_3P_Enemy;                              // 0x0190(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Collision_RTPC;                                  // 0x01A0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Booster_3P;                                         // 0x01B0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Booster_3P_Enemy;                                   // 0x01C0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_Booster_3P;                                         // 0x01D0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_Booster_3P_Enemy;                                   // 0x01E0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Speedboard_1P;                                   // 0x01F0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Speedboard_3P;                                   // 0x0200(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Speedboard_3P_Enemy;                             // 0x0210(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Eject_1P;                                        // 0x0220(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Eject_3P;                                        // 0x0230(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Eject_3P_Enemy;                                  // 0x0240(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Vehicle_Destroyed;                                  // 0x0250(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Weakpoint_Broken_3P;                                     // 0x0260(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Weakpoint_Broken_3P_Enemy;                               // 0x0270(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Weakpoint_Fixed_3P;                                      // 0x0280(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Weakpoint_Fixed_3P_Enemy;                                // 0x0290(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_Start_3P;                                         // 0x02A0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Engine_Start_3P_Enemy;                                   // 0x02B0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Braking_Loop_RTPC;                                       // 0x02C0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Braking_Loop_3P;                                    // 0x02D0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Braking_Loop_3P_Enemy;                              // 0x02E0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_Braking_Loop_3P;                                    // 0x02F0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_Braking_Loop_3P_Enemy;                              // 0x0300(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrakingLoopSoundDegree;                                  // 0x0310(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrakingLoopSoundSpeed;                                   // 0x0314(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Reverse_Loop;                                       // 0x0318(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_Reverse_Loop;                                       // 0x0328(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Drift_RTPC;                                              // 0x0338(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Drift_Start;                                             // 0x0348(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Drift_Stop;                                              // 0x0358(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              SpeedDifferenceInKmThresholdForHitSound;                 // 0x0368(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3P7R[0x7];                                   // 0x0369(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Play_SelfHealing_3P;                                     // 0x0370(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_SelfHealing_3P;                                     // 0x0380(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_vehicle_crash_ground_3P;                            // 0x0390(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_vehicle_crash_ground_3P_enemy;                      // 0x03A0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Vehicle_Crash_Ground_RTPC;                               // 0x03B0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VehicleCrashGroundRtpcMultiplier;                        // 0x03C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W3I9[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Play_vehicle_crash_water_3P;                             // 0x03C8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_vehicle_crash_water_3P_enemy;                       // 0x03D8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_vehicle_fixing_weakpoint_3P;                        // 0x03E8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_vehicle_fixing_weakpoint_3P;                        // 0x03F8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_VehicleWholdShieldBegin_Start_1P;                   // 0x0408(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_VehicleWholdShieldBegin_Loop_1P;                    // 0x0418(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_VehicleWholdShieldBegin_Start_3P;                   // 0x0428(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_VehicleWholdShieldBegin_Loop_3P;                    // 0x0438(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_VehicleWholdShieldEnd_Start_1P;                     // 0x0448(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_VehicleWholdShieldEnd_Loop_1P;                      // 0x0458(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_VehicleWholdShieldEnd_Start_3P;                     // 0x0468(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_VehicleWholdShieldEnd_Loop_3P;                      // 0x0478(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_HitVehicleWholdShield_1P;                           // 0x0488(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_HitVehicleWholdShield_3P;                           // 0x0498(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              HoverJumpOnActive1P;                                     // 0x04A8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              HoverJumpOnActive3P;                                     // 0x04B8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              HoverJumpWhileActive1P;                                  // 0x04C8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              HoverJumpWhileActive3P;                                  // 0x04D8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              HoverJumpOnRemove1P;                                     // 0x04E8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              HoverJumpOnRemove3P;                                     // 0x04F8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_VehicleTrumpet_1P;                                  // 0x0508(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_VehicleTrumpet_3P;                                  // 0x0518(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_VehicleTrumpet_1P;                                  // 0x0528(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_VehicleTrumpet_3P;                                  // 0x0538(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_vehicle_common_braking_loop_3P;                     // 0x0548(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_vehicle_common_braking_loop_3P_enemy;               // 0x0558(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_vehicle_common_braking_loop_3P;                     // 0x0568(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Stop_vehicle_common_braking_loop_3P_enemy;               // 0x0578(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Vehicle_UpShift_3P;                                 // 0x0588(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Vehicle_UpShift_3P_Enemy;                           // 0x0598(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Vehicle_DownShift_3P;                               // 0x05A8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_Vehicle_DownShift_3P_Enemy;                         // 0x05B8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Play_IronMan_Laser_Hit;                                  // 0x05C8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              FootPlant;                                               // 0x05D8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Landing_3P;                                              // 0x05E8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Landing_3P_Enemy;                                        // 0x05F8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSpawnEffect
	 * Size -> 0x0038 (FullSize[0x0260] - InheritedSize[0x0228])
	 */
	class ASolarVehicleSpawnEffect : public AActor
	{
	public:
		class UBoxComponent* BoxCollision;                                            // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                EffectMaterialParameterName;                             // 0x0230(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        EffectMeshComponentArray;                                // 0x0238(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    VehicleID;                                               // 0x0248(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BoxExtent;                                               // 0x024C(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EffectTime;                                              // 0x0258(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6GG1[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (PADDING)

	public:
		class UStaticMesh* GetVehicleMesh(int32_t InVehicleID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSpawner
	 * Size -> 0x00A0 (FullSize[0x0430] - InheritedSize[0x0390])
	 */
	class ASolarVehicleSpawner : public ASolarItemSpawner
	{
	public:
		unsigned char                                              UnknownData_9YLO[0x4];                                   // 0x0390(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpawnID;                                                 // 0x0394(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVehicleSpawnType                                          VehicleSpawnType;                                        // 0x0398(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OXET[0x7];                                   // 0x0399(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bVehicleRefresh;                                         // 0x03A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q89U[0x3];                                   // 0x03A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    VehicleRefreshSecond;                                    // 0x03A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVehicleRefreshRand;                                     // 0x03A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVehicleRefreshWaitPreBroken;                            // 0x03A9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GYGK[0x6];                                   // 0x03AA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    VehicleRefreshCheckRoleDisSquared;                       // 0x03B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EObjectTypeQuery>                                   VehicleCheckObjectTypes;                                 // 0x03B8(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             VehicleCheckBoxSize;                                     // 0x03C8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J0BF[0x1C];                                  // 0x03D4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              VehicleSpawnEffectClass[0x28];                           // 0x03F0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class ASolarVehicleSpawnEffect* VehicleSpawnEffect;                                      // 0x0418(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3CXK[0x8];                                   // 0x0420(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSpawnedActorHandle                                 CachedActorHandle;                                       // 0x0428(0x0004) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A6YA[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (PADDING)

	public:
		void StartVehicleRefreshTimer();
		void PlayVehicleSpawnEffectFinished();
		void OnVehicleRefreshCheck();
		void OnVehicleRefresh();
		void OnPreVehicleDriverGetOn(int32_t GetOnSeatIndex, class ASolarCharacter* GetOnPlayer);
		void OnPreVehicleDestroyed(class AActor* DestroyedActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSpringArmComponent
	 * Size -> 0x0048 (FullSize[0x0440] - InheritedSize[0x03F8])
	 */
	class USolarVehicleSpringArmComponent : public USolarSpringArmComponent
	{
	public:
		class USolarVehicleCameraComponent* VehicleCamera;                                           // 0x03F8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarVehiclePawn* VehiclePawn;                                             // 0x0400(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AL5A[0x38];                                  // 0x0408(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleStateMachine
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class USolarVehicleStateMachine : public UObject
	{
	public:
		class ASolarVehiclePawn* Owner;                                                   // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarLeggedVehicleMovement* MovementComponent;                                       // 0x0030(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_URCZ[0x60];                                  // 0x0038(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSubsystem
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class USolarVehicleSubsystem : public UWorldSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnVehicleSpawned;                                        // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVehicleDestroyed;                                      // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KH4N[0x50];                                  // 0x0050(0x0050) MISSED OFFSET (PADDING)

	public:
		void GetActiveVehicleList(TArray<class AActor*>* OutActiveVehicles);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleWeakPointComponent
	 * Size -> 0x0000 (FullSize[0x0600] - InheritedSize[0x0600])
	 */
	class USolarVehicleWeakPointComponent : public UStaticMeshComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVibrateManager
	 * Size -> 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
	 */
	class USolarVibrateManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_TSOD[0x20];                                  // 0x0030(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGameplayVibrateDataAsset* GameplayVibrateDataAsset;                                // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EGameplayVibrateCategory, EGameplayVibrateIntensity>  CurrentVibrateCategoryIntensity;                         // 0x0058(0x0050) Protected, NativeAccessSpecifierProtected
		class UDataTable* WeaponVibrateTable;                                      // 0x00A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVibrateConfig* VibrateConfig;                                           // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EWeaponVibrateFactor                                       WeaponVibrateFactor;                                     // 0x00B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GN7E[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CacheWeaponChargeTime;                                   // 0x00BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void Stop();
		void SetWeaponVibrateFactor();
		void SetVibrateAbilityEnable(bool bOnEnable);
		void SetGameplayVibrateIntensityByUserSetting();
		void SetGameplayVibrateIntensity(EGameplayVibrateCategory Category, EGameplayVibrateIntensity Intensity);
		void SendLoopParam(int32_t Amplitude, int32_t Interval);
		void PlayWeaponVibrate(int32_t InWeaponID, EWeaponVibrateType InType, float InChargeTime);
		void Play(const class FString& Name, int32_t Duration, int32_t Loop, int32_t Priority, int32_t Interval, int32_t Amplitude);
		bool GetVibrateAbilityEnable();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVirtualBulletAKComponent
	 * Size -> 0x0010 (FullSize[0x0510] - InheritedSize[0x0500])
	 */
	class USolarVirtualBulletAKComponent : public UAkComponent
	{
	public:
		unsigned char                                              UnknownData_W53C[0x10];                                  // 0x0500(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVirtualBulletCollector
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class USolarVirtualBulletCollector : public UActorComponent
	{
	public:
		class ASolarWeapon* CacheWeapon;                                             // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarCharacterBase* CacheCharacter;                                          // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWorld* CacheWorld;                                              // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarVirtualBullet>                         Bullets;                                                 // 0x00C8(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarVirtualBullet>                         PendingBulletsInSimulated;                               // 0x00D8(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarVirtualBullet>                         BulletsInSimulated;                                      // 0x00E8(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSolarVirtualBullet>                         BulletsInDedicatedServer;                                // 0x00F8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V589[0x50];                                  // 0x0108(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarBullet* EffectBulletCDO;                                         // 0x0158(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWarmGameComponent
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class USolarWarmGameComponent : public UActorComponent
	{
	public:
		bool IsWarmGame();
		void GetAIPickResult(TArray<int32_t> InCharactetIDs, int32_t* OutCharacterID, int32_t* OutSkinId);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWaterActorNew
	 * Size -> 0x0008 (FullSize[0x0240] - InheritedSize[0x0238])
	 */
	class ASolarWaterActorNew : public AStaticMeshActor
	{
	public:
		struct FSpawnedActorHandle                                 CachedActorHandle;                                       // 0x0238(0x0004) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9TA5[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnExitWaterSurface(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnEnterWaterSurface(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		float GetWaterLineHeight();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ParticleLoopListener
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UParticleLoopListener : public UObject
	{
	public:
		unsigned char                                              UnknownData_6XKC[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnParticleFinished(class UParticleSystemComponent* PS);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAbilityBlackHole
	 * Size -> 0x02F0 (FullSize[0x06D0] - InheritedSize[0x03E0])
	 */
	class ASolarWeaponAbilityBlackHole : public ASummonItemBase
	{
	public:
		unsigned char                                              UnknownData_GJ2Y[0x8];                                   // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent* CoreComponent;                                           // 0x03E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<TWeakObjectPtr<class AActor>, struct FSolarBlackHoleTestActorInfo> TestActorMap;                                            // 0x03F0(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		class FName                                                CoreTag;                                                 // 0x0440(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EActorRegisterType>                                 TestTypes;                                               // 0x0448(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TestRadius;                                              // 0x0458(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ForbidAttractiveDistance;                                // 0x045C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttractiveSpeedWhenNoInput;                              // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttractiveSpeedFactorForCharacterInWater;                // 0x0464(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  MaxAttractiveSpeedReduceCurve;                           // 0x0468(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  AttractiveSpeedReduceAngleWeightCurve;                   // 0x04F0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FGameplayEffectSpecHandle                           ToSelfGameplayEffectHandle;                              // 0x0578(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		struct FGameplayEffectSpecHandle                           ToTargetGameplayEffectHandle;                            // 0x0588(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		TMap<ESolarBlackHoleParticle, struct FSolarBlackHoleParticleInfo> ParticleInfoTable;                                       // 0x0598(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HP4O[0x10];                                  // 0x05E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESolarBlackHoleState                                       CurrentBlackHoleState;                                   // 0x05F8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J18E[0xB];                                   // 0x05F9(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlackHoleReadyDuration;                                  // 0x0604(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlackHoleActiveDuration;                                 // 0x0608(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlackHoleEndDuration;                                    // 0x060C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* ZeroSpeedGameplayEffectClass;                            // 0x0610(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        ForceAttractiveTag;                                      // 0x0618(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class UClass*, float>                                 ClassTypeDamageValueMap;                                 // 0x0620(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TArray<class USplineComponent*>                            CardSplineArray;                                         // 0x0670(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DUBT[0x8];                                   // 0x0680(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      CardArray;                                               // 0x0688(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0F4S[0x8];                                   // 0x0698(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CardStartLocation;                                       // 0x06A0(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L0HD[0xC];                                   // 0x06AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CardSpeed;                                               // 0x06B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O0KX[0x4];                                   // 0x06BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* CardClass;                                               // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultCardPathLength;                                   // 0x06C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M18U[0x4];                                   // 0x06CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnTestActorEndPlay(class AActor* InActor, EEndPlayReason InEndPlayReason);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAbilityTemp
	 * Size -> 0x0018 (FullSize[0x0320] - InheritedSize[0x0308])
	 */
	class ASolarWeaponAbilityTemp : public ASolarAbility
	{
	public:
		class UClass* GameplayAbilityClass;                                    // 0x0308(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayAbilitySpecHandle                          GameplayAbilitySpecHandle;                               // 0x0310(0x0004) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GDHM[0xC];                                   // 0x0314(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_TaskBase
	 * Size -> 0x0030 (FullSize[0x00B0] - InheritedSize[0x0080])
	 */
	class USolarWeaponAT_TaskBase : public USolarAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnTaskEnd;                                               // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UGameplayAbility* OwnerAbility;                                            // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* TaskCharacter;                                           // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponSystemBase* TaskWeaponSysBase;                                       // 0x00A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQZH[0x8];                                   // 0x00A8(0x0008) MISSED OFFSET (PADDING)

	public:
		class USolarWeaponAT_TaskBase* STATIC_CreateTaskDynamically(class UClass* RealClass, class UGameplayAbility* OwningAbility, const class FName& TaskInstanceName, class ASolarCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_CtrlFireBase
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USolarWeaponAT_CtrlFireBase : public USolarWeaponAT_TaskBase
	{
	public:
		class FScriptMulticastDelegate                             OnDoFire;                                                // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_CtrlFireCharge
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USolarWeaponAT_CtrlFireCharge : public USolarWeaponAT_CtrlFireBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_CtrlFireGatling
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class USolarWeaponAT_CtrlFireGatling : public USolarWeaponAT_CtrlFireBase
	{
	public:
		unsigned char                                              UnknownData_JIEG[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_FireBase
	 * Size -> 0x0030 (FullSize[0x00E0] - InheritedSize[0x00B0])
	 */
	class USolarWeaponAT_FireBase : public USolarWeaponAT_TaskBase
	{
	public:
		unsigned char                                              UnknownData_5JIL[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAmmoConfig* Ammo;                                                    // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4FNI[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (PADDING)

	public:
		void K2_RequireEndFireTask();
		void K2_RealFireTick(float DeltaTime);
		void K2_PrepareRealFire();
		void K2_ActivateRealFire();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_FireBurst
	 * Size -> 0x0020 (FullSize[0x0100] - InheritedSize[0x00E0])
	 */
	class USolarWeaponAT_FireBurst : public USolarWeaponAT_FireBase
	{
	public:
		int32_t                                                    BurstMaxCount;                                           // 0x00E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurstFireInterval;                                       // 0x00E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireGroupInterval;                                       // 0x00E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoNextBurst;                                          // 0x00EC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X6IN[0x13];                                  // 0x00ED(0x0013) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponFireLaserCollector
	 * Size -> 0x0190 (FullSize[0x0240] - InheritedSize[0x00B0])
	 */
	class UWeaponFireLaserCollector : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_K9UM[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarWeapon* OwnerWeapon;                                             // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkComponent* FireAkComponent;                                         // 0x00C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkComponent* ImpactAkComponent;                                       // 0x00C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FWeaponFireLaserElement                             ActElement;                                              // 0x00D0(0x0048) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FWeaponFireLaserElement>                     FadingElements;                                          // 0x0118(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K0CT[0x18];                                  // 0x0128(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem* ExplodeEffectParticle;                                   // 0x0140(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem* DecalsEffectParticle;                                    // 0x0148(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UParticleSystemComponent*>                    CacheParticles;                                          // 0x0150(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KRQO[0xE0];                                  // 0x0160(0x00E0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_FireLaser
	 * Size -> 0x0150 (FullSize[0x0230] - InheritedSize[0x00E0])
	 */
	class USolarWeaponAT_FireLaser : public USolarWeaponAT_FireBase
	{
	public:
		float                                                      LaserMaxTime;                                            // 0x00E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DamageCount;                                             // 0x00E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* VehicleBlockEffect;                                      // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* LaserAttackCurve;                                        // 0x00F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* LaserEffectParticle;                                     // 0x00F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* LaserEffectCurve;                                        // 0x0100(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* ExplodeEffectParticle;                                   // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTransform                                          ExplodeEffectTransform;                                  // 0x0110(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class UParticleSystem* DecalsEffectParticle;                                    // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UJS6[0x8];                                   // 0x0148(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          DecalEffectTransform;                                    // 0x0150(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      UpdateExplodeInterval;                                   // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UpdateSimInterval;                                       // 0x0184(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LaserEffectFadeSpeed;                                    // 0x0188(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxFadingLifeTime;                                       // 0x018C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UIAnimLength;                                            // 0x0190(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X86B[0x4];                                   // 0x0194(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LaserFireSound;                                          // 0x0198(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LaserStopSound;                                          // 0x01A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LaserBigSound;                                           // 0x01B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LaserImpactFireSound;                                    // 0x01C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LaserImpactStopSound;                                    // 0x01D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LaserImpactBigSound;                                     // 0x01E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowLaserDamageDebug;                                   // 0x01F8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GI4U[0x3];                                   // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                BeamLifeTimeParamName;                                   // 0x01FC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                BeamSizeParamName;                                       // 0x0204(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H3PG[0x24];                                  // 0x020C(0x0024) MISSED OFFSET (PADDING)

	public:
		class USolarWeaponAT_FireLaser* STATIC_CreateTask(class UGameplayAbility* OwningAbility, const class FName& TaskInstanceName, class ASolarCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_FireNormal
	 * Size -> 0x0000 (FullSize[0x00E0] - InheritedSize[0x00E0])
	 */
	class USolarWeaponAT_FireNormal : public USolarWeaponAT_FireBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_FireRocket
	 * Size -> 0x0020 (FullSize[0x0100] - InheritedSize[0x00E0])
	 */
	class USolarWeaponAT_FireRocket : public USolarWeaponAT_FireBase
	{
	public:
		float                                                      PerRocketInterval;                                       // 0x00E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FireGroupInterval;                                       // 0x00E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarVehicleRocketLauncherWeapon* RocketLauncherWeapon;                                    // 0x00E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0OSQ[0x10];                                  // 0x00F0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_FireSingle
	 * Size -> 0x0008 (FullSize[0x00E8] - InheritedSize[0x00E0])
	 */
	class USolarWeaponAT_FireSingle : public USolarWeaponAT_FireBase
	{
	public:
		bool                                                       bAutoNextFire;                                           // 0x00E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DUIL[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_FireSkill
	 * Size -> 0x0000 (FullSize[0x00E0] - InheritedSize[0x00E0])
	 */
	class USolarWeaponAT_FireSkill : public USolarWeaponAT_FireBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_FireSummon
	 * Size -> 0x0008 (FullSize[0x00E8] - InheritedSize[0x00E0])
	 */
	class USolarWeaponAT_FireSummon : public USolarWeaponAT_FireBase
	{
	public:
		unsigned char                                              UnknownData_88GJ[0x8];                                   // 0x00E0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponAT_WaitStateForEvent
	 * Size -> 0x0038 (FullSize[0x00B8] - InheritedSize[0x0080])
	 */
	class USolarWeaponAT_WaitStateForEvent : public USolarAbilityTask
	{
	public:
		unsigned char                                              UnknownData_EVY3[0x38];                                  // 0x0080(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponBattleWidgetMobile
	 * Size -> 0x02D8 (FullSize[0x0620] - InheritedSize[0x0348])
	 */
	class USolarWeaponBattleWidgetMobile : public USolarUserWidget
	{
	public:
		TArray<class UUserWidget*>                                 WeaponSlotWidgets;                                       // 0x0348(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, class UWidget*>                        ExcelLayoutWidgetMap;                                    // 0x0358(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, class FString>                               CharacterStateMap;                                       // 0x03A8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarPlayerWeapon>                   CurrentActivedPlayerWeapon;                              // 0x03F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SkillCDTimeTextLocalizationID;                           // 0x0400(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LBVL[0xA4];                                  // 0x0404(0x00A4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UExpWidget* WP_Exp;                                                  // 0x04A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponSkillWidget* FireActiveControl;                                       // 0x04B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMovablePad* SecondaryFirePad;                                        // 0x04B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* SecondaryFireIcon;                                       // 0x04C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WGS_Fire_Left;                                           // 0x04C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_Weapon_Exit;                                          // 0x04D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Btn_RoleAbility_Cancel;                                  // 0x04D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URoleSkillWidget* SuperSkill;                                              // 0x04E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URoleSkillWidget* TacticalSkill;                                           // 0x04E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_Fire_Left;                                            // 0x04F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_AutoScopeFire_Left;                                   // 0x04F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_Cancel_Left;                                          // 0x0500(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_Cancel_Right;                                         // 0x0508(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_Cancel_QuickAds;                                      // 0x0510(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BT_Reload_2;                                             // 0x0518(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMovablePad* GunsightPad;                                             // 0x0520(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBox* GunsightImageCheckBox;                                   // 0x0528(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Fire_Right;                                        // 0x0530(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_QuickADS;                                          // 0x0538(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WGS_QuickAds;                                            // 0x0540(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WGS_Fire_Right;                                          // 0x0548(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMovablePad* QuickAdsFirePad;                                         // 0x0550(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Fire;                                              // 0x0558(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Reload;                                            // 0x0560(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Gunsight;                                          // 0x0568(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Weapon_2;                                          // 0x0570(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Weapon_3;                                          // 0x0578(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_SuperSkill;                                        // 0x0580(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_TacticalSkill;                                     // 0x0588(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* FireIconRight;                                           // 0x0590(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* FireIconLeft;                                            // 0x0598(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMovablePad* FirePadRight;                                            // 0x05A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarMovablePad* AutoScopeFirePadRight;                                   // 0x05A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponSlotWidgetMobile* WP_Slot0;                                                // 0x05B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponSlotWidgetMobile* WP_Slot1;                                                // 0x05B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponSlotWidgetMobile* WP_Slot2;                                                // 0x05C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Enter_Anim;                                              // 0x05C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Exit_Anim;                                               // 0x05D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Weapon_UI;                                               // 0x05D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_NextLvDMG;                                           // 0x05E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_NextLv_Content;                                    // 0x05E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2Y4J[0x8];                                   // 0x05F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarAdapterWidget* Panel_Weapon_1_KeyMapping;                               // 0x05F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAdapterWidget* Panel_Weapon_2_KeyMapping;                               // 0x0600(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarAdapterWidget* Panel_Weapon_3_KeyMapping;                               // 0x0608(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USolarAdapterWidget*>                         WeaponKeyMappingArray;                                   // 0x0610(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetWidgetVisiblityByCharacterState(int32_t InCharacterState);
		void SetWidgetVisiblityByActionID(int32_t InActionID, bool InbVisible);
		void OnWeaponUpgrade(class ASolarPlayerWeapon* InPlayerWeapon);
		void OnWeaponSlotUpdateParts(int32_t InWeaponSlotID);
		void OnWeaponSlotUpdateAmmo(int32_t InWeaponSlotID);
		void OnWeaponSlotToggleOverload(int32_t InWeaponSlotID, bool InbEnter);
		void OnWeaponSlotSetSkillPoint(int32_t InWeaponSlotID, bool InbCDFinished, int32_t InSkillPoint);
		void OnWeaponSlotQuitReload(int32_t InWeaponSlotID, bool InbFinishReload);
		void OnWeaponSlotInsufficientAmmo(int32_t InWeaponSlotID);
		void OnWeaponSlotEquip(int32_t InWeaponSlotID, class ASolarPlayerWeapon* InWeapon);
		void OnWeaponSlotEnterSkillCD(int32_t InWeaponSlotID);
		void OnWeaponSlotEnterReload(int32_t InWeaponSlotID);
		void OnWeaponSlotAddEXP(int32_t InWeaponSlotID, int32_t InExp);
		void OnWeaponSlotActive(int32_t InWeaponSlotID, class AActor* InActiveWeapon);
		void OnWeaponSetScopeButtonRotatableEvent(bool bInCanRotate);
		void OnWeaponSetAutoScopeFireButtonIcon();
		void OnWeaponRefreshFireButtonState(class UWeaponSystemPlayerBase* WeaponSys, bool bInForceRefresh);
		void OnWeaponChangeAimIconState(bool bInOpenScope);
		void OnSwitchEMP(class ASolarCharacter* InCharacter, bool InbSwitchOnEMP);
		void OnRoleAbilityHideHUD(bool bHide);
		void OnReleasedSkillCancelButton();
		void OnReleasedSkillButton(const struct FGeometry& InGeometry, const struct FPointerEvent& InPointerEvent);
		void OnReleasedRighrFireButton(const struct FGeometry& InGeometry, const struct FPointerEvent& InPointerEvent);
		void OnReleasedReloadeButton();
		void OnReleasedQuickAdsButton(const struct FGeometry& InGeometry, const struct FPointerEvent& InPointerEvent);
		void OnReleasedLeftFireButton();
		void OnReleasedCancelRightButton();
		void OnReleasedCancelQuickAdsButton();
		void OnReleasedAllFireButtons();
		void OnPressedSkillCancelButton();
		void OnPressedSkillButton(const struct FGeometry& InGeometry, const struct FPointerEvent& InPointerEvent);
		void OnPressedRightFireButton(const struct FGeometry& InGeometry, const struct FPointerEvent& InPointerEvent);
		void OnPressedReloadButton();
		void OnPressedQuickAdsButton(const struct FGeometry& InGeometry, const struct FPointerEvent& InPointerEvent);
		void OnPressedLeftFireButton();
		void OnPressedGunSightButton(const struct FGeometry& InGeometry, const struct FPointerEvent& InPointerEvent);
		void OnPressedCancelRightButton();
		void OnPressedCancelQuickAdsButton();
		void OnExitSpectateMode();
		void OnEnterSpectateMode();
		void OnEnterParachuting();
		void OnEnterCruising();
		void OnControllerCharacterSet(class ASolarCharacter* ControlledCharacter);
		void OnChangeSkydiveFlyState(class ASolarCharacter* InCharacter);
		void OnChangeDriveState(EDriveState InDriveState);
		void OnChangeCharacterSwimState(bool InbSwmming);
		bool IsAutoFire();
		TArray<class UUserWidget*> GetWeaponWidgets();
		bool GetSkillPointData(class AActor* InWeapon, bool* OutbCD, int32_t* OutSkillPoint, int32_t* OutSkillMaxPoint);
		bool GetSkillButtonBrush(class AActor* InWeapon, struct FSlateBrush* OutBrush);
		bool GetFireButtonBrush(class AActor* InWeapon, struct FSlateBrush* OutBrush);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponBattleWidgetPC
	 * Size -> 0x0108 (FullSize[0x0450] - InheritedSize[0x0348])
	 */
	class USolarWeaponBattleWidgetPC : public USolarUserWidget
	{
	public:
		class UImage* SecondaryFireIcon;                                       // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget* UI_Component_Keyboard;                                   // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetActiveControl* FireActiveControl;                                       // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponSlotWidgetPC* WP_Slot0;                                                // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponSlotWidgetPC* WP_Slot1;                                                // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponSlotWidgetPC* WP_Slot2;                                                // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* Tips_Reload;                                             // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* SolarTextBlock_2;                                        // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DisplayReloadTipAmmoRate;                                // 0x0388(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DisplayReloadTipDuration;                                // 0x038C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateColor                                         CanReloadTipColor;                                       // 0x0390(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FSlateColor                                         CannotReloadTipColor;                                    // 0x03B8(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KFKJ[0x40];                                  // 0x03E0(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarPlayerWeapon>                   CurrentActiveWeapon;                                     // 0x0420(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class USolarWeaponSlotWidgetPC*>                    WeaponSlotWidgets;                                       // 0x0428(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bCanDisplayReloadTip;                                    // 0x0438(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D09S[0x7];                                   // 0x0439(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        ReloadTipTimerHandle;                                    // 0x0440(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        UpdateWeaponSkillCDTimerHandle;                          // 0x0448(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnUpdateWeaponParts(int32_t InWeaponSlotID);
		void OnUpdateAmmo(int32_t InWeaponSlotID);
		void OnSetSkillPoint(int32_t InWeaponSlotID, bool InbSkillCDEnd, int32_t InSkillPoint);
		void OnQuitReload(int32_t InWeaponSlotID, bool InbFinishReload);
		void OnEquipWeapon(int32_t InWeaponSlotID, class ASolarPlayerWeapon* InWeapon);
		void OnEnterSkillCD(int32_t InWeaponSlotID);
		void OnEnterReload(int32_t InWeaponSlotID);
		void OnDrivingStateChanged(EDriveState InDriveState);
		void OnActiveWeapon(int32_t InWeaponSlotID, class AActor* InActiveWeapon);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponCrosshairPanelWidget
	 * Size -> 0x00F8 (FullSize[0x0440] - InheritedSize[0x0348])
	 */
	class USolarWeaponCrosshairPanelWidget : public USolarUserWidget
	{
	public:
		class UUserWidget* HUD_Reload;                                              // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* HUD_Forbid;                                              // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher* HUD_Overload;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget* HUD_ChargeProgress;                                      // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFeedbackWidget* HUD_Feedback;                                            // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_CrosshairSlot;                                     // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_BulletContainerSlot;                               // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarWeaponNoAmmoAlertWidget* HUD_NoAmmoAlert;                                         // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarWeaponNoAmmoAlertWidget* HUD_RechamberHint;                                       // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UClass*, class UUserWidget*>                    CrosshairWidgetPool;                                     // 0x0390(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FSolarWeaponCrosshairData                           CurrentWeaponCrosshairData;                              // 0x03E0(0x0038) BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UCrossHairWidget* ActiveCrosshair;                                         // 0x0418(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponBulletContainerWidget* ActiveBulletContainer;                                   // 0x0420(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponRechamberWidget* ActiveRechamberWidget;                                   // 0x0428(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECrossHairState                                            CurrentCrosshairState;                                   // 0x0430(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ECrossHairState                                            LastCrosshairState;                                      // 0x0431(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FNCL[0xE];                                   // 0x0432(0x000E) MISSED OFFSET (PADDING)

	public:
		void RemoveWeaponWidget(class UUserWidget* CrosshairWidgetToRemove, bool bInRemainCache);
		void RemoveActiveWeaponWidget(bool bRemianCache);
		void ClearAllWeaponWidget();
		class UUserWidget* AddWeaponRechamberWidgetToPanel(class UClass* InWidgetClass);
		class UUserWidget* AddWeaponCrosshairToPanel(class UClass* InWidgetClass);
		void AddWeaponCrosshairAndBulletContainer(class AActor* InWeapon, const struct FSolarWeaponCrosshairData& InWeaponCrosshairData);
		class UUserWidget* AddWeaponBulletContainerToPanel(class UClass* InWidgetClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponFireInputResolver
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USolarWeaponFireInputResolver : public UObject
	{
	public:
		unsigned char                                              UnknownData_RXMN[0x60];                                  // 0x0028(0x0060) MISSED OFFSET (PADDING)

	public:
		ESolarWeaponFireInputButtonState GetRightFireButtonState();
		ESolarWeaponFireInputButtonState GetQuickAdsButtonState();
		ESolarWeaponFireInputButtonState GetLeftFireButtonState();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponGA_Rocket
	 * Size -> 0x0048 (FullSize[0x04A8] - InheritedSize[0x0460])
	 */
	class USolarWeaponGA_Rocket : public USolarCharacterGameplayAbility
	{
	public:
		struct FGameplayTag                                        CueTag;                                                  // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LifeTime;                                                // 0x0468(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9DA7[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        LifeTimeEndTimerHandle;                                  // 0x0470(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESkillAnimType                                             SkillAnimType;                                           // 0x0478(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IMSC[0x3];                                   // 0x0479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayEndAbilityTime;                                     // 0x047C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* InCrossHairClass;                                        // 0x0480(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* BurstBulletClass;                                        // 0x0488(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASolarBurstRocketBullet* CacheBurstBullet;                                        // 0x0490(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RJ08[0x8];                                   // 0x0498(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCrossHairWidget* CrossHairWidget;                                         // 0x04A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetLifeTime(float InLifeTime);
		void OnStartRocketAbility(class ASolarCharacter* Character);
		void OnEndRocketAbility(class ASolarCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponGameplayAbility
	 * Size -> 0x0010 (FullSize[0x0428] - InheritedSize[0x0418])
	 */
	class USolarWeaponGameplayAbility : public USolarGameplayAbility
	{
	public:
		struct FGameplayTag                                        CueTag;                                                  // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LifeTime;                                                // 0x0420(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6SQQ[0x4];                                   // 0x0424(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetLifeTime(float InLifeTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponInternalSetting
	 * Size -> 0x0078 (FullSize[0x00B0] - InheritedSize[0x0038])
	 */
	class USolarWeaponInternalSetting : public UDeveloperSettings
	{
	public:
		struct FSoftObjectPath                                     GlobalWeaponConfig;                                      // 0x0038(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     UnArmWeaponClassPath;                                    // 0x0050(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     WeaponDataTable;                                         // 0x0068(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     WeaponAppearanceDataTable;                               // 0x0080(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DefaultProjectileSplineClassPath;                        // 0x0098(0x0018) Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponMergeMeshManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USolarWeaponMergeMeshManager : public UObject
	{
	public:
		TArray<struct FWeaponMergeMeshStruct>                      MergeMeshArray;                                          // 0x0028(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponNoAmmoAlertWidget
	 * Size -> 0x0050 (FullSize[0x0398] - InheritedSize[0x0348])
	 */
	class USolarWeaponNoAmmoAlertWidget : public USolarUserWidget
	{
	public:
		TMap<EWeaponType, struct FSolarNoAmmoAlertWidgetLayout>    NoAmmoAlertLayout;                                       // 0x0348(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected

	public:
		class UWidgetAnimation* K2_GetAlertAnim();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponPartEffectTipWidget
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class USolarWeaponPartEffectTipWidget : public USolarUserWidget
	{
	public:
		class UWidgetAnimation* Anim_Bubble_UP;                                          // 0x0348(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Bubble_Down;                                        // 0x0350(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Exit_UP;                                            // 0x0358(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Exit_Down;                                          // 0x0360(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Effect;                                              // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Percent;                                             // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTipToUp;                                                // 0x0378(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X0K0[0x3];                                   // 0x0379(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TipDuration;                                             // 0x037C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TipTimer;                                                // 0x0380(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bContinueShowTip;                                        // 0x0384(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPlayExitAnimation;                                      // 0x0385(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y7TC[0x2];                                   // 0x0386(0x0002) MISSED OFFSET (PADDING)

	public:
		void ChangeTipDirection(bool InbToUp);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponPenertrableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USolarWeaponPenertrableInterface : public UInterface
	{
	public:
		void ReceiveHitResult(const struct FHitResult& InHitResult);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponProjectileSpline
	 * Size -> 0x0028 (FullSize[0x0250] - InheritedSize[0x0228])
	 */
	class ASolarWeaponProjectileSpline : public AActor
	{
	public:
		class USplineComponent* Spline;                                                  // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2L59[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USplineMeshComponent* SplineMeshComponentCache;                                // 0x0238(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* PreviewedStaticMesh;                                     // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent* PreviewRoot;                                             // 0x0248(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ShowHitPointAt(const struct FVector& Loc);
		void SetPreviewTransform(const struct FVector& PreviewLoc, const struct FVector& PreviewUpDir, const struct FVector& PreviewScale);
		void SetPoints(TArray<struct FVector> Points);
		void SetNeedUpdateDisplayThrowTrajectory(bool Value);
		void K2_OnDisplaySummonPreview();
		void HideHitPoint();
		void HideAllSummonPreview();
		void Hide();
		class USplineMeshComponent* GetSplineMeshComponent();
		void DrawSplineMesh(TArray<struct FVector> InPredictPoints);
		void ChangeSummonPreviewAttachParent();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponPropertySlotWidget
	 * Size -> 0x0070 (FullSize[0x03B8] - InheritedSize[0x0348])
	 */
	class USolarWeaponPropertySlotWidget : public USolarUserWidget
	{
	public:
		TArray<class UWidget*>                                     LockWidgetsCache;                                        // 0x0348(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* PropertyIconBackgroundCache;                             // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* PropertyIconBorderCache;                                 // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* PropertyIconCache;                                       // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     PropertyEmptyIconPath;                                   // 0x0370(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        PropertyIconBorderInvalidColor;                          // 0x0388(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        PropertyIconBackgroundInvalidColor;                      // 0x0398(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        PropertyIconBackgroundValidColor;                        // 0x03A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdatePropertySlot(const struct FUpgradeSlotStruct& InSlotData);
		class UImage* GetPropertyIconCache();
		class UImage* GetPropertyIconBorderCache();
		class UImage* GetPropertyIconBorder();
		class UImage* GetPropertyIconBackgroundCache();
		class UImage* GetPropertyIconBackground();
		class UImage* GetPropertyIcon();
		TArray<class UWidget*> GetLockWidgetsCache();
		TArray<class UWidget*> GetLockWidgets();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponRechamberWidget
	 * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
	 */
	class USolarWeaponRechamberWidget : public USolarUserWidget
	{
	public:
		class UImage* img_FireCD;                                              // 0x0348(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* EmptyBullet_Anim;                                        // 0x0350(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic* ProgressMaterial;                                        // 0x0358(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WidgetActiveControl
	 * Size -> 0x0100 (FullSize[0x0448] - InheritedSize[0x0348])
	 */
	class UWidgetActiveControl : public USolarUserWidget
	{
	public:
		class UNamedSlot* ControlledWidget;                                        // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Progress_Grid;                                           // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* BT_CD_Prompt;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* BT_Mask_Grid_Forbidden;                                  // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* BT_Icon_Grid_Forbidden;                                  // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* BT_Txt_CD;                                               // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGaugeImage* Progress_CD_Mask;                                        // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* LightAngel;                                              // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Quick;                                               // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_BT_CD_Prompt;                                       // 0x0390(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Loop_Lightning;                                     // 0x0398(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Loop_Flicker;                                       // 0x03A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* GridSource;                                              // 0x03A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObject* CDMaskSource;                                            // 0x03B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface* PromptSource;                                            // 0x03B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObject* ForbiddenIconSource;                                     // 0x03C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObject* ForbiddenMaskSource;                                     // 0x03C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseEnableForActive;                                     // 0x03D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DV8W[0x3];                                   // 0x03D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    GridNumber;                                              // 0x03D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CDTimerPrecision;                                        // 0x03D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GridConsumedEffectSpeed;                                 // 0x03DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        CDTxtColorSpeedup;                                       // 0x03E0(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        CDTxtColorNormal;                                        // 0x03F0(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* GridCountTextBlockCache;                                 // 0x0400(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* PanelDisableCache;                                       // 0x0408(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HO64[0x10];                                  // 0x0410(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bWidgetActive;                                           // 0x0420(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DBPC[0x7];                                   // 0x0421(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic* GridMaterial;                                            // 0x0428(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeedUpdateGrid;                                         // 0x0430(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeedUpdateGridEffect;                                   // 0x0431(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RW3W[0x2];                                   // 0x0432(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GridPercent;                                             // 0x0434(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GridEffectPercent;                                       // 0x0438(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bGridVisualForbidden;                                    // 0x043C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeedUpdateCD;                                           // 0x043D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OL9V[0x2];                                   // 0x043E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CDPercent;                                               // 0x0440(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCDVisualForbidden;                                      // 0x0444(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPlayingCDAnim;                                          // 0x0445(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X1GH[0x2];                                   // 0x0446(0x0002) MISSED OFFSET (PADDING)

	public:
		void UpdateGridPercent(float Percent);
		void UpdateGridEffectPercent(float Percent);
		void UpdateCDText(const class FString& Value);
		void UpdateCDFloatAsText(float Value);
		void UpdateCD(float Percent);
		void StopUpdateGrid();
		void StopCD(bool bPlayPrompt);
		void StartUpdateGrid();
		void StartCD();
		bool ShouldWidgetActive();
		bool ShouldVisualForbiddenNew();
		bool ShouldVisualForbidden();
		void SetTotalGrid(int32_t NewGridNum);
		void SetGridNewPercent(float RestPercent);
		void SetGridForbiddenVisualNew(bool bForbidden);
		void SetGridForbiddenVisual(bool bForbidden);
		void SetGridCountText(int32_t InCount);
		void SetCoolingDownVisual(bool bInCD);
		void SetControlledWidgetActive(bool bActive);
		void PlayCooledDownAnim();
		bool IsEnoughOneGrid();
		bool IsCooledDown();
		void HideCooledDownPrompt();
		class UTextBlock* GetGridCountTextBlock();
		class UCanvasPanel* GetDisablePanel();
		void ForceStopCD();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponSkillWidget
	 * Size -> 0x0028 (FullSize[0x0470] - InheritedSize[0x0448])
	 */
	class USolarWeaponSkillWidget : public UWidgetActiveControl
	{
	public:
		class UWidgetAnimation* Anim_EMP_Exit;                                           // 0x0448(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_EMP_Enter;                                          // 0x0450(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_SkillBg;                                             // 0x0458(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_SkillType;                                           // 0x0460(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Panel_Skill;                                             // 0x0468(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponSlotWidgetMobile
	 * Size -> 0x0268 (FullSize[0x05B0] - InheritedSize[0x0348])
	 */
	class USolarWeaponSlotWidgetMobile : public USolarUserWidget
	{
	public:
		TMap<EShootingOpt, int32_t>                                ShootModeNames;                                          // 0x0348(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		int32_t                                                    SlotID;                                                  // 0x0398(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarPlayerWeapon>                   SlotOwnerPlayerWeapon;                                   // 0x039C(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ULDD[0x24];                                  // 0x03A4(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ClipTextBlockCheckedOpacity;                             // 0x03C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClipTextBlockUnCheckedOpacity;                           // 0x03CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHideWidgetWhenNoWeapon;                                 // 0x03D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N6UW[0x7];                                   // 0x03D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FSolarTablesData_ItemWeaponParts>     WeaponPartsItemTableCache;                               // 0x03D8(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<class UUIWeaponPartWidget*>                         WeaponPartsWidgets;                                      // 0x0428(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelTextLocalizationID;                                 // 0x0438(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SkillCDTextLocalizationID;                               // 0x043C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    IncreaseDamageTextLocalizationID;                        // 0x0440(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelUpDamageTextLocalizationID;                         // 0x0444(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        AmmoNotEnoughColor;                                      // 0x0448(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ExtraAmmoColor;                                          // 0x0458(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* FX_Weapon_Reload_Progress;                               // 0x0468(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* FX_Weapon_Reload;                                        // 0x0470(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* FX_Weapon_AmmoEmpty;                                     // 0x0478(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCheckBox* CheckBox_WP;                                             // 0x0480(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_WP_Bullte;                                          // 0x0488(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_WP_Clip;                                            // 0x0490(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_WP;                                                  // 0x0498(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_WP_Unarm;                                          // 0x04A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* HorizontalBox_WP_Clip;                                   // 0x04A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget* Panel_Part;                                              // 0x04B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Bg;                                                  // 0x04B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Bg_Border;                                           // 0x04C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Bg_Gradient;                                         // 0x04C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_Bg;                                              // 0x04D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_NotSelect;                                           // 0x04D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part;                                          // 0x04E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_2;                                        // 0x04E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_3;                                        // 0x04F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_4;                                        // 0x04F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_5;                                        // 0x0500(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_SkillCD;                                             // 0x0508(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* LevelUp_Anim;                                            // 0x0510(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Frame_VX;                                            // 0x0518(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_BG_Light;                                            // 0x0520(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_BG_Light_2;                                          // 0x0528(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* MI_Frame_VX;                                             // 0x0530(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Select;                                              // 0x0538(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_DMG;                                               // 0x0540(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_WeaponDMG;                                           // 0x0548(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* IMG_DMG_BG_00;                                           // 0x0550(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* IMG_DMG_BG_01;                                           // 0x0558(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Upgrade;                                             // 0x0560(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* FX_ReLoadA_001;                                          // 0x0568(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* ProgressBar_128;                                         // 0x0570(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PartEffectTipDuration;                                   // 0x0578(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BDS5[0x4];                                   // 0x057C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarWeaponPartEffectTipWidget* UI_Weapon_Update;                                        // 0x0580(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* PartEffectPanelUp;                                       // 0x0588(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* PartEffectPanelDown;                                     // 0x0590(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSolarWeaponPartEffectDesc>                  PartEffectTipArray;                                      // 0x0598(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class USolarAdapterWidget>                  KeyboardTip;                                             // 0x05A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetWeaponSlotPartsVisibility(bool InbVisible);
		void SetWeaponSlotAmmoCount();
		void SetWeaponQualityByLevel(int32_t InWeaponLevel);
		void OnWeaponUpgrade(int32_t InLevel, uint32_t InWeaponUniqueID);
		void OnWeaponUpdateOverload(float InProgress);
		void OnWeaponUpdateAmmoCount(int32_t InFireModeType, class ASolarWeapon* InWeapon);
		void OnWeaponToggleOverload(bool InbEnterOverload, uint32_t InWeaponUniqueID);
		void OnWeaponQuitReload(bool bInSuccess);
		void OnWeaponInsufficientAmmo();
		void OnToggleCheckedState(bool InbChecked);
		void OnLoadWeaponAssetsCompleted();
		void OnCharacterSet(class ASolarCharacter* InCharacter);
		void OnCharacterLevelUp(int32_t InNewLevel, int32_t InOldLevel);
		void K2_OnSetWeapon(class ASolarPlayerWeapon* InPlayerWeapon);
		void K2_OnCharacterLevelUp(int32_t InLevel);
		void K2_OnActiveWeapon(bool bInActive);
		bool IsDisplayCompleteInfo();
		class UTexture2D* GetWeaponTexture();
		class FString GetWeaponShootModeName();
		class FText GetWeaponName();
		int32_t GetWeaponLevel();
		bool GetWeaponAmmoData(int32_t* OutClipAmmoCount, int32_t* OutExtraAmmoCount, int32_t* OutSpareAmmoCount);
		class FString GetLocalizationDataByID(int32_t InLocalizationID);
		void GetLevelText(int32_t InLocalizationLevelID, const class FString& InReplaceText, class FString* OutHeadText, class FString* OutTailText);
		void ClearLoadWeaponAssetsTimer();
		void AsyncRequestLoadWeaponAssets();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponSlotWidgetPC
	 * Size -> 0x01C8 (FullSize[0x0510] - InheritedSize[0x0348])
	 */
	class USolarWeaponSlotWidgetPC : public USolarUserWidget
	{
	public:
		class FString                                              KeyActionName;                                           // 0x0348(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_WP;                                                  // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarComponentKeyWidget* UI_Component_Keyboard;                                   // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* HorizontalBox_WP_Clip;                                   // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_WP_Clip;                                            // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_WP_Clip_2;                                          // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* HorizontalBox_Lv;                                        // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Lvl_Head;                                            // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Level;                                               // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_Lvl_Tail;                                            // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_FireMode;                                            // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Part;                                              // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_2;                                        // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_3;                                        // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_4;                                        // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_5;                                        // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* UI_Weapon_Part_6;                                        // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_WP_Unarm;                                          // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Bg_Border;                                           // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Bg_Black;                                            // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_Bg_Gradient;                                         // 0x03F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_NotSelect;                                           // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Overlay_Bg;                                              // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelLocalizationID;                                     // 0x0408(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LDBM[0x4];                                   // 0x040C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LevelVariate;                                            // 0x0410(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EShootingOpt, int32_t>                                ShootModeLocalizationIDMap;                              // 0x0420(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                WeaponQualityColors;                                     // 0x0470(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                WeaponBGQualityColors;                                   // 0x0480(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarPlayerWeapon>                   SlotWeapon;                                              // 0x0490(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E9TP[0x10];                                  // 0x0498(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        LoadWeaponIconTimerHandle;                               // 0x04A8(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UUIWeaponPartWidget*>                         WeaponPartWidgets;                                       // 0x04B0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<int32_t, struct FSolarTablesData_ItemWeaponParts>     WeaponPartsItemTableCache;                               // 0x04C0(0x0050) NativeAccessSpecifierPrivate

	public:
		void SetWeaponSlot(class ASolarPlayerWeapon* InWeapon);
		void OnUpgradeWeapon(int32_t InLevel, uint32_t InWeaponUniqueID);
		void OnUpdateAmmo(int32_t InFireModeType, class ASolarWeapon* InWeapon);
		void ActiveWeaponSlot(bool InbActive);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWeaponSubsystem
	 * Size -> 0x0220 (FullSize[0x0250] - InheritedSize[0x0030])
	 */
	class USolarWeaponSubsystem : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_J6AB[0x180];                                 // 0x0030(0x0180) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UClass*, class ASolarWeaponProjectileSpline*>   CacheSolarWeaponProjectileSplineMap;                     // 0x01B0(0x0050) NativeAccessSpecifierPrivate
		TMap<int32_t, struct FSolarTablesData_ItemWeaponParts>     WeaponPartsItemTableCache;                               // 0x0200(0x0050) NativeAccessSpecifierPrivate

	public:
		bool DiscardWeaponFromBackpack(class ASolarWeapon* InPendingWeapon);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWheeledVehicleMovement
	 * Size -> 0x0840 (FullSize[0x0978] - InheritedSize[0x0138])
	 */
	class USolarWheeledVehicleMovement : public UPawnMovementComponent
	{
	public:
		float                                                      LowFrameRateDeltaTime;                                   // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinLocationDiffForSuspensionTrace;                       // 0x013C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Mass;                                                    // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CenterOfMassOffsetOnZ;                                   // 0x0144(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CenterOfMassOffsetOnX;                                   // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SuspensionClampRatioInLowFrame;                          // 0x014C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  AccelerationCurve;                                       // 0x0150(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  AccelerationCurveReverse;                                // 0x01D8(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		int32_t                                                    ReverseEvaluationAccuracy;                               // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9MSP[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SteerAngleLimit;                                         // 0x0268(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  SteeringResetSpeed;                                      // 0x02F0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  SteeringSpeed;                                           // 0x0378(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  SteeringFraction;                                        // 0x0400(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  SteerAngleMutiplier;                                     // 0x0488(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      LowSteeringSpeed;                                        // 0x0510(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LowSteeringSpeedAccelerationMultiplier;                  // 0x0514(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LowSteeringSpeedAngleLimitMultiplier;                    // 0x0518(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LowSpeedSteeringThresholdOnHorizontalInput;              // 0x051C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FlightStabilizationDamping;                              // 0x0520(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LateralFrictionWhenOnlySteeringWheelsOnGround;           // 0x0524(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FWheelData>                                  Wheels;                                                  // 0x0528(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationMinAngle;                                        // 0x0538(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxPitchRotation;                                        // 0x053C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxRollRotation;                                         // 0x0540(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationTimeLimit;                                       // 0x0544(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOpenTimeLimit;                                          // 0x0548(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EOO1[0x3];                                   // 0x0549(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PitchTorqueInDegree;                                     // 0x054C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RollTorqueInDegree;                                      // 0x0550(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TorqueForUpsideDown;                                     // 0x0554(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAngularVelocityInAir;                                 // 0x0558(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TorqueLerpAcceleration;                                  // 0x055C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BalanceAngularVelocityWheelsOnGround;                    // 0x0560(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WHGM[0x4];                                   // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* DustEffectScaleCurve;                                    // 0x0568(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              BrokenWheelDustEffect[0x50];                             // 0x0570(0x0050) UNKNOWN PROPERTY: MapProperty
		float                                                      WheelDecelerationInBrakeLock;                            // 0x05C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WheelLerpSpeedInSlip;                                    // 0x05C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GravityAcceleration;                                     // 0x05C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GravityAccelerationInAir;                                // 0x05CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinHeightForGravityAccelerationInAir;                    // 0x05D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHeightForGravityAccelerationInAir;                    // 0x05D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GravityTransitionDuration;                               // 0x05D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxStaticDegree;                                         // 0x05DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  GravityMultiplierForAcceleration;                        // 0x05E0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      DecelerationUnderWater;                                  // 0x0668(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutoSteeringEnabled;                                    // 0x066C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A472[0x3];                                   // 0x066D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoSteeringThresholdTime;                               // 0x0670(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoSteeringSpeedThreshold;                              // 0x0674(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoSteeringTraceRadius;                                 // 0x0678(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LeftAutoSteeringTraceStart;                              // 0x067C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RightAutoSteeringTraceStart;                             // 0x0688(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeftToRightTangentDegree;                                // 0x0694(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoSteeringAngleLimit;                                  // 0x0698(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoSteeringSpeed;                                       // 0x069C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoSteeringResetSpeed;                                  // 0x06A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoSteeringLimitInputY;                                 // 0x06A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrottleInputThreshold;                                  // 0x06A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XBYN[0x4];                                   // 0x06AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SteerInputCurve;                                         // 0x06B0(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		float                                                      BrakeDelayTime;                                          // 0x0738(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThrottleReleaseDelayTime;                                // 0x073C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MicroThrottleInputThreshold;                             // 0x0740(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MicroThrottleInputSpeed;                                 // 0x0744(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SteeringLimitMultiplierInDrift;                          // 0x0748(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelerationMultiplierInDrift;                           // 0x074C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelerationInDriftLerpSpeed;                            // 0x0750(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AccelerationOutDriftLerpSpeed;                           // 0x0754(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDriftSpeed;                                           // 0x0758(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DriftCompensationRate;                                   // 0x075C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DriftCancelTimeWithoutInput;                             // 0x0760(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5KOC[0x4];                                   // 0x0764(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DriftParticles[0x50];                                    // 0x0768(0x0050) UNKNOWN PROPERTY: MapProperty
		float                                                      TimerForAntiStuck;                                       // 0x07B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StuckAcceleration;                                       // 0x07BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StuckAccelerationLerpSpeed;                              // 0x07C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinAntiRollThreshold;                                    // 0x07C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxAntiRollThreshold;                                    // 0x07C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L3T6[0x4];                                   // 0x07CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGearSetting>                                ForwardGears;                                            // 0x07D0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReverseRpm;                                              // 0x07E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SlipRpmMultiplier;                                       // 0x07E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RpmSlipSpeed;                                            // 0x07E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnoutDelayTime;                                        // 0x07EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BurnoutSoundRatio;                                       // 0x07F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C776[0x13C];                                 // 0x07F4(0x013C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarVehiclePawn* VehiclePawn;                                             // 0x0930(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* VehicleMesh;                                             // 0x0938(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InputVecXForRotateInAir;                                 // 0x0940(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InputVecYForRotateInAir;                                 // 0x0944(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BalanceRotateSpendTime;                                  // 0x0948(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InputRotateSpendTime;                                    // 0x094C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<unsigned char>                                      InAirWheelsIndex;                                        // 0x0950(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LXUN[0x10];                                  // 0x0960(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent* AkAudioComponent;                                        // 0x0970(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetIsDrift(bool bInDrift, bool bResetDrift);
		void SetIsBurnout(bool bInBurnout);
		void STATIC_SetDriveType(EWheeledVehicleDriveUserType InType);
		void STATIC_SetCanAutoSteering(bool bCan);
		void STATIC_SetCanAdjustInAir(bool bCan);
		void OnVehicleSkinSoundUpdate(class USolarVehicleSoundDataAsset* OldVehicleSoundDataAsset, class USolarVehicleSoundDataAsset* NewVehicleSoundDataAsset);
		void OnVehicleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, class ASolarCharacter* GetOffPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWheeledVehicleStencilAnimInstance
	 * Size -> 0x00E8 (FullSize[0x0350] - InheritedSize[0x0268])
	 */
	class USolarWheeledVehicleStencilAnimInstance : public UAnimInstance
	{
	public:
		struct FVector                                             FLWheelBoneScale;                                        // 0x0268(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             FRWheelBoneScale;                                        // 0x0274(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MLWheelBoneScale;                                        // 0x0280(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MRWheelBoneScale;                                        // 0x028C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BLWheelBoneScale;                                        // 0x0298(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BRWheelBoneScale;                                        // 0x02A4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             FLWheelBoneLocation;                                     // 0x02B0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             FRWheelBoneLocation;                                     // 0x02BC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MLWheelBoneLocation;                                     // 0x02C8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MRWheelBoneLocation;                                     // 0x02D4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BLWheelBoneLocation;                                     // 0x02E0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BRWheelBoneLocation;                                     // 0x02EC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            FLWheelBoneRotation;                                     // 0x02F8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            FRWheelBoneRotation;                                     // 0x0304(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            MLWheelBoneRotation;                                     // 0x0310(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            MRWheelBoneRotation;                                     // 0x031C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            BLWheelBoneRotation;                                     // 0x0328(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            BRWheelBoneRotation;                                     // 0x0334(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class USolarWheeledVehicleAnimInstance>     VehicleAnim;                                             // 0x0340(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T7RS[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWidgetExitCallbackProxy
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USolarWidgetExitCallbackProxy : public UObject
	{
	public:
		unsigned char                                              UnknownData_OD1D[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnAnimationFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarWorldSettings
	 * Size -> 0x0080 (FullSize[0x0480] - InheritedSize[0x0400])
	 */
	class ASolarWorldSettings : public AWorldSettings
	{
	public:
		int32_t                                                    MapID;                                                   // 0x0400(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KJ16[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     PreloadAssets;                                           // 0x0408(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAsyncPreload;                                           // 0x0420(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHoldAllMips;                                            // 0x0421(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_86A3[0x6];                                   // 0x0422(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* PostProcessItemClass;                                    // 0x0428(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrentActiveColorThemeIndex;                            // 0x0430(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SolarMapTypeValue;                                       // 0x0434(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       MapEnableLowMemoryGraphOpt;                              // 0x0438(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9I68[0x7];                                   // 0x0439(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          SpectatorPawnStartPoint;                                 // 0x0440(0x0030) Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class USolarPostProcessSettingItem* PostProcessItem;                                         // 0x0470(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XHXM[0x8];                                   // 0x0478(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarZiplineObj
	 * Size -> 0x00C8 (FullSize[0x02F0] - InheritedSize[0x0228])
	 */
	class ASolarZiplineObj : public AActor
	{
	public:
		struct FGameplayTag                                        ZipTriggerTag;                                           // 0x0228(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FGameplayTag                                        ZippingStatusTag;                                        // 0x0230(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ZipActionName;                                           // 0x0238(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FZiplineObjData                                     ZiplineObjData;                                          // 0x0240(0x0074) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I6ZZ[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent* ASideCollisionComp;                                      // 0x02B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent* BSideCollisionComp;                                      // 0x02C0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent* CableCollisionComp;                                      // 0x02C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASolarCharacter>                      InstigateCharacter;                                      // 0x02D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASolarCharacter*>                             SlidingCharacters;                                       // 0x02D8(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5XBS[0x4];                                   // 0x02E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EZiplineSide                                               BeginningSide;                                           // 0x02EC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3CUM[0x3];                                   // 0x02ED(0x0003) MISSED OFFSET (PADDING)

	public:
		void OnRep_SlidingCharacters();
		void OnEndOverlap(class AActor* OtherActor, EZiplineSide InSide);
		void OnCableEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnCableBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnBSideEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnBSideBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnBeginOverlap(class AActor* OtherActor, EZiplineSide InSide);
		void OnASideEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnASideBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void K2_OnZiplineEndOverlap(class ASolarCharacter* InCharacter);
		void K2_OnZiplineBeginOverlap(class ASolarCharacter* InCharacter);
		void K2_OnGoZip(class ASolarCharacter* InCharacter);
		void GoZip();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SpatializeInfo
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASpatializeInfo : public AInfo
	{
	public:
		unsigned char                                              UnknownData_2KO2[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SpatializeInfoTrack
	 * Size -> 0x0248 (FullSize[0x0478] - InheritedSize[0x0230])
	 */
	class ASpatializeInfoTrack : public ASpatializeInfo
	{
	public:
		struct FTrackArray                                         TrackArray;                                              // 0x0230(0x0130) Net, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T2DY[0x8C];                                  // 0x0360(0x008C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Timeout;                                                 // 0x03EC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MinRevealDistance;                                       // 0x03F0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    MaxTrackNum;                                             // 0x03F4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<struct FTrackItem, class A3DMeshWidgetTrack*>         CurTrackWidgets;                                         // 0x03F8(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RT4Q[0x30];                                  // 0x0448(0x0030) MISSED OFFSET (PADDING)

	public:
		void UpdateWidgets(bool bFromNetUpdate);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.StripBulletContainer
	 * Size -> 0x0048 (FullSize[0x0400] - InheritedSize[0x03B8])
	 */
	class UStripBulletContainer : public USolarWeaponBulletContainerWidget
	{
	public:
		class UImage* AmmoGauge_BG;                                            // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGaugeImage* AmmoGauge;                                               // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* AmmoGauge_Empty;                                         // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* AmmoGauge_Light;                                         // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* BulletLightSlot;                                         // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Gauge_Anim;                                              // 0x03E0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Battle_Light_Anim;                                       // 0x03E8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Recharge_Empty_Anim;                                     // 0x03F0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KR7H[0x8];                                   // 0x03F8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReceiveUpdateBulletEvent(float AmmoProgress, bool bIsReloading, bool bIsFirstIn, bool bIsQuitReload);
		void ReceiveUpdateAllBulletEvent();
		void ReceiveReloadFinishEvent(bool bIsReloadSuccess);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarStrongholdNamesConfig
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USolarStrongholdNamesConfig : public UDataAsset
	{
	public:
		TMap<class FString, struct FVector4>                       NamesMap;                                                // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.STutorialLevelGameMode
	 * Size -> 0x0000 (FullSize[0x0588] - InheritedSize[0x0588])
	 */
	class ASTutorialLevelGameMode : public ASBattleGameMode
	{
	public:
		void OnReady();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.STutorialLevelGameState
	 * Size -> 0x0000 (FullSize[0x0448] - InheritedSize[0x0448])
	 */
	class ASTutorialLevelGameState : public ASolarGameState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SubPoolOfHomeActor
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USubPoolOfHomeActor : public UObject
	{
	public:
		unsigned char                                              UnknownData_5ZB4[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASolarHomeActor*>                             UseActors;                                               // 0x0030(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASolarHomeActor*>                             UnUseActors;                                             // 0x0040(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SummonItemHealPile
	 * Size -> 0x0220 (FullSize[0x0600] - InheritedSize[0x03E0])
	 */
	class ASummonItemHealPile : public ASummonItemBase
	{
	public:
		TArray<struct FChargingInfo>                               ChargingInfoList;                                        // 0x03E0(0x0010) Net, ZeroConstructor, RepNotify, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EActorRegisterType                                         ActorRegisterType;                                       // 0x03F0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MDBU[0x7];                                   // 0x03F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent* CollisionComp;                                           // 0x03F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent* NormalMesh;                                              // 0x0400(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SphereRadius;                                            // 0x0408(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    OwnerTeam;                                               // 0x040C(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TestOverlapDestroyBoxExtent;                             // 0x0410(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O8ST[0x4];                                   // 0x041C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent* RangeLoopEffect;                                         // 0x0420(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UParticleSystemComponent*>                    ChargeParticleEffects;                                   // 0x0428(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HealQuantity;                                            // 0x0438(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HealFrequency;                                           // 0x043C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3GSJ[0x8];                                   // 0x0440(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic* DynamicMatHealPile;                                      // 0x0448(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     NormalMeshPath;                                          // 0x0450(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              RangeParticleStartPath[0x28];                            // 0x0468(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              RangeParticleLoopPath[0x28];                             // 0x0490(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              RangeParticleEndPath[0x28];                              // 0x04B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyRangeParticleStartPath[0x28];                       // 0x04E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyRangeParticleLoopPath[0x28];                        // 0x0508(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyRangeParticleEndPath[0x28];                         // 0x0530(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector                                             RangeEffectScale;                                        // 0x0558(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OGTF[0x4];                                   // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     ChargeParticleEffectPath;                                // 0x0568(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BeamStartPos;                                            // 0x0580(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1W5O[0x4];                                   // 0x058C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     OutlineMatPath;                                          // 0x0590(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* BoomEffect;                                              // 0x05A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JIJD[0x28];                                  // 0x05B0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarAkGameObject* SolarAkGameObject;                                       // 0x05D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V1WO[0x10];                                  // 0x05E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        ServerChargingTimerHandle;                               // 0x05F0(0x0008) BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTimerHandle                                        ClientChargingTimerHandle;                               // 0x05F8(0x0008) BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void TestDestroy();
		void SetIsActivated(bool bActivated);
		void ServerSetHealingPile(bool bEnter, class ASolarCharacter* ChargingCharacter);
		void RemoveChargeParticle(class ASolarCharacter* InCharacter);
		void RemoveAllEffects();
		void ReceiveNormalMeshLoadedEvent();
		void ReceiveChargingPileInitialize();
		void OnUntrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnRep_ChargingInfoListChanged();
		bool IsOwnerTeammate();
		void CreateChargeParticle(class ASolarCharacter* InCharacter);
		void ClientRemoveChargeParticle(class ASolarCharacter* InCharacter);
		void ClientHealPileSound(class ASolarCharacter* ChargingCharacter, EPileHealingType HealingType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SummonItemTurretAnimInstance
	 * Size -> 0x0018 (FullSize[0x0280] - InheritedSize[0x0268])
	 */
	class USummonItemTurretAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_A6F4[0x4];                                   // 0x0268(0x0004) Fix Super Size
		struct FRotator                                            AimRotate;                                               // 0x026C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ESKF[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponAnimationComponent
	 * Size -> 0x0060 (FullSize[0x0110] - InheritedSize[0x00B0])
	 */
	class UWeaponAnimationComponent : public UActorComponent
	{
	public:
		class UWeaponAnimInstance* WeaponAnimInstance;                                      // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarWeapon* MyWeapon;                                                // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<EWeaponAnimState, class UAnimSequence*>               AnimSequenceMap;                                         // 0x00C0(0x0050) Protected, NativeAccessSpecifierProtected

	public:
		void SRecieveProto_SwitchStateAction(const class FString& paramters);
		void SetWeaponAnimState(EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed);
		void PostWeaponAnimStateToSimulation(EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);
		void InternalSetWeaponAnimState(EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed);
		void InitSkeletaMesh(class USkeletalMeshComponent* Mesh);
		void GotoState(EWeaponAnimState State, float Interval);
		void CRecieveProto_SwitchStateAction(bool bAutonomous, const class FString& paramters);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SummonWeaponAnimationComponent
	 * Size -> 0x0008 (FullSize[0x0118] - InheritedSize[0x0110])
	 */
	class USummonWeaponAnimationComponent : public UWeaponAnimationComponent
	{
	public:
		unsigned char                                              UnknownData_1TVZ[0x8];                                   // 0x0110(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponAnimInstance
	 * Size -> 0x0068 (FullSize[0x02D0] - InheritedSize[0x0268])
	 */
	class UWeaponAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_YQCQ[0x8];                                   // 0x0268(0x0008) Fix Super Size
		TArray<struct FAnimMsgData>                                MsgArray;                                                // 0x0270(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAnimMsgData                                        CurrentMsg;                                              // 0x0280(0x0008) Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bCurrentMsgUsed;                                         // 0x0288(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V2H7[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence* IdleAnim;                                                // 0x0290(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* FireAnim;                                                // 0x0298(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* AltFireAnim;                                             // 0x02A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* ReloadAnim;                                              // 0x02A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* OverloadAnim;                                            // 0x02B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* OpenScopeAnim;                                           // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* CloseScopeAnim;                                          // 0x02C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* BoltAnim;                                                // 0x02C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		bool SwitchStateCheck(EWeaponAnimState CheckState);
		void SetInterruptIsTrue();
		bool RouterNodeJudge();
		void OnQuitState(EWeaponAnimState State);
		void OnEnterState(EWeaponAnimState State);
		void Interrupt();
		bool HasMsg();
		bool ConsumMsg();
		bool AddMsg(EWeaponAnimState State, float Speed);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SummonWeaponAnimInstance
	 * Size -> 0x0010 (FullSize[0x02E0] - InheritedSize[0x02D0])
	 */
	class USummonWeaponAnimInstance : public UWeaponAnimInstance
	{
	public:
		float                                                      ViewYaw;                                                 // 0x02D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitch;                                               // 0x02D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsLocked;                                                // 0x02D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsFire;                                                  // 0x02D9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAppearCompleted;                                        // 0x02DA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTransform;                                              // 0x02DB(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KU91[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SWarmUpGameMode
	 * Size -> 0x0000 (FullSize[0x0740] - InheritedSize[0x0740])
	 */
	class ASWarmUpGameMode : public ASCustomGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SWarmUpGameState
	 * Size -> 0x0000 (FullSize[0x0580] - InheritedSize[0x0580])
	 */
	class ASWarmUpGameState : public ASCustomGameState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SwitchEffectStaticMeshComponent
	 * Size -> 0x0130 (FullSize[0x0730] - InheritedSize[0x0600])
	 */
	class USwitchEffectStaticMeshComponent : public UStaticMeshComponent
	{
	public:
		unsigned char                                              DissolveCurvePath[0x28];                                 // 0x0600(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DissolveMatPath[0x28];                                   // 0x0628(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FresnelCurvePath[0x28];                                  // 0x0650(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FresnelMatPath[0x28];                                    // 0x0678(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       bIsShowSwitchParticleEffect;                             // 0x06A0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7522[0x7];                                   // 0x06A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SwitchParticleEffectPath[0x28];                          // 0x06A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_SQLA[0x8];                                   // 0x06D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwitchEffectInterval;                                    // 0x06D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SelfDelayShowSeconds;                                    // 0x06DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent* DissovleMeshComponent;                                   // 0x06E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    DissovleMaterials;                                       // 0x06E8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* FresnelMeshComponent;                                    // 0x06F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    FresnelMaterials;                                        // 0x0700(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8SQP[0x20];                                  // 0x0710(0x0020) MISSED OFFSET (PADDING)

	public:
		void StopSwitchEffect();
		void PlaySwitchEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TalentDataAsset
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class UTalentDataAsset : public UPrimaryDataAsset
	{
	public:
		struct FSoftClassPath                                      TalentClassPath;                                         // 0x0030(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     TalentIconPath;                                          // 0x0048(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                TalentName;                                              // 0x0060(0x0018) Edit, NativeAccessSpecifierPublic
		int32_t                                                    NameTextID;                                              // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9MH8[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                TalentDescription;                                       // 0x0080(0x0018) Edit, NativeAccessSpecifierPublic
		int32_t                                                    DescriptionTextID;                                       // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GJOL[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TeamBoostProjectile
	 * Size -> 0x0060 (FullSize[0x0288] - InheritedSize[0x0228])
	 */
	class ATeamBoostProjectile : public AActor
	{
	public:
		float                                                      BaseMoveSpeed;                                           // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxMoveSpeed;                                            // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveAcceleration;                                        // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HeightOffset;                                            // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FinishDistance;                                          // 0x0238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JUP6[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FActorParticleEffectSpawnInfo>               ProjectileParticleSpawnInfos;                            // 0x0240(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UParticleSystemComponent*>                    ProjectileParticleComponents;                            // 0x0250(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class ASolarCharacter>                      TargetCharacter;                                         // 0x0260(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YHMG[0x20];                                  // 0x0268(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnRep_TargetCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TeammateHUD
	 * Size -> 0x0058 (FullSize[0x03A0] - InheritedSize[0x0348])
	 */
	class UTeammateHUD : public USolarUserWidget
	{
	public:
		class USolarTextBlock* Txt_Distance;                                            // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Distance_Unit;                                       // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIComponentNationalFlag* NationalFlag;                                            // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarUserWidget* UI_Input_Device;                                         // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Txt_NickName;                                            // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* BTN_Rescue;                                              // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget* Img_UVASign;                                             // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              PlayerNameSeparator;                                     // 0x0380(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RLFI[0x10];                                  // 0x0390(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateName(const class FString& InNickName);
		void UpdateMemberNum(unsigned char PosInTeam);
		void UpdateInputDevice(class ASolarPlayerState* PlayerState);
		void UpdateDistance(float InDis);
		void SetRescueVisibility(bool bShow);
		void SetDodgeDisplay(bool bShow);
		void RefreshPosInTeam(unsigned char PosInTeam, const struct FTeamMemberColor& ColorConfig);
		void RefreshIsSkydivingCaptain(bool bIsCaptain);
		void OuterSetDistanceDisplay(bool bShown);
		void OnLocalPlayerSkydivingCaptainChanged(int32_t TeamIndex, const class FString& playerName, bool bIsLocalPlayer);
		void OnClickBTN_Rescue();
		void OnBroadcastModeChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TeammateTalentWidget
	 * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
	 */
	class UTeammateTalentWidget : public USolarUserWidget
	{
	public:
		class UImage* Img_Icon_Ability;                                        // 0x0348(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Icon_CD;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGaugeImage* Progress_CD_Mask;                                        // 0x0358(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_TalentShow;                                         // 0x0360(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Cooldown;                                           // 0x0368(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8E9V[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetTalentState(ETalentState InTalentUIState, float InAdditionalParam);
		void SetTalentIconByID(unsigned char InTalentID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TechDesignUIOperationDispatcher
	 * Size -> 0x01D0 (FullSize[0x1478] - InheritedSize[0x12A8])
	 */
	class UTechDesignUIOperationDispatcher : public UHUDDispatcherBase
	{
	public:
		class FScriptDelegate                                      OnWidgetAddToBattleUIRequest;                            // 0x12A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnWidgetAddToBackpackUIRequest;                          // 0x12B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnWidgetAddToMapUIRequest;                               // 0x12C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnClearBattleUISlotRequest;                              // 0x12D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnClearBackpackUISlotRequest;                            // 0x12E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnClearMapUISlotRequest;                                 // 0x12F8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnSetBattleUISubItemVisibilityByGameMode;                // 0x1308(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RegisterCustomMapMarkToMiniMap;                          // 0x1318(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RegisterCustomMapMarkToBigMap;                           // 0x1328(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RemoveCustomMapMarkFromMiniMap;                          // 0x1338(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RemoveCustomMapMarkFromBigMap;                           // 0x1348(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RegisterCustomRotBarMark;                                // 0x1358(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RemoveCustomRotBarMark;                                  // 0x1368(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAllPlayerNavVisibilityChanged;                         // 0x1378(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleUIVisibilityChanged;                             // 0x1388(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPowerBarVisibilityChanged;                             // 0x1398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRotationBarVisibilityChanged;                          // 0x13A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMiniMapFovChangeRequested;                             // 0x13B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMiniMapInitMarkIconRequested;                          // 0x13C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnBigMapAddDotLineRequested;                             // 0x13D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMiniMapAddDotLineRequested;                            // 0x13E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBigMapRemoveDotLineRequested;                          // 0x13F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMiniMapRemoveDotLineRequested;                         // 0x1408(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RegisterPositionMark;                                    // 0x1418(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      RegisterActorMark;                                       // 0x1428(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleUIVisibilityHasChanged;                          // 0x1438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGettingCanvasPositionOnBattleUI;                       // 0x1448(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGettingWidgetRenderTransOnBattleUI;                    // 0x1458(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGettingTextOnBackpackUI;                               // 0x1468(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic

	public:
		void SimpleTDDelegate__DelegateSignature();
		void OnWidgetVisibilityHasChanged__DelegateSignature(bool bVisible);
		class FString OnWidgetAddToBattleUIRequest__DelegateSignature(class UPanelSlot** Result, class UWidget* WidgetForAdd, const class FName& PanelNameToAdd, bool bReplaceOld);
		class FString OnSetBattleUISubItemVisibilityByGameMode__DelegateSignature(ECustomGameModeTypeForUI GameModeType);
		class FString OnRegisterPositionMarkRequested__DelegateSignature(class UActorMarkBase** Result, class UClass* MarkClass, const struct FVector& Position);
		class FString OnRegisterActorMarkRequested__DelegateSignature(class UActorMarkBase** Result, class UClass* MarkClass, class AActor* FollowActor);
		class UMapMarkBase* OnMiniMapInitMarkIconRequested__DelegateSignature(class UClass* MapMarkClass, const struct FVector2D& Pivot, int32_t ZOrder);
		void OnMiniMapFovChangeRequested__DelegateSignature(float TargetFOV, float PlayTime, bool bWithIconScale);
		int32_t OnMapAddDotLineRequested__DelegateSignature(class AActor* StartPointActor, class AActor* EndPointActor, const struct FLinearColor& DotLineColor);
		class FString OnGettingWidgetTransRequest__DelegateSignature(struct FWidgetTransform* Result, const class FName& WidgetName);
		class FString OnGettingVector2DRequest__DelegateSignature(struct FVector2D* Result, const class FName& WidgetName);
		class FString OnGettingTextRequest__DelegateSignature(class FText* Result, const class FName& TextBlockName);
		void OnCustomRotationBarMarkRemoved__DelegateSignature(class URotationBarMarkWidget* MarkToRemove);
		class URotationBarMarkWidget* OnCustomRotationBarMarkRegistered__DelegateSignature(class UClass* RotationBarMarkClass, const struct FVector& MarkPos, int32_t ZOrder);
		void OnCustomMapMarkRemoved__DelegateSignature(class UMapMarkBase* MarkToRemove);
		class UMapMarkBase* OnCustomMapMarkRegistered__DelegateSignature(class UClass* MapMarkClass, const struct FVector2D& MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int32_t ZOrder);
		class FString OnClearBattleUISlotRequest__DelegateSignature(const class FName& PanelNameToClear);
		void IntTDDelegate__DelegateSignature(int32_t Value);
		bool GetWidgetRenderTransOnBattleUI(struct FWidgetTransform* Result, const class FName& WidgetName);
		bool GetTextOnBackpackUI(class FText* Result, const class FName& TextBlockName);
		bool GetCanvasPositionOnBattleUI(struct FVector2D* Result, const class FName& ChildName);
		void BroadcastRotationBarVisibilityChanged(bool bVisible);
		void BroadcastPowerBarVisibilityChanged(bool bVisible);
		void BroadcastBattleUIVisibilityChanged(bool bVisible);
		void BroadcastAllPlayerNavVisibilityChanged(bool bVisible);
		void BoolTDDelegate__DelegateSignature(bool bValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.Temp_BigMap
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UTemp_BigMap : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_J6G8[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnBigMapVisibilitySet(bool bVisible);
		class FString ClearWidgetInPanel(const class FName& InPanelName);
		class FString AddWidgetToPanel(class UPanelSlot** OutResult, class UWidget* InWidget, const class FName& InPanelName, bool bReplaceOld);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.Temp_Settings
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UTemp_Settings : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_Q2Z5[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		void SaveAndQuit();
		void OnSettingRequestOpened(int32_t InOwnerType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.Temp_SolarBattleControl
	 * Size -> 0x0160 (FullSize[0x04A8] - InheritedSize[0x0348])
	 */
	class UTemp_SolarBattleControl : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_VQ5P[0xC8];                                  // 0x0348(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class UObject*>                        IconMap;                                                 // 0x0410(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3XU6[0x8];                                   // 0x0460(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUserWidget* UI_KillInfo_A;                                           // 0x0468(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UUserWidget* UI_KillInfo_B;                                           // 0x0470(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OQ1A[0x10];                                  // 0x0478(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              RevengeIconName;                                         // 0x0488(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USolarAdapterWidget* Panel_Shortcut;                                          // 0x0498(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Image_UnderWater;                                        // 0x04A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class FString SetBattleUISubItemVisibilityByGameMode(ECustomGameModeTypeForUI GameModeType);
		void OnToggleCursorVisibility(bool bIsVisible);
		class UUserWidget* OnHomeGetSelf();
		void OnHideFromLua();
		void OnBattleUIVisibilityChanged(bool bVisible);
		class FString GetRenderTransPosition(struct FWidgetTransform* OutResult, const class FName& InPanelName);
		class FString GetCanvasPosition(struct FVector2D* OutResult, const class FName& ChildName);
		class FString ClearWidgetInPanel(const class FName& InPanelName);
		class FString AddWidgetToPanel(class UPanelSlot** OutResult, class UWidget* InWidget, const class FName& InPanelName, bool bReplaceOld);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TimedEffectController
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UTimedEffectController : public UActorEffectController
	{
	public:
		float                                                      FadeInTime;                                              // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      KeepTime;                                                // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FadeOutTime;                                             // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UVJW[0xC];                                   // 0x0034(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.Tutorial
	 * Size -> 0x0108 (FullSize[0x0130] - InheritedSize[0x0028])
	 */
	class UTutorial : public UObject
	{
	public:
		unsigned char                                              UnknownData_1G5T[0x38];                                  // 0x0028(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTutorialTableRow                                   Data;                                                    // 0x0060(0x0098) Protected, NativeAccessSpecifierProtected
		class UTutorialTriggerCondition* TriggerConditionBP;                                      // 0x00F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTutorialTaskSequenceAction* TutorialTask;                                            // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1X7L[0x28];                                  // 0x0108(0x0028) MISSED OFFSET (PADDING)

	public:
		void Stop();
		void OnSingleTaskFinish();
		struct FTutorialTableRow GetTableRowData();
		int32_t GetCurrentFinishNum();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialCondition
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTutorialCondition : public UObject
	{
	public:
		class FString GetWorldName();
		class ASolarCharacter* GetPlayer();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialActionCondition
	 * Size -> 0x01D0 (FullSize[0x01F8] - InheritedSize[0x0028])
	 */
	class UTutorialActionCondition : public UTutorialCondition
	{
	public:
		struct FTutorialActionTableRow                             ActionData;                                              // 0x0028(0x01D0) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		void SpawnFixedAreaInteractActor(int32_t SpawnerID, class ATutorialLevelInteractableActor** OutActor);
		void OnReset();
		void OnEnd();
		void OnBegin();
		class USolarTutorialManager* GetSolarTutorialManager();
		void GetBotAIsOnVehicle(TArray<int32_t> SpawnerIds, TArray<class ASolarBotAIControllerOnVehicle*>* OutBotAI);
		void GetBotAIs(TArray<int32_t> SpawnerIds, TArray<class ASolarBotAIControllerInGuide*>* OutBotAI);
		void GetAllActorsOfClass(class UClass* ActorClass, TArray<class AActor*>* OutActors);
		bool CheckSatisfy();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialLevelInteractableActor
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ATutorialLevelInteractableActor : public AActor
	{
	public:
		void UnregisterEvent();
		void RegisterEvent();
		class USolarTutorialManager* GetSolarTutorialManager();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialLevelSaveGame
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UTutorialLevelSaveGame : public USaveGame
	{
	public:
		TMap<class FString, struct FTutorialLevelSaveData>         TutorialLevelSaveDatas;                                  // 0x0028(0x0050) NativeAccessSpecifierPublic
		EPlayerProficiency                                         PlayerProficiency;                                       // 0x0078(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IQAK[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialLevelSpawner
	 * Size -> 0x0028 (FullSize[0x0250] - InheritedSize[0x0228])
	 */
	class ATutorialLevelSpawner : public AActor
	{
	public:
		int32_t                                                    SpawnerID;                                               // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BoxExtent;                                               // 0x022C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSpawnBeginPlay;                                         // 0x0238(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BUKI[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayTime;                                               // 0x023C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* InteractableActorClass;                                  // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HV2E[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (PADDING)

	public:
		class ATutorialLevelInteractableActor* SpawnInteractActor();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialLevelSplineComponent
	 * Size -> 0x0070 (FullSize[0x06A0] - InheritedSize[0x0630])
	 */
	class UTutorialLevelSplineComponent : public USplineComponent
	{
	public:
		TMap<ESplineMeshType, struct FSplineMeshDetails>           SplineMeshMap;                                           // 0x0630(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UTutorialLevelSplineComponent* FollowingSpline;                                         // 0x0680(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USplineMeshComponent*>                        SplineMeshComponents;                                    // 0x0688(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_57UP[0x8];                                   // 0x0698(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetMeshsVisibility(bool bNewVisibility, bool bPropagateToChildren);
		void SetFollowingSpline(class UTutorialLevelSplineComponent* InFollowingSpline);
		void CreateSplineMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialStepAction
	 * Size -> 0x0210 (FullSize[0x0280] - InheritedSize[0x0070])
	 */
	class UTutorialStepAction : public UActionNode
	{
	public:
		unsigned char                                              UnknownData_4QFT[0x28];                                  // 0x0070(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OwnerTutorialID;                                         // 0x0098(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AXCY[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTutorialActionTableRow                             Data;                                                    // 0x00A0(0x01D0) NativeAccessSpecifierPrivate
		class UTutorialActionCondition* InterruptConditionBP;                                    // 0x0270(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTutorialActionCondition* EndConditionBP;                                          // 0x0278(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void StartRepeatOperation();
		void SpawnBotAIsOnVehicle(TArray<int32_t> SpawnerIds);
		void SpawnBotAIs(TArray<int32_t> SpawnerIds);
		void ShowUI();
		void RepeatOperation();
		void ReceiveTick(float DeltaTime);
		void ReceiveSetupData();
		void ReceiveOnReset();
		void ReceiveOnEnd();
		void ReceiveOnBegin();
		void ReceiveMinExecuteTimeUp();
		void OnResetEvent();
		void OnEndedEvent();
		void OnDisposedEvent();
		void OnBeganEvent();
		struct FTutorialActionTableRow GetTableRowData();
		void DestoryBotAIsOnVehicle(TArray<int32_t> SpawnerIds);
		void DestoryBotAIs(TArray<int32_t> SpawnerIds);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialTaskSequenceAction
	 * Size -> 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
	 */
	class UTutorialTaskSequenceAction : public USequenceNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TutorialTriggerCondition
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTutorialTriggerCondition : public UTutorialCondition
	{
	public:
		class USolarTutorialManager* GetSolarTutorialManager();
		bool CheckSatisfy(const struct FTutorialTableRow& InData);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TweenBase
	 * Size -> 0x0078 (FullSize[0x02D8] - InheritedSize[0x0260])
	 */
	class UTweenBase : public UUserWidget
	{
	public:
		bool                                                       AutoPlay;                                                // 0x0260(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S0B2[0x3];                                   // 0x0261(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Interval;                                                // 0x0264(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLoop;                                                   // 0x0268(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEndHide;                                                // 0x0269(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PWSP[0x26];                                  // 0x026A(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTweenStart;                                            // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTweenStop;                                             // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DYYG[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidget* LinkWidget;                                              // 0x02C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NIEB[0x4];                                   // 0x02C8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Progress;                                                // 0x02CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N66H[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void Stop();
		void Reset();
		void Play();
		void InitAndPlay();
		void Init();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TweenImage
	 * Size -> 0x00F8 (FullSize[0x03D0] - InheritedSize[0x02D8])
	 */
	class UTweenImage : public UTweenBase
	{
	public:
		class UImage* TargetImg;                                               // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FUIScaleTween                                       ScaleTween;                                              // 0x02E0(0x0040) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FUIPositionTween                                    PostionTween;                                            // 0x0320(0x0040) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FImageColorTween                                    ColorTween;                                              // 0x0360(0x0048) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FUIRenderOpacityTween                               OpacityTween;                                            // 0x03A8(0x0028) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		void InitImageTween();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TweenText
	 * Size -> 0x00D0 (FullSize[0x03A8] - InheritedSize[0x02D8])
	 */
	class UTweenText : public UTweenBase
	{
	public:
		class UTextBlock* TargetText;                                              // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FUIScaleTween                                       ScaleTween;                                              // 0x02E0(0x0040) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FUIPositionTween                                    PostionTween;                                            // 0x0320(0x0040) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FTextColorTween                                     ColorTween;                                              // 0x0360(0x0048) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.TweenWidget
	 * Size -> 0x00B0 (FullSize[0x0388] - InheritedSize[0x02D8])
	 */
	class UTweenWidget : public UTweenBase
	{
	public:
		class UWidget* TargetWidget;                                            // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FUIScaleTween                                       ScaleTween;                                              // 0x02E0(0x0040) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FUIPositionTween                                    PostionTween;                                            // 0x0320(0x0040) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FUIRenderOpacityTween                               OpacityTween;                                            // 0x0360(0x0028) Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIBackpackWeaponWidget
	 * Size -> 0x01A0 (FullSize[0x04E8] - InheritedSize[0x0348])
	 */
	class UUIBackpackWeaponWidget : public USolarUserWidget
	{
	public:
		class UButton* BtnWeapon;                                               // 0x0348(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_Empty;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Info;                                              // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* HorizontalBox_Name;                                      // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* HorizontalBox_Ammo;                                      // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Bg;                                                  // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_DragDetect;                                          // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* Drag_Weapon;                                             // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Name;                                                // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_BulletNum;                                           // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_BulletSum;                                           // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Range;                                               // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Difficulty;                                          // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox* Weapon_Detail;                                           // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Weapon_Type;                                         // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_DMGNum;                                              // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_BulletIcon;                                          // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox* Weapon_Parts_New;                                        // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_Muzzle;                                      // 0x03D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_Grip;                                        // 0x03E0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_Clip;                                        // 0x03E8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_Scope;                                       // 0x03F0(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_GunStock;                                    // 0x03F8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    weaponid;                                                // 0x0400(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   WeaponUniqueID;                                          // 0x0404(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeaponSlot;                                              // 0x0408(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeaponAmmoNum;                                           // 0x040C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeaponExtraAmmoNum;                                      // 0x0410(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWidgetPassiveMode                                         WeaponPassiveMode;                                       // 0x0414(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WVAR[0x3];                                   // 0x0415(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EWeaponType, int32_t>                                 WeaponType2TextIdMap;                                    // 0x0418(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		TMap<EWeaponType, struct FSoftObjectPath>                  WeaponType2BulltSpMap;                                   // 0x0468(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           ImgSkillSize;                                            // 0x04B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BXTI[0x4];                                   // 0x04C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarPlayerNormalWeapon>             OwnerWeapon;                                             // 0x04C4(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3JRV[0x1C];                                  // 0x04CC(0x001C) MISSED OFFSET (PADDING)

	public:
		void UpdatePassiveMode();
		void SetWidgetPassiveMode(EWidgetPassiveMode InMode);
		void SetWeaponSlot(int32_t InWeaponSlot);
		void RefreshBySlot(int32_t InWeaponSlot);
		void OnWeaponUpdateAmmoCount(int32_t InFireModeType, class ASolarWeapon* InWeapon);
		void OnWeaponSlotUpdateAmmo(int32_t InWeaponSlotID);
		void OnWeaponSlotQuitReload(int32_t InWeaponSlotID, bool InbFinishReload);
		void OnWeaponPartChanged(int32_t InWeaponID);
		void OnWeaponAmmoChanged(int32_t InWeaponSlot, int32_t InCurrNum, int32_t MaxNum);
		void OnCharacterLevelChanged(int32_t NewLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIBackpackWidget
	 * Size -> 0x02B0 (FullSize[0x05F8] - InheritedSize[0x0348])
	 */
	class UUIBackpackWidget : public USolarUserWidget
	{
	public:
		class UUIWeaponPartWidget* Weapon_Part_Muzzle;                                      // 0x0348(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_Grip;                                        // 0x0350(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_Clip;                                        // 0x0358(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_Scope;                                       // 0x0360(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIWeaponPartWidget* Weapon_Part_GunStock;                                    // 0x0368(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_2;                                        // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_3;                                        // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_4;                                        // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_5;                                        // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_6;                                        // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_7;                                        // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_8;                                        // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_9;                                        // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlock* TextBlock_item_10;                                       // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_2;                                         // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_3;                                         // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_4;                                         // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_5;                                         // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_6;                                         // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_7;                                         // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_8;                                         // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_9;                                         // 0x03F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_item_10;                                        // 0x03F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_Relive;                                         // 0x0400(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIBackpackWeaponWidget* Weapon_A;                                                // 0x0408(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIBackpackWeaponWidget* Weapon_B;                                                // 0x0410(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_Summon;                                         // 0x0418(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Empty;                                             // 0x0420(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Summon_Bg;                                           // 0x0428(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_equip_2;                                        // 0x0430(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_equip_3;                                        // 0x0438(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_equip_4;                                        // 0x0440(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDragWidget* dragitem_equip_5;                                        // 0x0448(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Item_BG_2;                                               // 0x0450(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Item_BG_3;                                               // 0x0458(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Item_BG_4;                                               // 0x0460(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Item_BG_5;                                               // 0x0468(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Item_Quality_BG_2;                                       // 0x0470(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Item_Quality_BG_3;                                       // 0x0478(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Item_Quality_BG_4;                                       // 0x0480(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Item_Quality_BG_5;                                       // 0x0488(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Equip_Icon_2;                                            // 0x0490(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Equip_Icon_3;                                            // 0x0498(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Equip_Icon_4;                                            // 0x04A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Equip_Icon_5;                                            // 0x04A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BtnShield;                                               // 0x04B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BtnBattery;                                              // 0x04B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BtnHorPush;                                              // 0x04C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BtnVerPush;                                              // 0x04C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BtnRespawn;                                              // 0x04D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BtnSpecial;                                              // 0x04D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* BtnSMGAmmo;                                              // 0x04E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Relive;                                              // 0x04E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Relive_Quality_BG;                                       // 0x04F0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay* Relive;                                                  // 0x04F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* WidgetSwitcher_Mode;                                     // 0x0500(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* PickupPosition;                                          // 0x0508(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Button_Close;                                            // 0x0510(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDropMaskWidget* OnDropMask;                                              // 0x0518(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDropMaskWidget* OnDropMask_2;                                            // 0x0520(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              Style_ItemNum;                                           // 0x0528(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              Style_MaxNum;                                            // 0x0538(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EquipTexPrePath;                                         // 0x0548(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWeaponPartInit;                                         // 0x0558(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NX8T[0x7];                                   // 0x0559(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            ItemIDArray;                                             // 0x0560(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class URichTextBlock*>                              ItemTextArray;                                           // 0x0570(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UUIDragWidget*>                               ItemDragWidgetArray;                                     // 0x0580(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EItemType>                                          EquipTypeArray;                                          // 0x0590(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UUIDragWidget*>                               EquipDragWidgetArray;                                    // 0x05A0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      EquipBGArray;                                            // 0x05B0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      EquipQualityBGArray;                                     // 0x05C0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      EquipIconArray;                                          // 0x05D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UButton*>                                     EquipBtnArray;                                           // 0x05E0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxUpgradeLevel;                                         // 0x05F0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PTNO[0x4];                                   // 0x05F4(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdateReviveItemDisplay();
		void UpdateLevelProgress(float Level);
		void ShowWeaponUI();
		void ShowWeaponPartsUI();
		void ShowItemUI();
		void ShowHomeItemUI();
		void ShowEquipUI();
		void RefreshUpgradeRewardsDetail(int32_t Level, TArray<EClassLevelUpRewardType> RewardTypeArray, TArray<struct FSoftObjectPath> IconPathArray, TArray<class FString> DescriptionArray);
		void RefreshTacticalSkillInfo(const class FString& Name, const class FString& Description);
		void RefreshSuperSkillInfo(const class FString& Name, const class FString& Description);
		void RefreshSummonWeapon();
		void RefreshPassiveSkillInfo(const class FString& Name, const class FString& Description);
		void RefreshCharacterNameAndIcon(const class FString& Name);
		void OnWeaponWidgetClicked();
		void OnSetDropMaskVisibility(bool bVisible);
		void OnPlayerStateRep(EPlayerStateRepType RepType, class APlayerState* PlayerState);
		void OnCharacterLevelExpChanged(int32_t NewLevel, float NewExpRatio);
		void OnCharacterIDSet(int32_t CharacterId);
		void OnCharacterDead(class ASolarCharacter* InCharacter);
		void OnBtnVerPushClicked();
		void OnBtnSpecialClicked();
		void OnBtnShieldClicked();
		void OnBtnRespawnClicked();
		void OnBtnHorPushClicked();
		void OnBtnCloseClicked();
		void OnBtnBatteryClicked();
		void OnBackpackVisibilitySet(bool bInVisible);
		void OnBackpackModeChanged(int32_t ModeIndex);
		void InitDefaultWeaponPart();
		void HideUpgradeDetail(int32_t Level);
		class FString ClearWidgetInPanel(const class FName& InPanelName);
		void BindDelegates();
		class FString AddWidgetToPanel(class UPanelSlot** OutResult, class UWidget* InWidget, const class FName& InPanelName, bool bReplaceOld);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIComponentNationalFlag
	 * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
	 */
	class UUIComponentNationalFlag : public USolarUserWidget
	{
	public:
		struct FVector2D                                           NationalFlagSize;                                        // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           ClanFlagSize;                                            // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreAccountFlagSwitch;                                // 0x0358(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MQM1[0x7];                                   // 0x0359(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage* Img_FlagIcon;                                            // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarImageURL* Img_ClanFlag;                                            // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurFlagId;                                               // 0x0370(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7WPL[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetNationalFlagType();
		void SetClanFlagType();
		void RefreshFlagByPath(const class FString& TextureFullPath);
		void RefreshFlag(int32_t InFlagID);
		void RefreshClanFlagByPath(const class FString& TextureFullPath);
		void LoadClanFlagByUrl();
		bool IsExclusiveFlagId(int32_t InFlagID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIComponentPlayerName
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UUIComponentPlayerName : public USolarUserWidget
	{
	public:
		void UpdatePlayerNameAndStyle(const class FString& NickName, unsigned char VipType, bool bCheat, bool bKilled);
		void SetVip(unsigned char VipType);
		void SetTextColorAndOpacity(const struct FSlateColor& InColor);
		void SetText(const class FString& Content);
		void SetStyle(unsigned char VipType, bool bCheat, bool bKilled);
		void SetDeath(bool bDeath);
		void SetCheater(bool bCheat);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UICustomNoticeLayerWidget
	 * Size -> 0x01C0 (FullSize[0x0508] - InheritedSize[0x0348])
	 */
	class UUICustomNoticeLayerWidget : public USolarUserWidget
	{
	public:
		TMap<ECustomNoticeType, class UCanvasPanel*>               NoticePanel;                                             // 0x0348(0x0050) BlueprintVisible, ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0I5Z[0xA0];                                  // 0x0398(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ECustomNoticeColor, struct FNoticeColorData>          NoticeColor;                                             // 0x0438(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class UCustomNoticeTable* NoticeConfig;                                            // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCustomNoticeImageTable* NoticeImageConfig;                                       // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     GlobalKillNoticeWidgetPath;                              // 0x0498(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    GlobalKillMaxShowNum;                                    // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    GlobalKillNoticeBeginPosX;                               // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    GlobalKillNoticeBeginPosY;                               // 0x04B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    GlobalKillNoticeInterval;                                // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2KV1[0x28];                                  // 0x04C0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UBattleNoticePickup>                  PickUpNoticeNormalPtr;                                   // 0x04E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class UBattleNoticePickup>                  PickUpNoticeHomePtr;                                     // 0x04F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class UBattleNoticeEquipReplace>            EquipReplaceNoticePtr;                                   // 0x04F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M221[0x4];                                   // 0x0500(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SkydivingCaptainNoticeId;                                // 0x0504(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateGlobalKillNoticePosition();
		void ShowWidgetAsync(struct FNoticeData* NoticeData);
		void ShowGameNoticeCustom(const class FString& NoticeText, ECustomNoticeType NoticeType, class UClass* NoticeClass, float NoticeTime, ECustomNoticeColor NoticeColor, class UPaperSprite* NoticeIcon);
		void ShowGameNoticeByID(int32_t NoticeId, TMap<class FString, class FString> Param);
		void OnSkydivingCaptainChanged(int32_t TeamIndex, const class FString& playerName, bool IsLocalPlayer);
		void OnShowHUDGameNotice(int32_t InNoticeID, const struct FHUDNoticeParams& InNoticeParams);
		void OnPickUpNoticeAnimFinished();
		void InitNoticePanel();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIDefenderPlaerShowWidget
	 * Size -> 0x0088 (FullSize[0x03D0] - InheritedSize[0x0348])
	 */
	class UUIDefenderPlaerShowWidget : public USolarUserWidget
	{
	public:
		class UScaleBox* ScaleBox_Card;                                           // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              playerName;                                              // 0x0350(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Level;                                                   // 0x0360(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RankLevelID;                                             // 0x0364(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PlayerGender;                                            // 0x0368(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsMyTeam;                                               // 0x036C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y3AI[0x3];                                   // 0x036D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PlayerSeat;                                              // 0x0370(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsMySelf;                                               // 0x0374(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_31O4[0x3];                                   // 0x0375(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CardPose;                                                // 0x0378(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Cardbackground;                                          // 0x037C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FExpRankMedalData>                           AllExpRankMedalData;                                     // 0x0380(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CharacterExp;                                            // 0x0390(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ULDJ[0x4];                                   // 0x0394(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMedalInfo>                                  TargetCardMedalArray;                                    // 0x0398(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarPlayerState* PlayerState;                                             // 0x03A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarBusinessCardCharacter* RTCharacter;                                             // 0x03B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor* RTCharacterBackground;                                   // 0x03B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RTLocation;                                              // 0x03C0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VKJB[0x4];                                   // 0x03CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetPlayerShowInfo(class ASolarPlayerState* PS, bool bIsSelf, int32_t Seat, bool bIsSelfTeam, int32_t SelfLevel, const struct FVector& CardRTLocation);
		void SetPlayerBusinessInfo(class ASolarPlayerState* PS, int32_t PlayerNumber, const struct FExpRankMedalData& ExpRankMedalData);
		void SetCharacterSkin();
		void SetBusinessCard(int32_t PoseId, int32_t BackgroundId, int32_t SkinId, class UScaleBox* ParentPanel);
		void OnRefreshWidget();
		class FString GetNameCardCharacterPathByCharacterIDAndCardPose(int32_t CharacterId, int32_t CardPoseID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIDefenderTeamShowWidget
	 * Size -> 0x0120 (FullSize[0x0468] - InheritedSize[0x0348])
	 */
	class UUIDefenderTeamShowWidget : public USolarUserWidget
	{
	public:
		class UUIDefenderPlaerShowWidget* Player_2;                                                // 0x0348(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDefenderPlaerShowWidget* Player_3;                                                // 0x0350(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDefenderPlaerShowWidget* Player_4;                                                // 0x0358(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIDefenderPlaerShowWidget* Player_5;                                                // 0x0360(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Exit_Anim;                                               // 0x0368(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PlayerNum;                                               // 0x0370(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsMyTeam;                                               // 0x0374(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B7JL[0x3];                                   // 0x0375(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                LevelName;                                               // 0x0378(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ActorName_2;                                             // 0x0380(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ActorName_3;                                             // 0x0390(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ActorName_4;                                             // 0x03A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ActorName_5;                                             // 0x03B0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              CameraName_2;                                            // 0x03C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              CameraName_3;                                            // 0x03D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              CameraName_4;                                            // 0x03E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              CameraName_5;                                            // 0x03F0(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASolarPlayerState*>                           MyTeamPlayerState;                                       // 0x0400(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASolarPlayerState*>                           DefenderTeamPlayerState;                                 // 0x0410(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UUIDefenderPlaerShowWidget*>                  ShowWidget;                                              // 0x0420(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      OutActors;                                               // 0x0430(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASceneCapture2D*>                             OutSceneCapture2Ds;                                      // 0x0440(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FWidgetTransform>                            Transforms;                                              // 0x0450(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G1CG[0x8];                                   // 0x0460(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateOpeningShow(EDefenderTeamType TeamType);
		void SwitchTeamShow(EDefenderTeamType TeamType);
		void ShowPlayerInfo();
		void SetMyTeamPlayerState(TArray<class ASolarPlayerState*> TeamPlayerState);
		void SetDefenderTeamPlayerState(TArray<class ASolarPlayerState*> TeamPlayerState);
		void CloseDefenderTeamShowWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIDragWidget
	 * Size -> 0x00E8 (FullSize[0x0430] - InheritedSize[0x0348])
	 */
	class UUIDragWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_7GV2[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage* ItemImage;                                               // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* WidgetSize;                                              // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateBrush                                         ImageOuter;                                              // 0x0368(0x0098) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		int32_t                                                    ItemID;                                                  // 0x0400(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ItemNum;                                                 // 0x0404(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemType                                                  ItemType;                                                // 0x0408(0x0001) ELEMENT_SIZE_MISMATCH ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9R4K[0x3];                                   // 0x0409(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_K860[0x4];                                   // 0x040C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ItemName;                                                // 0x0410(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeaponSlot;                                              // 0x0420(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           OffsetVec;                                               // 0x0424(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GFPL[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetDragWidgetSize(const struct FVector2D& InSize);
		void SetDragWeaponSlot(int32_t InWeaponSlot);
		void SetDragItemData(int32_t InID, int32_t InNum, int32_t InItemType, const class FString& InItemName);
		void SetDragImageRenderScale(const struct FVector2D& InScale);
		void SetDragImageBrushFromTexture(class UTexture2D* InTexture2D, bool InMatchSize);
		void SetDragImageBrush(const struct FSlateBrush& InBrush);
		void OnEndDragDropCall(bool InVisibility);
		void BindDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIDropMaskWidget
	 * Size -> 0x0008 (FullSize[0x0350] - InheritedSize[0x0348])
	 */
	class UUIDropMaskWidget : public USolarUserWidget
	{
	public:
		class USolarDragDropOperation* OperationData;                                           // 0x0348(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnDropMutiItem(int32_t InItemID, int32_t InTotalCount);
		void OnDropConfirmHandle();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIEmojiContainer
	 * Size -> 0x0050 (FullSize[0x0398] - InheritedSize[0x0348])
	 */
	class UUIEmojiContainer : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_NKSJ[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* Panel;                                                   // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HPKQ[0x10];                                  // 0x0360(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* CommonEmojiBubbleSubClass;                               // 0x0370(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PreCreateEmojiNum;                                       // 0x0378(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_II4W[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     EmojiTablePath;                                          // 0x0380(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIGlobalConfig
	 * Size -> 0x00F0 (FullSize[0x0120] - InheritedSize[0x0030])
	 */
	class UUIGlobalConfig : public UDataAsset
	{
	public:
		TMap<unsigned char, struct FTeamMemberColor>               TeamMemberColors;                                        // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FItemQualityData>               ItemQualityData;                                         // 0x0080(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FOBTeamColor>                   OBTeamColors;                                            // 0x00D0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		struct FOBTeamColor GetOBTeamColor(int32_t TeamNum);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIInputDevice
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class UUIInputDevice : public USolarUserWidget
	{
	public:
		void UpdateInputType(ECommonInputType InputDevice);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UILayerBase
	 * Size -> 0x0020 (FullSize[0x0280] - InheritedSize[0x0260])
	 */
	class UUILayerBase : public UUserWidget
	{
	public:
		class UCanvasPanel* InGameBaseUILayer;                                       // 0x0260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* VirtualControllerLayer;                                  // 0x0268(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* InGamePopupLayer;                                        // 0x0270(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* OutGameUILayer;                                          // 0x0278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIManager
	 * Size -> 0x0108 (FullSize[0x0138] - InheritedSize[0x0030])
	 */
	class UUIManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_Q0D6[0x38];                                  // 0x0030(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FScriptDelegate>                              OnBigMapOpenDelegateGroup;                               // 0x0068(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FScriptDelegate>                              OnBigMapVisibilityChangedDelegateGroup;                  // 0x0078(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable* BattleWidgetSettings;                                    // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUIRoot* SolarUIRoot;                                             // 0x0090(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDestroyObjectStruct>                        NeedToDestroyObjects;                                    // 0x0098(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HTU0[0x90];                                  // 0x00A8(0x0090) MISSED OFFSET (PADDING)

	public:
		void WatchReference();
		void WatchAllReference();
		void STATIC_UpdateButtonSprite(class UButton* TargetButton, const class FString& AtlasType, const class FString& NormalSpName, const class FString& PressedSpName, const class FString& HoveredSpName, const class FString& DisableSpName);
		void TriggerDelegate();
		class USolarUserWidget* ShowUIByName(const class FString& InName, int32_t RootID);
		void STATIC_SetWidgetLayout(class UWidget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);
		void STATIC_SetWidgetChildrenLayout(class UUserWidget* InRootWidget, const class FName& PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);
		class USolarUserWidget* SetUIActive(class USolarUserWidget* InWidget, bool Inactive);
		void STATIC_SetMaterialInstanceParams(class UImage* Image, const class FString& ParamName, float Value);
		void STATIC_SetMaterialInstanceColor(class UImage* Image, const class FString& ParamName, const struct FLinearColor& Value);
		void SetLoadingUIByLevelAndDisplay(int32_t InModelID, int32_t InLevel, int32_t InMapIndex, bool InDisableCustomLoading);
		void STATIC_SetImageTintColor(class UImage* Img, const struct FLinearColor& InColor);
		void STATIC_SetImageTexture(class UImage* Img, class UTexture2D* Texture);
		void STATIC_SetImageFromTextureOrSprite(class UImage* DstImage, const struct FSoftObjectPath& Path, bool bMatchSize);
		void STATIC_SetImageColor(class UImage* Img, float R, float G, float B, float A);
		void STATIC_SetFireInputStyle(class UFireInputWidget* FireInput, class USlateWidgetStyleAsset* Style);
		void STATIC_SetCheckedState(class UCheckBox* Box, ECheckBoxState State);
		void STATIC_SetCheckboxStyle(class UCheckBox* CheckBox, class USlateWidgetStyleAsset* Style);
		void STATIC_SetCheckBoxIsChecked(class UCheckBox* CheckBox, bool Checked);
		void STATIC_SetButtonStyle(class UButton* Btn, class USlateWidgetStyleAsset* Style);
		void RemoveAllWidgets();
		void OpenUIGM(const class FString& UIID, int32_t RootID);
		void OpenConfirmUIInLua(int32_t ConfirmID);
		void OnLuaHotReloadFileChanged(const class FString& LuaSysPath, const class FString& LuaPathName);
		void OnInitLuaHotReload();
		void OnGameManagersInitialized();
		void OnClientStartGame();
		void LuaCloseUI(const class FString& MapName);
		class UTexture2D* STATIC_LoadTexture2DBySoftPath(const struct FSoftObjectPath& Path);
		class UTexture2D* STATIC_LoadTexture2DByPath(class UObject* InOuter, const class FString& FullPath);
		class UTexture2D* STATIC_LoadTexture2D(class UObject* InOuter, const class FString& TextureType, const class FString& TexName);
		class UTexture2D* STATIC_LoadQualityBG(class UObject* InOuter, int32_t InQuality);
		class UPaperSprite* STATIC_LoadPaperSprite(class UObject* InOuter, const class FString& AtlasPath, const class FString& SpName);
		class UMaterialInterface* STATIC_LoadMaterialInstance(class UObject* InOuter, const class FString& MaterialType, const class FString& MaterialName);
		bool STATIC_IsWidgetVisibleForDisplay(class UWidget* InWidget);
		void STATIC_InvalidateWidgetPrepass(class UWidget* InWidget);
		void STATIC_InitLvlTextWidget(class UTextBlock* InHeadTextWidget, class UTextBlock* InTrailTextWidget);
		class ASolarCharacter* STATIC_GetWidgetOwningCharacter(class UWidget* InWidget);
		class FString STATIC_GetWeaponTextureFullPath(class FString* IconPath);
		class UUserWidget* GetUIPanel(const class FString& MapName);
		class FString STATIC_GetTexture2DFullPath(class FString* PrePath, class FString* IconPath);
		class FString STATIC_GetQualityBGFullPath(int32_t InQuality, bool bWithSuffix);
		class UTexture2D* GetPlayerAvatarByID(int32_t PlayerAvatarID);
		int32_t GetLobbyID();
		bool STATIC_GetCheckBoxIsChecked(class UCheckBox* CheckBox);
		class UCanvasPanelSlot* STATIC_GetCanvasPanelSlotForWidget(class UWidget* Widget);
		struct FCustomWidget_TableRow GetBattleWidgetSetting(const class FString& ConfigName);
		class UUserWidget* GetBattleBackpackWidget();
		void ExitSpectateMode();
		void EnterSpectateMode();
		void CloseUIGM(const class FString& UIID);
		void CloseLoadingUI();
		struct FMargin STATIC_ClampInScreenOffsets(class UWidget* WorldContextObject, const struct FMargin& Offsets, const struct FAnchors& Anchors, const struct FVector2D& Alignment);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIMassDiscardWidget
	 * Size -> 0x0060 (FullSize[0x03A8] - InheritedSize[0x0348])
	 */
	class UUIMassDiscardWidget : public USolarUserWidget
	{
	public:
		unsigned char                                              UnknownData_E8YN[0x20];                                  // 0x0348(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UButton* Button_Increase;                                         // 0x0368(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* Button_Decrease;                                         // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UComponentButtonBaseWidget* Button_Confirm;                                          // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UComponentButtonBaseWidget* Button_Cancel;                                           // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USlider* Slider_Quantity;                                         // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar* ProgressBar_Quantity;                                    // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_Quantity;                                           // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Text_Total;                                              // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetDiscardItemData(int32_t InItemID, int32_t InTotalCount);
		void OnSliderValueChanged(float InValue);
		void OnLongPressUpdate();
		void OnDiscardItemNumChanged();
		void OnBtnIncreaseReleased();
		void OnBtnIncreasePressed();
		void OnBtnIncreaseClicked();
		void OnBtnDecreaseReleased();
		void OnBtnDecreasePressed();
		void OnBtnDecreaseClicked();
		void OnBtnConfirmClicked();
		void OnBtnCancelClicked();
		void InitWidgets();
		void BindDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINavigationManager
	 * Size -> 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
	 */
	class UUINavigationManager : public USolarGameManager
	{
	public:
		unsigned char                                              UnknownData_IJZC[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class USolarUserWidget*>               WidgetOpenedMap;                                         // 0x0038(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USolarUserWidget*>                            TmpRemovedWidgets;                                       // 0x0088(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class USolarUserWidget>>             CachedCreatedWidgets;                                    // 0x0098(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MMY6[0x10];                                  // 0x00A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USolarUIRoot* SolarUIRoot;                                             // 0x00B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UnbindCustomControlDefine(class USolarUserWidget* PanelWidget, class USolarUserWidget* UserWidget);
		class USolarUserWidget* ShowUIBySubClass(class UClass* SubClass, EUIRoot RootID);
		bool ShowPanelUI(class USolarUserWidget* createWidget, const class FString& UniqueWidgetKey);
		void RemoveUserWidgetLuaRef(class USolarUserWidget* UserWidget);
		void RemoveUIFromOpenedMap(const class FString& UniqueWidgetKey);
		void RemoveAllSolarWidgets();
		void PrePooledWidgetReset(class UUserWidget* UserWidget);
		void OnShowPanelUI(class USolarUserWidget* UserWidget);
		void OnPostLoadMapInitUIRoot(class UWorld* InWorld);
		void OnOpenPanelUI(class USolarUserWidget* UserWidget);
		void OnHidePanelUI(class USolarUserWidget* UserWidget);
		void OnDisplayMetricsChanged();
		void OnClosePanelUI(class USolarUserWidget* UserWidget);
		bool IsUserWidgetInScope(class UClass* Class, EScope* OutCurScope, EScope* OutDstScope);
		class USolarUserWidget* GetShowTopWidget();
		class UUserWidget* GetOpenedWidget(const class FString& UniqueWidgetKey);
		void CloseUIBySubClass(class UClass* SubClass);
		void ClosePanelUI(class USolarUserWidget* closeWidget, const class FString& UniqueWidgetKey);
		void ClearNonPersistentWidget();
		void ClearAllOpenedWidget();
		void BindWidgetVisibilityChangedEvent(const class FScriptDelegate& VisibilityChangedEvent);
		void BindCustomControlDefine(class USolarUserWidget* PanelWidget, class USolarUserWidget* UserWidget, const class FString& FullPath);
		void BatchRemovedWidgets(bool bRemoveAll);
		void AddUIToOpenedMap(const class FString& UniqueWidgetKey, class USolarUserWidget* Widget);
		void AddBatchRemovedWidget(class USolarUserWidget* UserWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINotice_TaskComplete
	 * Size -> 0x0038 (FullSize[0x03A8] - InheritedSize[0x0370])
	 */
	class UUINotice_TaskComplete : public UUINoticeBase
	{
	public:
		class UWidgetAnimation* FinishTaskAnim;                                          // 0x0370(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* ExitTaskAnim;                                            // 0x0378(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_TaskPercent;                                         // 0x0380(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_TaskDescTex;                                         // 0x0388(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Normal;                                                  // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Finish;                                                  // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KLI7[0x8];                                   // 0x03A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnTaskFinishedAnimEnd();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeKill
	 * Size -> 0x0080 (FullSize[0x03F0] - InheritedSize[0x0370])
	 */
	class UUINoticeKill : public UUINoticeBase
	{
	public:
		class UUIComponentPlayerName* UIComponentKillerName;                                   // 0x0370(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentPlayerName* UIComponentVictimName;                                   // 0x0378(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* KillTypeWidget;                                          // 0x0380(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* WeaponTypeWidget;                                        // 0x0388(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* ImgeKillBar_Special;                                     // 0x0390(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* ImgeKillBar_Common;                                      // 0x0398(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentNationalFlag* KillerFlagWidget;                                        // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentNationalFlag* VictimFlagWidget;                                        // 0x03A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_Input_Device_Left;                                    // 0x03B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarUserWidget* UI_Input_Device_Right;                                   // 0x03B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget* KillerTeamNumb;                                          // 0x03C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget* KilledTeamNumb;                                          // 0x03C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UContentWidget* RevengeContentWidget;                                    // 0x03D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UContentWidget* ShutDownContentWidget;                                   // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UContentWidget* KillLeaderWidget;                                        // 0x03E0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_PlayerID;                                            // 0x03E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetVictimVipType(unsigned char VictimVipType);
		void SetKillerVipType(unsigned char KillerVipType);
		int32_t RefreshSwticher();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeKillCombo
	 * Size -> 0x0058 (FullSize[0x03C8] - InheritedSize[0x0370])
	 */
	class UUINoticeKillCombo : public UUINoticeBase
	{
	public:
		ELocalNoticeType                                           LocalNoticeType;                                         // 0x0370(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W621[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetSwitcher* WidgetSwitcher_1;                                        // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_KillEffect;                                          // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel* Panel_KillEffectInfo;                                    // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_KillEffectInfo;                                     // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_ShutDownInfo;                                       // 0x0398(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_KillerName;                                         // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_Killer;                                              // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_KilledName;                                         // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarImage* Img_Killed;                                              // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarRichTextBlock* Text_TerminatorName;                                     // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeKillLeader
	 * Size -> 0x0028 (FullSize[0x0398] - InheritedSize[0x0370])
	 */
	class UUINoticeKillLeader : public UUINoticeBase
	{
	public:
		bool                                                       bIsKillLeaderShutDown;                                   // 0x0370(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WRVW[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetSwitcher* WidgetSwitcher_1;                                        // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* text_killleader;                                         // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_shutdown_killleader;                                 // 0x0388(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Txt_death_name;                                          // 0x0390(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeKillLeaderInfo
	 * Size -> 0x0008 (FullSize[0x0378] - InheritedSize[0x0370])
	 */
	class UUINoticeKillLeaderInfo : public UUINoticeBase
	{
	public:
		class USolarTextBlock* Text_KillLeaderInfo;                                     // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeKillTotal
	 * Size -> 0x00C8 (FullSize[0x0438] - InheritedSize[0x0370])
	 */
	class UUINoticeKillTotal : public UUINoticeBase
	{
	public:
		class UWidgetSwitcher* wgs_combo_phase;                                         // 0x0370(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USolarTextBlock* Text_NickName;                                           // 0x0378(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ActiveKillTotalWidgetIndex;                              // 0x0380(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O4SA[0x4];                                   // 0x0384(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, int32_t>                                     KillTotalTextMap;                                        // 0x0388(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UGSX[0x60];                                  // 0x03D8(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeReviveDisableHint
	 * Size -> 0x0020 (FullSize[0x0390] - InheritedSize[0x0370])
	 */
	class UUINoticeReviveDisableHint : public UUINoticeBase
	{
	public:
		class USolarTextBlock* Text_CDData;                                             // 0x0370(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation* Loop_Anim;                                               // 0x0378(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LHO5[0x10];                                  // 0x0380(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeSkydivingCaptain
	 * Size -> 0x0000 (FullSize[0x0370] - InheritedSize[0x0370])
	 */
	class UUINoticeSkydivingCaptain : public UUINoticeBase
	{
	public:
		void RefreshContent(int32_t TeamIndex, const class FString& playerName, bool IsLocalPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeVictory
	 * Size -> 0x00D0 (FullSize[0x0440] - InheritedSize[0x0370])
	 */
	class UUINoticeVictory : public UUINoticeBase
	{
	public:
		class UButton* BtnReturn;                                               // 0x0370(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Img_Bg;                                                  // 0x0378(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AIS2[0xA8];                                  // 0x0380(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     ImgBGPath;                                               // 0x0428(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnReturnBtnClick();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UINoticeVipPlayerJoin
	 * Size -> 0x0018 (FullSize[0x0388] - InheritedSize[0x0370])
	 */
	class UUINoticeVipPlayerJoin : public UUINoticeBase
	{
	public:
		class UUIComponentPlayerName* UI_Component_PlayerName;                                 // 0x0370(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock* Txt_Entrance_Info;                                       // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUIComponentNationalFlag* FlagWidget;                                              // 0x0380(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetVipType(unsigned char VipType);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIPanelConfig
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UUIPanelConfig : public UObject
	{
	public:
		TMap<EUIPanelName, struct FUIPanelConfigEntry>             PanelConfigs;                                            // 0x0028(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UISubsystem
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UUISubsystem : public UGameInstanceSubsystem
	{
	public:
		class UUIGlobalConfig* GlobalConfig;                                            // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUIPanelConfig* UIPanelConfig;                                           // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, class USolarUserWidget*>               CacheWidgets;                                            // 0x0040(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G6I0[0x20];                                  // 0x0090(0x0020) MISSED OFFSET (PADDING)

	public:
		void PostInitializeAfterPatch();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UISystemSettings
	 * Size -> 0x00A8 (FullSize[0x00E0] - InheritedSize[0x0038])
	 */
	class UUISystemSettings : public UDeveloperSettings
	{
	public:
		int32_t                                                    InGameWidgetPoolSize;                                    // 0x0038(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    VirtualControllerPoolSize;                               // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InGamePopupPoolSize;                                     // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    OutGameWidgetPoolSize;                                   // 0x0044(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     UIGlobalConfig;                                          // 0x0048(0x0018) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftClassPath                                      UILayer;                                                 // 0x0060(0x0018) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftClassPath                                      UIPanelConfigClass;                                      // 0x0078(0x0018) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<struct FGameplayTag, struct FInteractionButtonSpec>   InteractionButtons;                                      // 0x0090(0x0050) Edit, Config, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.UIWeaponPartWidget
	 * Size -> 0x0118 (FullSize[0x0460] - InheritedSize[0x0348])
	 */
	class UUIWeaponPartWidget : public USolarUserWidget
	{
	public:
		class UImage* Img_Icon;                                                // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_LevelBg;                                             // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_PartsBg;                                             // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USizeBox* WidgetSize;                                              // 0x0360(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass* DragDropWidgetClass;                                     // 0x0368(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorNotEquip;                                           // 0x0370(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorDisable;                                            // 0x0380(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorNormal;                                             // 0x0390(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorQuality;                                            // 0x03A0(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ItemID;                                                  // 0x03B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ItemNum;                                                 // 0x03B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EItemType                                                  ItemType;                                                // 0x03B8(0x0001) ELEMENT_SIZE_MISMATCH ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B84I[0x3];                                   // 0x03B9(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_HNM6[0x4];                                   // 0x03BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ItemName;                                                // 0x03C0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    WeaponSlot;                                              // 0x03D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWeaponPartType                                            WeaponPartType;                                          // 0x03D4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0N4Q[0x3];                                   // 0x03D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    WeaponPartLevel;                                         // 0x03D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EWeaponPartType                                            EquippedPartType;                                        // 0x03DC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EUIWeaponPartState                                         CurrentState;                                            // 0x03DD(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsable;                                                 // 0x03DE(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseHUDIcon;                                             // 0x03DF(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           OffsetVec;                                               // 0x03E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, class FString>                               DefaultWeaponPartIconMaps;                               // 0x03E8(0x0050) Protected, NativeAccessSpecifierProtected
		class FString                                              WeaponPartPrePath;                                       // 0x0438(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bApplyToWeaponSlot;                                      // 0x0448(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9EGV[0x3];                                   // 0x0449(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        PartBGDefaultColor;                                      // 0x044C(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P36J[0x4];                                   // 0x045C(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdateWidgetByEnable(bool InIsable);
		void SetWidgetSize(const struct FVector2D& InSize);
		void SetWeaponSlot(int32_t InWeaponSlot);
		void SetWeaponPartData(int32_t InID, int32_t InNumber);
		void SetIsEnable(bool InIsable);
		void SetBrushFromTexture(class UTexture2D* InTextureAsset, bool InMatchSize);
		void InitDefaultWeaponPart(EWeaponPartType InWeaponPartType, bool InUseHUDIcon);
		void ClearWeaponPartData();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarBTT_NgaiBotBattle
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USolarBTT_NgaiBotBattle : public UBTTask_BlackboardBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleAIPath
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class AVehicleAIPath : public AActor
	{
	public:
		class USplineComponent* PathComponent;                                           // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PathId;                                                  // 0x0230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4QSY[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleAISpawnerInGuide
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class AVehicleAISpawnerInGuide : public ASpawnerInGuide
	{
	public:
		float                                                      NoDamageLeftHP;                                          // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PathId;                                                  // 0x027C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleCameraDataAsset
	 * Size -> 0x0390 (FullSize[0x03C0] - InheritedSize[0x0030])
	 */
	class UVehicleCameraDataAsset : public UDataAsset
	{
	public:
		struct FRuntimeFloatCurve                                  TargetArmLengthCurve;                                    // 0x0030(0x0088) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      TargetArmLengthInterpSpeed;                              // 0x00B8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TargetOffset;                                            // 0x00BC(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                TargetOffsetSocket;                                      // 0x00C8(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTargetOffsetIgnoreRoll;                                 // 0x00D0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTargetOffsetIgnorePitch;                                // 0x00D1(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCameraRollSameWithVehicleRoll;                          // 0x00D2(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_93ZY[0x1];                                   // 0x00D3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             SocketOffset;                                            // 0x00D4(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinPitch;                                                // 0x00E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxPitch;                                                // 0x00E4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinYaw;                                                  // 0x00E8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxYaw;                                                  // 0x00EC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  CameraFovCurve;                                          // 0x00F0(0x0088) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      CameraFovInterpSpeed;                                    // 0x0178(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCameraFollowVehicle;                                    // 0x017C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JP5D[0x3];                                   // 0x017D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultPitch;                                            // 0x0180(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TOYJ[0x4];                                   // 0x0184(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  CameraFollowSpeedCurve;                                  // 0x0188(0x0088) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      CameraFollowTimeThreshold;                               // 0x0210(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraResetFollowSpeed;                                  // 0x0214(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraFollowSpeedThreshold;                              // 0x0218(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableCameraLag;                                        // 0x021C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_08S1[0x3];                                   // 0x021D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  CameraLagInterpSpeedCurve;                               // 0x0220(0x0088) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  CameraLagCurve;                                          // 0x02A8(0x0088) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  AdditionalTargetOffsetOnZ;                               // 0x0330(0x0088) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      BlendTime;                                               // 0x03B8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SEPP[0x4];                                   // 0x03BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleCollisionSubsystem
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UVehicleCollisionSubsystem : public UEngineSubsystem
	{
	public:
		unsigned char                                              UnknownData_9XIE[0x50];                                  // 0x0030(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleMoveWidget
	 * Size -> 0x0240 (FullSize[0x0420] - InheritedSize[0x01E0])
	 */
	class UVehicleMoveWidget : public USolarJoyStick
	{
	public:
		struct FSlateBrush                                         JoyStickThumb;                                           // 0x01E0(0x0098) Edit, NativeAccessSpecifierPublic
		struct FSlateBrush                                         JoyStickThumbPress;                                      // 0x0278(0x0098) Edit, NativeAccessSpecifierPublic
		struct FVector2D                                           ThumbSize;                                               // 0x0310(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateBrush                                         SprintImage;                                             // 0x0318(0x0098) Edit, NativeAccessSpecifierPublic
		struct FVector2D                                           SprintSize;                                              // 0x03B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TriggerPressTime;                                        // 0x03B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceSprintImageToCenter;                             // 0x03BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShowLockSprintIconSectorAngle;                           // 0x03C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           VisualSize;                                              // 0x03C4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LXGM[0x14];                                  // 0x03CC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSprintIconActive;                                      // 0x03E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintIconHide;                                        // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintLockIconActive;                                  // 0x0400(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintChangeToCenterState;                             // 0x0410(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetSprintToCenterDistance(float Distance);
		void ResetSprintState();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehiclePreviewActor
	 * Size -> 0x0000 (FullSize[0x0540] - InheritedSize[0x0540])
	 */
	class AVehiclePreviewActor : public APreviewActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehicleSkinPreviewData
	 * Size -> 0x03F0 (FullSize[0x0420] - InheritedSize[0x0030])
	 */
	class USolarVehicleSkinPreviewData : public UDataAsset
	{
	public:
		struct FSolarVehicleSkinPreviewMeshInfo                    VehicleMeshInfo;                                         // 0x0030(0x00C0) Edit, NativeAccessSpecifierPublic
		TArray<struct FSolarVehicleSkinPreviewMeshInfo>            WeaponMeshInfos;                                         // 0x00F0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSolarVehicleSkinPreviewMeshInfo                    MirrorMeshInfo;                                          // 0x0100(0x00C0) Edit, NativeAccessSpecifierPublic
		TArray<struct FSolarVehicleSkinPreviewMeshInfo>            MirrorWeaponMeshInfos;                                   // 0x01C0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FVehicleVFX>                                 VehicleVFXs;                                             // 0x01D0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              SwitchParticleEffectPath[0x28];                          // 0x01E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<struct FSolarVehicleMaterialData>                   VehicleMaterialDataArray;                                // 0x0208(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SCVO[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          PageTransforms[0xA];                                     // 0x0220(0x01E0) Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FSolarVehicleSkinPreviewPageInfo                    PageInfos[0xA];                                          // 0x0400(0x0014) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5ZZA[0xC];                                   // 0x0414(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SolarVehiclePreview
	 * Size -> 0x0100 (FullSize[0x0328] - InheritedSize[0x0228])
	 */
	class ASolarVehiclePreview : public AActor
	{
	public:
		class USkeletalMeshComponent* VehicleMesh;                                             // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* DissovleVehicleMesh;                                     // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* FresnelVehicleMesh;                                      // 0x0238(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USkeletalMeshComponent*>                      WeaponMeshes;                                            // 0x0240(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USkeletalMeshComponent*>                      DissovleWeaponMeshes;                                    // 0x0250(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USkeletalMeshComponent*>                      FresnelWeaponMeshes;                                     // 0x0260(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* MirrorVehicleMesh;                                       // 0x0270(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* MirrorDissovleVehicleMesh;                               // 0x0278(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent* MirrorFresnelVehicleMesh;                                // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USkeletalMeshComponent*>                      MirrorWeaponMeshes;                                      // 0x0288(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USkeletalMeshComponent*>                      MirrorDissovleWeaponMeshes;                              // 0x0298(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USkeletalMeshComponent*>                      MirrorFresnelWeaponMeshes;                               // 0x02A8(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S5WG[0x10];                                  // 0x02B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwitchEffectInterval;                                    // 0x02C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MLFM[0xC];                                   // 0x02CC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSwitchEffectInfo>                           DissovleEffectInfos;                                     // 0x02D8(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSwitchEffectInfo>                           FresnelEffectInfos;                                      // 0x02E8(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K44L[0x30];                                  // 0x02F8(0x0030) MISSED OFFSET (PADDING)

	public:
		void StartPlayFresnelEffect();
		void StartPlayDissovleEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleSpeedScreenEffectWidget
	 * Size -> 0x0028 (FullSize[0x0378] - InheritedSize[0x0350])
	 */
	class UVehicleSpeedScreenEffectWidget : public USolarScreenEffectWidget
	{
	public:
		class UOverlay* ScreenVFX;                                               // 0x0350(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Left;                                                    // 0x0358(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage* Right;                                                   // 0x0360(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstanceDynamic* LeftMID;                                                 // 0x0368(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic* RightMID;                                                // 0x0370(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleStealthGCNotify_Actor
	 * Size -> 0x02B0 (FullSize[0x0550] - InheritedSize[0x02A0])
	 */
	class AVehicleStealthGCNotify_Actor : public ASolarVehicleGCNotify_Actor
	{
	public:
		class UMaterialInterface* StealthMaterial;                                         // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  NormalStealthCurve;                                      // 0x02A8(0x0088) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TBID[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  VehicleVelocityCurve;                                    // 0x0338(0x0088) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  VehicleBeDamagedCurve;                                   // 0x03C0(0x0088) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class FName                                                StealthMaterialParamPowerName;                           // 0x0448(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                StealthMaterialParamDistanceName;                        // 0x0450(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StealthMaterialParamDistanceValue;                       // 0x0458(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PUWN[0x4];                                   // 0x045C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EStealthParamType, struct FStealthMaterialParams>     VehicleStealthParamterSets;                              // 0x0460(0x0050) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0R5M[0x38];                                  // 0x04B0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              EnterStealthEngine3p;                                    // 0x04E8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              EnterStealthEngine3pEnemy;                               // 0x04F8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              CancelStealthEngine3p;                                   // 0x0508(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              CancelStealthEngine3pEnemy;                              // 0x0518(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WarningOtherRange;                                       // 0x0528(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      WarningOtherRangeOutThreshold;                           // 0x052C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QRL3[0x10];                                  // 0x0530(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCueContent>                                 CueContents;                                             // 0x0540(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnVehicleSkinUpdate(class ASolarVehiclePawn* InVehiclePawn);
		void OnToggleStealth(bool bInStealh);
		void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, class ASolarCharacter* GetOnPlayer);
		void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, class ASolarCharacter* GetOffPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleStopArea
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class AVehicleStopArea : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleWeaponAnimInstance
	 * Size -> 0x0040 (FullSize[0x0310] - InheritedSize[0x02D0])
	 */
	class UVehicleWeaponAnimInstance : public UWeaponAnimInstance
	{
	public:
		unsigned char                                              UnknownData_9ZLI[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            VehicleWeaponPitchRot;                                   // 0x02D8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            VehicleWeaponYawRot;                                     // 0x02E4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             LeftBoneIKOffset;                                        // 0x02F0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RightBoneIKOffset;                                       // 0x02FC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVehicleWeaponReloading;                                 // 0x0308(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GLN4[0x7];                                   // 0x0309(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleWeaponCrossHairWidget
	 * Size -> 0x0188 (FullSize[0x0488] - InheritedSize[0x0300])
	 */
	class UVehicleWeaponCrossHairWidget : public UCrossHairWidget
	{
	public:
		bool                                                       bUseSecondReticle;                                       // 0x0300(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DK5L[0x3];                                   // 0x0301(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DirectionRadius;                                         // 0x0304(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* SecondReticlePanel;                                      // 0x0308(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanelSlot* SecondReticleSlot;                                       // 0x0310(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ReticleDirectionImage;                                   // 0x0318(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanelSlot* ReticleDirectionSlot;                                    // 0x0320(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* RangedImage;                                             // 0x0328(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A6FT[0x20];                                  // 0x0330(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USizeBox* AssistLockSizeBox;                                       // 0x0350(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* ChangeNewAssistLockPawnPanel;                            // 0x0358(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* EnterLockPawnPanel;                                      // 0x0360(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B3AW[0x14];                                  // 0x0368(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APawn>                                AssistLockPawn;                                          // 0x037C(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TKNT[0x4];                                   // 0x0384(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGlobalVehicleWeaponConfig* GVehicleWeaponConfig;                                    // 0x0388(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASolarPlayerController* SolarPlayerController;                                   // 0x0390(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JA8X[0x9C];                                  // 0x0398(0x009C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurProgressOfPreEnterAssistLock;                         // 0x0434(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PreEnterAssistLockSpeed;                                 // 0x0438(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TARX[0x10];                                  // 0x043C(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeIntervalToCheckBlock;                                // 0x044C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ROSG[0x8];                                   // 0x0450(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel* DynamicAimCanvas;                                        // 0x0458(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanelSlot* DynamicAimCanvasSlot;                                    // 0x0460(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DynamicAimOccludeOpacity;                                // 0x0468(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           DynamicAimSmoothSpeed;                                   // 0x046C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6LC3[0xC];                                   // 0x0474(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAlwaysShowOverload;                                     // 0x0480(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0MJX[0x7];                                   // 0x0481(0x0007) MISSED OFFSET (PADDING)

	public:
		struct FVector2D UpdateAssistLockUIScale();
		void UpdateAssistLockStateUI(EAssistLockState InEAssistLockState);
		void SetWidgetResources(class UCanvasPanel** InSecondReticlePanel, class UImage** InReticleDirectionImage, class UImage** InRangedImage, class USizeBox** InAssistLockSizeBox, class UCanvasPanel** InChangeNewAssistLockPawnPanel, class UCanvasPanel** InEnterLockPawnPanel, class UCanvasPanel** InCanvas_Dynamic);
		void OnUpdateAimTargetDistance(float InDistance);
		void OnTransformerWeaponChanged(ETransformerType InType);
		void InitAssitLockInfo(class ASolarVehicleWeapon* VehicleWeapon);
		class UCanvasPanel* GetSecondReticlePanel();
		class UImage* GetReticleDirectionImage();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleWeaponScopeWidget
	 * Size -> 0x00A0 (FullSize[0x03E8] - InheritedSize[0x0348])
	 */
	class UVehicleWeaponScopeWidget : public USolarUserWidget
	{
	public:
		EVehicleWeaponScopeType                                    PresetScopeType;                                         // 0x0348(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CDKQ[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage* img_Vehicle;                                             // 0x0350(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Weapon;                                              // 0x0358(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Pitch;                                             // 0x0360(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponScopeSliderWidget* Crosshair_Slider;                                        // 0x0368(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarCheckBox* Btn_Pitch;                                               // 0x0370(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* SecondReticlePanel;                                      // 0x0378(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_BG;                                                // 0x0380(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel_Border;                                            // 0x0388(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ReticleDirection;                                        // 0x0390(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Coredot;                                                 // 0x0398(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponRechamberWidget* HUD_CarFireCD_L;                                         // 0x03A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Enter;                                              // 0x03A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanelSlot* SecondReticleSlot;                                       // 0x03B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCanvasPanelSlot* ReticleDirectionSlot;                                    // 0x03B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UImage* ProgressImage;                                           // 0x03C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UWidgetAnimation* ProgressAnima;                                           // 0x03C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic* ProgressMaterial;                                        // 0x03D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MDG5[0x10];                                  // 0x03D8(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateScopeUI(class ASolarVehicleWeapon* VehicleWeapon, const struct FVehicleWeaponCrossHairInfo& InCrossHairInfo);
		void SetChargeProgress(class UImage** InProgressImage, class UWidgetAnimation** InProgressAnima);
		void OnUpdateChargeProgress(bool InbCharging, int32_t InChargeMode, float InChargeProgress);
		void OnScopeTriggerChanged(bool bChecked);
		void OnScopeOpened();
		void InitScopeUI(class ASolarVehiclePawn* InVehicle, bool bSpectate);
		void ApplyWeaponCrossHairToScope(const struct FVehicleWeaponCrossHairInfo& InCrossHairInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VehicleWholeShieldGCNotify_Actor
	 * Size -> 0x02D8 (FullSize[0x0578] - InheritedSize[0x02A0])
	 */
	class AVehicleWholeShieldGCNotify_Actor : public ASolarVehicleGCNotify_Actor
	{
	public:
		unsigned char                                              TeammateWholeShieldMaterial[0x28];                       // 0x02A0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              NoTeammateWholeShieldMaterial[0x28];                     // 0x02C8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FName                                                StartShieldMaterialParam;                                // 0x02F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRuntimeFloatCurve                                  StartShieldCurve;                                        // 0x02F8(0x0088) Edit, NativeAccessSpecifierPrivate
		class FName                                                ShieldMaterialChangeParam;                               // 0x0380(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<float, float>                                         HighShieldChangeRateToMaterialValue;                     // 0x0388(0x0050) Edit, NativeAccessSpecifierPrivate
		TMap<float, float>                                         LowShieldChangeRateToMaterialValue;                      // 0x03D8(0x0050) Edit, NativeAccessSpecifierPrivate
		class FName                                                SphereParameterName;                                     // 0x0428(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                HitLocaitonParameterName;                                // 0x0430(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRuntimeFloatCurve                                  HitEffectDurationCurve;                                  // 0x0438(0x0088) Edit, NativeAccessSpecifierPrivate
		unsigned char                                              TeammateBulletHitEffect[0x28];                           // 0x04C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              NoTeammateBulletHitEffect[0x28];                         // 0x04E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector                                             BulletHitEffectScale;                                    // 0x0510(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J60S[0x5C];                                  // 0x051C(0x005C) MISSED OFFSET (PADDING)

	public:
		void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, class ASolarCharacter* GetOnPlayer);
		void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, class ASolarCharacter* GetOffPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VerticalFOVComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UVerticalFOVComponent : public UActorComponent
	{
	public:
		float                                                      VerticalFOV;                                             // 0x00B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AspectRatioThreshold;                                    // 0x00B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HorizontalFOV;                                           // 0x00B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3IQW[0xC];                                   // 0x00BC(0x000C) MISSED OFFSET (PADDING)

	public:
		void RefreshHorizontalFOV(class UGameViewportClient* Viewport);
		class UGameViewportClient* GetCurrentViewport();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VibrateConfig
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class UVibrateConfig : public UDataAsset
	{
	public:
		class UDataTable* dataTab;                                                 // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EWeaponVibrateFactor, float>                          WeaponVibrateFactorMap;                                  // 0x0038(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     WeaponDataTabPath;                                       // 0x0088(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VisibilityFlagSettings
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UVisibilityFlagSettings : public UDeveloperSettings
	{
	public:
		struct FGameplayTag                                        DefaultVisibilityFlagTag;                                // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FGameplayTag>                                VisibilityFlagTags;                                      // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		int32_t STATIC_StaticGetVisibilityFlag(const struct FGameplayTag& Tag);
		int32_t GetVisibilityFlag(const struct FGameplayTag& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.VisualSoundConfig
	 * Size -> 0x00B8 (FullSize[0x00E8] - InheritedSize[0x0030])
	 */
	class UVisualSoundConfig : public UDataAsset
	{
	public:
		unsigned char                                              ElemMaxCount;                                            // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UAQK[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VehicleMoveDecidingSpeed;                                // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IgnoredCheckRate;                                        // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IgnoredCheckAngle;                                       // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IgnoredCheckDis_PlayerDefault;                           // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IgnoredCheckDis_VehicleDefault;                          // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, float>                                       IgnoredCheckDis_VehicleMap;                              // 0x0048(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<EBattlePromptType, struct FVisualSoundData>           VisualSoundDataMap;                                      // 0x0098(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WalkWidgetNew
	 * Size -> 0x04F0 (FullSize[0x06D0] - InheritedSize[0x01E0])
	 */
	class UWalkWidgetNew : public USolarJoyStick
	{
	public:
		class FScriptMulticastDelegate                             OnSprintChangeToCenterState;                             // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintIconActive;                                      // 0x01F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintIconHide;                                        // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintLockIconActive;                                  // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartSprintFree;                                       // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTerminateSprintFree;                                   // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSlateBrush                                         JoyStickThumb;                                           // 0x0240(0x0098) Edit, NativeAccessSpecifierPublic
		struct FSlateBrush                                         JoyStickThumbPress;                                      // 0x02D8(0x0098) Edit, NativeAccessSpecifierPublic
		struct FSlateBrush                                         JoyStickBG;                                              // 0x0370(0x0098) Edit, NativeAccessSpecifierPublic
		struct FSlateBrush                                         SprintImage;                                             // 0x0408(0x0098) Edit, NativeAccessSpecifierPublic
		struct FSlateBrush                                         UsedSprintImage;                                         // 0x04A0(0x0098) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSlateBrush                                         SprintImageHovered;                                      // 0x0538(0x0098) Edit, NativeAccessSpecifierPublic
		struct FSlateBrush                                         UsedSprintImageHovered;                                  // 0x05D0(0x0098) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FVector2D                                           SprintSize;                                              // 0x0668(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TriggerDistanceToSprint;                                 // 0x0670(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TriggerDistanceToShowSprint;                             // 0x0674(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShowSprintIconSectorAngle;                               // 0x0678(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShowLockSprintIconSectorAngle;                           // 0x067C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOpenLeftHalfTouch;                                      // 0x0680(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseTouchStartOffset;                                    // 0x0681(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CRYV[0x2];                                   // 0x0682(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           VisualCenter;                                            // 0x0684(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           VisualSize;                                              // 0x068C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           ThumbSize;                                               // 0x0694(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           InputScale;                                              // 0x069C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ActiveOpacity;                                           // 0x06A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InactiveOpacity;                                         // 0x06A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TimeUntilDeactive;                                       // 0x06AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPreventReCenter;                                        // 0x06B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5QO2[0x1F];                                  // 0x06B1(0x001F) MISSED OFFSET (PADDING)

	public:
		void SetSprintToCenterDistance(float Distance);
		void SetNewSprintImageResource(class UObject* NewResource, class UObject* NewHoveredResource);
		void SetNewSprintImage(const struct FSlateBrush& NewImage, const struct FSlateBrush& NewHoveredImage);
		void SetCustomizeVisualInfo(const struct FVector2D& InPosition, float InScale, float InOpacity);
		void SetCanChangeSprintState(bool CanChange);
		void ResetSprintState();
		void ResetSprintImage();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WarmGameHeroPickRule
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UWarmGameHeroPickRule : public UHeroPickRuleBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WarmupMatchManager
	 * Size -> 0x0038 (FullSize[0x0260] - InheritedSize[0x0228])
	 */
	class AWarmupMatchManager : public AGameManagerBase
	{
	public:
		unsigned char                                              UnknownData_FGG2[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             MatchSuccessedDelegate;                                  // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             MatchInterruptDelegate;                                  // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      AutoGoToTargetLevelTime;                                 // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U7ST[0xC];                                   // 0x0254(0x000C) MISSED OFFSET (PADDING)

	public:
		void MatchSuccessed();
		void MatchInterrupt();
		void GotoMatchTargetLevel();
		void AutoGotoMatchTargetLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponAbilityBase
	 * Size -> 0x00A8 (FullSize[0x03B0] - InheritedSize[0x0308])
	 */
	class AWeaponAbilityBase : public ASolarAbility
	{
	public:
		struct FHitResult                                          HitResult;                                               // 0x0308(0x0088) IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		bool                                                       bClientVaild;                                            // 0x0390(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bServerVaild;                                            // 0x0391(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLife;                                                   // 0x0392(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ILAX[0x1];                                   // 0x0393(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LifeTime;                                                // 0x0394(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor* TargetActor;                                             // 0x0398(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BMZS[0x4];                                   // 0x03A0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarWeapon>                         TargetWeapon;                                            // 0x03A4(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ISSK[0x4];                                   // 0x03AC(0x0004) MISSED OFFSET (PADDING)

	public:
		bool HasLife();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponAssistAimWeaponConfig
	 * Size -> 0x02A8 (FullSize[0x02D8] - InheritedSize[0x0030])
	 */
	class UWeaponAssistAimWeaponConfig : public UDataAsset
	{
	public:
		float                                                      MaxTargetDetectionDistance;                              // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PEK3[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBaseFollowSpeedByTag>                       BaseFollowSpeedByTags;                                   // 0x0038(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagRequirements                            TargetVelocityFollowTagRequirements;                     // 0x0048(0x0050) Edit, NativeAccessSpecifierPublic
		float                                                      TargetVelocityFollowDeactivationDelay;                   // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5ICJ[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  TargetVelocityFollowHorizontalRatioCurve;                // 0x00A0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  TargetVelocityFollowVerticalRatioCurve;                  // 0x0128(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      TargetVelocityFollowHorizontalRatioCurveScale;           // 0x01B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetVelocityFollowVerticalRatioCurveScale;             // 0x01B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetVelocityFollowMaxHorizontalSpeed;                  // 0x01B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetVelocityFollowMaxVerticalSpeed;                    // 0x01BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  TargetVelocityFollowRatioScaleByDistanceCurve;           // 0x01C0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  GlobalSensitivityScaleCurve;                             // 0x0248(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      GlobalSensitivityScaleCurveScale;                        // 0x02D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BDUK[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponAssistAimConfig
	 * Size -> 0x0100 (FullSize[0x0130] - InheritedSize[0x0030])
	 */
	class UWeaponAssistAimConfig : public UDataAsset
	{
	public:
		unsigned char                                              AssistAimTargetFlag;                                     // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OL12[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   TargetDetectionBlockTypes;                               // 0x0038(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<EObjectTypeQuery>                                   LockAimingBlockTypes;                                    // 0x0048(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAssistFollow;                                     // 0x0058(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableGlobalSensitivityScale;                           // 0x0059(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TI6J[0x6];                                   // 0x005A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAssistAimWeaponConfigAll                     DefaultAssistAimWeaponConfigAll;                         // 0x0060(0x0060) Edit, NativeAccessSpecifierPublic
		struct FWeaponAssistAimWeaponConfigAll                     DefaultAssistAimWeaponConfigAllGamepad;                  // 0x00C0(0x0060) Edit, NativeAccessSpecifierPublic
		TArray<struct FWeaponAssistAimByCharacterTag>              AssistAimWeaponConfigsByCharacterTag;                    // 0x0120(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponCameraShakePattern
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UWeaponCameraShakePattern : public USolarPattern
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponCameraShakePatternRuntime
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UWeaponCameraShakePatternRuntime : public USolarPatternRuntime
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.NormalCameraShakePattern
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UNormalCameraShakePattern : public UWeaponCameraShakePattern
	{
	public:
		class UClass* ShakeClass;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.NormalCameraShakePatternRuntime
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UNormalCameraShakePatternRuntime : public UWeaponCameraShakePatternRuntime
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CameraShakeWithCurvePattern
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UCameraShakeWithCurvePattern : public UWeaponCameraShakePattern
	{
	public:
		class UClass* ShakeClass;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraShakeWithCurve* ShakeTemplate;                                           // 0x0038(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RandomSeed;                                              // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RandomStep;                                              // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CameraShakeWithCurvePatternRuntime
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UCameraShakeWithCurvePatternRuntime : public UWeaponCameraShakePatternRuntime
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponChosenWidget
	 * Size -> 0x0098 (FullSize[0x03E0] - InheritedSize[0x0348])
	 */
	class UWeaponChosenWidget : public USolarUserWidget
	{
	public:
		class USolarButton* Btn_Select;                                              // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEmpty;                                                  // 0x0350(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSelect;                                                 // 0x0351(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UR3Z[0x8E];                                  // 0x0352(0x008E) MISSED OFFSET (PADDING)

	public:
		void SelectSlot();
		void OnScopeChanged(int32_t InNewScope);
		void K2_OnSelected(bool InbSelected);
		void K2_OnReset();
		void K2_InitWidget(const struct FChooseWeaponItemData& InData);
		EWeaponEquipSlot K2_GetUsedSlot();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponExtraAttributeSet
	 * Size -> 0x00D0 (FullSize[0x0100] - InheritedSize[0x0030])
	 */
	class UWeaponExtraAttributeSet : public USolarAttributeSet
	{
	public:
		struct FGameplayAttributeData                              ExtraARMag;                                              // 0x0030(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ExtraSMGMag;                                             // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ExtraSGMag;                                              // 0x0050(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ExtraSRMag;                                              // 0x0060(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ARLoadSpeedMultiple;                                     // 0x0070(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SMGLoadSpeedMultiple;                                    // 0x0080(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SGLoadSpeedMultiple;                                     // 0x0090(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SRLoadSpeedMultiple;                                     // 0x00A0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              ARHeadshotDamageMultiple;                                // 0x00B0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SMGHeadshotDamageMultiple;                               // 0x00C0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SGHeadshotDamageMultiple;                                // 0x00D0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              SRHeadshotDamageMultiple;                                // 0x00E0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGameplayAttributeData                              WeaponSkillCDMultiple;                                   // 0x00F0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected

	public:
		void OnRep_WeaponSkillCDMultiple(const struct FGameplayAttributeData& OldValue);
		void OnRep_SRLoadSpeedMultiple(const struct FGameplayAttributeData& OldValue);
		void OnRep_SMGLoadSpeedMultiple(const struct FGameplayAttributeData& OldValue);
		void OnRep_SGLoadSpeedMultiple(const struct FGameplayAttributeData& OldValue);
		void OnRep_ExtraSRMag(const struct FGameplayAttributeData& OldValue);
		void OnRep_ExtraSMGMag(const struct FGameplayAttributeData& OldValue);
		void OnRep_ExtraSGMag(const struct FGameplayAttributeData& OldValue);
		void OnRep_ExtraARMag(const struct FGameplayAttributeData& OldValue);
		void OnRep_ARLoadSpeedMultiple(const struct FGameplayAttributeData& OldValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponGrowthManager
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UWeaponGrowthManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_N1J7[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		class FString GetWeaponBpPath(int32_t ID);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponHitAbility
	 * Size -> 0x0000 (FullSize[0x03B0] - InheritedSize[0x03B0])
	 */
	class AWeaponHitAbility : public AWeaponAbilityBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSkinData
	 * Size -> 0x01F0 (FullSize[0x0220] - InheritedSize[0x0030])
	 */
	class UWeaponSkinData : public UDataAsset
	{
	public:
		EWeaponSkinType                                            WeaponSkinType;                                          // 0x0030(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PNG3[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponBodyData                                     WeaponData;                                              // 0x0038(0x00B0) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TArray<struct FWeaponSkinPartData>                         WeaponBarMap;                                            // 0x00E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       WeaponBarLocked;                                         // 0x00F8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ULCJ[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWeaponSkinPartData>                         WeaponClipMap;                                           // 0x0100(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       WeaponClipLocked;                                        // 0x0110(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CAPM[0x7];                                   // 0x0111(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWeaponSkinPartData>                         WeaponGripMap;                                           // 0x0118(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       WeaponGripLocked;                                        // 0x0128(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseGripIkSocket;                                        // 0x0129(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KFSS[0x6];                                   // 0x012A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWeaponSkinPartData>                         WeaponScopeMap;                                          // 0x0130(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       WeaponScopeLocked;                                       // 0x0140(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VZ9Z[0x7];                                   // 0x0141(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWeaponSkinPartData>                         WeaponStockMap;                                          // 0x0148(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       WeaponStockLocked;                                       // 0x0158(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VDBC[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* DedicatedBulletEffect;                                   // 0x0160(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* DedicatedSkillEffect;                                    // 0x0168(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      DedicatedBulletEffectPath;                               // 0x0170(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      DedicatedSkillEffectPath;                                // 0x0188(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem* DedicatedKillEffect;                                     // 0x01A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DedicatedKillEffectPath;                                 // 0x01A8(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DedicatedSpecialEffectPath;                              // 0x01C0(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass* DedicatedDissolvedDeathActorEffect;                      // 0x01D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DedicatedDissolvedDeathFXPath;                           // 0x01E0(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayAudioEventName;                                      // 0x01F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              StopAudioEventName;                                      // 0x0208(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence* OutsideAnimation;                                        // 0x0218(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ModifyResPath();
		bool IsMeshReplace();
		bool GetPartLockedInfoByType(EWeaponPartType PartType);
		bool GetPartDataArrayByType(EWeaponPartType PartType, TArray<struct FWeaponSkinPartData>* PartDataMap);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartStaticMeshComponent
	 * Size -> 0x0000 (FullSize[0x0600] - InheritedSize[0x0600])
	 */
	class UWeaponPartStaticMeshComponent : public UStaticMeshComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartComp
	 * Size -> 0x00C0 (FullSize[0x06C0] - InheritedSize[0x0600])
	 */
	class UWeaponPartComp : public UWeaponPartStaticMeshComponent
	{
	public:
		int32_t                                                    PartID;                                                  // 0x0600(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_58AB[0x4];                                   // 0x0604(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponPartDataAsset* PartDataAsset;                                           // 0x0608(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RECK[0xB0];                                  // 0x0610(0x00B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartClipComp
	 * Size -> 0x0000 (FullSize[0x06C0] - InheritedSize[0x06C0])
	 */
	class UWeaponPartClipComp : public UWeaponPartComp
	{
	public:
		bool IsSupportExtract();
		struct FRotator GetHandRotOffset();
		struct FVector GetHandLocOffset();
		float GetDropLifeSpan();
		class FName GetCharacterHandSocket();
		class FName GetCharacterHandInverseSocket();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartDataAsset
	 * Size -> 0x00E8 (FullSize[0x0118] - InheritedSize[0x0030])
	 */
	class UWeaponPartDataAsset : public UDataAsset
	{
	public:
		bool                                                       bOnlyData;                                               // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J6LM[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            OnlyDataForWeaponSkinIDArray;                            // 0x0038(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ViewStaticMeshPath;                                      // 0x0048(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTransform                                          PreviewTransform;                                        // 0x0060(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     FightStaticMeshPath;                                     // 0x0090(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     PartIcon;                                                // 0x00A8(0x0018) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<int32_t, struct FVector>                              SpecificScaleMap;                                        // 0x00C0(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class UWeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig;                                   // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartClipDataAsset
	 * Size -> 0x0038 (FullSize[0x0150] - InheritedSize[0x0118])
	 */
	class UWeaponPartClipDataAsset : public UWeaponPartDataAsset
	{
	public:
		unsigned char                                              UnknownData_ZCC8[0x4];                                   // 0x0118(0x0004) Fix Super Size
		struct FVector                                             HandLocOffsetVector;                                     // 0x011C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            HandRotOffsetRotator;                                    // 0x0128(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      DropLifeSpan;                                            // 0x0134(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CharacterHandSocket;                                     // 0x0138(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CharacterHandInverseSocket;                              // 0x0140(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ATMB[0x8];                                   // 0x0148(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartWeaponAttributeDataAsset
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UWeaponPartWeaponAttributeDataAsset : public UDataAsset
	{
	public:
		struct FWeaponAttributeModifierContainer                   AttributeModifiers;                                      // 0x0030(0x0010) Edit, NativeAccessSpecifierPublic
		TArray<struct FWeaponPartWeaponAttributeByWeaponType>      ModifiersByWeaponType;                                   // 0x0040(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartGripComp
	 * Size -> 0x0000 (FullSize[0x06C0] - InheritedSize[0x06C0])
	 */
	class UWeaponPartGripComp : public UWeaponPartComp
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartGripDataAsset
	 * Size -> 0x0058 (FullSize[0x0170] - InheritedSize[0x0118])
	 */
	class UWeaponPartGripDataAsset : public UWeaponPartDataAsset
	{
	public:
		TMap<ECharacterBodyScaleType, struct FWeaponPartGripDataForCharacter> DataForCharacterMap;                                     // 0x0118(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ERXP[0x8];                                   // 0x0168(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartGunStockComp
	 * Size -> 0x0000 (FullSize[0x06C0] - InheritedSize[0x06C0])
	 */
	class UWeaponPartGunStockComp : public UWeaponPartComp
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartGunStockDataAsset
	 * Size -> 0x0008 (FullSize[0x0120] - InheritedSize[0x0118])
	 */
	class UWeaponPartGunStockDataAsset : public UWeaponPartDataAsset
	{
	public:
		unsigned char                                              UnknownData_ZSLD[0x8];                                   // 0x0118(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartMuzzleComp
	 * Size -> 0x0000 (FullSize[0x06C0] - InheritedSize[0x06C0])
	 */
	class UWeaponPartMuzzleComp : public UWeaponPartComp
	{
	public:
		bool HasSilencer();
		bool HasFlameArrester();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartMuzzleDataAsset
	 * Size -> 0x0008 (FullSize[0x0120] - InheritedSize[0x0118])
	 */
	class UWeaponPartMuzzleDataAsset : public UWeaponPartDataAsset
	{
	public:
		unsigned char                                              UnknownData_354W[0x8];                                   // 0x0118(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartsComponent
	 * Size -> 0x0098 (FullSize[0x0148] - InheritedSize[0x00B0])
	 */
	class UWeaponPartsComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_AB8Q[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponPartScopeComp* ScopeComp;                                               // 0x00C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponPartClipComp* ClipComp;                                                // 0x00D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponPartMuzzleComp* MuzzleComp;                                              // 0x00D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponPartGripComp* GripComp;                                                // 0x00E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponPartGunStockComp* GunStockComp;                                            // 0x00E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* CrossHairPlane;                                          // 0x00F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent* RedCrosshairPanel;                                       // 0x00F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bQuickScope;                                             // 0x0100(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GJS9[0x3];                                   // 0x0101(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ScopeSocket;                                             // 0x0104(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                GripSocket;                                              // 0x010C(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ClipSocket;                                              // 0x0114(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                OldClipSocket;                                           // 0x011C(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                MuzzleSocket;                                            // 0x0124(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                GunStockSocket;                                          // 0x012C(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9IKT[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarWeapon* MyWeaponActor;                                           // 0x0138(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NT2S[0x8];                                   // 0x0140(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateSinglePartHoldView(class UWeaponPartComp* PartComp, bool bLocal);
		void ShowParts(bool Show, EWeaponPartVisibilityChangeFlag Flag);
		bool IsPartExist(int32_t ID);
		bool IsDefaultPart(int32_t PartID);
		bool IsAmmoExist(int32_t ID);
		TArray<class UWeaponPartComp*> GetValidWeaponParts();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartScopeComp
	 * Size -> 0x0150 (FullSize[0x0810] - InheritedSize[0x06C0])
	 */
	class UWeaponPartScopeComp : public UWeaponPartComp
	{
	public:
		bool                                                       bOpen;                                                   // 0x06C0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WAOK[0x3];                                   // 0x06C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FovValue;                                                // 0x06C4(0x0004) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HipToAdsTime;                                            // 0x06C8(0x0004) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G27G[0x4];                                   // 0x06CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat* FovChangeCurve;                                          // 0x06D0(0x0008) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitEffectScale;                                          // 0x06D8(0x0004) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZMNB[0x104];                                 // 0x06DC(0x0104) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstance* ScopeCrossHairMaterial;                                  // 0x07E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh* ScopeCrossHairMesh;                                      // 0x07E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstance* ScopeEnemyMakerMaterial;                                 // 0x07F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh* ScopeEnemyMakerMesh;                                     // 0x07F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh* ScopeMeshForFPP;                                         // 0x0800(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh* ScopeMeshForTPP;                                         // 0x0808(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OpenScope(float Time);
		bool IsOpened();
		EWeaponScopeType GetScopeType();
		struct FVector GetScopeAimCenterPoint();
		struct FRotator GetFPPRotation();
		struct FVector GetFPPLocation();
		float GetDistanceToEyeWhenScope();
		void CloseScope();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponPartScopeDataAsset
	 * Size -> 0x01D8 (FullSize[0x02F0] - InheritedSize[0x0118])
	 */
	class UWeaponPartScopeDataAsset : public UWeaponPartDataAsset
	{
	public:
		unsigned char                                              UnknownData_EE05[0x4];                                   // 0x0118(0x0004) Fix Super Size
		struct FVector                                             FPPLocation;                                             // 0x011C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            FPPRotation;                                             // 0x0128(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      DistanceToEyeWhenScope;                                  // 0x0134(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShoulderShootChangeScale;                               // 0x0138(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SOWW[0x3];                                   // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShoulderShootChangeScale;                                // 0x013C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CrosshairSocketName;                                     // 0x0140(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     LodXMeshPath;                                            // 0x0148(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ScopeCrossHairMaterialPath;                              // 0x0160(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ScopeCrossHairMeshPath;                                  // 0x0178(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bVibration;                                              // 0x0190(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TUFL[0x7];                                   // 0x0191(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FPartScopeCorrect>                    CorrectMapData;                                          // 0x0198(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TMap<int32_t, struct FPartScopeCorrect>                    FPPMapForWeaponSkin;                                     // 0x01E8(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FSolarAmmoMeshData                                  AmmoMeshData;                                            // 0x0238(0x0048) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bEnableEnemyMaker;                                       // 0x0280(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YM6X[0xF];                                   // 0x0281(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          EnemyMakerRelativeTransform;                             // 0x0290(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ScopeCrossHairRedPointMaterialPath;                      // 0x02C0(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     ScopeCrossHairRedPointMeshPath;                          // 0x02D8(0x0018) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RecoverableRecoilPattern
	 * Size -> 0x01D8 (FullSize[0x0210] - InheritedSize[0x0038])
	 */
	class URecoverableRecoilPattern : public USolarIncreaseAndDecreasePattern
	{
	public:
		bool                                                       bLimitMaxOffset;                                         // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3DQY[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             MaxOffset;                                               // 0x003C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLimitRecoveryStopOffset;                                // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CDGV[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             RecoveryStopOffset;                                      // 0x004C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IncreaseTime;                                            // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QBFN[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  IncreaseCurve;                                           // 0x0060(0x0088) Edit, NativeAccessSpecifierPublic
		struct FWeaponRecoilVectorGenerator                        OffsetGenerator;                                         // 0x00E8(0x0018) Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  DecreaseTimeCurve;                                       // 0x0100(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  DecreaseRatioCurve;                                      // 0x0188(0x0088) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RecoverableRecoilPatternRuntime
	 * Size -> 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
	 */
	class URecoverableRecoilPatternRuntime : public USolarIncreaseAndDecreasePatternRuntime
	{
	public:
		unsigned char                                              UnknownData_K3UX[0x38];                                  // 0x0050(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponRecoilPattern
	 * Size -> 0x0010 (FullSize[0x0220] - InheritedSize[0x0210])
	 */
	class UWeaponRecoilPattern : public URecoverableRecoilPattern
	{
	public:
		bool                                                       bEnableRecoveryCorrection;                               // 0x0210(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2X8V[0x3];                                   // 0x0211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRangeFloat                                         HoriRecoveryRangeWithCorrection;                         // 0x0214(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A10F[0x4];                                   // 0x021C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponRecoilPatternRuntime
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class UWeaponRecoilPatternRuntime : public URecoverableRecoilPatternRuntime
	{
	public:
		unsigned char                                              UnknownData_8LG1[0x10];                                  // 0x0088(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponTPPKickPattern
	 * Size -> 0x00E0 (FullSize[0x0118] - InheritedSize[0x0038])
	 */
	class UWeaponTPPKickPattern : public USolarIncreaseAndDecreasePattern
	{
	public:
		struct FVector                                             MaxOffset;                                               // 0x0038(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IncreaseTime;                                            // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveVector* IncreaseCurve;                                           // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FWeaponRecoilVectorGenerator                        OffsetGenerator;                                         // 0x0050(0x0018) Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		float                                                      DecreaseTime;                                            // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1L4E[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  DecreaseRatioCurve;                                      // 0x0070(0x0088) Edit, NativeAccessSpecifierPublic
		class UCurveVector* DecreaseOffsetCurve;                                     // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FWeaponRecoilVectorGenerator                        DecreaseOffsetGenerator;                                 // 0x0100(0x0018) Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponTPPKickPatternRuntime
	 * Size -> 0x0030 (FullSize[0x0080] - InheritedSize[0x0050])
	 */
	class UWeaponTPPKickPatternRuntime : public USolarIncreaseAndDecreasePatternRuntime
	{
	public:
		unsigned char                                              UnknownData_W57V[0x30];                                  // 0x0050(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponGunKickPattern
	 * Size -> 0x0230 (FullSize[0x0268] - InheritedSize[0x0038])
	 */
	class UWeaponGunKickPattern : public USolarIncreaseAndDecreasePattern
	{
	public:
		struct FValueCurveBySprayingTime                           SprayingOffset;                                          // 0x0038(0x0018) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FValueCurveBySprayingTime                           SprayingRotation;                                        // 0x0050(0x0018) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      SprayingRestartSmoothTime;                               // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprayingRecoveryTime;                                    // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SprayingRecoveryRatioCurve;                              // 0x0070(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      IncreaseTime;                                            // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X0TS[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  IncreaseCurve;                                           // 0x0100(0x0088) Edit, NativeAccessSpecifierPublic
		struct FVector                                             MaxOffset;                                               // 0x0188(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CUM9[0x4];                                   // 0x0194(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponRecoilVectorGenerator                        OffsetGenerator;                                         // 0x0198(0x0018) Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FRotator                                            MaxRotation;                                             // 0x01B0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MVDG[0x4];                                   // 0x01BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponRecoilRotatorGenerator                       RotationGenerator;                                       // 0x01C0(0x0018) Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		float                                                      DecreaseTime;                                            // 0x01D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UYBV[0x4];                                   // 0x01DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  DecreaseRatioCurve;                                      // 0x01E0(0x0088) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponGunKickPatternRuntime
	 * Size -> 0x0088 (FullSize[0x00D8] - InheritedSize[0x0050])
	 */
	class UWeaponGunKickPatternRuntime : public USolarIncreaseAndDecreasePatternRuntime
	{
	public:
		unsigned char                                              UnknownData_M9IN[0x88];                                  // 0x0050(0x0088) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponRecoilValueGenerator
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UWeaponRecoilValueGenerator : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.ConstantValueGenerator
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UConstantValueGenerator : public UWeaponRecoilValueGenerator
	{
	public:
		float                                                      Value;                                                   // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M6B6[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RandomRangeValueGenerator
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class URandomRangeValueGenerator : public UWeaponRecoilValueGenerator
	{
	public:
		struct FSymmetricRangeFloat                                ValueRange;                                              // 0x0028(0x000C) Edit, NoDestructor, NativeAccessSpecifierPrivate
		int32_t                                                    RandomSeed;                                              // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    RandomStep;                                              // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UITB[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.RandomByPerlinNoiseValueGenerator
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class URandomByPerlinNoiseValueGenerator : public UWeaponRecoilValueGenerator
	{
	public:
		struct FSymmetricRangeFloat                                ValueRange;                                              // 0x0028(0x000C) Edit, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      NoiseBase;                                               // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      NoiseFrequency;                                          // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XCGE[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.FixedCurveValueGenerator
	 * Size -> 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
	 */
	class UFixedCurveValueGenerator : public UWeaponRecoilValueGenerator
	{
	public:
		struct FRuntimeFloatCurve                                  ValueCurve;                                              // 0x0028(0x0088) Edit, NativeAccessSpecifierPrivate
		float                                                      ValueScale;                                              // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EFixedValueMode                                            ValueMode;                                               // 0x00B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MPZW[0x3];                                   // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RepeatStartIndex;                                        // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3MBZ[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.FixedCurveValueByIndexGenerator
	 * Size -> 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
	 */
	class UFixedCurveValueByIndexGenerator : public UWeaponRecoilValueGenerator
	{
	public:
		struct FRuntimeFloatCurve                                  ValueCurve;                                              // 0x0028(0x0088) Edit, NativeAccessSpecifierPrivate
		float                                                      ValueScale;                                              // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EFixedValueMode                                            ValueMode;                                               // 0x00B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bRepeatable;                                             // 0x00B5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6J95[0x2];                                   // 0x00B6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RepeatStartIndex;                                        // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QRVD[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.FixedPointsValueGenerator
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFixedPointsValueGenerator : public UWeaponRecoilValueGenerator
	{
	public:
		TArray<float>                                              Values;                                                  // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ValueScale;                                              // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EFixedValueMode                                            ValueMode;                                               // 0x003C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C9AI[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RepeatStartIndex;                                        // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_895M[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.FixedSectionValueGenerator
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFixedSectionValueGenerator : public UWeaponRecoilValueGenerator
	{
	public:
		TArray<struct FFixedSectionInfo>                           Sections;                                                // 0x0028(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    RepeatStartIndex;                                        // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QJKG[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.CompositeValueGenerator
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UCompositeValueGenerator : public UWeaponRecoilValueGenerator
	{
	public:
		TArray<class UWeaponRecoilValueGenerator*>                 Generators;                                              // 0x0028(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponryPartBase
	 * Size -> 0x0090 (FullSize[0x07C0] - InheritedSize[0x0730])
	 */
	class UWeaponryPartBase : public USwitchEffectStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_WJWJ[0x8];                                   // 0x0730(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PartID;                                                  // 0x0738(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDataAssetInit;                                          // 0x073C(0x0001) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMeshAssetsInit;                                         // 0x073D(0x0001) Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L1QD[0x2];                                   // 0x073E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftObjectPath                                     AssetPath;                                               // 0x0740(0x0018) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponPartDataAsset* OrginDataAsset;                                          // 0x0758(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponPartDataAsset* SkinPartDataAsset;                                       // 0x0760(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh* MyStaticMesh;                                            // 0x0768(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponSkinData* WeaponSkin;                                              // 0x0770(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FWeaponSkinPartData                                 SkinMatchedPartData;                                     // 0x0778(0x0040) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LGXB[0x8];                                   // 0x07B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ResetSkin(bool bShowHDMesh);
		void RefreshSpecificScale();
		void PartUninstall(int32_t ID);
		void PartInitialize(int32_t ID, bool bShowHDMesh, bool bDefault);
		void OnInitMeshAssets();
		void OnInitDataAsset();
		bool IsValidPart();
		bool HasInitialized();
		TArray<struct FSoftObjectPath> GetSkinNeedLoadAssets(class UWeaponSkinData* SkinData, bool bShowHDMesh);
		EWeaponPartType GetPartType();
		int32_t GetPartID();
		TArray<struct FSoftObjectPath> GetClientNeedLoadMesh(bool bShowHDMesh);
		TArray<struct FSoftObjectPath> GetClientNeedLoadAssets(bool bShowHDMesh);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponryPartClip
	 * Size -> 0x0000 (FullSize[0x07C0] - InheritedSize[0x07C0])
	 */
	class UWeaponryPartClip : public UWeaponryPartBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponryPartComponent
	 * Size -> 0x0060 (FullSize[0x0110] - InheritedSize[0x00B0])
	 */
	class UWeaponryPartComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ENEJ[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponryPartScope* ScopeComp;                                               // 0x00B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponryPartClip* ClipComp;                                                // 0x00C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponryPartMuzzle* MuzzleComp;                                              // 0x00C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponryPartGrip* GripComp;                                                // 0x00D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponryPartGunStock* GunStockComp;                                            // 0x00D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ScopeSocket;                                             // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                GripSocket;                                              // 0x00E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ClipSocket;                                              // 0x00F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                MuzzleSocket;                                            // 0x00F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                GunStockSocket;                                          // 0x0100(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AWeaponryWeapon* MyWeaponActor;                                           // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateSkin(class UWeaponSkinData* SkinData, bool bShowHDMesh);
		void UninstallWeaponPart(int32_t PartID);
		bool SinglePartHasInitilized(class UWeaponryPartBase* part);
		void ShowParts(bool Show);
		void SetSinglePartSkin(class UWeaponryPartBase* part, class UWeaponSkinData* SkinData);
		void ResetSkin(bool bShowHDMesh);
		bool ReplaceWeaponPart(int32_t PartID, bool bReplaceRoute);
		bool IsPartExist(int32_t ID);
		void InitDefaultParts(bool bShowHDMesh);
		bool HasInitilizeFinish();
		int32_t GetPartsTypeByID(int32_t ID);
		void AttachToRightSocket(class UWeaponryPartBase* PartComp);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponryPartGrip
	 * Size -> 0x0000 (FullSize[0x07C0] - InheritedSize[0x07C0])
	 */
	class UWeaponryPartGrip : public UWeaponryPartBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponryPartGunStock
	 * Size -> 0x0000 (FullSize[0x07C0] - InheritedSize[0x07C0])
	 */
	class UWeaponryPartGunStock : public UWeaponryPartBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponryPartMuzzle
	 * Size -> 0x0000 (FullSize[0x07C0] - InheritedSize[0x07C0])
	 */
	class UWeaponryPartMuzzle : public UWeaponryPartBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponryPartScope
	 * Size -> 0x0000 (FullSize[0x07C0] - InheritedSize[0x07C0])
	 */
	class UWeaponryPartScope : public UWeaponryPartBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponrySkinComponent
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UWeaponrySkinComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_G7L9[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponSkinData* SkinDataAsset;                                           // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AWeaponryWeapon* MyWeapon;                                                // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UWeaponSkinData* GetSkinData();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponryWeapon
	 * Size -> 0x0438 (FullSize[0x0660] - InheritedSize[0x0228])
	 */
	class AWeaponryWeapon : public AActor
	{
	public:
		unsigned char                                              UnknownData_VV7E[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          PreviewTransform;                                        // 0x0230(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ScoOffsetTransform;                                      // 0x0260(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          StoOffsetTransform;                                      // 0x0290(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          GriOffsetTransform;                                      // 0x02C0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          BarOffsetTransform;                                      // 0x02F0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          CliOffsetTransform;                                      // 0x0320(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          ShopPreviewTransform;                                    // 0x0350(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          BattlePassPreviewTransform;                              // 0x0380(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          GetRewardTransform;                                      // 0x03B0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          GrowTaskTransform;                                       // 0x03E0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          LuckDrawTransform;                                       // 0x0410(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          CarouselDrawTransform;                                   // 0x0440(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          SupplyBoxDetailTransform;                                // 0x0470(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          SupplyBoxRaffleTransform;                                // 0x04A0(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class USingleWeaponConfig* Config;                                                  // 0x04D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent* Mesh;                                                    // 0x04D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HUCA[0x1C];                                  // 0x04E0(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    weaponid;                                                // 0x04FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSoftObjectPath                                     FightMeshPath;                                           // 0x0500(0x0018) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent* SkinSpecialEffect;                                       // 0x0518(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponryPartComponent* WeaponPartComponent;                                     // 0x0520(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponrySkinComponent* WeaponSkinComponent;                                     // 0x0528(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              DissolveCurvePath[0x28];                                 // 0x0530(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DissolveMatPath[0x28];                                   // 0x0558(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FresnelCurvePath[0x28];                                  // 0x0580(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              FresnelMatPath[0x28];                                    // 0x05A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              SwitchParticleEffectPath[0x28];                          // 0x05D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_IM16[0x8];                                   // 0x05F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwitchEffectInterval;                                    // 0x0600(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SelfDelayShowSeconds;                                    // 0x0604(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSwitchEffectInfo                                   DissolveEffectInfo;                                      // 0x0608(0x0018) ContainsInstancedReference, NativeAccessSpecifierPrivate
		struct FSwitchEffectInfo                                   FresnelEffectInfo;                                       // 0x0620(0x0018) ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YUC9[0x28];                                  // 0x0638(0x0028) MISSED OFFSET (PADDING)

	public:
		void TransformToMirror(const struct FTransform& OriginalTransform);
		void StopTweenImmediately(const struct FVector& DestPos);
		void SetWeaponSkin(class UWeaponSkinData* SkinData);
		void SetWeaponMeshVisibility(bool bIsVisible);
		void SetWeaponMesh(class USkeletalMesh* NewMesh, bool bWithSwitchEffect);
		void SetIsDownloadHDModel(bool InValue);
		void ResetSkinSpecialEffect();
		void ResetMaterial();
		void PostUpdateAppearance();
		void PlaySwitchEffect();
		void OnWeaponSkinRefresh(bool bValid, int32_t SkinId);
		void OnWeaponDataInitComplete();
		void MoveToSpecifiedPos(const struct FVector& DestPos, bool IsDecMode, float BaseValue, float CurveValue);
		class UParticleSystemComponent* InternalPlayEffectAttached(class UParticleSystem* PS, class USceneComponent* AttachToComponent, const class FName& AttachPointName, const struct FAttachedEffectParam& Param);
		void InitWeaponConfig(int32_t weaponid, const struct FVector& DefaultLoc);
		int32_t GetWeaponID();
		TArray<struct FSoftObjectPath> GetSkinNeedLoadAssets(class UWeaponSkinData* SkinData, bool bLoadHDMesh);
		bool GetIsDownloadHDModel();
		class USingleWeaponConfig* GetCurrentConfig();
		void EnqueueUpdateAppearanceCmd(unsigned char Cmd, const class FString& Params);
		void EmptyMeshOverrideMaterials();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponScanAbility
	 * Size -> 0x0070 (FullSize[0x0498] - InheritedSize[0x0428])
	 */
	class UWeaponScanAbility : public USolarWeaponGameplayAbility
	{
	public:
		class UClass* RadarClass;                                              // 0x0428(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarRadarBase* SpawnedRadar;                                            // 0x0430(0x0008) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EffectRadius;                                            // 0x0438(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayDisplayTime;                                        // 0x043C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* ExecuteAnimMontage;                                      // 0x0440(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage* ExecuteAnimMontageWithWeapon;                            // 0x0448(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bExecuteAnimMontageByWeaponStatus;                       // 0x0450(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWaitMontageNotifyToSpawnRadar;                          // 0x0451(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CNWJ[0x2];                                   // 0x0452(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SpawnRadarMontageNotify;                                 // 0x0454(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWaitExecuteAnimCompletedSpawnRader;                     // 0x045C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G0YM[0x3];                                   // 0x045D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* WaitSpawnGameplayEffect;                                 // 0x0460(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FActiveGameplayEffectHandle                         ActiveWaitSpawnEffectHandle;                             // 0x0468(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* EffectUser;                                              // 0x0470(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SXJC[0x10];                                  // 0x0478(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               InstigatorCache;                                         // 0x0488(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MXRJ[0x8];                                   // 0x0490(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnRadar();
		void RemoveWaitSpawnEffect();
		void OnMontageNotify(const class FName& NotifyName);
		void OnExecuteAnimationCompleted();
		void OnCharacterReset();
		void AddWaitSpawnEffect();
		void ActiveRader();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponScopeSliderWidget
	 * Size -> 0x0058 (FullSize[0x03A0] - InheritedSize[0x0348])
	 */
	class UWeaponScopeSliderWidget : public USolarUserWidget
	{
	public:
		TArray<struct FScopeSliderData>                            ScopeSliderDatas;                                        // 0x0348(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ScopeSliderType;                                         // 0x0358(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SliderAnimPlaySpeed;                                     // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SliderValueScale;                                        // 0x0360(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M9SK[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USlider* Slider_ADS;                                              // 0x0368(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Scope;                                               // 0x0370(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Type0;                                              // 0x0378(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Anim_Type1;                                              // 0x0380(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* AnimToPlay;                                              // 0x0388(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MUCN[0x10];                                  // 0x0390(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetSliderDisplay(bool bSkipAnimation);
		void OnSliderValueChangedOnPC(float InValue);
		void OnSliderValueChanged(float InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponShootConfig
	 * Size -> 0x0400 (FullSize[0x0430] - InheritedSize[0x0030])
	 */
	class UWeaponShootConfig : public UDataAsset
	{
	public:
		bool                                                       bEnableNewSpread;                                        // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableNewRecoil;                                        // 0x0031(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableNewWeaponAnim;                                    // 0x0032(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableNewCameraShake;                                   // 0x0033(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShootOriginRange;                                        // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StandardShootDistance;                                   // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RotationPivot;                                           // 0x003C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EWeaponScopeType, struct FVector>                     RotationPivotMap;                                        // 0x0048(0x0050) Edit, NativeAccessSpecifierPublic
		float                                                      BaseSpread;                                              // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5WL3[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SpreadDistributionCurve;                                 // 0x00A0(0x0088) Edit, NativeAccessSpecifierPublic
		float                                                      AverageSpreadDistribution;                               // 0x0128(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XHJB[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  VisualSpreadScaleCurve;                                  // 0x0130(0x0088) Edit, NativeAccessSpecifierPublic
		TArray<struct FWeaponAttributeModifiersByTag>              ModifiersByOwnerTag;                                     // 0x01B8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESprayingRecoveryMode                                      SprayingRecoveryMode;                                    // 0x01C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LWZN[0x7];                                   // 0x01C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SprayingRecoveryCurve;                                   // 0x01D0(0x0088) Edit, NativeAccessSpecifierPublic
		class UWeaponSpreadPattern* SpreadPattern;                                           // 0x0258(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponRecoilPattern* RecoilPattern;                                           // 0x0260(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace* TPPKickAnimBlendSpace;                                   // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TPPKickBlendSpaceMaxValue;                               // 0x0270(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9A54[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponTPPKickPattern* TPPKickPattern;                                          // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EWeaponScopeType, float>                              RecoilHoriRecRangeWithCoScaleMap;                        // 0x0288(0x0050) Edit, NativeAccessSpecifierPublic
		class UWeaponGunKickPattern* GunKickPattern;                                          // 0x02D8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EWeaponScopeType, struct FGunKickScale>               GunKickScaleMap;                                         // 0x02E0(0x0050) Edit, NativeAccessSpecifierPublic
		bool                                                       bEnableEndShake;                                         // 0x0330(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bStopEndShakeOnShot;                                     // 0x0331(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H4VP[0x6];                                   // 0x0332(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveVector* EndShakeOffsetCurve;                                     // 0x0338(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveVector* EndShakeRotationCurve;                                   // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat* EndShakeScaleBySpeedCurve;                               // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveVector* EndShakeScaleByVelocityCurve;                            // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkewOffsetSmoothSpeed;                                   // 0x0358(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkewRotationSmoothSpeed;                                 // 0x035C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FWeaponSkewAdjustment>                       SkewAdjustments;                                         // 0x0360(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCrossHairShootConfig                               DefaultCrossHairConfig;                                  // 0x0370(0x0010) Edit, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TMap<EWeaponScopeType, struct FCrossHairShootConfig>       CrossHairConfigMap;                                      // 0x0380(0x0050) Edit, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UWeaponCameraShakePattern* ShakePatternOnShot;                                      // 0x03D0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponCameraShakePattern* ShakePatternOnScopeShot;                                 // 0x03D8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<EWeaponScopeType, float>                              ShakeScaleMapOnScopeShot;                                // 0x03E0(0x0050) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSpreadAndRecoil
	 * Size -> 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
	 */
	class UWeaponSpreadAndRecoil : public UObject
	{
	public:
		class ASolarWeapon* Weapon;                                                  // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TKAF[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponSpreadPatternRuntime* SpreadPattern;                                           // 0x0038(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UWeaponRecoilPatternRuntime* RecoilPattern;                                           // 0x0040(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UWeaponTPPKickPatternRuntime* TPPKickPattern;                                          // 0x0048(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UWeaponGunKickPatternRuntime* GunKickPattern;                                          // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class URecoverableRecoilPatternRuntime* CrossHairKickPattern;                                    // 0x0058(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UWeaponCameraShakePatternRuntime* ShakePatternOnShot;                                      // 0x0060(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UWeaponCameraShakePatternRuntime* ShakePatternOnScopeShot;                                 // 0x0068(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7UZR[0xD0];                                  // 0x0070(0x00D0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSpreadPattern
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UWeaponSpreadPattern : public USolarPattern
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSpreadPatternRuntime
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UWeaponSpreadPatternRuntime : public USolarPatternRuntime
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SimpleSpreadPattern
	 * Size -> 0x01C0 (FullSize[0x01F0] - InheritedSize[0x0030])
	 */
	class USimpleSpreadPattern : public UWeaponSpreadPattern
	{
	public:
		TArray<struct FWeaponAttributeParam>                       SpreadModifiers;                                         // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpreadScaleIncreaseTime;                                 // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VJ8V[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  SpreadScaleIncreaseCurve;                                // 0x0048(0x0088) Edit, NativeAccessSpecifierPublic
		TArray<struct FSpreadScaleIncrease>                        SpreadScaleIncreases;                                    // 0x00D0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SpreadScaleDecreaseTimeCurve;                            // 0x00E0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SpreadScaleDecreaseRatioCurve;                           // 0x0168(0x0088) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.SimpleSpreadPatternRuntime
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USimpleSpreadPatternRuntime : public UWeaponSpreadPatternRuntime
	{
	public:
		unsigned char                                              UnknownData_OECV[0x38];                                  // 0x0030(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSystemAssistAim
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UWeaponSystemAssistAim : public UObject
	{
	public:
		unsigned char                                              UnknownData_CB02[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponAssistAimWeaponConfig* CurrentAssistAimWpnCfg;                                  // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1IB2[0x20];                                  // 0x0058(0x0020) MISSED OFFSET (PADDING)

	public:
		void RefreshCurrentWeapon(class ASolarWeapon* Weapon);
		bool Init(class AActor* InWeaponHolder);
		bool GetActive();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSystemAutoFire
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UWeaponSystemAutoFire : public UObject
	{
	public:
		unsigned char                                              UnknownData_DFO6[0x80];                                  // 0x0028(0x0080) MISSED OFFSET (PADDING)

	public:
		void OnWeaponFire();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSystemBase
	 * Size -> 0x00D0 (FullSize[0x0180] - InheritedSize[0x00B0])
	 */
	class UWeaponSystemBase : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_RAD3[0x48];                                  // 0x00B0(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponSystemAutoFire* WeaponSystemAutoFire;                                    // 0x00F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarWeaponFireInputResolver* WeaponSystemFireInputResolver;                           // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWeaponSystemAssistAim* WeaponSystemAssistAim;                                   // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FWeaponSystemInteract                               WeaponSysIneract;                                        // 0x0110(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FDN6[0x10];                                  // 0x0160(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor* MyPossessPawn;                                           // 0x0170(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAssistAim;                                              // 0x0178(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAutoFire;                                               // 0x0179(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_53IO[0x6];                                   // 0x017A(0x0006) MISSED OFFSET (PADDING)

	public:
		void WeaponAssistSystemTick(float InDeltaTime);
		void SwitchSingleWeaponPressMode();
		void SwitchScopeButtonRotatableMode();
		void SwitchDoScopeMode();
		void SwitchAutoScopeEnable();
		void SwitchAutoFireEnable();
		void SwitchAutoFire(bool Open);
		void SwitchAssistAim(bool opened);
		void SetCurrentActiveWeapon(class ASolarWeapon* Weapon);
		void SetCrosshairVisible(bool InVisible);
		void SetAutoScope(bool bOpen);
		void ServerPlayNoAmmoSound();
		void ReceiveMsgFromPlayer(bool bClient, const struct FPlayerWeaponMsg& Msg);
		void OnTouchScreen();
		void OnToggleAutoFire();
		void OnToggleAssistAim();
		void OnOtherPlayerSpectateMyOwner();
		void NetMulticastPlayNoAmmoSound();
		bool IsUsingSpecialQuickAdsButton();
		class USolarWeaponFireInputResolver* GetFireInputResolver();
		void GetFireButtonInputState(ESolarWeaponFireInputButtonState* OutLeftFireButton, ESolarWeaponFireInputButtonState* OutRightFireButton, ESolarWeaponFireInputButtonState* OutQuickAdsButton);
		struct FWeaponSysStateStruct GetCurrentState();
		bool CheckAutoFire(bool* canfire);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSystemPlayerBase
	 * Size -> 0x00A0 (FullSize[0x0220] - InheritedSize[0x0180])
	 */
	class UWeaponSystemPlayerBase : public UWeaponSystemBase
	{
	public:
		unsigned char                                              UnknownData_3IN1[0x38];                                  // 0x0180(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasPrimarySlotWeapon;                                   // 0x01B8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bHasSecondarySlotWeapon;                                 // 0x01B9(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bHasTertiarySlotWeapon;                                  // 0x01BA(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7I76[0x1];                                   // 0x01BB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASolarUnArmWeapon>                    Punch;                                                   // 0x01BC(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class ASolarPlayerWeapon>                   PrimarySlotWeapon;                                       // 0x01C4(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class ASolarPlayerWeapon>                   SecondarySlotWeapon;                                     // 0x01CC(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class ASolarPlayerWeapon>                   TertiarySlotWeapon;                                      // 0x01D4(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class ASolarPlayerWeapon>                   HeldWeapon;                                              // 0x01DC(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0FLY[0x3C];                                  // 0x01E4(0x003C) MISSED OFFSET (PADDING)

	public:
		void TriggerBoltAnim();
		void SpawnMeleeWeapon();
		void ResetCurrentWeaponFireState();
		void PostBolt();
		void OpenScopeForSpectator();
		void OnRep_TertiarySlotWeapon();
		void OnRep_SecondarySlotWeapon();
		void OnRep_Punch();
		void OnRep_PrimarySlotWeapon();
		void OnRep_HeldWeapon();
		class ASolarPlayerWeapon* GetWeaponBySlot(int32_t InSlotType);
		class ASolarUnArmWeapon* GetUnArmWeapon();
		class ASolarPlayerWeapon* GetPackSecondaryWeapon();
		class ASolarPlayerWeapon* GetPackPrimaryWeapon();
		int32_t GetLastActiveWeaponSlot();
		bool GetIsUnArm();
		float GetCurrentWeaponReloadTime(int32_t Mode);
		bool GetCurrentWeaponIsOverloading();
		class UTexture2D* GetCurrentWeaponIcon();
		float GetCurrentWeaponBoltTime(int32_t Mode);
		class ASolarPlayerWeapon* GetCurrentWeapon();
		float GetCurrentSwitchWeaponTime();
		int32_t GetCurrentActiveSlot();
		class UStaticMesh* GetClipMeshOfCurrentWeapon();
		void GameStatisticsWeaponSkill(int32_t InFireMode);
		void CrosshairQuitReload();
		void CrosshairEnterReload();
		void CloseScopeForSpectator();
		void CleanWeaponSlotsUI();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSystemPlayer
	 * Size -> 0x0098 (FullSize[0x02B8] - InheritedSize[0x0220])
	 */
	class UWeaponSystemPlayer : public UWeaponSystemPlayerBase
	{
	public:
		unsigned char                                              UnknownData_UIT8[0x49];                                  // 0x0220(0x0049) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bInitializeWeaponSystem;                                 // 0x0269(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HIYV[0x12];                                  // 0x026A(0x0012) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReloadBlockTimeMax;                                      // 0x027C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ReceviedReloadMessage;                                   // 0x0280(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HH4O[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AStaticMeshActor* DroppedClip;                                             // 0x0298(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AStaticMeshActor* ExtractedClip;                                           // 0x02A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHoldFire;                                               // 0x02A8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8H9E[0xF];                                   // 0x02A9(0x000F) MISSED OFFSET (PADDING)

	public:
		void TakeOffEquipAttributes(class ASolarPlayerWeapon* Weapon);
		void SwitchFireMode();
		void ServerSwitch(int8_t InTargetSlot);
		void ServerSwap(int8_t InSourceSlot, int8_t InTargetSlot);
		bool ServerPackDropWeapon(int32_t Slot);
		void ServerGameStaticsWeaponSkill(int8_t InFireMode);
		void RecieveSafeAreaUpdateMsg(int32_t Num);
		void RecieveExpPackMsg(int32_t ItemID, int32_t Num);
		void RecieveExpMsg(bool bClient, int32_t Type, int32_t Num, int32_t Slot);
		void RecieveAssistMsg(ESolarCharacterType HitedCharacterType);
		void PutEquipAttributes(class ASolarPlayerWeapon* Weapon);
		void PostAddWeaponEXPMessageWhenKill(int32_t InWeaponSlot, ESolarHitType InHitType, float InDamage, bool InbKillPlayer);
		void OnWeaponUpgrade(int32_t InCurrentLevel, uint32_t InUniqueID);
		void OnWeaponUpdateSkillPoint(uint32_t InWeaponUniqueID, bool InbCoolDownFinish, int32_t InCurrentExtraPoint);
		void OnWeaponUpdatePart(int32_t InNewPartId, int32_t InOldPartID, uint32_t InWeaponUniqueID);
		void OnWeaponUpdateExp(float InTotalExp, float InCurrentExp, uint32_t InUniqueID);
		void OnWeaponUpdateClipCapacity(int32_t InFireMode, class ASolarWeapon* InWeapon);
		void OnWeaponSwitchOverload(bool InbSwitchOn, uint32_t InUniqueID);
		void OnWeaponQuitReload(int32_t InFireMode, bool InbReloadSuccess, uint32_t InUniqueID);
		void OnWeaponEnterReload(int32_t InFireMode, uint32_t InUniqueID);
		void OnWeaponEnterFireCD(int32_t InFireMode, uint32_t InUniqueID);
		void OnWeaponControlled(class ASolarWeapon* InWeapon);
		void OnPlayerEnergyUpdate();
		void OnEnterBattleAction(EEnterBattleType battleType);
		bool IsWeaponAmmoUseEnergy(int32_t Slot, int32_t FireMode);
		bool IsReloadBlock();
		bool IsCurrentWeapon(uint32_t InUniqueID);
		class ASolarPlayerWeapon* GetWeaponByItemID(int32_t ItemInstanceId);
		class ASolarPlayerWeapon* GetWeaponByID(int32_t ID);
		int32_t GetSlotByItemID(int64_t InItemThisID);
		float GetRetrofitCost(int32_t Slot);
		void ClientRecieveExpMsg(int32_t Type, int32_t Num, int32_t Slot);
		void ClearWeapons();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSystemPlayerAI
	 * Size -> 0x0000 (FullSize[0x0220] - InheritedSize[0x0220])
	 */
	class UWeaponSystemPlayerAI : public UWeaponSystemPlayerBase
	{
	public:
		bool IsCurrentWeapon(int32_t ID);
		void ClearWeapons();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponSystemVehicleComponent
	 * Size -> 0x0118 (FullSize[0x0298] - InheritedSize[0x0180])
	 */
	class UWeaponSystemVehicleComponent : public UWeaponSystemBase
	{
	public:
		struct FWeaponSystemInteract                               WeaponSystemInteract;                                    // 0x0180(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W3ZL[0x18];                                  // 0x01D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarVehicleWeapon* CurrentWeapon;                                           // 0x01E8(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASolarCharacter* MyPawn;                                                  // 0x01F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XIUB[0x28];                                  // 0x01F8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAction                                       WeaponEquipAction;                                       // 0x0220(0x0008) Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		struct FWeaponAction                                       WeaponUnequipAction;                                     // 0x0228(0x0008) Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		TMap<class FName, EVehicleWeaponScopeType>                 SavedWeaponScopeMap;                                     // 0x0230(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MQNT[0x1];                                   // 0x0280(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bQuickAdsHolding;                                        // 0x0281(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y21N[0xE];                                   // 0x0282(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      QuickAdsPressedTime;                                     // 0x0290(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IXAE[0x4];                                   // 0x0294(0x0004) MISSED OFFSET (PADDING)

	public:
		void ServerStatVehicleWeaponFire(int32_t InFireMode);
		void ServerReload(unsigned char ModeIndex, int32_t Need);
		void ServerChangeWeaponScopeType(EVehicleWeaponScopeType InScopeType);
		void OnRep_WeaponUnequipAction();
		void OnRep_WeaponEquipAction();
		void OnRep_CurrentWeapon(class ASolarVehicleWeapon* PreviousWeapon);
		void OnQuickAdsFire();
		class ASolarVehicleWeapon* GetCurrentVehicleWeapon();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WeaponUIStyleSheet
	 * Size -> 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
	 */
	class UWeaponUIStyleSheet : public UDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WidgetInputManager
	 * Size -> 0x0108 (FullSize[0x0130] - InheritedSize[0x0028])
	 */
	class UWidgetInputManager : public UObject
	{
	public:
		class FScriptDelegate                                      OnTouchStartDetected;                                    // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnTouchUpdate;                                           // 0x0038(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnTouchEndDetected;                                      // 0x0048(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnPointerStartDetected;                                  // 0x0058(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnPointerUpdate;                                         // 0x0068(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnPointerEndDetected;                                    // 0x0078(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S8V3[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FVector2D>                            TouchedList;                                             // 0x0090(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate
		TMap<int32_t, struct FVector2D>                            PointerList;                                             // 0x00E0(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate

	public:
		class UWidget* K2_GetManagedWidget();
		bool STATIC_GetWidgetTouchedList(class USolarUserWidget* InWidget, TMap<int32_t, struct FVector2D>* OutList);
		bool STATIC_GetWidgetPointerList(class USolarUserWidget* InWidget, TMap<int32_t, struct FVector2D>* OutList);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WorldMark_ReviveTeammates
	 * Size -> 0x00E0 (FullSize[0x0480] - InheritedSize[0x03A0])
	 */
	class UWorldMark_ReviveTeammates : public UActorMarkBase
	{
	public:
		class UCanvasPanel* CanvasPanel_1;                                           // 0x03A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel* Panel;                                                   // 0x03A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UScaleBox* ScaleBox_1;                                              // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Light_2;                                             // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_HeadBg_Shadow;                                       // 0x03C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* img_PlayerHead;                                          // 0x03C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* ProgressCD;                                              // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarTextBlock* Txt_Recover;                                             // 0x03D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock* Distance;                                                // 0x03E0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage* Img_Arrow;                                               // 0x03E8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation* Occupy_Anim;                                             // 0x03F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic* CDMaterial;                                              // 0x03F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USolarResurrectionComponent* ResurrectionComp;                                        // 0x0400(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ProgressParamName;                                       // 0x0408(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ProgressParamDefaultValue;                               // 0x0410(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              TimeParamName;                                           // 0x0420(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DistanceLocalTextID;                                     // 0x0430(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RecoverLocalTextID;                                      // 0x0434(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TimeFormatLocalTextID;                                   // 0x0438(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z1Q0[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              NotifySoundName;                                         // 0x0440(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_04DW[0x30];                                  // 0x0450(0x0030) MISSED OFFSET (PADDING)

	public:
		void SetPlayerIDAndChangeColor(const class FString& PlayerId);
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WorldMarkButton
	 * Size -> 0x0040 (FullSize[0x0388] - InheritedSize[0x0348])
	 */
	class UWorldMarkButton : public USolarUserWidget
	{
	public:
		class UImage* Select_Arrow;                                            // 0x0348(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton* WorldMarkBtn;                                            // 0x0350(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher* Switcher;                                                // 0x0358(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1OXT[0x1];                                   // 0x0360(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bButtonClicked;                                          // 0x0361(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N5AS[0x2];                                   // 0x0362(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UnHoveredDis;                                            // 0x0364(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIfTouchMoveout;                                         // 0x0368(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIfQuickChatWheelOpened;                                 // 0x0369(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O0H1[0x6];                                   // 0x036A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarHUDInGame* SolarHUDInGame;                                          // 0x0370(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIfChooseAnyMark;                                        // 0x0378(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIfPressed;                                              // 0x0379(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1DMR[0x2];                                   // 0x037A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LongPressDeltaTime;                                      // 0x037C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HJOW[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetMarkButtonState(EMarkButtonState NewState);
		void ResetButton();
		struct FEventReply ReleaseMouseCapture();
		void RefreshButtonState(bool IsAlreadyBeResponsed);
		void OnMarkButtonDragSelectEnded();
		void OnCustomGameStateChanged(ESCMInGameState NewGameState);
		void OnCharacterDead(class ASolarCharacter* InCharacter);
		void LongPressCheckBegin();
		void ClearLongPressCheckTimer();
		struct FEventReply CaptureMouse();
		static UClass* StaticClass();
	};

	/**
	 * Class Solarland.WorldMarkComponent
	 * Size -> 0x0148 (FullSize[0x01F8] - InheritedSize[0x00B0])
	 */
	class UWorldMarkComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_BA3K[0x18];                                  // 0x00B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASolarCharacter* Owner;                                                   // 0x00C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   WorldMarkPoolOriginSize;                                 // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinCheckDistance;                                        // 0x00D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxCheckDistance;                                        // 0x00D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoMarkIsCoolingDown;                                   // 0x00DC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XYHA[0x5B];                                  // 0x00DD(0x005B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AttachedToCharacterNumLimit;                             // 0x0138(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AKJH[0x54];                                  // 0x013C(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class UHUD_WorldMark>>               ChosenMarksTable;                                        // 0x0190(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UHUD_WorldMark>                       CurrentChosenMark;                                       // 0x01A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K824[0x40];                                  // 0x01A8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UHUD_WorldMark*>                              WorldMarkPool;                                           // 0x01E8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void VehicleNotify(int32_t VehicleID, int32_t NameLocID, class ASolarPlayerController* Controller);
		bool VagueMarkCharacter();
		void UpdateAttachedMarks();
		void UnMarkItemByIDLuaCall(int64_t instanceID);
		void ResponseChosenMark();
		void RemoveItemMarkWhenPlayerPicked(int64_t InItemInstanceId);
		void RemoveAttachedMarkByActors(TArray<class AActor*>* InActors);
		void ReleaseWorldMarkPool();
		void RefreshChosenMark();
		void RecycleWorldMark(class UHUD_WorldMark* WorldMark);
		void PushBackQueueGroupMapWidget(EWorldMarkType Type, int32_t PosInTeam, class UHUD_WorldMark* Widget);
		class UHUD_WorldMark* PopQueueGroupMapWidget(EWorldMarkType Type, int32_t PosInTeam);
		void OnVehicleEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
		void OnMarkBeChosen(class UHUD_WorldMark* MarkWidget, bool IfWasChosen);
		void NotifyThatToFarToMark();
		void MarkWarningOnWorld();
		void MarkQuickChatOnWorld(const class FString& IconImg);
		void MarkPointOnWorld();
		void MarkOnWorldByMinimapPosition(int32_t PosInTeam, const struct FVector2D& MinimapPos);
		void MarkItemInPickupList(const struct FVector& ItemLocation, const struct FSolarItemData& ItemData);
		void MarkActorByAttachToThem(class AActor* InActor);
		void InteractTypeNotify(EInteractableType Type, class ASolarPlayerController* Controller);
		void InitWorldMarkPool();
		void Init(class ASolarCharacter* Character);
		class UHUD_WorldMarkPanel* GetWorldMarkPanel();
		int32_t GetQuickVoiceLocalizationID(int32_t VoiceID);
		class FString GetQuickVoiceEventName(int32_t VoiceID);
		int32_t GetQueueGroupMapSize(EWorldMarkType Type, int32_t PosInTeam);
		class FString GetInvalidTypeDefaultIconPath();
		class FString GetInteractiveObjectsFullPath(EInteractableType Type);
		class UHUD_WorldMark* GetFreeWorldMark();
		void CreateWorldMarkInternal(int32_t PosInTeam, const struct FWorldMarkData& InWorldMarkedData, class UObject* IconAsset);
		void CreateWorldMark(int32_t PosInTeam, const struct FWorldMarkData& InWorldMarkedData);
		void CreateWarningWidget(const struct FWorldMarkData& Data, bool NeedSendMessage);
		void CreateItemMarkWidget(const struct FWorldMarkData& Data);
		void CreateInvalidWidget(const struct FWorldMarkData& Data, bool bShouldNotify);
		bool CheckMarkPointIsOutOfMap(const struct FVector& Location);
		bool CheckIfWorldPosValid(const struct FWorldMarkData& Data, int32_t PosInTeam);
		bool CheckIfThisItemBeenMarkedInternal(int32_t instanceID, int32_t PosInTeam);
		bool CheckAutoMarkDamagingCharacter();
		void AutoMarkDamagingCharacter();
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
#pragma pack(pop)
#endif
